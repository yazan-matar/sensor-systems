
ADC_LDR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08007cf8  08007cf8  00017cf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800814c  0800814c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800814c  0800814c  0001814c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008154  08008154  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008154  08008154  00018154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008158  08008158  00018158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800815c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000944  200001e0  0800833c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b24  0800833c  00020b24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cf7  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023df  00000000  00000000  00031f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  000342e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00035158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018aaa  00000000  00000000  00035ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001086a  00000000  00000000  0004e99a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b4a8  00000000  00000000  0005f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa6ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005018  00000000  00000000  000fa700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007cdc 	.word	0x08007cdc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08007cdc 	.word	0x08007cdc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	if (htim == &htim1){
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d102      	bne.n	8000f66 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_ADC_Start_IT(&hadc1);
 8000f60:	4804      	ldr	r0, [pc, #16]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f62:	f000 fdeb 	bl	8001b3c <HAL_ADC_Start_IT>
	}

}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000a84 	.word	0x20000a84
 8000f74:	200009dc 	.word	0x200009dc

08000f78 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000f78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f7c:	b0aa      	sub	sp, #168	; 0xa8
 8000f7e:	af06      	add	r7, sp, #24
 8000f80:	6078      	str	r0, [r7, #4]
	char buffer[100];
	int samples_length = sizeof(LDR_values)/sizeof(LDR_values[0]);
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (sample <= samples_length) {
 8000f8a:	4b65      	ldr	r3, [pc, #404]	; (8001120 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000f92:	429a      	cmp	r2, r3
 8000f94:	db0c      	blt.n	8000fb0 <HAL_ADC_ConvCpltCallback+0x38>
		LDR_values[sample++] = HAL_ADC_GetValue(&hadc1);
 8000f96:	4863      	ldr	r0, [pc, #396]	; (8001124 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8000f98:	f000 ffcf 	bl	8001f3a <HAL_ADC_GetValue>
 8000f9c:	4b60      	ldr	r3, [pc, #384]	; (8001120 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	1c5a      	adds	r2, r3, #1
 8000fa2:	495f      	ldr	r1, [pc, #380]	; (8001120 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8000fa4:	600a      	str	r2, [r1, #0]
 8000fa6:	b281      	uxth	r1, r0
 8000fa8:	4a5f      	ldr	r2, [pc, #380]	; (8001128 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8000faa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		int buffer_length = snprintf(buffer, sizeof(buffer), "Avg. LDR: %.3f\r\nAvg. LUX: %.3f\r\nCalc. LDR: %.3f\r\n\r\n", avg_LDR, avg_LUX, calculated_LDR);
		HAL_UART_Transmit(&huart2, (uint8_t *)buffer, buffer_length, 100);
		sample = 0;
	}
}
 8000fae:	e0a9      	b.n	8001104 <HAL_ADC_ConvCpltCallback+0x18c>
		int LDR_sum = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		float avg_LDR = 0;
 8000fb6:	f04f 0300 	mov.w	r3, #0
 8000fba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		float avg_LUX = 0;
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	67fb      	str	r3, [r7, #124]	; 0x7c
		float v_ADC = 0;
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	67bb      	str	r3, [r7, #120]	; 0x78
		float calculated_LDR = 0;
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	677b      	str	r3, [r7, #116]	; 0x74
		for (int i = 0; i < samples_length; ++i) {
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000fd6:	e00f      	b.n	8000ff8 <HAL_ADC_ConvCpltCallback+0x80>
			LDR_sum += LDR_values[i];
 8000fd8:	4a53      	ldr	r2, [pc, #332]	; (8001128 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8000fda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000fe8:	4413      	add	r3, r2
 8000fea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		for (int i = 0; i < samples_length; ++i) {
 8000fee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000ff8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000ffc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001000:	429a      	cmp	r2, r3
 8001002:	dbe9      	blt.n	8000fd8 <HAL_ADC_ConvCpltCallback+0x60>
		avg_LDR = LDR_sum/samples_length;
 8001004:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001008:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800100c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001010:	ee07 3a90 	vmov	s15, r3
 8001014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001018:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		v_ADC = 3.3 * (avg_LDR)/(avg_LDR + 100000.0);
 800101c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001020:	f7ff fa9a 	bl	8000558 <__aeabi_f2d>
 8001024:	a33a      	add	r3, pc, #232	; (adr r3, 8001110 <HAL_ADC_ConvCpltCallback+0x198>)
 8001026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102a:	f7ff faed 	bl	8000608 <__aeabi_dmul>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4614      	mov	r4, r2
 8001034:	461d      	mov	r5, r3
 8001036:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800103a:	f7ff fa8d 	bl	8000558 <__aeabi_f2d>
 800103e:	a336      	add	r3, pc, #216	; (adr r3, 8001118 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001044:	f7ff f92a 	bl	800029c <__adddf3>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4620      	mov	r0, r4
 800104e:	4629      	mov	r1, r5
 8001050:	f7ff fc04 	bl	800085c <__aeabi_ddiv>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff fdac 	bl	8000bb8 <__aeabi_d2f>
 8001060:	4603      	mov	r3, r0
 8001062:	67bb      	str	r3, [r7, #120]	; 0x78
		avg_LUX = 10* powf((100000.0/avg_LDR), 1.25);
 8001064:	eddf 6a31 	vldr	s13, [pc, #196]	; 800112c <HAL_ADC_ConvCpltCallback+0x1b4>
 8001068:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800106c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001070:	eef7 0a04 	vmov.f32	s1, #116	; 0x3fa00000  1.250
 8001074:	eeb0 0a47 	vmov.f32	s0, s14
 8001078:	f006 f9ec 	bl	8007454 <powf>
 800107c:	eef0 7a40 	vmov.f32	s15, s0
 8001080:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001088:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		calculated_LDR = 100000.0/powf(avg_LUX/10.0, 0.8);
 800108c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001090:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001094:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001098:	eddf 0a25 	vldr	s1, [pc, #148]	; 8001130 <HAL_ADC_ConvCpltCallback+0x1b8>
 800109c:	eeb0 0a47 	vmov.f32	s0, s14
 80010a0:	f006 f9d8 	bl	8007454 <powf>
 80010a4:	eeb0 7a40 	vmov.f32	s14, s0
 80010a8:	eddf 6a20 	vldr	s13, [pc, #128]	; 800112c <HAL_ADC_ConvCpltCallback+0x1b4>
 80010ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010b0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		int buffer_length = snprintf(buffer, sizeof(buffer), "Avg. LDR: %.3f\r\nAvg. LUX: %.3f\r\nCalc. LDR: %.3f\r\n\r\n", avg_LDR, avg_LUX, calculated_LDR);
 80010b4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80010b8:	f7ff fa4e 	bl	8000558 <__aeabi_f2d>
 80010bc:	4604      	mov	r4, r0
 80010be:	460d      	mov	r5, r1
 80010c0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80010c2:	f7ff fa49 	bl	8000558 <__aeabi_f2d>
 80010c6:	4680      	mov	r8, r0
 80010c8:	4689      	mov	r9, r1
 80010ca:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80010cc:	f7ff fa44 	bl	8000558 <__aeabi_f2d>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	f107 000c 	add.w	r0, r7, #12
 80010d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80010dc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80010e0:	e9cd 4500 	strd	r4, r5, [sp]
 80010e4:	4a13      	ldr	r2, [pc, #76]	; (8001134 <HAL_ADC_ConvCpltCallback+0x1bc>)
 80010e6:	2164      	movs	r1, #100	; 0x64
 80010e8:	f003 ff76 	bl	8004fd8 <sniprintf>
 80010ec:	6738      	str	r0, [r7, #112]	; 0x70
		HAL_UART_Transmit(&huart2, (uint8_t *)buffer, buffer_length, 100);
 80010ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	f107 010c 	add.w	r1, r7, #12
 80010f6:	2364      	movs	r3, #100	; 0x64
 80010f8:	480f      	ldr	r0, [pc, #60]	; (8001138 <HAL_ADC_ConvCpltCallback+0x1c0>)
 80010fa:	f003 f808 	bl	800410e <HAL_UART_Transmit>
		sample = 0;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
}
 8001104:	bf00      	nop
 8001106:	3790      	adds	r7, #144	; 0x90
 8001108:	46bd      	mov	sp, r7
 800110a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800110e:	bf00      	nop
 8001110:	66666666 	.word	0x66666666
 8001114:	400a6666 	.word	0x400a6666
 8001118:	00000000 	.word	0x00000000
 800111c:	40f86a00 	.word	0x40f86a00
 8001120:	200009cc 	.word	0x200009cc
 8001124:	200009dc 	.word	0x200009dc
 8001128:	200001fc 	.word	0x200001fc
 800112c:	47c35000 	.word	0x47c35000
 8001130:	3f4ccccd 	.word	0x3f4ccccd
 8001134:	08007cf8 	.word	0x08007cf8
 8001138:	20000acc 	.word	0x20000acc

0800113c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001140:	f000 fc46 	bl	80019d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001144:	f000 f816 	bl	8001174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001148:	f000 f96c 	bl	8001424 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800114c:	f000 f920 	bl	8001390 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8001150:	f000 f948 	bl	80013e4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001154:	f000 f87a 	bl	800124c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001158:	f000 f8ca 	bl	80012f0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <main+0x34>)
 800115e:	f002 fb93 	bl	8003888 <HAL_TIM_Base_Start_IT>
__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8001162:	4b03      	ldr	r3, [pc, #12]	; (8001170 <main+0x34>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f06f 0201 	mvn.w	r2, #1
 800116a:	611a      	str	r2, [r3, #16]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800116c:	e7fe      	b.n	800116c <main+0x30>
 800116e:	bf00      	nop
 8001170:	20000a84 	.word	0x20000a84

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b094      	sub	sp, #80	; 0x50
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0320 	add.w	r3, r7, #32
 800117e:	2230      	movs	r2, #48	; 0x30
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f003 fab6 	bl	80046f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <SystemClock_Config+0xd0>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	4a28      	ldr	r2, [pc, #160]	; (8001244 <SystemClock_Config+0xd0>)
 80011a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a6:	6413      	str	r3, [r2, #64]	; 0x40
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <SystemClock_Config+0xd0>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	4b23      	ldr	r3, [pc, #140]	; (8001248 <SystemClock_Config+0xd4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011c0:	4a21      	ldr	r2, [pc, #132]	; (8001248 <SystemClock_Config+0xd4>)
 80011c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <SystemClock_Config+0xd4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d4:	2302      	movs	r3, #2
 80011d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d8:	2301      	movs	r3, #1
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011dc:	2310      	movs	r3, #16
 80011de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e0:	2302      	movs	r3, #2
 80011e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e4:	2300      	movs	r3, #0
 80011e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011e8:	2310      	movs	r3, #16
 80011ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011f2:	2304      	movs	r3, #4
 80011f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011f6:	2307      	movs	r3, #7
 80011f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fa:	f107 0320 	add.w	r3, r7, #32
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fe7e 	bl	8002f00 <HAL_RCC_OscConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800120a:	f000 f979 	bl	8001500 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120e:	230f      	movs	r3, #15
 8001210:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001212:	2302      	movs	r3, #2
 8001214:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800121a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2102      	movs	r1, #2
 800122a:	4618      	mov	r0, r3
 800122c:	f002 f8e0 	bl	80033f0 <HAL_RCC_ClockConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001236:	f000 f963 	bl	8001500 <Error_Handler>
  }
}
 800123a:	bf00      	nop
 800123c:	3750      	adds	r7, #80	; 0x50
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40007000 	.word	0x40007000

0800124c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001252:	463b      	mov	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <MX_ADC1_Init+0x98>)
 8001260:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <MX_ADC1_Init+0x9c>)
 8001262:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <MX_ADC1_Init+0x98>)
 8001266:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800126a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <MX_ADC1_Init+0x98>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <MX_ADC1_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_ADC1_Init+0x98>)
 800127a:	2200      	movs	r2, #0
 800127c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_ADC1_Init+0x98>)
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_ADC1_Init+0x98>)
 8001288:	2200      	movs	r2, #0
 800128a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_ADC1_Init+0x98>)
 800128e:	4a17      	ldr	r2, [pc, #92]	; (80012ec <MX_ADC1_Init+0xa0>)
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_ADC1_Init+0x98>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_ADC1_Init+0x98>)
 800129a:	2201      	movs	r2, #1
 800129c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_ADC1_Init+0x98>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_ADC1_Init+0x98>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ac:	480d      	ldr	r0, [pc, #52]	; (80012e4 <MX_ADC1_Init+0x98>)
 80012ae:	f000 fc01 	bl	8001ab4 <HAL_ADC_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012b8:	f000 f922 	bl	8001500 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012bc:	2300      	movs	r3, #0
 80012be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_ADC1_Init+0x98>)
 80012ce:	f000 fe55 	bl	8001f7c <HAL_ADC_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012d8:	f000 f912 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200009dc 	.word	0x200009dc
 80012e8:	40012000 	.word	0x40012000
 80012ec:	0f000001 	.word	0x0f000001

080012f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001304:	463b      	mov	r3, r7
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800130c:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <MX_TIM1_Init+0x98>)
 800130e:	4a1f      	ldr	r2, [pc, #124]	; (800138c <MX_TIM1_Init+0x9c>)
 8001310:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 840 - 1;
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <MX_TIM1_Init+0x98>)
 8001314:	f240 3247 	movw	r2, #839	; 0x347
 8001318:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131a:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <MX_TIM1_Init+0x98>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100 - 1;
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <MX_TIM1_Init+0x98>)
 8001322:	2263      	movs	r2, #99	; 0x63
 8001324:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <MX_TIM1_Init+0x98>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_TIM1_Init+0x98>)
 800132e:	2200      	movs	r2, #0
 8001330:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <MX_TIM1_Init+0x98>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001338:	4813      	ldr	r0, [pc, #76]	; (8001388 <MX_TIM1_Init+0x98>)
 800133a:	f002 fa55 	bl	80037e8 <HAL_TIM_Base_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001344:	f000 f8dc 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	4619      	mov	r1, r3
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <MX_TIM1_Init+0x98>)
 8001356:	f002 fc01 	bl	8003b5c <HAL_TIM_ConfigClockSource>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001360:	f000 f8ce 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001364:	2320      	movs	r3, #32
 8001366:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_TIM1_Init+0x98>)
 8001372:	f002 fdfd 	bl	8003f70 <HAL_TIMEx_MasterConfigSynchronization>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800137c:	f000 f8c0 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000a84 	.word	0x20000a84
 800138c:	40010000 	.word	0x40010000

08001390 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <MX_USART2_UART_Init+0x50>)
 8001398:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 800139c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 80013c8:	f002 fe54 	bl	8004074 <HAL_UART_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013d2:	f000 f895 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000acc 	.word	0x20000acc
 80013e0:	40004400 	.word	0x40004400

080013e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_DMA_Init+0x3c>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <MX_DMA_Init+0x3c>)
 80013f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_DMA_Init+0x3c>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	2100      	movs	r1, #0
 800140a:	2038      	movs	r0, #56	; 0x38
 800140c:	f001 f8b9 	bl	8002582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001410:	2038      	movs	r0, #56	; 0x38
 8001412:	f001 f8d2 	bl	80025ba <HAL_NVIC_EnableIRQ>

}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800

08001424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b2d      	ldr	r3, [pc, #180]	; (80014f4 <MX_GPIO_Init+0xd0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a2c      	ldr	r2, [pc, #176]	; (80014f4 <MX_GPIO_Init+0xd0>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <MX_GPIO_Init+0xd0>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <MX_GPIO_Init+0xd0>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a25      	ldr	r2, [pc, #148]	; (80014f4 <MX_GPIO_Init+0xd0>)
 8001460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <MX_GPIO_Init+0xd0>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <MX_GPIO_Init+0xd0>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a1e      	ldr	r2, [pc, #120]	; (80014f4 <MX_GPIO_Init+0xd0>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <MX_GPIO_Init+0xd0>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_GPIO_Init+0xd0>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <MX_GPIO_Init+0xd0>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_GPIO_Init+0xd0>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2120      	movs	r1, #32
 80014ae:	4812      	ldr	r0, [pc, #72]	; (80014f8 <MX_GPIO_Init+0xd4>)
 80014b0:	f001 fd0c 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	480c      	ldr	r0, [pc, #48]	; (80014fc <MX_GPIO_Init+0xd8>)
 80014cc:	f001 fb7a 	bl	8002bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014d0:	2320      	movs	r3, #32
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4619      	mov	r1, r3
 80014e6:	4804      	ldr	r0, [pc, #16]	; (80014f8 <MX_GPIO_Init+0xd4>)
 80014e8:	f001 fb6c 	bl	8002bc4 <HAL_GPIO_Init>

}
 80014ec:	bf00      	nop
 80014ee:	3728      	adds	r7, #40	; 0x28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020000 	.word	0x40020000
 80014fc:	40020800 	.word	0x40020800

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001508:	e7fe      	b.n	8001508 <Error_Handler+0x8>
	...

0800150c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <HAL_MspInit+0x4c>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	4a0f      	ldr	r2, [pc, #60]	; (8001558 <HAL_MspInit+0x4c>)
 800151c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001520:	6453      	str	r3, [r2, #68]	; 0x44
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <HAL_MspInit+0x4c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_MspInit+0x4c>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a08      	ldr	r2, [pc, #32]	; (8001558 <HAL_MspInit+0x4c>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_MspInit+0x4c>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800154a:	2007      	movs	r0, #7
 800154c:	f001 f80e 	bl	800256c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40023800 	.word	0x40023800

0800155c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a33      	ldr	r2, [pc, #204]	; (8001648 <HAL_ADC_MspInit+0xec>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d15f      	bne.n	800163e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b32      	ldr	r3, [pc, #200]	; (800164c <HAL_ADC_MspInit+0xf0>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a31      	ldr	r2, [pc, #196]	; (800164c <HAL_ADC_MspInit+0xf0>)
 8001588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b2f      	ldr	r3, [pc, #188]	; (800164c <HAL_ADC_MspInit+0xf0>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b2b      	ldr	r3, [pc, #172]	; (800164c <HAL_ADC_MspInit+0xf0>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a2a      	ldr	r2, [pc, #168]	; (800164c <HAL_ADC_MspInit+0xf0>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b28      	ldr	r3, [pc, #160]	; (800164c <HAL_ADC_MspInit+0xf0>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015b6:	2301      	movs	r3, #1
 80015b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ba:	2303      	movs	r3, #3
 80015bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	4821      	ldr	r0, [pc, #132]	; (8001650 <HAL_ADC_MspInit+0xf4>)
 80015ca:	f001 fafb 	bl	8002bc4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015ce:	4b21      	ldr	r3, [pc, #132]	; (8001654 <HAL_ADC_MspInit+0xf8>)
 80015d0:	4a21      	ldr	r2, [pc, #132]	; (8001658 <HAL_ADC_MspInit+0xfc>)
 80015d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015d4:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <HAL_ADC_MspInit+0xf8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015da:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <HAL_ADC_MspInit+0xf8>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e0:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <HAL_ADC_MspInit+0xf8>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015e6:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <HAL_ADC_MspInit+0xf8>)
 80015e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_ADC_MspInit+0xf8>)
 80015f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <HAL_ADC_MspInit+0xf8>)
 80015f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <HAL_ADC_MspInit+0xf8>)
 8001600:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001604:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <HAL_ADC_MspInit+0xf8>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <HAL_ADC_MspInit+0xf8>)
 800160e:	2200      	movs	r2, #0
 8001610:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001612:	4810      	ldr	r0, [pc, #64]	; (8001654 <HAL_ADC_MspInit+0xf8>)
 8001614:	f000 ffec 	bl	80025f0 <HAL_DMA_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800161e:	f7ff ff6f 	bl	8001500 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <HAL_ADC_MspInit+0xf8>)
 8001626:	639a      	str	r2, [r3, #56]	; 0x38
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <HAL_ADC_MspInit+0xf8>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	2012      	movs	r0, #18
 8001634:	f000 ffa5 	bl	8002582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001638:	2012      	movs	r0, #18
 800163a:	f000 ffbe 	bl	80025ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800163e:	bf00      	nop
 8001640:	3728      	adds	r7, #40	; 0x28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40012000 	.word	0x40012000
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000
 8001654:	20000a24 	.word	0x20000a24
 8001658:	40026410 	.word	0x40026410

0800165c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <HAL_TIM_Base_MspInit+0x48>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d115      	bne.n	800169a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_TIM_Base_MspInit+0x4c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <HAL_TIM_Base_MspInit+0x4c>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6453      	str	r3, [r2, #68]	; 0x44
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_TIM_Base_MspInit+0x4c>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	2019      	movs	r0, #25
 8001690:	f000 ff77 	bl	8002582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001694:	2019      	movs	r0, #25
 8001696:	f000 ff90 	bl	80025ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40010000 	.word	0x40010000
 80016a8:	40023800 	.word	0x40023800

080016ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a19      	ldr	r2, [pc, #100]	; (8001730 <HAL_UART_MspInit+0x84>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d12b      	bne.n	8001726 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a17      	ldr	r2, [pc, #92]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a10      	ldr	r2, [pc, #64]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001706:	230c      	movs	r3, #12
 8001708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001716:	2307      	movs	r3, #7
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4805      	ldr	r0, [pc, #20]	; (8001738 <HAL_UART_MspInit+0x8c>)
 8001722:	f001 fa4f 	bl	8002bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	; 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40004400 	.word	0x40004400
 8001734:	40023800 	.word	0x40023800
 8001738:	40020000 	.word	0x40020000

0800173c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <NMI_Handler+0x4>

08001742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <HardFault_Handler+0x4>

08001748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800174c:	e7fe      	b.n	800174c <MemManage_Handler+0x4>

0800174e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <BusFault_Handler+0x4>

08001754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <UsageFault_Handler+0x4>

0800175a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001788:	f000 f974 	bl	8001a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <ADC_IRQHandler+0x10>)
 8001796:	f000 fa8f 	bl	8001cb8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200009dc 	.word	0x200009dc

080017a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017aa:	f002 f8cf 	bl	800394c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000a84 	.word	0x20000a84

080017b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <DMA2_Stream0_IRQHandler+0x10>)
 80017be:	f000 ffc5 	bl	800274c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000a24 	.word	0x20000a24

080017cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
	return 1;
 80017d0:	2301      	movs	r3, #1
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_kill>:

int _kill(int pid, int sig)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017e6:	f002 ff5b 	bl	80046a0 <__errno>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2216      	movs	r2, #22
 80017ee:	601a      	str	r2, [r3, #0]
	return -1;
 80017f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <_exit>:

void _exit (int status)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001804:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ffe7 	bl	80017dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800180e:	e7fe      	b.n	800180e <_exit+0x12>

08001810 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	e00a      	b.n	8001838 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001822:	f3af 8000 	nop.w
 8001826:	4601      	mov	r1, r0
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	60ba      	str	r2, [r7, #8]
 800182e:	b2ca      	uxtb	r2, r1
 8001830:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbf0      	blt.n	8001822 <_read+0x12>
	}

return len;
 8001840:	687b      	ldr	r3, [r7, #4]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	e009      	b.n	8001870 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	60ba      	str	r2, [r7, #8]
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	dbf1      	blt.n	800185c <_write+0x12>
	}
	return len;
 8001878:	687b      	ldr	r3, [r7, #4]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <_close>:

int _close(int file)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
	return -1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018aa:	605a      	str	r2, [r3, #4]
	return 0;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <_isatty>:

int _isatty(int file)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
	return 1;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
	return 0;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f4:	4a14      	ldr	r2, [pc, #80]	; (8001948 <_sbrk+0x5c>)
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <_sbrk+0x60>)
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <_sbrk+0x64>)
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <_sbrk+0x68>)
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	429a      	cmp	r2, r3
 800191a:	d207      	bcs.n	800192c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800191c:	f002 fec0 	bl	80046a0 <__errno>
 8001920:	4603      	mov	r3, r0
 8001922:	220c      	movs	r2, #12
 8001924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800192a:	e009      	b.n	8001940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <_sbrk+0x64>)
 800193c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20018000 	.word	0x20018000
 800194c:	00000400 	.word	0x00000400
 8001950:	200009d0 	.word	0x200009d0
 8001954:	20000b28 	.word	0x20000b28

08001958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <SystemInit+0x20>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001962:	4a05      	ldr	r2, [pc, #20]	; (8001978 <SystemInit+0x20>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800197c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001980:	480d      	ldr	r0, [pc, #52]	; (80019b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001982:	490e      	ldr	r1, [pc, #56]	; (80019bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001984:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001988:	e002      	b.n	8001990 <LoopCopyDataInit>

0800198a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800198c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198e:	3304      	adds	r3, #4

08001990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001994:	d3f9      	bcc.n	800198a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001998:	4c0b      	ldr	r4, [pc, #44]	; (80019c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800199c:	e001      	b.n	80019a2 <LoopFillZerobss>

0800199e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a0:	3204      	adds	r2, #4

080019a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a4:	d3fb      	bcc.n	800199e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019a6:	f7ff ffd7 	bl	8001958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019aa:	f002 fe7f 	bl	80046ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ae:	f7ff fbc5 	bl	800113c <main>
  bx  lr    
 80019b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019bc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80019c0:	0800815c 	.word	0x0800815c
  ldr r2, =_sbss
 80019c4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80019c8:	20000b24 	.word	0x20000b24

080019cc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <DMA1_Stream0_IRQHandler>
	...

080019d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <HAL_Init+0x40>)
 80019da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_Init+0x40>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <HAL_Init+0x40>)
 80019e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_Init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <HAL_Init+0x40>)
 80019f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f8:	2003      	movs	r0, #3
 80019fa:	f000 fdb7 	bl	800256c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fe:	2000      	movs	r0, #0
 8001a00:	f000 f808 	bl	8001a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a04:	f7ff fd82 	bl	800150c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023c00 	.word	0x40023c00

08001a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_InitTick+0x54>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_InitTick+0x58>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4619      	mov	r1, r3
 8001a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 fdcf 	bl	80025d6 <HAL_SYSTICK_Config>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00e      	b.n	8001a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b0f      	cmp	r3, #15
 8001a46:	d80a      	bhi.n	8001a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a50:	f000 fd97 	bl	8002582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a54:	4a06      	ldr	r2, [pc, #24]	; (8001a70 <HAL_InitTick+0x5c>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e000      	b.n	8001a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	20000004 	.word	0x20000004

08001a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_IncTick+0x20>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_IncTick+0x24>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_IncTick+0x24>)
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000008 	.word	0x20000008
 8001a98:	20000b10 	.word	0x20000b10

08001a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <HAL_GetTick+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000b10 	.word	0x20000b10

08001ab4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e033      	b.n	8001b32 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff fd42 	bl	800155c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d118      	bne.n	8001b24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001afa:	f023 0302 	bic.w	r3, r3, #2
 8001afe:	f043 0202 	orr.w	r2, r3, #2
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 fb5a 	bl	80021c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f023 0303 	bic.w	r3, r3, #3
 8001b1a:	f043 0201 	orr.w	r2, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	641a      	str	r2, [r3, #64]	; 0x40
 8001b22:	e001      	b.n	8001b28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_ADC_Start_IT+0x1a>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e0a1      	b.n	8001c9a <HAL_ADC_Start_IT+0x15e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d018      	beq.n	8001b9e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ca8 <HAL_ADC_Start_IT+0x16c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a4a      	ldr	r2, [pc, #296]	; (8001cac <HAL_ADC_Start_IT+0x170>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	0c9a      	lsrs	r2, r3, #18
 8001b88:	4613      	mov	r3, r2
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4413      	add	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b90:	e002      	b.n	8001b98 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f9      	bne.n	8001b92 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d169      	bne.n	8001c80 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bb4:	f023 0301 	bic.w	r3, r3, #1
 8001bb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d007      	beq.n	8001bde <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bea:	d106      	bne.n	8001bfa <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf0:	f023 0206 	bic.w	r2, r3, #6
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	645a      	str	r2, [r3, #68]	; 0x44
 8001bf8:	e002      	b.n	8001c00 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c08:	4b29      	ldr	r3, [pc, #164]	; (8001cb0 <HAL_ADC_Start_IT+0x174>)
 8001c0a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c14:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c24:	f043 0320 	orr.w	r3, r3, #32
 8001c28:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10f      	bne.n	8001c56 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d129      	bne.n	8001c98 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	e020      	b.n	8001c98 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a16      	ldr	r2, [pc, #88]	; (8001cb4 <HAL_ADC_Start_IT+0x178>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d11b      	bne.n	8001c98 <HAL_ADC_Start_IT+0x15c>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d114      	bne.n	8001c98 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	e00b      	b.n	8001c98 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f043 0210 	orr.w	r2, r3, #16
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c90:	f043 0201 	orr.w	r2, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	431bde83 	.word	0x431bde83
 8001cb0:	40012300 	.word	0x40012300
 8001cb4:	40012000 	.word	0x40012000

08001cb8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	bf0c      	ite	eq
 8001cd6:	2301      	moveq	r3, #1
 8001cd8:	2300      	movne	r3, #0
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0320 	and.w	r3, r3, #32
 8001ce8:	2b20      	cmp	r3, #32
 8001cea:	bf0c      	ite	eq
 8001cec:	2301      	moveq	r3, #1
 8001cee:	2300      	movne	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d049      	beq.n	8001d8e <HAL_ADC_IRQHandler+0xd6>
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d046      	beq.n	8001d8e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	f003 0310 	and.w	r3, r3, #16
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d105      	bne.n	8001d18 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d12b      	bne.n	8001d7e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d127      	bne.n	8001d7e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d006      	beq.n	8001d4a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d119      	bne.n	8001d7e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0220 	bic.w	r2, r2, #32
 8001d58:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d105      	bne.n	8001d7e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f043 0201 	orr.w	r2, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff f8fa 	bl	8000f78 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0212 	mvn.w	r2, #18
 8001d8c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	bf0c      	ite	eq
 8001d9c:	2301      	moveq	r3, #1
 8001d9e:	2300      	movne	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dae:	2b80      	cmp	r3, #128	; 0x80
 8001db0:	bf0c      	ite	eq
 8001db2:	2301      	moveq	r3, #1
 8001db4:	2300      	movne	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d057      	beq.n	8001e70 <HAL_ADC_IRQHandler+0x1b8>
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d054      	beq.n	8001e70 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d105      	bne.n	8001dde <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d139      	bne.n	8001e60 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d006      	beq.n	8001e08 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d12b      	bne.n	8001e60 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d124      	bne.n	8001e60 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d11d      	bne.n	8001e60 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d119      	bne.n	8001e60 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d105      	bne.n	8001e60 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	f043 0201 	orr.w	r2, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 faa9 	bl	80023b8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f06f 020c 	mvn.w	r2, #12
 8001e6e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	bf0c      	ite	eq
 8001e7e:	2301      	moveq	r3, #1
 8001e80:	2300      	movne	r3, #0
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e90:	2b40      	cmp	r3, #64	; 0x40
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d017      	beq.n	8001ed2 <HAL_ADC_IRQHandler+0x21a>
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d014      	beq.n	8001ed2 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d10d      	bne.n	8001ed2 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f846 	bl	8001f54 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f06f 0201 	mvn.w	r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	2b20      	cmp	r3, #32
 8001ede:	bf0c      	ite	eq
 8001ee0:	2301      	moveq	r3, #1
 8001ee2:	2300      	movne	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ef2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ef6:	bf0c      	ite	eq
 8001ef8:	2301      	moveq	r3, #1
 8001efa:	2300      	movne	r3, #0
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d015      	beq.n	8001f32 <HAL_ADC_IRQHandler+0x27a>
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d012      	beq.n	8001f32 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f10:	f043 0202 	orr.w	r2, r3, #2
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0220 	mvn.w	r2, #32
 8001f20:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f820 	bl	8001f68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0220 	mvn.w	r2, #32
 8001f30:	601a      	str	r2, [r3, #0]
  }
}
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x1c>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e105      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x228>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b09      	cmp	r3, #9
 8001fa6:	d925      	bls.n	8001ff4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68d9      	ldr	r1, [r3, #12]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	3b1e      	subs	r3, #30
 8001fbe:	2207      	movs	r2, #7
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43da      	mvns	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	400a      	ands	r2, r1
 8001fcc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68d9      	ldr	r1, [r3, #12]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4403      	add	r3, r0
 8001fe6:	3b1e      	subs	r3, #30
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	e022      	b.n	800203a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6919      	ldr	r1, [r3, #16]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	2207      	movs	r2, #7
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	400a      	ands	r2, r1
 8002016:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6919      	ldr	r1, [r3, #16]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	b29b      	uxth	r3, r3
 8002028:	4618      	mov	r0, r3
 800202a:	4603      	mov	r3, r0
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4403      	add	r3, r0
 8002030:	409a      	lsls	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b06      	cmp	r3, #6
 8002040:	d824      	bhi.n	800208c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	3b05      	subs	r3, #5
 8002054:	221f      	movs	r2, #31
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43da      	mvns	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	400a      	ands	r2, r1
 8002062:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	4618      	mov	r0, r3
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	3b05      	subs	r3, #5
 800207e:	fa00 f203 	lsl.w	r2, r0, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	635a      	str	r2, [r3, #52]	; 0x34
 800208a:	e04c      	b.n	8002126 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b0c      	cmp	r3, #12
 8002092:	d824      	bhi.n	80020de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	3b23      	subs	r3, #35	; 0x23
 80020a6:	221f      	movs	r2, #31
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43da      	mvns	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	400a      	ands	r2, r1
 80020b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	4618      	mov	r0, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	3b23      	subs	r3, #35	; 0x23
 80020d0:	fa00 f203 	lsl.w	r2, r0, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	631a      	str	r2, [r3, #48]	; 0x30
 80020dc:	e023      	b.n	8002126 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	3b41      	subs	r3, #65	; 0x41
 80020f0:	221f      	movs	r2, #31
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43da      	mvns	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	400a      	ands	r2, r1
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	4618      	mov	r0, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	3b41      	subs	r3, #65	; 0x41
 800211a:	fa00 f203 	lsl.w	r2, r0, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002126:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <HAL_ADC_ConfigChannel+0x234>)
 8002128:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a21      	ldr	r2, [pc, #132]	; (80021b4 <HAL_ADC_ConfigChannel+0x238>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d109      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x1cc>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b12      	cmp	r3, #18
 800213a:	d105      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a19      	ldr	r2, [pc, #100]	; (80021b4 <HAL_ADC_ConfigChannel+0x238>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d123      	bne.n	800219a <HAL_ADC_ConfigChannel+0x21e>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b10      	cmp	r3, #16
 8002158:	d003      	beq.n	8002162 <HAL_ADC_ConfigChannel+0x1e6>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2b11      	cmp	r3, #17
 8002160:	d11b      	bne.n	800219a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b10      	cmp	r3, #16
 8002174:	d111      	bne.n	800219a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <HAL_ADC_ConfigChannel+0x23c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a10      	ldr	r2, [pc, #64]	; (80021bc <HAL_ADC_ConfigChannel+0x240>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	0c9a      	lsrs	r2, r3, #18
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800218c:	e002      	b.n	8002194 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	3b01      	subs	r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f9      	bne.n	800218e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	40012300 	.word	0x40012300
 80021b4:	40012000 	.word	0x40012000
 80021b8:	20000000 	.word	0x20000000
 80021bc:	431bde83 	.word	0x431bde83

080021c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021c8:	4b79      	ldr	r3, [pc, #484]	; (80023b0 <ADC_Init+0x1f0>)
 80021ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6859      	ldr	r1, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	021a      	lsls	r2, r3, #8
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002218:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6859      	ldr	r1, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800223a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6899      	ldr	r1, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002252:	4a58      	ldr	r2, [pc, #352]	; (80023b4 <ADC_Init+0x1f4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d022      	beq.n	800229e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002266:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6899      	ldr	r1, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002288:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6899      	ldr	r1, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	e00f      	b.n	80022be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0202 	bic.w	r2, r2, #2
 80022cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6899      	ldr	r1, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	7e1b      	ldrb	r3, [r3, #24]
 80022d8:	005a      	lsls	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d01b      	beq.n	8002324 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800230a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6859      	ldr	r1, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	3b01      	subs	r3, #1
 8002318:	035a      	lsls	r2, r3, #13
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	e007      	b.n	8002334 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002332:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002342:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	3b01      	subs	r3, #1
 8002350:	051a      	lsls	r2, r3, #20
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002368:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6899      	ldr	r1, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002376:	025a      	lsls	r2, r3, #9
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800238e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6899      	ldr	r1, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	029a      	lsls	r2, r3, #10
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	609a      	str	r2, [r3, #8]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40012300 	.word	0x40012300
 80023b4:	0f000001 	.word	0x0f000001

080023b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <__NVIC_SetPriorityGrouping+0x44>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023e8:	4013      	ands	r3, r2
 80023ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023fe:	4a04      	ldr	r2, [pc, #16]	; (8002410 <__NVIC_SetPriorityGrouping+0x44>)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	60d3      	str	r3, [r2, #12]
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002418:	4b04      	ldr	r3, [pc, #16]	; (800242c <__NVIC_GetPriorityGrouping+0x18>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	0a1b      	lsrs	r3, r3, #8
 800241e:	f003 0307 	and.w	r3, r3, #7
}
 8002422:	4618      	mov	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	2b00      	cmp	r3, #0
 8002440:	db0b      	blt.n	800245a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	f003 021f 	and.w	r2, r3, #31
 8002448:	4907      	ldr	r1, [pc, #28]	; (8002468 <__NVIC_EnableIRQ+0x38>)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	2001      	movs	r0, #1
 8002452:	fa00 f202 	lsl.w	r2, r0, r2
 8002456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000e100 	.word	0xe000e100

0800246c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	6039      	str	r1, [r7, #0]
 8002476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247c:	2b00      	cmp	r3, #0
 800247e:	db0a      	blt.n	8002496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	b2da      	uxtb	r2, r3
 8002484:	490c      	ldr	r1, [pc, #48]	; (80024b8 <__NVIC_SetPriority+0x4c>)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	0112      	lsls	r2, r2, #4
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	440b      	add	r3, r1
 8002490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002494:	e00a      	b.n	80024ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	b2da      	uxtb	r2, r3
 800249a:	4908      	ldr	r1, [pc, #32]	; (80024bc <__NVIC_SetPriority+0x50>)
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	3b04      	subs	r3, #4
 80024a4:	0112      	lsls	r2, r2, #4
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	440b      	add	r3, r1
 80024aa:	761a      	strb	r2, [r3, #24]
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000e100 	.word	0xe000e100
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b089      	sub	sp, #36	; 0x24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f1c3 0307 	rsb	r3, r3, #7
 80024da:	2b04      	cmp	r3, #4
 80024dc:	bf28      	it	cs
 80024de:	2304      	movcs	r3, #4
 80024e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3304      	adds	r3, #4
 80024e6:	2b06      	cmp	r3, #6
 80024e8:	d902      	bls.n	80024f0 <NVIC_EncodePriority+0x30>
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3b03      	subs	r3, #3
 80024ee:	e000      	b.n	80024f2 <NVIC_EncodePriority+0x32>
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43da      	mvns	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	401a      	ands	r2, r3
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002508:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	fa01 f303 	lsl.w	r3, r1, r3
 8002512:	43d9      	mvns	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002518:	4313      	orrs	r3, r2
         );
}
 800251a:	4618      	mov	r0, r3
 800251c:	3724      	adds	r7, #36	; 0x24
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
	...

08002528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3b01      	subs	r3, #1
 8002534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002538:	d301      	bcc.n	800253e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800253a:	2301      	movs	r3, #1
 800253c:	e00f      	b.n	800255e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800253e:	4a0a      	ldr	r2, [pc, #40]	; (8002568 <SysTick_Config+0x40>)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3b01      	subs	r3, #1
 8002544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002546:	210f      	movs	r1, #15
 8002548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800254c:	f7ff ff8e 	bl	800246c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <SysTick_Config+0x40>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002556:	4b04      	ldr	r3, [pc, #16]	; (8002568 <SysTick_Config+0x40>)
 8002558:	2207      	movs	r2, #7
 800255a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	e000e010 	.word	0xe000e010

0800256c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff ff29 	bl	80023cc <__NVIC_SetPriorityGrouping>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002582:	b580      	push	{r7, lr}
 8002584:	b086      	sub	sp, #24
 8002586:	af00      	add	r7, sp, #0
 8002588:	4603      	mov	r3, r0
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	607a      	str	r2, [r7, #4]
 800258e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002594:	f7ff ff3e 	bl	8002414 <__NVIC_GetPriorityGrouping>
 8002598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	6978      	ldr	r0, [r7, #20]
 80025a0:	f7ff ff8e 	bl	80024c0 <NVIC_EncodePriority>
 80025a4:	4602      	mov	r2, r0
 80025a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025aa:	4611      	mov	r1, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ff5d 	bl	800246c <__NVIC_SetPriority>
}
 80025b2:	bf00      	nop
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	4603      	mov	r3, r0
 80025c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ff31 	bl	8002430 <__NVIC_EnableIRQ>
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7ff ffa2 	bl	8002528 <SysTick_Config>
 80025e4:	4603      	mov	r3, r0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025fc:	f7ff fa4e 	bl	8001a9c <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e099      	b.n	8002740 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0201 	bic.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800262c:	e00f      	b.n	800264e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800262e:	f7ff fa35 	bl	8001a9c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b05      	cmp	r3, #5
 800263a:	d908      	bls.n	800264e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2203      	movs	r2, #3
 8002646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e078      	b.n	8002740 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1e8      	bne.n	800262e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	4b38      	ldr	r3, [pc, #224]	; (8002748 <HAL_DMA_Init+0x158>)
 8002668:	4013      	ands	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800267a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002686:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002692:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	4313      	orrs	r3, r2
 800269e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d107      	bne.n	80026b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	4313      	orrs	r3, r2
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f023 0307 	bic.w	r3, r3, #7
 80026ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d117      	bne.n	8002712 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00e      	beq.n	8002712 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f9e9 	bl	8002acc <DMA_CheckFifoParam>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2240      	movs	r2, #64	; 0x40
 8002704:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800270e:	2301      	movs	r3, #1
 8002710:	e016      	b.n	8002740 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f9a0 	bl	8002a60 <DMA_CalcBaseAndBitshift>
 8002720:	4603      	mov	r3, r0
 8002722:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002728:	223f      	movs	r2, #63	; 0x3f
 800272a:	409a      	lsls	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	f010803f 	.word	0xf010803f

0800274c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002758:	4b92      	ldr	r3, [pc, #584]	; (80029a4 <HAL_DMA_IRQHandler+0x258>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a92      	ldr	r2, [pc, #584]	; (80029a8 <HAL_DMA_IRQHandler+0x25c>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	0a9b      	lsrs	r3, r3, #10
 8002764:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002776:	2208      	movs	r2, #8
 8002778:	409a      	lsls	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d01a      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d013      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0204 	bic.w	r2, r2, #4
 800279e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a4:	2208      	movs	r2, #8
 80027a6:	409a      	lsls	r2, r3
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b0:	f043 0201 	orr.w	r2, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027bc:	2201      	movs	r2, #1
 80027be:	409a      	lsls	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d012      	beq.n	80027ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00b      	beq.n	80027ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027da:	2201      	movs	r2, #1
 80027dc:	409a      	lsls	r2, r3
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e6:	f043 0202 	orr.w	r2, r3, #2
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f2:	2204      	movs	r2, #4
 80027f4:	409a      	lsls	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d012      	beq.n	8002824 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00b      	beq.n	8002824 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002810:	2204      	movs	r2, #4
 8002812:	409a      	lsls	r2, r3
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281c:	f043 0204 	orr.w	r2, r3, #4
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002828:	2210      	movs	r2, #16
 800282a:	409a      	lsls	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d043      	beq.n	80028bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d03c      	beq.n	80028bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	2210      	movs	r2, #16
 8002848:	409a      	lsls	r2, r3
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d018      	beq.n	800288e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d108      	bne.n	800287c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d024      	beq.n	80028bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	4798      	blx	r3
 800287a:	e01f      	b.n	80028bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002880:	2b00      	cmp	r3, #0
 8002882:	d01b      	beq.n	80028bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	4798      	blx	r3
 800288c:	e016      	b.n	80028bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d107      	bne.n	80028ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0208 	bic.w	r2, r2, #8
 80028aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c0:	2220      	movs	r2, #32
 80028c2:	409a      	lsls	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 808e 	beq.w	80029ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 8086 	beq.w	80029ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e2:	2220      	movs	r2, #32
 80028e4:	409a      	lsls	r2, r3
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b05      	cmp	r3, #5
 80028f4:	d136      	bne.n	8002964 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0216 	bic.w	r2, r2, #22
 8002904:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695a      	ldr	r2, [r3, #20]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002914:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d103      	bne.n	8002926 <HAL_DMA_IRQHandler+0x1da>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002922:	2b00      	cmp	r3, #0
 8002924:	d007      	beq.n	8002936 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0208 	bic.w	r2, r2, #8
 8002934:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293a:	223f      	movs	r2, #63	; 0x3f
 800293c:	409a      	lsls	r2, r3
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002956:	2b00      	cmp	r3, #0
 8002958:	d07d      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	4798      	blx	r3
        }
        return;
 8002962:	e078      	b.n	8002a56 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d01c      	beq.n	80029ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d108      	bne.n	8002992 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002984:	2b00      	cmp	r3, #0
 8002986:	d030      	beq.n	80029ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	4798      	blx	r3
 8002990:	e02b      	b.n	80029ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002996:	2b00      	cmp	r3, #0
 8002998:	d027      	beq.n	80029ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	4798      	blx	r3
 80029a2:	e022      	b.n	80029ea <HAL_DMA_IRQHandler+0x29e>
 80029a4:	20000000 	.word	0x20000000
 80029a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10f      	bne.n	80029da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0210 	bic.w	r2, r2, #16
 80029c8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d032      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d022      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2205      	movs	r2, #5
 8002a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0201 	bic.w	r2, r2, #1
 8002a14:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d307      	bcc.n	8002a32 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1f2      	bne.n	8002a16 <HAL_DMA_IRQHandler+0x2ca>
 8002a30:	e000      	b.n	8002a34 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a32:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	4798      	blx	r3
 8002a54:	e000      	b.n	8002a58 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002a56:	bf00      	nop
    }
  }
}
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop

08002a60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	3b10      	subs	r3, #16
 8002a70:	4a14      	ldr	r2, [pc, #80]	; (8002ac4 <DMA_CalcBaseAndBitshift+0x64>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	091b      	lsrs	r3, r3, #4
 8002a78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a7a:	4a13      	ldr	r2, [pc, #76]	; (8002ac8 <DMA_CalcBaseAndBitshift+0x68>)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4413      	add	r3, r2
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d909      	bls.n	8002aa2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a96:	f023 0303 	bic.w	r3, r3, #3
 8002a9a:	1d1a      	adds	r2, r3, #4
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	659a      	str	r2, [r3, #88]	; 0x58
 8002aa0:	e007      	b.n	8002ab2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002aaa:	f023 0303 	bic.w	r3, r3, #3
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	aaaaaaab 	.word	0xaaaaaaab
 8002ac8:	08007d44 	.word	0x08007d44

08002acc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d11f      	bne.n	8002b26 <DMA_CheckFifoParam+0x5a>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d856      	bhi.n	8002b9a <DMA_CheckFifoParam+0xce>
 8002aec:	a201      	add	r2, pc, #4	; (adr r2, 8002af4 <DMA_CheckFifoParam+0x28>)
 8002aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af2:	bf00      	nop
 8002af4:	08002b05 	.word	0x08002b05
 8002af8:	08002b17 	.word	0x08002b17
 8002afc:	08002b05 	.word	0x08002b05
 8002b00:	08002b9b 	.word	0x08002b9b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d046      	beq.n	8002b9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b14:	e043      	b.n	8002b9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b1e:	d140      	bne.n	8002ba2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b24:	e03d      	b.n	8002ba2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2e:	d121      	bne.n	8002b74 <DMA_CheckFifoParam+0xa8>
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d837      	bhi.n	8002ba6 <DMA_CheckFifoParam+0xda>
 8002b36:	a201      	add	r2, pc, #4	; (adr r2, 8002b3c <DMA_CheckFifoParam+0x70>)
 8002b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3c:	08002b4d 	.word	0x08002b4d
 8002b40:	08002b53 	.word	0x08002b53
 8002b44:	08002b4d 	.word	0x08002b4d
 8002b48:	08002b65 	.word	0x08002b65
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b50:	e030      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d025      	beq.n	8002baa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b62:	e022      	b.n	8002baa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b6c:	d11f      	bne.n	8002bae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b72:	e01c      	b.n	8002bae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d903      	bls.n	8002b82 <DMA_CheckFifoParam+0xb6>
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d003      	beq.n	8002b88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b80:	e018      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
      break;
 8002b86:	e015      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00e      	beq.n	8002bb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
      break;
 8002b98:	e00b      	b.n	8002bb2 <DMA_CheckFifoParam+0xe6>
      break;
 8002b9a:	bf00      	nop
 8002b9c:	e00a      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e008      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e006      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e004      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002baa:	bf00      	nop
 8002bac:	e002      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bae:	bf00      	nop
 8002bb0:	e000      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002bb2:	bf00      	nop
    }
  } 
  
  return status; 
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop

08002bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b089      	sub	sp, #36	; 0x24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
 8002bde:	e159      	b.n	8002e94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002be0:	2201      	movs	r2, #1
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	f040 8148 	bne.w	8002e8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d005      	beq.n	8002c16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d130      	bne.n	8002c78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	2203      	movs	r2, #3
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f003 0201 	and.w	r2, r3, #1
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d017      	beq.n	8002cb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	2203      	movs	r2, #3
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d123      	bne.n	8002d08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	08da      	lsrs	r2, r3, #3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3208      	adds	r2, #8
 8002cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	220f      	movs	r2, #15
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	08da      	lsrs	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3208      	adds	r2, #8
 8002d02:	69b9      	ldr	r1, [r7, #24]
 8002d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	2203      	movs	r2, #3
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 0203 	and.w	r2, r3, #3
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80a2 	beq.w	8002e8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	4b57      	ldr	r3, [pc, #348]	; (8002eac <HAL_GPIO_Init+0x2e8>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	4a56      	ldr	r2, [pc, #344]	; (8002eac <HAL_GPIO_Init+0x2e8>)
 8002d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d58:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5a:	4b54      	ldr	r3, [pc, #336]	; (8002eac <HAL_GPIO_Init+0x2e8>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d66:	4a52      	ldr	r2, [pc, #328]	; (8002eb0 <HAL_GPIO_Init+0x2ec>)
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	089b      	lsrs	r3, r3, #2
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a49      	ldr	r2, [pc, #292]	; (8002eb4 <HAL_GPIO_Init+0x2f0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d019      	beq.n	8002dc6 <HAL_GPIO_Init+0x202>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a48      	ldr	r2, [pc, #288]	; (8002eb8 <HAL_GPIO_Init+0x2f4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d013      	beq.n	8002dc2 <HAL_GPIO_Init+0x1fe>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a47      	ldr	r2, [pc, #284]	; (8002ebc <HAL_GPIO_Init+0x2f8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00d      	beq.n	8002dbe <HAL_GPIO_Init+0x1fa>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a46      	ldr	r2, [pc, #280]	; (8002ec0 <HAL_GPIO_Init+0x2fc>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d007      	beq.n	8002dba <HAL_GPIO_Init+0x1f6>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a45      	ldr	r2, [pc, #276]	; (8002ec4 <HAL_GPIO_Init+0x300>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d101      	bne.n	8002db6 <HAL_GPIO_Init+0x1f2>
 8002db2:	2304      	movs	r3, #4
 8002db4:	e008      	b.n	8002dc8 <HAL_GPIO_Init+0x204>
 8002db6:	2307      	movs	r3, #7
 8002db8:	e006      	b.n	8002dc8 <HAL_GPIO_Init+0x204>
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e004      	b.n	8002dc8 <HAL_GPIO_Init+0x204>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e002      	b.n	8002dc8 <HAL_GPIO_Init+0x204>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <HAL_GPIO_Init+0x204>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	f002 0203 	and.w	r2, r2, #3
 8002dce:	0092      	lsls	r2, r2, #2
 8002dd0:	4093      	lsls	r3, r2
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dd8:	4935      	ldr	r1, [pc, #212]	; (8002eb0 <HAL_GPIO_Init+0x2ec>)
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	089b      	lsrs	r3, r3, #2
 8002dde:	3302      	adds	r3, #2
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002de6:	4b38      	ldr	r3, [pc, #224]	; (8002ec8 <HAL_GPIO_Init+0x304>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e0a:	4a2f      	ldr	r2, [pc, #188]	; (8002ec8 <HAL_GPIO_Init+0x304>)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e10:	4b2d      	ldr	r3, [pc, #180]	; (8002ec8 <HAL_GPIO_Init+0x304>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e34:	4a24      	ldr	r2, [pc, #144]	; (8002ec8 <HAL_GPIO_Init+0x304>)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e3a:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <HAL_GPIO_Init+0x304>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e5e:	4a1a      	ldr	r2, [pc, #104]	; (8002ec8 <HAL_GPIO_Init+0x304>)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e64:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <HAL_GPIO_Init+0x304>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e88:	4a0f      	ldr	r2, [pc, #60]	; (8002ec8 <HAL_GPIO_Init+0x304>)
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3301      	adds	r3, #1
 8002e92:	61fb      	str	r3, [r7, #28]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	2b0f      	cmp	r3, #15
 8002e98:	f67f aea2 	bls.w	8002be0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	3724      	adds	r7, #36	; 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40013800 	.word	0x40013800
 8002eb4:	40020000 	.word	0x40020000
 8002eb8:	40020400 	.word	0x40020400
 8002ebc:	40020800 	.word	0x40020800
 8002ec0:	40020c00 	.word	0x40020c00
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40013c00 	.word	0x40013c00

08002ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	807b      	strh	r3, [r7, #2]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002edc:	787b      	ldrb	r3, [r7, #1]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ee2:	887a      	ldrh	r2, [r7, #2]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ee8:	e003      	b.n	8002ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eea:	887b      	ldrh	r3, [r7, #2]
 8002eec:	041a      	lsls	r2, r3, #16
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	619a      	str	r2, [r3, #24]
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e264      	b.n	80033dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d075      	beq.n	800300a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f1e:	4ba3      	ldr	r3, [pc, #652]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d00c      	beq.n	8002f44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f2a:	4ba0      	ldr	r3, [pc, #640]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d112      	bne.n	8002f5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f36:	4b9d      	ldr	r3, [pc, #628]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f42:	d10b      	bne.n	8002f5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f44:	4b99      	ldr	r3, [pc, #612]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d05b      	beq.n	8003008 <HAL_RCC_OscConfig+0x108>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d157      	bne.n	8003008 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e23f      	b.n	80033dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f64:	d106      	bne.n	8002f74 <HAL_RCC_OscConfig+0x74>
 8002f66:	4b91      	ldr	r3, [pc, #580]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a90      	ldr	r2, [pc, #576]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	e01d      	b.n	8002fb0 <HAL_RCC_OscConfig+0xb0>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCC_OscConfig+0x98>
 8002f7e:	4b8b      	ldr	r3, [pc, #556]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a8a      	ldr	r2, [pc, #552]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	4b88      	ldr	r3, [pc, #544]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a87      	ldr	r2, [pc, #540]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e00b      	b.n	8002fb0 <HAL_RCC_OscConfig+0xb0>
 8002f98:	4b84      	ldr	r3, [pc, #528]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a83      	ldr	r2, [pc, #524]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8002f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	4b81      	ldr	r3, [pc, #516]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a80      	ldr	r2, [pc, #512]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8002faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d013      	beq.n	8002fe0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb8:	f7fe fd70 	bl	8001a9c <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc0:	f7fe fd6c 	bl	8001a9c <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b64      	cmp	r3, #100	; 0x64
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e204      	b.n	80033dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd2:	4b76      	ldr	r3, [pc, #472]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0f0      	beq.n	8002fc0 <HAL_RCC_OscConfig+0xc0>
 8002fde:	e014      	b.n	800300a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7fe fd5c 	bl	8001a9c <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fe8:	f7fe fd58 	bl	8001a9c <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	; 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e1f0      	b.n	80033dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffa:	4b6c      	ldr	r3, [pc, #432]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0xe8>
 8003006:	e000      	b.n	800300a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d063      	beq.n	80030de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003016:	4b65      	ldr	r3, [pc, #404]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 030c 	and.w	r3, r3, #12
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00b      	beq.n	800303a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003022:	4b62      	ldr	r3, [pc, #392]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800302a:	2b08      	cmp	r3, #8
 800302c:	d11c      	bne.n	8003068 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800302e:	4b5f      	ldr	r3, [pc, #380]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d116      	bne.n	8003068 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800303a:	4b5c      	ldr	r3, [pc, #368]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d005      	beq.n	8003052 <HAL_RCC_OscConfig+0x152>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d001      	beq.n	8003052 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e1c4      	b.n	80033dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003052:	4b56      	ldr	r3, [pc, #344]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4952      	ldr	r1, [pc, #328]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8003062:	4313      	orrs	r3, r2
 8003064:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003066:	e03a      	b.n	80030de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d020      	beq.n	80030b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003070:	4b4f      	ldr	r3, [pc, #316]	; (80031b0 <HAL_RCC_OscConfig+0x2b0>)
 8003072:	2201      	movs	r2, #1
 8003074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003076:	f7fe fd11 	bl	8001a9c <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800307e:	f7fe fd0d 	bl	8001a9c <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e1a5      	b.n	80033dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003090:	4b46      	ldr	r3, [pc, #280]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0f0      	beq.n	800307e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309c:	4b43      	ldr	r3, [pc, #268]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4940      	ldr	r1, [pc, #256]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	600b      	str	r3, [r1, #0]
 80030b0:	e015      	b.n	80030de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030b2:	4b3f      	ldr	r3, [pc, #252]	; (80031b0 <HAL_RCC_OscConfig+0x2b0>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fe fcf0 	bl	8001a9c <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030c0:	f7fe fcec 	bl	8001a9c <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e184      	b.n	80033dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d2:	4b36      	ldr	r3, [pc, #216]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f0      	bne.n	80030c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d030      	beq.n	800314c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d016      	beq.n	8003120 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030f2:	4b30      	ldr	r3, [pc, #192]	; (80031b4 <HAL_RCC_OscConfig+0x2b4>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f8:	f7fe fcd0 	bl	8001a9c <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003100:	f7fe fccc 	bl	8001a9c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e164      	b.n	80033dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003112:	4b26      	ldr	r3, [pc, #152]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8003114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0x200>
 800311e:	e015      	b.n	800314c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003120:	4b24      	ldr	r3, [pc, #144]	; (80031b4 <HAL_RCC_OscConfig+0x2b4>)
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003126:	f7fe fcb9 	bl	8001a9c <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800312e:	f7fe fcb5 	bl	8001a9c <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e14d      	b.n	80033dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003140:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8003142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f0      	bne.n	800312e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80a0 	beq.w	800329a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800315a:	2300      	movs	r3, #0
 800315c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800315e:	4b13      	ldr	r3, [pc, #76]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10f      	bne.n	800318a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	4a0e      	ldr	r2, [pc, #56]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 8003174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003178:	6413      	str	r3, [r2, #64]	; 0x40
 800317a:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <HAL_RCC_OscConfig+0x2ac>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003186:	2301      	movs	r3, #1
 8003188:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318a:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <HAL_RCC_OscConfig+0x2b8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	2b00      	cmp	r3, #0
 8003194:	d121      	bne.n	80031da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003196:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <HAL_RCC_OscConfig+0x2b8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a07      	ldr	r2, [pc, #28]	; (80031b8 <HAL_RCC_OscConfig+0x2b8>)
 800319c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a2:	f7fe fc7b 	bl	8001a9c <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a8:	e011      	b.n	80031ce <HAL_RCC_OscConfig+0x2ce>
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800
 80031b0:	42470000 	.word	0x42470000
 80031b4:	42470e80 	.word	0x42470e80
 80031b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031bc:	f7fe fc6e 	bl	8001a9c <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e106      	b.n	80033dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ce:	4b85      	ldr	r3, [pc, #532]	; (80033e4 <HAL_RCC_OscConfig+0x4e4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d106      	bne.n	80031f0 <HAL_RCC_OscConfig+0x2f0>
 80031e2:	4b81      	ldr	r3, [pc, #516]	; (80033e8 <HAL_RCC_OscConfig+0x4e8>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	4a80      	ldr	r2, [pc, #512]	; (80033e8 <HAL_RCC_OscConfig+0x4e8>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	6713      	str	r3, [r2, #112]	; 0x70
 80031ee:	e01c      	b.n	800322a <HAL_RCC_OscConfig+0x32a>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b05      	cmp	r3, #5
 80031f6:	d10c      	bne.n	8003212 <HAL_RCC_OscConfig+0x312>
 80031f8:	4b7b      	ldr	r3, [pc, #492]	; (80033e8 <HAL_RCC_OscConfig+0x4e8>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fc:	4a7a      	ldr	r2, [pc, #488]	; (80033e8 <HAL_RCC_OscConfig+0x4e8>)
 80031fe:	f043 0304 	orr.w	r3, r3, #4
 8003202:	6713      	str	r3, [r2, #112]	; 0x70
 8003204:	4b78      	ldr	r3, [pc, #480]	; (80033e8 <HAL_RCC_OscConfig+0x4e8>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	4a77      	ldr	r2, [pc, #476]	; (80033e8 <HAL_RCC_OscConfig+0x4e8>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6713      	str	r3, [r2, #112]	; 0x70
 8003210:	e00b      	b.n	800322a <HAL_RCC_OscConfig+0x32a>
 8003212:	4b75      	ldr	r3, [pc, #468]	; (80033e8 <HAL_RCC_OscConfig+0x4e8>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	4a74      	ldr	r2, [pc, #464]	; (80033e8 <HAL_RCC_OscConfig+0x4e8>)
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	6713      	str	r3, [r2, #112]	; 0x70
 800321e:	4b72      	ldr	r3, [pc, #456]	; (80033e8 <HAL_RCC_OscConfig+0x4e8>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	4a71      	ldr	r2, [pc, #452]	; (80033e8 <HAL_RCC_OscConfig+0x4e8>)
 8003224:	f023 0304 	bic.w	r3, r3, #4
 8003228:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d015      	beq.n	800325e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003232:	f7fe fc33 	bl	8001a9c <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003238:	e00a      	b.n	8003250 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800323a:	f7fe fc2f 	bl	8001a9c <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	f241 3288 	movw	r2, #5000	; 0x1388
 8003248:	4293      	cmp	r3, r2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e0c5      	b.n	80033dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003250:	4b65      	ldr	r3, [pc, #404]	; (80033e8 <HAL_RCC_OscConfig+0x4e8>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0ee      	beq.n	800323a <HAL_RCC_OscConfig+0x33a>
 800325c:	e014      	b.n	8003288 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325e:	f7fe fc1d 	bl	8001a9c <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003264:	e00a      	b.n	800327c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003266:	f7fe fc19 	bl	8001a9c <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f241 3288 	movw	r2, #5000	; 0x1388
 8003274:	4293      	cmp	r3, r2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e0af      	b.n	80033dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800327c:	4b5a      	ldr	r3, [pc, #360]	; (80033e8 <HAL_RCC_OscConfig+0x4e8>)
 800327e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1ee      	bne.n	8003266 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003288:	7dfb      	ldrb	r3, [r7, #23]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d105      	bne.n	800329a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800328e:	4b56      	ldr	r3, [pc, #344]	; (80033e8 <HAL_RCC_OscConfig+0x4e8>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	4a55      	ldr	r2, [pc, #340]	; (80033e8 <HAL_RCC_OscConfig+0x4e8>)
 8003294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003298:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 809b 	beq.w	80033da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032a4:	4b50      	ldr	r3, [pc, #320]	; (80033e8 <HAL_RCC_OscConfig+0x4e8>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d05c      	beq.n	800336a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d141      	bne.n	800333c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b8:	4b4c      	ldr	r3, [pc, #304]	; (80033ec <HAL_RCC_OscConfig+0x4ec>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032be:	f7fe fbed 	bl	8001a9c <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c6:	f7fe fbe9 	bl	8001a9c <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e081      	b.n	80033dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d8:	4b43      	ldr	r3, [pc, #268]	; (80033e8 <HAL_RCC_OscConfig+0x4e8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f0      	bne.n	80032c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69da      	ldr	r2, [r3, #28]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	019b      	lsls	r3, r3, #6
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	085b      	lsrs	r3, r3, #1
 80032fc:	3b01      	subs	r3, #1
 80032fe:	041b      	lsls	r3, r3, #16
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003306:	061b      	lsls	r3, r3, #24
 8003308:	4937      	ldr	r1, [pc, #220]	; (80033e8 <HAL_RCC_OscConfig+0x4e8>)
 800330a:	4313      	orrs	r3, r2
 800330c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800330e:	4b37      	ldr	r3, [pc, #220]	; (80033ec <HAL_RCC_OscConfig+0x4ec>)
 8003310:	2201      	movs	r2, #1
 8003312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7fe fbc2 	bl	8001a9c <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800331c:	f7fe fbbe 	bl	8001a9c <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e056      	b.n	80033dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332e:	4b2e      	ldr	r3, [pc, #184]	; (80033e8 <HAL_RCC_OscConfig+0x4e8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0x41c>
 800333a:	e04e      	b.n	80033da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333c:	4b2b      	ldr	r3, [pc, #172]	; (80033ec <HAL_RCC_OscConfig+0x4ec>)
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003342:	f7fe fbab 	bl	8001a9c <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334a:	f7fe fba7 	bl	8001a9c <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e03f      	b.n	80033dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335c:	4b22      	ldr	r3, [pc, #136]	; (80033e8 <HAL_RCC_OscConfig+0x4e8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f0      	bne.n	800334a <HAL_RCC_OscConfig+0x44a>
 8003368:	e037      	b.n	80033da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d101      	bne.n	8003376 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e032      	b.n	80033dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003376:	4b1c      	ldr	r3, [pc, #112]	; (80033e8 <HAL_RCC_OscConfig+0x4e8>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d028      	beq.n	80033d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800338e:	429a      	cmp	r2, r3
 8003390:	d121      	bne.n	80033d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339c:	429a      	cmp	r2, r3
 800339e:	d11a      	bne.n	80033d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033a6:	4013      	ands	r3, r2
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d111      	bne.n	80033d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	085b      	lsrs	r3, r3, #1
 80033be:	3b01      	subs	r3, #1
 80033c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d107      	bne.n	80033d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d001      	beq.n	80033da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40007000 	.word	0x40007000
 80033e8:	40023800 	.word	0x40023800
 80033ec:	42470060 	.word	0x42470060

080033f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e0cc      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003404:	4b68      	ldr	r3, [pc, #416]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d90c      	bls.n	800342c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003412:	4b65      	ldr	r3, [pc, #404]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341a:	4b63      	ldr	r3, [pc, #396]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0b8      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d020      	beq.n	800347a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003444:	4b59      	ldr	r3, [pc, #356]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4a58      	ldr	r2, [pc, #352]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800344e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800345c:	4b53      	ldr	r3, [pc, #332]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	4a52      	ldr	r2, [pc, #328]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003466:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003468:	4b50      	ldr	r3, [pc, #320]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	494d      	ldr	r1, [pc, #308]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d044      	beq.n	8003510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d107      	bne.n	800349e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	4b47      	ldr	r3, [pc, #284]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d119      	bne.n	80034ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e07f      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d003      	beq.n	80034ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d107      	bne.n	80034be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ae:	4b3f      	ldr	r3, [pc, #252]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e06f      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034be:	4b3b      	ldr	r3, [pc, #236]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e067      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ce:	4b37      	ldr	r3, [pc, #220]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f023 0203 	bic.w	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4934      	ldr	r1, [pc, #208]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e0:	f7fe fadc 	bl	8001a9c <HAL_GetTick>
 80034e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e8:	f7fe fad8 	bl	8001a9c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e04f      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fe:	4b2b      	ldr	r3, [pc, #172]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 020c 	and.w	r2, r3, #12
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	429a      	cmp	r2, r3
 800350e:	d1eb      	bne.n	80034e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003510:	4b25      	ldr	r3, [pc, #148]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d20c      	bcs.n	8003538 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b22      	ldr	r3, [pc, #136]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e032      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003544:	4b19      	ldr	r3, [pc, #100]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4916      	ldr	r1, [pc, #88]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d009      	beq.n	8003576 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003562:	4b12      	ldr	r3, [pc, #72]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	490e      	ldr	r1, [pc, #56]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003576:	f000 f821 	bl	80035bc <HAL_RCC_GetSysClockFreq>
 800357a:	4602      	mov	r2, r0
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	490a      	ldr	r1, [pc, #40]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003588:	5ccb      	ldrb	r3, [r1, r3]
 800358a:	fa22 f303 	lsr.w	r3, r2, r3
 800358e:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003592:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7fe fa3c 	bl	8001a14 <HAL_InitTick>

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40023c00 	.word	0x40023c00
 80035ac:	40023800 	.word	0x40023800
 80035b0:	08007d2c 	.word	0x08007d2c
 80035b4:	20000000 	.word	0x20000000
 80035b8:	20000004 	.word	0x20000004

080035bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	607b      	str	r3, [r7, #4]
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	2300      	movs	r3, #0
 80035ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035d4:	4b67      	ldr	r3, [pc, #412]	; (8003774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 030c 	and.w	r3, r3, #12
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d00d      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0x40>
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	f200 80bd 	bhi.w	8003760 <HAL_RCC_GetSysClockFreq+0x1a4>
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0x34>
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d003      	beq.n	80035f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80035ee:	e0b7      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035f0:	4b61      	ldr	r3, [pc, #388]	; (8003778 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035f2:	60bb      	str	r3, [r7, #8]
       break;
 80035f4:	e0b7      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035f6:	4b61      	ldr	r3, [pc, #388]	; (800377c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80035f8:	60bb      	str	r3, [r7, #8]
      break;
 80035fa:	e0b4      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035fc:	4b5d      	ldr	r3, [pc, #372]	; (8003774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003604:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003606:	4b5b      	ldr	r3, [pc, #364]	; (8003774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d04d      	beq.n	80036ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003612:	4b58      	ldr	r3, [pc, #352]	; (8003774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	099b      	lsrs	r3, r3, #6
 8003618:	461a      	mov	r2, r3
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003622:	f04f 0100 	mov.w	r1, #0
 8003626:	ea02 0800 	and.w	r8, r2, r0
 800362a:	ea03 0901 	and.w	r9, r3, r1
 800362e:	4640      	mov	r0, r8
 8003630:	4649      	mov	r1, r9
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	014b      	lsls	r3, r1, #5
 800363c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003640:	0142      	lsls	r2, r0, #5
 8003642:	4610      	mov	r0, r2
 8003644:	4619      	mov	r1, r3
 8003646:	ebb0 0008 	subs.w	r0, r0, r8
 800364a:	eb61 0109 	sbc.w	r1, r1, r9
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	018b      	lsls	r3, r1, #6
 8003658:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800365c:	0182      	lsls	r2, r0, #6
 800365e:	1a12      	subs	r2, r2, r0
 8003660:	eb63 0301 	sbc.w	r3, r3, r1
 8003664:	f04f 0000 	mov.w	r0, #0
 8003668:	f04f 0100 	mov.w	r1, #0
 800366c:	00d9      	lsls	r1, r3, #3
 800366e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003672:	00d0      	lsls	r0, r2, #3
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	eb12 0208 	adds.w	r2, r2, r8
 800367c:	eb43 0309 	adc.w	r3, r3, r9
 8003680:	f04f 0000 	mov.w	r0, #0
 8003684:	f04f 0100 	mov.w	r1, #0
 8003688:	0259      	lsls	r1, r3, #9
 800368a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800368e:	0250      	lsls	r0, r2, #9
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4610      	mov	r0, r2
 8003696:	4619      	mov	r1, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	461a      	mov	r2, r3
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	f7fd fada 	bl	8000c58 <__aeabi_uldivmod>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4613      	mov	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	e04a      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ae:	4b31      	ldr	r3, [pc, #196]	; (8003774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	099b      	lsrs	r3, r3, #6
 80036b4:	461a      	mov	r2, r3
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036be:	f04f 0100 	mov.w	r1, #0
 80036c2:	ea02 0400 	and.w	r4, r2, r0
 80036c6:	ea03 0501 	and.w	r5, r3, r1
 80036ca:	4620      	mov	r0, r4
 80036cc:	4629      	mov	r1, r5
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	014b      	lsls	r3, r1, #5
 80036d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036dc:	0142      	lsls	r2, r0, #5
 80036de:	4610      	mov	r0, r2
 80036e0:	4619      	mov	r1, r3
 80036e2:	1b00      	subs	r0, r0, r4
 80036e4:	eb61 0105 	sbc.w	r1, r1, r5
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	018b      	lsls	r3, r1, #6
 80036f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036f6:	0182      	lsls	r2, r0, #6
 80036f8:	1a12      	subs	r2, r2, r0
 80036fa:	eb63 0301 	sbc.w	r3, r3, r1
 80036fe:	f04f 0000 	mov.w	r0, #0
 8003702:	f04f 0100 	mov.w	r1, #0
 8003706:	00d9      	lsls	r1, r3, #3
 8003708:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800370c:	00d0      	lsls	r0, r2, #3
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	1912      	adds	r2, r2, r4
 8003714:	eb45 0303 	adc.w	r3, r5, r3
 8003718:	f04f 0000 	mov.w	r0, #0
 800371c:	f04f 0100 	mov.w	r1, #0
 8003720:	0299      	lsls	r1, r3, #10
 8003722:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003726:	0290      	lsls	r0, r2, #10
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4610      	mov	r0, r2
 800372e:	4619      	mov	r1, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	461a      	mov	r2, r3
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	f7fd fa8e 	bl	8000c58 <__aeabi_uldivmod>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4613      	mov	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	0c1b      	lsrs	r3, r3, #16
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	3301      	adds	r3, #1
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	fbb2 f3f3 	udiv	r3, r2, r3
 800375c:	60bb      	str	r3, [r7, #8]
      break;
 800375e:	e002      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003762:	60bb      	str	r3, [r7, #8]
      break;
 8003764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003766:	68bb      	ldr	r3, [r7, #8]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800
 8003778:	00f42400 	.word	0x00f42400
 800377c:	007a1200 	.word	0x007a1200

08003780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003784:	4b03      	ldr	r3, [pc, #12]	; (8003794 <HAL_RCC_GetHCLKFreq+0x14>)
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20000000 	.word	0x20000000

08003798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800379c:	f7ff fff0 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	0a9b      	lsrs	r3, r3, #10
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	4903      	ldr	r1, [pc, #12]	; (80037bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40023800 	.word	0x40023800
 80037bc:	08007d3c 	.word	0x08007d3c

080037c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037c4:	f7ff ffdc 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	0b5b      	lsrs	r3, r3, #13
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4903      	ldr	r1, [pc, #12]	; (80037e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40023800 	.word	0x40023800
 80037e4:	08007d3c 	.word	0x08007d3c

080037e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e041      	b.n	800387e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fd ff24 	bl	800165c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3304      	adds	r3, #4
 8003824:	4619      	mov	r1, r3
 8003826:	4610      	mov	r0, r2
 8003828:	f000 fa88 	bl	8003d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	d001      	beq.n	80038a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e044      	b.n	800392a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a1e      	ldr	r2, [pc, #120]	; (8003938 <HAL_TIM_Base_Start_IT+0xb0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d018      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x6c>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ca:	d013      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x6c>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1a      	ldr	r2, [pc, #104]	; (800393c <HAL_TIM_Base_Start_IT+0xb4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00e      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x6c>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a19      	ldr	r2, [pc, #100]	; (8003940 <HAL_TIM_Base_Start_IT+0xb8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d009      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x6c>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a17      	ldr	r2, [pc, #92]	; (8003944 <HAL_TIM_Base_Start_IT+0xbc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d004      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x6c>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a16      	ldr	r2, [pc, #88]	; (8003948 <HAL_TIM_Base_Start_IT+0xc0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d111      	bne.n	8003918 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b06      	cmp	r3, #6
 8003904:	d010      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0201 	orr.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003916:	e007      	b.n	8003928 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40010000 	.word	0x40010000
 800393c:	40000400 	.word	0x40000400
 8003940:	40000800 	.word	0x40000800
 8003944:	40000c00 	.word	0x40000c00
 8003948:	40014000 	.word	0x40014000

0800394c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b02      	cmp	r3, #2
 8003960:	d122      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b02      	cmp	r3, #2
 800396e:	d11b      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0202 	mvn.w	r2, #2
 8003978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f9b5 	bl	8003cfe <HAL_TIM_IC_CaptureCallback>
 8003994:	e005      	b.n	80039a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f9a7 	bl	8003cea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f9b8 	bl	8003d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d122      	bne.n	80039fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d11b      	bne.n	80039fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0204 	mvn.w	r2, #4
 80039cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2202      	movs	r2, #2
 80039d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f98b 	bl	8003cfe <HAL_TIM_IC_CaptureCallback>
 80039e8:	e005      	b.n	80039f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f97d 	bl	8003cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f98e 	bl	8003d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d122      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d11b      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f06f 0208 	mvn.w	r2, #8
 8003a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2204      	movs	r2, #4
 8003a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f961 	bl	8003cfe <HAL_TIM_IC_CaptureCallback>
 8003a3c:	e005      	b.n	8003a4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f953 	bl	8003cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f964 	bl	8003d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b10      	cmp	r3, #16
 8003a5c:	d122      	bne.n	8003aa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b10      	cmp	r3, #16
 8003a6a:	d11b      	bne.n	8003aa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f06f 0210 	mvn.w	r2, #16
 8003a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2208      	movs	r2, #8
 8003a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f937 	bl	8003cfe <HAL_TIM_IC_CaptureCallback>
 8003a90:	e005      	b.n	8003a9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f929 	bl	8003cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f93a 	bl	8003d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d10e      	bne.n	8003ad0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d107      	bne.n	8003ad0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f06f 0201 	mvn.w	r2, #1
 8003ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fd fa40 	bl	8000f50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ada:	2b80      	cmp	r3, #128	; 0x80
 8003adc:	d10e      	bne.n	8003afc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae8:	2b80      	cmp	r3, #128	; 0x80
 8003aea:	d107      	bne.n	8003afc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fab2 	bl	8004060 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b06:	2b40      	cmp	r3, #64	; 0x40
 8003b08:	d10e      	bne.n	8003b28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b14:	2b40      	cmp	r3, #64	; 0x40
 8003b16:	d107      	bne.n	8003b28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f8ff 	bl	8003d26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f003 0320 	and.w	r3, r3, #32
 8003b32:	2b20      	cmp	r3, #32
 8003b34:	d10e      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d107      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f06f 0220 	mvn.w	r2, #32
 8003b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 fa7c 	bl	800404c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b54:	bf00      	nop
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <HAL_TIM_ConfigClockSource+0x1c>
 8003b74:	2302      	movs	r3, #2
 8003b76:	e0b4      	b.n	8003ce2 <HAL_TIM_ConfigClockSource+0x186>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb0:	d03e      	beq.n	8003c30 <HAL_TIM_ConfigClockSource+0xd4>
 8003bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb6:	f200 8087 	bhi.w	8003cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bbe:	f000 8086 	beq.w	8003cce <HAL_TIM_ConfigClockSource+0x172>
 8003bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc6:	d87f      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc8:	2b70      	cmp	r3, #112	; 0x70
 8003bca:	d01a      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0xa6>
 8003bcc:	2b70      	cmp	r3, #112	; 0x70
 8003bce:	d87b      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd0:	2b60      	cmp	r3, #96	; 0x60
 8003bd2:	d050      	beq.n	8003c76 <HAL_TIM_ConfigClockSource+0x11a>
 8003bd4:	2b60      	cmp	r3, #96	; 0x60
 8003bd6:	d877      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd8:	2b50      	cmp	r3, #80	; 0x50
 8003bda:	d03c      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0xfa>
 8003bdc:	2b50      	cmp	r3, #80	; 0x50
 8003bde:	d873      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	d058      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x13a>
 8003be4:	2b40      	cmp	r3, #64	; 0x40
 8003be6:	d86f      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003be8:	2b30      	cmp	r3, #48	; 0x30
 8003bea:	d064      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003bec:	2b30      	cmp	r3, #48	; 0x30
 8003bee:	d86b      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	d060      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d867      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d05c      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003bfc:	2b10      	cmp	r3, #16
 8003bfe:	d05a      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003c00:	e062      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6899      	ldr	r1, [r3, #8]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f000 f98d 	bl	8003f30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	609a      	str	r2, [r3, #8]
      break;
 8003c2e:	e04f      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	6899      	ldr	r1, [r3, #8]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f000 f976 	bl	8003f30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c52:	609a      	str	r2, [r3, #8]
      break;
 8003c54:	e03c      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	6859      	ldr	r1, [r3, #4]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	461a      	mov	r2, r3
 8003c64:	f000 f8ea 	bl	8003e3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2150      	movs	r1, #80	; 0x50
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 f943 	bl	8003efa <TIM_ITRx_SetConfig>
      break;
 8003c74:	e02c      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	6859      	ldr	r1, [r3, #4]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	461a      	mov	r2, r3
 8003c84:	f000 f909 	bl	8003e9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2160      	movs	r1, #96	; 0x60
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 f933 	bl	8003efa <TIM_ITRx_SetConfig>
      break;
 8003c94:	e01c      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6818      	ldr	r0, [r3, #0]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	6859      	ldr	r1, [r3, #4]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f000 f8ca 	bl	8003e3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2140      	movs	r1, #64	; 0x40
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 f923 	bl	8003efa <TIM_ITRx_SetConfig>
      break;
 8003cb4:	e00c      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	f000 f91a 	bl	8003efa <TIM_ITRx_SetConfig>
      break;
 8003cc6:	e003      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
      break;
 8003ccc:	e000      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a34      	ldr	r2, [pc, #208]	; (8003e20 <TIM_Base_SetConfig+0xe4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00f      	beq.n	8003d74 <TIM_Base_SetConfig+0x38>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5a:	d00b      	beq.n	8003d74 <TIM_Base_SetConfig+0x38>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a31      	ldr	r2, [pc, #196]	; (8003e24 <TIM_Base_SetConfig+0xe8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d007      	beq.n	8003d74 <TIM_Base_SetConfig+0x38>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a30      	ldr	r2, [pc, #192]	; (8003e28 <TIM_Base_SetConfig+0xec>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d003      	beq.n	8003d74 <TIM_Base_SetConfig+0x38>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a2f      	ldr	r2, [pc, #188]	; (8003e2c <TIM_Base_SetConfig+0xf0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d108      	bne.n	8003d86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a25      	ldr	r2, [pc, #148]	; (8003e20 <TIM_Base_SetConfig+0xe4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d01b      	beq.n	8003dc6 <TIM_Base_SetConfig+0x8a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d94:	d017      	beq.n	8003dc6 <TIM_Base_SetConfig+0x8a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a22      	ldr	r2, [pc, #136]	; (8003e24 <TIM_Base_SetConfig+0xe8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d013      	beq.n	8003dc6 <TIM_Base_SetConfig+0x8a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a21      	ldr	r2, [pc, #132]	; (8003e28 <TIM_Base_SetConfig+0xec>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00f      	beq.n	8003dc6 <TIM_Base_SetConfig+0x8a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a20      	ldr	r2, [pc, #128]	; (8003e2c <TIM_Base_SetConfig+0xf0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00b      	beq.n	8003dc6 <TIM_Base_SetConfig+0x8a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a1f      	ldr	r2, [pc, #124]	; (8003e30 <TIM_Base_SetConfig+0xf4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d007      	beq.n	8003dc6 <TIM_Base_SetConfig+0x8a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a1e      	ldr	r2, [pc, #120]	; (8003e34 <TIM_Base_SetConfig+0xf8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d003      	beq.n	8003dc6 <TIM_Base_SetConfig+0x8a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a1d      	ldr	r2, [pc, #116]	; (8003e38 <TIM_Base_SetConfig+0xfc>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d108      	bne.n	8003dd8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a08      	ldr	r2, [pc, #32]	; (8003e20 <TIM_Base_SetConfig+0xe4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d103      	bne.n	8003e0c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	615a      	str	r2, [r3, #20]
}
 8003e12:	bf00      	nop
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40010000 	.word	0x40010000
 8003e24:	40000400 	.word	0x40000400
 8003e28:	40000800 	.word	0x40000800
 8003e2c:	40000c00 	.word	0x40000c00
 8003e30:	40014000 	.word	0x40014000
 8003e34:	40014400 	.word	0x40014400
 8003e38:	40014800 	.word	0x40014800

08003e3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	f023 0201 	bic.w	r2, r3, #1
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f023 030a 	bic.w	r3, r3, #10
 8003e78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	621a      	str	r2, [r3, #32]
}
 8003e8e:	bf00      	nop
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b087      	sub	sp, #28
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f023 0210 	bic.w	r2, r3, #16
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ec4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	031b      	lsls	r3, r3, #12
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ed6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b085      	sub	sp, #20
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f043 0307 	orr.w	r3, r3, #7
 8003f1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	609a      	str	r2, [r3, #8]
}
 8003f24:	bf00      	nop
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	021a      	lsls	r2, r3, #8
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	609a      	str	r2, [r3, #8]
}
 8003f64:	bf00      	nop
 8003f66:	371c      	adds	r7, #28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e050      	b.n	800402a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1c      	ldr	r2, [pc, #112]	; (8004038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d018      	beq.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd4:	d013      	beq.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a18      	ldr	r2, [pc, #96]	; (800403c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00e      	beq.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a16      	ldr	r2, [pc, #88]	; (8004040 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d009      	beq.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a15      	ldr	r2, [pc, #84]	; (8004044 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d004      	beq.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a13      	ldr	r2, [pc, #76]	; (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d10c      	bne.n	8004018 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004004:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	4313      	orrs	r3, r2
 800400e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40010000 	.word	0x40010000
 800403c:	40000400 	.word	0x40000400
 8004040:	40000800 	.word	0x40000800
 8004044:	40000c00 	.word	0x40000c00
 8004048:	40014000 	.word	0x40014000

0800404c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e03f      	b.n	8004106 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d106      	bne.n	80040a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fd fb06 	bl	80016ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2224      	movs	r2, #36	; 0x24
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f929 	bl	8004310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691a      	ldr	r2, [r3, #16]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695a      	ldr	r2, [r3, #20]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b08a      	sub	sp, #40	; 0x28
 8004112:	af02      	add	r7, sp, #8
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	603b      	str	r3, [r7, #0]
 800411a:	4613      	mov	r3, r2
 800411c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b20      	cmp	r3, #32
 800412c:	d17c      	bne.n	8004228 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <HAL_UART_Transmit+0x2c>
 8004134:	88fb      	ldrh	r3, [r7, #6]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e075      	b.n	800422a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_UART_Transmit+0x3e>
 8004148:	2302      	movs	r3, #2
 800414a:	e06e      	b.n	800422a <HAL_UART_Transmit+0x11c>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2221      	movs	r2, #33	; 0x21
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004162:	f7fd fc9b 	bl	8001a9c <HAL_GetTick>
 8004166:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	88fa      	ldrh	r2, [r7, #6]
 800416c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	88fa      	ldrh	r2, [r7, #6]
 8004172:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417c:	d108      	bne.n	8004190 <HAL_UART_Transmit+0x82>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d104      	bne.n	8004190 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	e003      	b.n	8004198 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004194:	2300      	movs	r3, #0
 8004196:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041a0:	e02a      	b.n	80041f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2200      	movs	r2, #0
 80041aa:	2180      	movs	r1, #128	; 0x80
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 f840 	bl	8004232 <UART_WaitOnFlagUntilTimeout>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e036      	b.n	800422a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10b      	bne.n	80041da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	3302      	adds	r3, #2
 80041d6:	61bb      	str	r3, [r7, #24]
 80041d8:	e007      	b.n	80041ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	781a      	ldrb	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	3301      	adds	r3, #1
 80041e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1cf      	bne.n	80041a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2200      	movs	r2, #0
 800420a:	2140      	movs	r1, #64	; 0x40
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f810 	bl	8004232 <UART_WaitOnFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e006      	b.n	800422a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	e000      	b.n	800422a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004228:	2302      	movs	r3, #2
  }
}
 800422a:	4618      	mov	r0, r3
 800422c:	3720      	adds	r7, #32
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b090      	sub	sp, #64	; 0x40
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	603b      	str	r3, [r7, #0]
 800423e:	4613      	mov	r3, r2
 8004240:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004242:	e050      	b.n	80042e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800424a:	d04c      	beq.n	80042e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800424c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <UART_WaitOnFlagUntilTimeout+0x30>
 8004252:	f7fd fc23 	bl	8001a9c <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800425e:	429a      	cmp	r2, r3
 8004260:	d241      	bcs.n	80042e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	330c      	adds	r3, #12
 8004268:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004278:	63fb      	str	r3, [r7, #60]	; 0x3c
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	330c      	adds	r3, #12
 8004280:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004282:	637a      	str	r2, [r7, #52]	; 0x34
 8004284:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004288:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e5      	bne.n	8004262 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3314      	adds	r3, #20
 800429c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	613b      	str	r3, [r7, #16]
   return(result);
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f023 0301 	bic.w	r3, r3, #1
 80042ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3314      	adds	r3, #20
 80042b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042b6:	623a      	str	r2, [r7, #32]
 80042b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	69f9      	ldr	r1, [r7, #28]
 80042bc:	6a3a      	ldr	r2, [r7, #32]
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e5      	bne.n	8004296 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e00f      	b.n	8004306 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4013      	ands	r3, r2
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	bf0c      	ite	eq
 80042f6:	2301      	moveq	r3, #1
 80042f8:	2300      	movne	r3, #0
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	461a      	mov	r2, r3
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	429a      	cmp	r2, r3
 8004302:	d09f      	beq.n	8004244 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3740      	adds	r7, #64	; 0x40
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004314:	b09f      	sub	sp, #124	; 0x7c
 8004316:	af00      	add	r7, sp, #0
 8004318:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800431a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004326:	68d9      	ldr	r1, [r3, #12]
 8004328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	ea40 0301 	orr.w	r3, r0, r1
 8004330:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	431a      	orrs	r2, r3
 800433c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	431a      	orrs	r2, r3
 8004342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	4313      	orrs	r3, r2
 8004348:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800434a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004354:	f021 010c 	bic.w	r1, r1, #12
 8004358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800435e:	430b      	orrs	r3, r1
 8004360:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800436c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800436e:	6999      	ldr	r1, [r3, #24]
 8004370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	ea40 0301 	orr.w	r3, r0, r1
 8004378:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800437a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4bc5      	ldr	r3, [pc, #788]	; (8004694 <UART_SetConfig+0x384>)
 8004380:	429a      	cmp	r2, r3
 8004382:	d004      	beq.n	800438e <UART_SetConfig+0x7e>
 8004384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	4bc3      	ldr	r3, [pc, #780]	; (8004698 <UART_SetConfig+0x388>)
 800438a:	429a      	cmp	r2, r3
 800438c:	d103      	bne.n	8004396 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800438e:	f7ff fa17 	bl	80037c0 <HAL_RCC_GetPCLK2Freq>
 8004392:	6778      	str	r0, [r7, #116]	; 0x74
 8004394:	e002      	b.n	800439c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004396:	f7ff f9ff 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 800439a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800439c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a4:	f040 80b6 	bne.w	8004514 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043aa:	461c      	mov	r4, r3
 80043ac:	f04f 0500 	mov.w	r5, #0
 80043b0:	4622      	mov	r2, r4
 80043b2:	462b      	mov	r3, r5
 80043b4:	1891      	adds	r1, r2, r2
 80043b6:	6439      	str	r1, [r7, #64]	; 0x40
 80043b8:	415b      	adcs	r3, r3
 80043ba:	647b      	str	r3, [r7, #68]	; 0x44
 80043bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043c0:	1912      	adds	r2, r2, r4
 80043c2:	eb45 0303 	adc.w	r3, r5, r3
 80043c6:	f04f 0000 	mov.w	r0, #0
 80043ca:	f04f 0100 	mov.w	r1, #0
 80043ce:	00d9      	lsls	r1, r3, #3
 80043d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043d4:	00d0      	lsls	r0, r2, #3
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	1911      	adds	r1, r2, r4
 80043dc:	6639      	str	r1, [r7, #96]	; 0x60
 80043de:	416b      	adcs	r3, r5
 80043e0:	667b      	str	r3, [r7, #100]	; 0x64
 80043e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	461a      	mov	r2, r3
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	1891      	adds	r1, r2, r2
 80043ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80043f0:	415b      	adcs	r3, r3
 80043f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80043fc:	f7fc fc2c 	bl	8000c58 <__aeabi_uldivmod>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4ba5      	ldr	r3, [pc, #660]	; (800469c <UART_SetConfig+0x38c>)
 8004406:	fba3 2302 	umull	r2, r3, r3, r2
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	011e      	lsls	r6, r3, #4
 800440e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004410:	461c      	mov	r4, r3
 8004412:	f04f 0500 	mov.w	r5, #0
 8004416:	4622      	mov	r2, r4
 8004418:	462b      	mov	r3, r5
 800441a:	1891      	adds	r1, r2, r2
 800441c:	6339      	str	r1, [r7, #48]	; 0x30
 800441e:	415b      	adcs	r3, r3
 8004420:	637b      	str	r3, [r7, #52]	; 0x34
 8004422:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004426:	1912      	adds	r2, r2, r4
 8004428:	eb45 0303 	adc.w	r3, r5, r3
 800442c:	f04f 0000 	mov.w	r0, #0
 8004430:	f04f 0100 	mov.w	r1, #0
 8004434:	00d9      	lsls	r1, r3, #3
 8004436:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800443a:	00d0      	lsls	r0, r2, #3
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	1911      	adds	r1, r2, r4
 8004442:	65b9      	str	r1, [r7, #88]	; 0x58
 8004444:	416b      	adcs	r3, r5
 8004446:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	461a      	mov	r2, r3
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	1891      	adds	r1, r2, r2
 8004454:	62b9      	str	r1, [r7, #40]	; 0x28
 8004456:	415b      	adcs	r3, r3
 8004458:	62fb      	str	r3, [r7, #44]	; 0x2c
 800445a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800445e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004462:	f7fc fbf9 	bl	8000c58 <__aeabi_uldivmod>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4b8c      	ldr	r3, [pc, #560]	; (800469c <UART_SetConfig+0x38c>)
 800446c:	fba3 1302 	umull	r1, r3, r3, r2
 8004470:	095b      	lsrs	r3, r3, #5
 8004472:	2164      	movs	r1, #100	; 0x64
 8004474:	fb01 f303 	mul.w	r3, r1, r3
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	3332      	adds	r3, #50	; 0x32
 800447e:	4a87      	ldr	r2, [pc, #540]	; (800469c <UART_SetConfig+0x38c>)
 8004480:	fba2 2303 	umull	r2, r3, r2, r3
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800448c:	441e      	add	r6, r3
 800448e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004490:	4618      	mov	r0, r3
 8004492:	f04f 0100 	mov.w	r1, #0
 8004496:	4602      	mov	r2, r0
 8004498:	460b      	mov	r3, r1
 800449a:	1894      	adds	r4, r2, r2
 800449c:	623c      	str	r4, [r7, #32]
 800449e:	415b      	adcs	r3, r3
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
 80044a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044a6:	1812      	adds	r2, r2, r0
 80044a8:	eb41 0303 	adc.w	r3, r1, r3
 80044ac:	f04f 0400 	mov.w	r4, #0
 80044b0:	f04f 0500 	mov.w	r5, #0
 80044b4:	00dd      	lsls	r5, r3, #3
 80044b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044ba:	00d4      	lsls	r4, r2, #3
 80044bc:	4622      	mov	r2, r4
 80044be:	462b      	mov	r3, r5
 80044c0:	1814      	adds	r4, r2, r0
 80044c2:	653c      	str	r4, [r7, #80]	; 0x50
 80044c4:	414b      	adcs	r3, r1
 80044c6:	657b      	str	r3, [r7, #84]	; 0x54
 80044c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	461a      	mov	r2, r3
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	1891      	adds	r1, r2, r2
 80044d4:	61b9      	str	r1, [r7, #24]
 80044d6:	415b      	adcs	r3, r3
 80044d8:	61fb      	str	r3, [r7, #28]
 80044da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80044e2:	f7fc fbb9 	bl	8000c58 <__aeabi_uldivmod>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4b6c      	ldr	r3, [pc, #432]	; (800469c <UART_SetConfig+0x38c>)
 80044ec:	fba3 1302 	umull	r1, r3, r3, r2
 80044f0:	095b      	lsrs	r3, r3, #5
 80044f2:	2164      	movs	r1, #100	; 0x64
 80044f4:	fb01 f303 	mul.w	r3, r1, r3
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	3332      	adds	r3, #50	; 0x32
 80044fe:	4a67      	ldr	r2, [pc, #412]	; (800469c <UART_SetConfig+0x38c>)
 8004500:	fba2 2303 	umull	r2, r3, r2, r3
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	f003 0207 	and.w	r2, r3, #7
 800450a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4432      	add	r2, r6
 8004510:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004512:	e0b9      	b.n	8004688 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004514:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004516:	461c      	mov	r4, r3
 8004518:	f04f 0500 	mov.w	r5, #0
 800451c:	4622      	mov	r2, r4
 800451e:	462b      	mov	r3, r5
 8004520:	1891      	adds	r1, r2, r2
 8004522:	6139      	str	r1, [r7, #16]
 8004524:	415b      	adcs	r3, r3
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800452c:	1912      	adds	r2, r2, r4
 800452e:	eb45 0303 	adc.w	r3, r5, r3
 8004532:	f04f 0000 	mov.w	r0, #0
 8004536:	f04f 0100 	mov.w	r1, #0
 800453a:	00d9      	lsls	r1, r3, #3
 800453c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004540:	00d0      	lsls	r0, r2, #3
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	eb12 0804 	adds.w	r8, r2, r4
 800454a:	eb43 0905 	adc.w	r9, r3, r5
 800454e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	4618      	mov	r0, r3
 8004554:	f04f 0100 	mov.w	r1, #0
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	f04f 0300 	mov.w	r3, #0
 8004560:	008b      	lsls	r3, r1, #2
 8004562:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004566:	0082      	lsls	r2, r0, #2
 8004568:	4640      	mov	r0, r8
 800456a:	4649      	mov	r1, r9
 800456c:	f7fc fb74 	bl	8000c58 <__aeabi_uldivmod>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4b49      	ldr	r3, [pc, #292]	; (800469c <UART_SetConfig+0x38c>)
 8004576:	fba3 2302 	umull	r2, r3, r3, r2
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	011e      	lsls	r6, r3, #4
 800457e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004580:	4618      	mov	r0, r3
 8004582:	f04f 0100 	mov.w	r1, #0
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	1894      	adds	r4, r2, r2
 800458c:	60bc      	str	r4, [r7, #8]
 800458e:	415b      	adcs	r3, r3
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004596:	1812      	adds	r2, r2, r0
 8004598:	eb41 0303 	adc.w	r3, r1, r3
 800459c:	f04f 0400 	mov.w	r4, #0
 80045a0:	f04f 0500 	mov.w	r5, #0
 80045a4:	00dd      	lsls	r5, r3, #3
 80045a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045aa:	00d4      	lsls	r4, r2, #3
 80045ac:	4622      	mov	r2, r4
 80045ae:	462b      	mov	r3, r5
 80045b0:	1814      	adds	r4, r2, r0
 80045b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80045b4:	414b      	adcs	r3, r1
 80045b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	4618      	mov	r0, r3
 80045be:	f04f 0100 	mov.w	r1, #0
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	f04f 0300 	mov.w	r3, #0
 80045ca:	008b      	lsls	r3, r1, #2
 80045cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045d0:	0082      	lsls	r2, r0, #2
 80045d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80045d6:	f7fc fb3f 	bl	8000c58 <__aeabi_uldivmod>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	4b2f      	ldr	r3, [pc, #188]	; (800469c <UART_SetConfig+0x38c>)
 80045e0:	fba3 1302 	umull	r1, r3, r3, r2
 80045e4:	095b      	lsrs	r3, r3, #5
 80045e6:	2164      	movs	r1, #100	; 0x64
 80045e8:	fb01 f303 	mul.w	r3, r1, r3
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	3332      	adds	r3, #50	; 0x32
 80045f2:	4a2a      	ldr	r2, [pc, #168]	; (800469c <UART_SetConfig+0x38c>)
 80045f4:	fba2 2303 	umull	r2, r3, r2, r3
 80045f8:	095b      	lsrs	r3, r3, #5
 80045fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045fe:	441e      	add	r6, r3
 8004600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004602:	4618      	mov	r0, r3
 8004604:	f04f 0100 	mov.w	r1, #0
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	1894      	adds	r4, r2, r2
 800460e:	603c      	str	r4, [r7, #0]
 8004610:	415b      	adcs	r3, r3
 8004612:	607b      	str	r3, [r7, #4]
 8004614:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004618:	1812      	adds	r2, r2, r0
 800461a:	eb41 0303 	adc.w	r3, r1, r3
 800461e:	f04f 0400 	mov.w	r4, #0
 8004622:	f04f 0500 	mov.w	r5, #0
 8004626:	00dd      	lsls	r5, r3, #3
 8004628:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800462c:	00d4      	lsls	r4, r2, #3
 800462e:	4622      	mov	r2, r4
 8004630:	462b      	mov	r3, r5
 8004632:	eb12 0a00 	adds.w	sl, r2, r0
 8004636:	eb43 0b01 	adc.w	fp, r3, r1
 800463a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	4618      	mov	r0, r3
 8004640:	f04f 0100 	mov.w	r1, #0
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	008b      	lsls	r3, r1, #2
 800464e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004652:	0082      	lsls	r2, r0, #2
 8004654:	4650      	mov	r0, sl
 8004656:	4659      	mov	r1, fp
 8004658:	f7fc fafe 	bl	8000c58 <__aeabi_uldivmod>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	4b0e      	ldr	r3, [pc, #56]	; (800469c <UART_SetConfig+0x38c>)
 8004662:	fba3 1302 	umull	r1, r3, r3, r2
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	2164      	movs	r1, #100	; 0x64
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	3332      	adds	r3, #50	; 0x32
 8004674:	4a09      	ldr	r2, [pc, #36]	; (800469c <UART_SetConfig+0x38c>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	f003 020f 	and.w	r2, r3, #15
 8004680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4432      	add	r2, r6
 8004686:	609a      	str	r2, [r3, #8]
}
 8004688:	bf00      	nop
 800468a:	377c      	adds	r7, #124	; 0x7c
 800468c:	46bd      	mov	sp, r7
 800468e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004692:	bf00      	nop
 8004694:	40011000 	.word	0x40011000
 8004698:	40011400 	.word	0x40011400
 800469c:	51eb851f 	.word	0x51eb851f

080046a0 <__errno>:
 80046a0:	4b01      	ldr	r3, [pc, #4]	; (80046a8 <__errno+0x8>)
 80046a2:	6818      	ldr	r0, [r3, #0]
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	2000000c 	.word	0x2000000c

080046ac <__libc_init_array>:
 80046ac:	b570      	push	{r4, r5, r6, lr}
 80046ae:	4d0d      	ldr	r5, [pc, #52]	; (80046e4 <__libc_init_array+0x38>)
 80046b0:	4c0d      	ldr	r4, [pc, #52]	; (80046e8 <__libc_init_array+0x3c>)
 80046b2:	1b64      	subs	r4, r4, r5
 80046b4:	10a4      	asrs	r4, r4, #2
 80046b6:	2600      	movs	r6, #0
 80046b8:	42a6      	cmp	r6, r4
 80046ba:	d109      	bne.n	80046d0 <__libc_init_array+0x24>
 80046bc:	4d0b      	ldr	r5, [pc, #44]	; (80046ec <__libc_init_array+0x40>)
 80046be:	4c0c      	ldr	r4, [pc, #48]	; (80046f0 <__libc_init_array+0x44>)
 80046c0:	f003 fb0c 	bl	8007cdc <_init>
 80046c4:	1b64      	subs	r4, r4, r5
 80046c6:	10a4      	asrs	r4, r4, #2
 80046c8:	2600      	movs	r6, #0
 80046ca:	42a6      	cmp	r6, r4
 80046cc:	d105      	bne.n	80046da <__libc_init_array+0x2e>
 80046ce:	bd70      	pop	{r4, r5, r6, pc}
 80046d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d4:	4798      	blx	r3
 80046d6:	3601      	adds	r6, #1
 80046d8:	e7ee      	b.n	80046b8 <__libc_init_array+0xc>
 80046da:	f855 3b04 	ldr.w	r3, [r5], #4
 80046de:	4798      	blx	r3
 80046e0:	3601      	adds	r6, #1
 80046e2:	e7f2      	b.n	80046ca <__libc_init_array+0x1e>
 80046e4:	08008154 	.word	0x08008154
 80046e8:	08008154 	.word	0x08008154
 80046ec:	08008154 	.word	0x08008154
 80046f0:	08008158 	.word	0x08008158

080046f4 <memset>:
 80046f4:	4402      	add	r2, r0
 80046f6:	4603      	mov	r3, r0
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d100      	bne.n	80046fe <memset+0xa>
 80046fc:	4770      	bx	lr
 80046fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004702:	e7f9      	b.n	80046f8 <memset+0x4>

08004704 <__cvt>:
 8004704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004708:	ec55 4b10 	vmov	r4, r5, d0
 800470c:	2d00      	cmp	r5, #0
 800470e:	460e      	mov	r6, r1
 8004710:	4619      	mov	r1, r3
 8004712:	462b      	mov	r3, r5
 8004714:	bfbb      	ittet	lt
 8004716:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800471a:	461d      	movlt	r5, r3
 800471c:	2300      	movge	r3, #0
 800471e:	232d      	movlt	r3, #45	; 0x2d
 8004720:	700b      	strb	r3, [r1, #0]
 8004722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004724:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004728:	4691      	mov	r9, r2
 800472a:	f023 0820 	bic.w	r8, r3, #32
 800472e:	bfbc      	itt	lt
 8004730:	4622      	movlt	r2, r4
 8004732:	4614      	movlt	r4, r2
 8004734:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004738:	d005      	beq.n	8004746 <__cvt+0x42>
 800473a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800473e:	d100      	bne.n	8004742 <__cvt+0x3e>
 8004740:	3601      	adds	r6, #1
 8004742:	2102      	movs	r1, #2
 8004744:	e000      	b.n	8004748 <__cvt+0x44>
 8004746:	2103      	movs	r1, #3
 8004748:	ab03      	add	r3, sp, #12
 800474a:	9301      	str	r3, [sp, #4]
 800474c:	ab02      	add	r3, sp, #8
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	ec45 4b10 	vmov	d0, r4, r5
 8004754:	4653      	mov	r3, sl
 8004756:	4632      	mov	r2, r6
 8004758:	f000 fcfe 	bl	8005158 <_dtoa_r>
 800475c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004760:	4607      	mov	r7, r0
 8004762:	d102      	bne.n	800476a <__cvt+0x66>
 8004764:	f019 0f01 	tst.w	r9, #1
 8004768:	d022      	beq.n	80047b0 <__cvt+0xac>
 800476a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800476e:	eb07 0906 	add.w	r9, r7, r6
 8004772:	d110      	bne.n	8004796 <__cvt+0x92>
 8004774:	783b      	ldrb	r3, [r7, #0]
 8004776:	2b30      	cmp	r3, #48	; 0x30
 8004778:	d10a      	bne.n	8004790 <__cvt+0x8c>
 800477a:	2200      	movs	r2, #0
 800477c:	2300      	movs	r3, #0
 800477e:	4620      	mov	r0, r4
 8004780:	4629      	mov	r1, r5
 8004782:	f7fc f9a9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004786:	b918      	cbnz	r0, 8004790 <__cvt+0x8c>
 8004788:	f1c6 0601 	rsb	r6, r6, #1
 800478c:	f8ca 6000 	str.w	r6, [sl]
 8004790:	f8da 3000 	ldr.w	r3, [sl]
 8004794:	4499      	add	r9, r3
 8004796:	2200      	movs	r2, #0
 8004798:	2300      	movs	r3, #0
 800479a:	4620      	mov	r0, r4
 800479c:	4629      	mov	r1, r5
 800479e:	f7fc f99b 	bl	8000ad8 <__aeabi_dcmpeq>
 80047a2:	b108      	cbz	r0, 80047a8 <__cvt+0xa4>
 80047a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80047a8:	2230      	movs	r2, #48	; 0x30
 80047aa:	9b03      	ldr	r3, [sp, #12]
 80047ac:	454b      	cmp	r3, r9
 80047ae:	d307      	bcc.n	80047c0 <__cvt+0xbc>
 80047b0:	9b03      	ldr	r3, [sp, #12]
 80047b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047b4:	1bdb      	subs	r3, r3, r7
 80047b6:	4638      	mov	r0, r7
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	b004      	add	sp, #16
 80047bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047c0:	1c59      	adds	r1, r3, #1
 80047c2:	9103      	str	r1, [sp, #12]
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	e7f0      	b.n	80047aa <__cvt+0xa6>

080047c8 <__exponent>:
 80047c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047ca:	4603      	mov	r3, r0
 80047cc:	2900      	cmp	r1, #0
 80047ce:	bfb8      	it	lt
 80047d0:	4249      	neglt	r1, r1
 80047d2:	f803 2b02 	strb.w	r2, [r3], #2
 80047d6:	bfb4      	ite	lt
 80047d8:	222d      	movlt	r2, #45	; 0x2d
 80047da:	222b      	movge	r2, #43	; 0x2b
 80047dc:	2909      	cmp	r1, #9
 80047de:	7042      	strb	r2, [r0, #1]
 80047e0:	dd2a      	ble.n	8004838 <__exponent+0x70>
 80047e2:	f10d 0407 	add.w	r4, sp, #7
 80047e6:	46a4      	mov	ip, r4
 80047e8:	270a      	movs	r7, #10
 80047ea:	46a6      	mov	lr, r4
 80047ec:	460a      	mov	r2, r1
 80047ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80047f2:	fb07 1516 	mls	r5, r7, r6, r1
 80047f6:	3530      	adds	r5, #48	; 0x30
 80047f8:	2a63      	cmp	r2, #99	; 0x63
 80047fa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80047fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004802:	4631      	mov	r1, r6
 8004804:	dcf1      	bgt.n	80047ea <__exponent+0x22>
 8004806:	3130      	adds	r1, #48	; 0x30
 8004808:	f1ae 0502 	sub.w	r5, lr, #2
 800480c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004810:	1c44      	adds	r4, r0, #1
 8004812:	4629      	mov	r1, r5
 8004814:	4561      	cmp	r1, ip
 8004816:	d30a      	bcc.n	800482e <__exponent+0x66>
 8004818:	f10d 0209 	add.w	r2, sp, #9
 800481c:	eba2 020e 	sub.w	r2, r2, lr
 8004820:	4565      	cmp	r5, ip
 8004822:	bf88      	it	hi
 8004824:	2200      	movhi	r2, #0
 8004826:	4413      	add	r3, r2
 8004828:	1a18      	subs	r0, r3, r0
 800482a:	b003      	add	sp, #12
 800482c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800482e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004832:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004836:	e7ed      	b.n	8004814 <__exponent+0x4c>
 8004838:	2330      	movs	r3, #48	; 0x30
 800483a:	3130      	adds	r1, #48	; 0x30
 800483c:	7083      	strb	r3, [r0, #2]
 800483e:	70c1      	strb	r1, [r0, #3]
 8004840:	1d03      	adds	r3, r0, #4
 8004842:	e7f1      	b.n	8004828 <__exponent+0x60>

08004844 <_printf_float>:
 8004844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004848:	ed2d 8b02 	vpush	{d8}
 800484c:	b08d      	sub	sp, #52	; 0x34
 800484e:	460c      	mov	r4, r1
 8004850:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004854:	4616      	mov	r6, r2
 8004856:	461f      	mov	r7, r3
 8004858:	4605      	mov	r5, r0
 800485a:	f001 fa69 	bl	8005d30 <_localeconv_r>
 800485e:	f8d0 a000 	ldr.w	sl, [r0]
 8004862:	4650      	mov	r0, sl
 8004864:	f7fb fcbc 	bl	80001e0 <strlen>
 8004868:	2300      	movs	r3, #0
 800486a:	930a      	str	r3, [sp, #40]	; 0x28
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	9305      	str	r3, [sp, #20]
 8004870:	f8d8 3000 	ldr.w	r3, [r8]
 8004874:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004878:	3307      	adds	r3, #7
 800487a:	f023 0307 	bic.w	r3, r3, #7
 800487e:	f103 0208 	add.w	r2, r3, #8
 8004882:	f8c8 2000 	str.w	r2, [r8]
 8004886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800488e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004892:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004896:	9307      	str	r3, [sp, #28]
 8004898:	f8cd 8018 	str.w	r8, [sp, #24]
 800489c:	ee08 0a10 	vmov	s16, r0
 80048a0:	4b9f      	ldr	r3, [pc, #636]	; (8004b20 <_printf_float+0x2dc>)
 80048a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048aa:	f7fc f947 	bl	8000b3c <__aeabi_dcmpun>
 80048ae:	bb88      	cbnz	r0, 8004914 <_printf_float+0xd0>
 80048b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048b4:	4b9a      	ldr	r3, [pc, #616]	; (8004b20 <_printf_float+0x2dc>)
 80048b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048ba:	f7fc f921 	bl	8000b00 <__aeabi_dcmple>
 80048be:	bb48      	cbnz	r0, 8004914 <_printf_float+0xd0>
 80048c0:	2200      	movs	r2, #0
 80048c2:	2300      	movs	r3, #0
 80048c4:	4640      	mov	r0, r8
 80048c6:	4649      	mov	r1, r9
 80048c8:	f7fc f910 	bl	8000aec <__aeabi_dcmplt>
 80048cc:	b110      	cbz	r0, 80048d4 <_printf_float+0x90>
 80048ce:	232d      	movs	r3, #45	; 0x2d
 80048d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048d4:	4b93      	ldr	r3, [pc, #588]	; (8004b24 <_printf_float+0x2e0>)
 80048d6:	4894      	ldr	r0, [pc, #592]	; (8004b28 <_printf_float+0x2e4>)
 80048d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80048dc:	bf94      	ite	ls
 80048de:	4698      	movls	r8, r3
 80048e0:	4680      	movhi	r8, r0
 80048e2:	2303      	movs	r3, #3
 80048e4:	6123      	str	r3, [r4, #16]
 80048e6:	9b05      	ldr	r3, [sp, #20]
 80048e8:	f023 0204 	bic.w	r2, r3, #4
 80048ec:	6022      	str	r2, [r4, #0]
 80048ee:	f04f 0900 	mov.w	r9, #0
 80048f2:	9700      	str	r7, [sp, #0]
 80048f4:	4633      	mov	r3, r6
 80048f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80048f8:	4621      	mov	r1, r4
 80048fa:	4628      	mov	r0, r5
 80048fc:	f000 f9d8 	bl	8004cb0 <_printf_common>
 8004900:	3001      	adds	r0, #1
 8004902:	f040 8090 	bne.w	8004a26 <_printf_float+0x1e2>
 8004906:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800490a:	b00d      	add	sp, #52	; 0x34
 800490c:	ecbd 8b02 	vpop	{d8}
 8004910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004914:	4642      	mov	r2, r8
 8004916:	464b      	mov	r3, r9
 8004918:	4640      	mov	r0, r8
 800491a:	4649      	mov	r1, r9
 800491c:	f7fc f90e 	bl	8000b3c <__aeabi_dcmpun>
 8004920:	b140      	cbz	r0, 8004934 <_printf_float+0xf0>
 8004922:	464b      	mov	r3, r9
 8004924:	2b00      	cmp	r3, #0
 8004926:	bfbc      	itt	lt
 8004928:	232d      	movlt	r3, #45	; 0x2d
 800492a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800492e:	487f      	ldr	r0, [pc, #508]	; (8004b2c <_printf_float+0x2e8>)
 8004930:	4b7f      	ldr	r3, [pc, #508]	; (8004b30 <_printf_float+0x2ec>)
 8004932:	e7d1      	b.n	80048d8 <_printf_float+0x94>
 8004934:	6863      	ldr	r3, [r4, #4]
 8004936:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800493a:	9206      	str	r2, [sp, #24]
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	d13f      	bne.n	80049c0 <_printf_float+0x17c>
 8004940:	2306      	movs	r3, #6
 8004942:	6063      	str	r3, [r4, #4]
 8004944:	9b05      	ldr	r3, [sp, #20]
 8004946:	6861      	ldr	r1, [r4, #4]
 8004948:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800494c:	2300      	movs	r3, #0
 800494e:	9303      	str	r3, [sp, #12]
 8004950:	ab0a      	add	r3, sp, #40	; 0x28
 8004952:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004956:	ab09      	add	r3, sp, #36	; 0x24
 8004958:	ec49 8b10 	vmov	d0, r8, r9
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	6022      	str	r2, [r4, #0]
 8004960:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004964:	4628      	mov	r0, r5
 8004966:	f7ff fecd 	bl	8004704 <__cvt>
 800496a:	9b06      	ldr	r3, [sp, #24]
 800496c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800496e:	2b47      	cmp	r3, #71	; 0x47
 8004970:	4680      	mov	r8, r0
 8004972:	d108      	bne.n	8004986 <_printf_float+0x142>
 8004974:	1cc8      	adds	r0, r1, #3
 8004976:	db02      	blt.n	800497e <_printf_float+0x13a>
 8004978:	6863      	ldr	r3, [r4, #4]
 800497a:	4299      	cmp	r1, r3
 800497c:	dd41      	ble.n	8004a02 <_printf_float+0x1be>
 800497e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004982:	fa5f fb8b 	uxtb.w	fp, fp
 8004986:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800498a:	d820      	bhi.n	80049ce <_printf_float+0x18a>
 800498c:	3901      	subs	r1, #1
 800498e:	465a      	mov	r2, fp
 8004990:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004994:	9109      	str	r1, [sp, #36]	; 0x24
 8004996:	f7ff ff17 	bl	80047c8 <__exponent>
 800499a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800499c:	1813      	adds	r3, r2, r0
 800499e:	2a01      	cmp	r2, #1
 80049a0:	4681      	mov	r9, r0
 80049a2:	6123      	str	r3, [r4, #16]
 80049a4:	dc02      	bgt.n	80049ac <_printf_float+0x168>
 80049a6:	6822      	ldr	r2, [r4, #0]
 80049a8:	07d2      	lsls	r2, r2, #31
 80049aa:	d501      	bpl.n	80049b0 <_printf_float+0x16c>
 80049ac:	3301      	adds	r3, #1
 80049ae:	6123      	str	r3, [r4, #16]
 80049b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d09c      	beq.n	80048f2 <_printf_float+0xae>
 80049b8:	232d      	movs	r3, #45	; 0x2d
 80049ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049be:	e798      	b.n	80048f2 <_printf_float+0xae>
 80049c0:	9a06      	ldr	r2, [sp, #24]
 80049c2:	2a47      	cmp	r2, #71	; 0x47
 80049c4:	d1be      	bne.n	8004944 <_printf_float+0x100>
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1bc      	bne.n	8004944 <_printf_float+0x100>
 80049ca:	2301      	movs	r3, #1
 80049cc:	e7b9      	b.n	8004942 <_printf_float+0xfe>
 80049ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80049d2:	d118      	bne.n	8004a06 <_printf_float+0x1c2>
 80049d4:	2900      	cmp	r1, #0
 80049d6:	6863      	ldr	r3, [r4, #4]
 80049d8:	dd0b      	ble.n	80049f2 <_printf_float+0x1ae>
 80049da:	6121      	str	r1, [r4, #16]
 80049dc:	b913      	cbnz	r3, 80049e4 <_printf_float+0x1a0>
 80049de:	6822      	ldr	r2, [r4, #0]
 80049e0:	07d0      	lsls	r0, r2, #31
 80049e2:	d502      	bpl.n	80049ea <_printf_float+0x1a6>
 80049e4:	3301      	adds	r3, #1
 80049e6:	440b      	add	r3, r1
 80049e8:	6123      	str	r3, [r4, #16]
 80049ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80049ec:	f04f 0900 	mov.w	r9, #0
 80049f0:	e7de      	b.n	80049b0 <_printf_float+0x16c>
 80049f2:	b913      	cbnz	r3, 80049fa <_printf_float+0x1b6>
 80049f4:	6822      	ldr	r2, [r4, #0]
 80049f6:	07d2      	lsls	r2, r2, #31
 80049f8:	d501      	bpl.n	80049fe <_printf_float+0x1ba>
 80049fa:	3302      	adds	r3, #2
 80049fc:	e7f4      	b.n	80049e8 <_printf_float+0x1a4>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e7f2      	b.n	80049e8 <_printf_float+0x1a4>
 8004a02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a08:	4299      	cmp	r1, r3
 8004a0a:	db05      	blt.n	8004a18 <_printf_float+0x1d4>
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	6121      	str	r1, [r4, #16]
 8004a10:	07d8      	lsls	r0, r3, #31
 8004a12:	d5ea      	bpl.n	80049ea <_printf_float+0x1a6>
 8004a14:	1c4b      	adds	r3, r1, #1
 8004a16:	e7e7      	b.n	80049e8 <_printf_float+0x1a4>
 8004a18:	2900      	cmp	r1, #0
 8004a1a:	bfd4      	ite	le
 8004a1c:	f1c1 0202 	rsble	r2, r1, #2
 8004a20:	2201      	movgt	r2, #1
 8004a22:	4413      	add	r3, r2
 8004a24:	e7e0      	b.n	80049e8 <_printf_float+0x1a4>
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	055a      	lsls	r2, r3, #21
 8004a2a:	d407      	bmi.n	8004a3c <_printf_float+0x1f8>
 8004a2c:	6923      	ldr	r3, [r4, #16]
 8004a2e:	4642      	mov	r2, r8
 8004a30:	4631      	mov	r1, r6
 8004a32:	4628      	mov	r0, r5
 8004a34:	47b8      	blx	r7
 8004a36:	3001      	adds	r0, #1
 8004a38:	d12c      	bne.n	8004a94 <_printf_float+0x250>
 8004a3a:	e764      	b.n	8004906 <_printf_float+0xc2>
 8004a3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a40:	f240 80e0 	bls.w	8004c04 <_printf_float+0x3c0>
 8004a44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f7fc f844 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d034      	beq.n	8004abe <_printf_float+0x27a>
 8004a54:	4a37      	ldr	r2, [pc, #220]	; (8004b34 <_printf_float+0x2f0>)
 8004a56:	2301      	movs	r3, #1
 8004a58:	4631      	mov	r1, r6
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	47b8      	blx	r7
 8004a5e:	3001      	adds	r0, #1
 8004a60:	f43f af51 	beq.w	8004906 <_printf_float+0xc2>
 8004a64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	db02      	blt.n	8004a72 <_printf_float+0x22e>
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	07d8      	lsls	r0, r3, #31
 8004a70:	d510      	bpl.n	8004a94 <_printf_float+0x250>
 8004a72:	ee18 3a10 	vmov	r3, s16
 8004a76:	4652      	mov	r2, sl
 8004a78:	4631      	mov	r1, r6
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	47b8      	blx	r7
 8004a7e:	3001      	adds	r0, #1
 8004a80:	f43f af41 	beq.w	8004906 <_printf_float+0xc2>
 8004a84:	f04f 0800 	mov.w	r8, #0
 8004a88:	f104 091a 	add.w	r9, r4, #26
 8004a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	4543      	cmp	r3, r8
 8004a92:	dc09      	bgt.n	8004aa8 <_printf_float+0x264>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	079b      	lsls	r3, r3, #30
 8004a98:	f100 8105 	bmi.w	8004ca6 <_printf_float+0x462>
 8004a9c:	68e0      	ldr	r0, [r4, #12]
 8004a9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004aa0:	4298      	cmp	r0, r3
 8004aa2:	bfb8      	it	lt
 8004aa4:	4618      	movlt	r0, r3
 8004aa6:	e730      	b.n	800490a <_printf_float+0xc6>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	464a      	mov	r2, r9
 8004aac:	4631      	mov	r1, r6
 8004aae:	4628      	mov	r0, r5
 8004ab0:	47b8      	blx	r7
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	f43f af27 	beq.w	8004906 <_printf_float+0xc2>
 8004ab8:	f108 0801 	add.w	r8, r8, #1
 8004abc:	e7e6      	b.n	8004a8c <_printf_float+0x248>
 8004abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	dc39      	bgt.n	8004b38 <_printf_float+0x2f4>
 8004ac4:	4a1b      	ldr	r2, [pc, #108]	; (8004b34 <_printf_float+0x2f0>)
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	4631      	mov	r1, r6
 8004aca:	4628      	mov	r0, r5
 8004acc:	47b8      	blx	r7
 8004ace:	3001      	adds	r0, #1
 8004ad0:	f43f af19 	beq.w	8004906 <_printf_float+0xc2>
 8004ad4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	d102      	bne.n	8004ae2 <_printf_float+0x29e>
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	07d9      	lsls	r1, r3, #31
 8004ae0:	d5d8      	bpl.n	8004a94 <_printf_float+0x250>
 8004ae2:	ee18 3a10 	vmov	r3, s16
 8004ae6:	4652      	mov	r2, sl
 8004ae8:	4631      	mov	r1, r6
 8004aea:	4628      	mov	r0, r5
 8004aec:	47b8      	blx	r7
 8004aee:	3001      	adds	r0, #1
 8004af0:	f43f af09 	beq.w	8004906 <_printf_float+0xc2>
 8004af4:	f04f 0900 	mov.w	r9, #0
 8004af8:	f104 0a1a 	add.w	sl, r4, #26
 8004afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004afe:	425b      	negs	r3, r3
 8004b00:	454b      	cmp	r3, r9
 8004b02:	dc01      	bgt.n	8004b08 <_printf_float+0x2c4>
 8004b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b06:	e792      	b.n	8004a2e <_printf_float+0x1ea>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	4652      	mov	r2, sl
 8004b0c:	4631      	mov	r1, r6
 8004b0e:	4628      	mov	r0, r5
 8004b10:	47b8      	blx	r7
 8004b12:	3001      	adds	r0, #1
 8004b14:	f43f aef7 	beq.w	8004906 <_printf_float+0xc2>
 8004b18:	f109 0901 	add.w	r9, r9, #1
 8004b1c:	e7ee      	b.n	8004afc <_printf_float+0x2b8>
 8004b1e:	bf00      	nop
 8004b20:	7fefffff 	.word	0x7fefffff
 8004b24:	08007d50 	.word	0x08007d50
 8004b28:	08007d54 	.word	0x08007d54
 8004b2c:	08007d5c 	.word	0x08007d5c
 8004b30:	08007d58 	.word	0x08007d58
 8004b34:	08007d60 	.word	0x08007d60
 8004b38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	bfa8      	it	ge
 8004b40:	461a      	movge	r2, r3
 8004b42:	2a00      	cmp	r2, #0
 8004b44:	4691      	mov	r9, r2
 8004b46:	dc37      	bgt.n	8004bb8 <_printf_float+0x374>
 8004b48:	f04f 0b00 	mov.w	fp, #0
 8004b4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b50:	f104 021a 	add.w	r2, r4, #26
 8004b54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b56:	9305      	str	r3, [sp, #20]
 8004b58:	eba3 0309 	sub.w	r3, r3, r9
 8004b5c:	455b      	cmp	r3, fp
 8004b5e:	dc33      	bgt.n	8004bc8 <_printf_float+0x384>
 8004b60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b64:	429a      	cmp	r2, r3
 8004b66:	db3b      	blt.n	8004be0 <_printf_float+0x39c>
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	07da      	lsls	r2, r3, #31
 8004b6c:	d438      	bmi.n	8004be0 <_printf_float+0x39c>
 8004b6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b70:	9b05      	ldr	r3, [sp, #20]
 8004b72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	eba2 0901 	sub.w	r9, r2, r1
 8004b7a:	4599      	cmp	r9, r3
 8004b7c:	bfa8      	it	ge
 8004b7e:	4699      	movge	r9, r3
 8004b80:	f1b9 0f00 	cmp.w	r9, #0
 8004b84:	dc35      	bgt.n	8004bf2 <_printf_float+0x3ae>
 8004b86:	f04f 0800 	mov.w	r8, #0
 8004b8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b8e:	f104 0a1a 	add.w	sl, r4, #26
 8004b92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b96:	1a9b      	subs	r3, r3, r2
 8004b98:	eba3 0309 	sub.w	r3, r3, r9
 8004b9c:	4543      	cmp	r3, r8
 8004b9e:	f77f af79 	ble.w	8004a94 <_printf_float+0x250>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	4652      	mov	r2, sl
 8004ba6:	4631      	mov	r1, r6
 8004ba8:	4628      	mov	r0, r5
 8004baa:	47b8      	blx	r7
 8004bac:	3001      	adds	r0, #1
 8004bae:	f43f aeaa 	beq.w	8004906 <_printf_float+0xc2>
 8004bb2:	f108 0801 	add.w	r8, r8, #1
 8004bb6:	e7ec      	b.n	8004b92 <_printf_float+0x34e>
 8004bb8:	4613      	mov	r3, r2
 8004bba:	4631      	mov	r1, r6
 8004bbc:	4642      	mov	r2, r8
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	47b8      	blx	r7
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	d1c0      	bne.n	8004b48 <_printf_float+0x304>
 8004bc6:	e69e      	b.n	8004906 <_printf_float+0xc2>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	4631      	mov	r1, r6
 8004bcc:	4628      	mov	r0, r5
 8004bce:	9205      	str	r2, [sp, #20]
 8004bd0:	47b8      	blx	r7
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	f43f ae97 	beq.w	8004906 <_printf_float+0xc2>
 8004bd8:	9a05      	ldr	r2, [sp, #20]
 8004bda:	f10b 0b01 	add.w	fp, fp, #1
 8004bde:	e7b9      	b.n	8004b54 <_printf_float+0x310>
 8004be0:	ee18 3a10 	vmov	r3, s16
 8004be4:	4652      	mov	r2, sl
 8004be6:	4631      	mov	r1, r6
 8004be8:	4628      	mov	r0, r5
 8004bea:	47b8      	blx	r7
 8004bec:	3001      	adds	r0, #1
 8004bee:	d1be      	bne.n	8004b6e <_printf_float+0x32a>
 8004bf0:	e689      	b.n	8004906 <_printf_float+0xc2>
 8004bf2:	9a05      	ldr	r2, [sp, #20]
 8004bf4:	464b      	mov	r3, r9
 8004bf6:	4442      	add	r2, r8
 8004bf8:	4631      	mov	r1, r6
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	47b8      	blx	r7
 8004bfe:	3001      	adds	r0, #1
 8004c00:	d1c1      	bne.n	8004b86 <_printf_float+0x342>
 8004c02:	e680      	b.n	8004906 <_printf_float+0xc2>
 8004c04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c06:	2a01      	cmp	r2, #1
 8004c08:	dc01      	bgt.n	8004c0e <_printf_float+0x3ca>
 8004c0a:	07db      	lsls	r3, r3, #31
 8004c0c:	d538      	bpl.n	8004c80 <_printf_float+0x43c>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	4642      	mov	r2, r8
 8004c12:	4631      	mov	r1, r6
 8004c14:	4628      	mov	r0, r5
 8004c16:	47b8      	blx	r7
 8004c18:	3001      	adds	r0, #1
 8004c1a:	f43f ae74 	beq.w	8004906 <_printf_float+0xc2>
 8004c1e:	ee18 3a10 	vmov	r3, s16
 8004c22:	4652      	mov	r2, sl
 8004c24:	4631      	mov	r1, r6
 8004c26:	4628      	mov	r0, r5
 8004c28:	47b8      	blx	r7
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	f43f ae6b 	beq.w	8004906 <_printf_float+0xc2>
 8004c30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c34:	2200      	movs	r2, #0
 8004c36:	2300      	movs	r3, #0
 8004c38:	f7fb ff4e 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c3c:	b9d8      	cbnz	r0, 8004c76 <_printf_float+0x432>
 8004c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c40:	f108 0201 	add.w	r2, r8, #1
 8004c44:	3b01      	subs	r3, #1
 8004c46:	4631      	mov	r1, r6
 8004c48:	4628      	mov	r0, r5
 8004c4a:	47b8      	blx	r7
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	d10e      	bne.n	8004c6e <_printf_float+0x42a>
 8004c50:	e659      	b.n	8004906 <_printf_float+0xc2>
 8004c52:	2301      	movs	r3, #1
 8004c54:	4652      	mov	r2, sl
 8004c56:	4631      	mov	r1, r6
 8004c58:	4628      	mov	r0, r5
 8004c5a:	47b8      	blx	r7
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	f43f ae52 	beq.w	8004906 <_printf_float+0xc2>
 8004c62:	f108 0801 	add.w	r8, r8, #1
 8004c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	4543      	cmp	r3, r8
 8004c6c:	dcf1      	bgt.n	8004c52 <_printf_float+0x40e>
 8004c6e:	464b      	mov	r3, r9
 8004c70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c74:	e6dc      	b.n	8004a30 <_printf_float+0x1ec>
 8004c76:	f04f 0800 	mov.w	r8, #0
 8004c7a:	f104 0a1a 	add.w	sl, r4, #26
 8004c7e:	e7f2      	b.n	8004c66 <_printf_float+0x422>
 8004c80:	2301      	movs	r3, #1
 8004c82:	4642      	mov	r2, r8
 8004c84:	e7df      	b.n	8004c46 <_printf_float+0x402>
 8004c86:	2301      	movs	r3, #1
 8004c88:	464a      	mov	r2, r9
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	47b8      	blx	r7
 8004c90:	3001      	adds	r0, #1
 8004c92:	f43f ae38 	beq.w	8004906 <_printf_float+0xc2>
 8004c96:	f108 0801 	add.w	r8, r8, #1
 8004c9a:	68e3      	ldr	r3, [r4, #12]
 8004c9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c9e:	1a5b      	subs	r3, r3, r1
 8004ca0:	4543      	cmp	r3, r8
 8004ca2:	dcf0      	bgt.n	8004c86 <_printf_float+0x442>
 8004ca4:	e6fa      	b.n	8004a9c <_printf_float+0x258>
 8004ca6:	f04f 0800 	mov.w	r8, #0
 8004caa:	f104 0919 	add.w	r9, r4, #25
 8004cae:	e7f4      	b.n	8004c9a <_printf_float+0x456>

08004cb0 <_printf_common>:
 8004cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb4:	4616      	mov	r6, r2
 8004cb6:	4699      	mov	r9, r3
 8004cb8:	688a      	ldr	r2, [r1, #8]
 8004cba:	690b      	ldr	r3, [r1, #16]
 8004cbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	bfb8      	it	lt
 8004cc4:	4613      	movlt	r3, r2
 8004cc6:	6033      	str	r3, [r6, #0]
 8004cc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ccc:	4607      	mov	r7, r0
 8004cce:	460c      	mov	r4, r1
 8004cd0:	b10a      	cbz	r2, 8004cd6 <_printf_common+0x26>
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	6033      	str	r3, [r6, #0]
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	0699      	lsls	r1, r3, #26
 8004cda:	bf42      	ittt	mi
 8004cdc:	6833      	ldrmi	r3, [r6, #0]
 8004cde:	3302      	addmi	r3, #2
 8004ce0:	6033      	strmi	r3, [r6, #0]
 8004ce2:	6825      	ldr	r5, [r4, #0]
 8004ce4:	f015 0506 	ands.w	r5, r5, #6
 8004ce8:	d106      	bne.n	8004cf8 <_printf_common+0x48>
 8004cea:	f104 0a19 	add.w	sl, r4, #25
 8004cee:	68e3      	ldr	r3, [r4, #12]
 8004cf0:	6832      	ldr	r2, [r6, #0]
 8004cf2:	1a9b      	subs	r3, r3, r2
 8004cf4:	42ab      	cmp	r3, r5
 8004cf6:	dc26      	bgt.n	8004d46 <_printf_common+0x96>
 8004cf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cfc:	1e13      	subs	r3, r2, #0
 8004cfe:	6822      	ldr	r2, [r4, #0]
 8004d00:	bf18      	it	ne
 8004d02:	2301      	movne	r3, #1
 8004d04:	0692      	lsls	r2, r2, #26
 8004d06:	d42b      	bmi.n	8004d60 <_printf_common+0xb0>
 8004d08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d0c:	4649      	mov	r1, r9
 8004d0e:	4638      	mov	r0, r7
 8004d10:	47c0      	blx	r8
 8004d12:	3001      	adds	r0, #1
 8004d14:	d01e      	beq.n	8004d54 <_printf_common+0xa4>
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	68e5      	ldr	r5, [r4, #12]
 8004d1a:	6832      	ldr	r2, [r6, #0]
 8004d1c:	f003 0306 	and.w	r3, r3, #6
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	bf08      	it	eq
 8004d24:	1aad      	subeq	r5, r5, r2
 8004d26:	68a3      	ldr	r3, [r4, #8]
 8004d28:	6922      	ldr	r2, [r4, #16]
 8004d2a:	bf0c      	ite	eq
 8004d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d30:	2500      	movne	r5, #0
 8004d32:	4293      	cmp	r3, r2
 8004d34:	bfc4      	itt	gt
 8004d36:	1a9b      	subgt	r3, r3, r2
 8004d38:	18ed      	addgt	r5, r5, r3
 8004d3a:	2600      	movs	r6, #0
 8004d3c:	341a      	adds	r4, #26
 8004d3e:	42b5      	cmp	r5, r6
 8004d40:	d11a      	bne.n	8004d78 <_printf_common+0xc8>
 8004d42:	2000      	movs	r0, #0
 8004d44:	e008      	b.n	8004d58 <_printf_common+0xa8>
 8004d46:	2301      	movs	r3, #1
 8004d48:	4652      	mov	r2, sl
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	4638      	mov	r0, r7
 8004d4e:	47c0      	blx	r8
 8004d50:	3001      	adds	r0, #1
 8004d52:	d103      	bne.n	8004d5c <_printf_common+0xac>
 8004d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d5c:	3501      	adds	r5, #1
 8004d5e:	e7c6      	b.n	8004cee <_printf_common+0x3e>
 8004d60:	18e1      	adds	r1, r4, r3
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	2030      	movs	r0, #48	; 0x30
 8004d66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d6a:	4422      	add	r2, r4
 8004d6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d74:	3302      	adds	r3, #2
 8004d76:	e7c7      	b.n	8004d08 <_printf_common+0x58>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	4622      	mov	r2, r4
 8004d7c:	4649      	mov	r1, r9
 8004d7e:	4638      	mov	r0, r7
 8004d80:	47c0      	blx	r8
 8004d82:	3001      	adds	r0, #1
 8004d84:	d0e6      	beq.n	8004d54 <_printf_common+0xa4>
 8004d86:	3601      	adds	r6, #1
 8004d88:	e7d9      	b.n	8004d3e <_printf_common+0x8e>
	...

08004d8c <_printf_i>:
 8004d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d90:	460c      	mov	r4, r1
 8004d92:	4691      	mov	r9, r2
 8004d94:	7e27      	ldrb	r7, [r4, #24]
 8004d96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004d98:	2f78      	cmp	r7, #120	; 0x78
 8004d9a:	4680      	mov	r8, r0
 8004d9c:	469a      	mov	sl, r3
 8004d9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004da2:	d807      	bhi.n	8004db4 <_printf_i+0x28>
 8004da4:	2f62      	cmp	r7, #98	; 0x62
 8004da6:	d80a      	bhi.n	8004dbe <_printf_i+0x32>
 8004da8:	2f00      	cmp	r7, #0
 8004daa:	f000 80d8 	beq.w	8004f5e <_printf_i+0x1d2>
 8004dae:	2f58      	cmp	r7, #88	; 0x58
 8004db0:	f000 80a3 	beq.w	8004efa <_printf_i+0x16e>
 8004db4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004db8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004dbc:	e03a      	b.n	8004e34 <_printf_i+0xa8>
 8004dbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004dc2:	2b15      	cmp	r3, #21
 8004dc4:	d8f6      	bhi.n	8004db4 <_printf_i+0x28>
 8004dc6:	a001      	add	r0, pc, #4	; (adr r0, 8004dcc <_printf_i+0x40>)
 8004dc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004dcc:	08004e25 	.word	0x08004e25
 8004dd0:	08004e39 	.word	0x08004e39
 8004dd4:	08004db5 	.word	0x08004db5
 8004dd8:	08004db5 	.word	0x08004db5
 8004ddc:	08004db5 	.word	0x08004db5
 8004de0:	08004db5 	.word	0x08004db5
 8004de4:	08004e39 	.word	0x08004e39
 8004de8:	08004db5 	.word	0x08004db5
 8004dec:	08004db5 	.word	0x08004db5
 8004df0:	08004db5 	.word	0x08004db5
 8004df4:	08004db5 	.word	0x08004db5
 8004df8:	08004f45 	.word	0x08004f45
 8004dfc:	08004e69 	.word	0x08004e69
 8004e00:	08004f27 	.word	0x08004f27
 8004e04:	08004db5 	.word	0x08004db5
 8004e08:	08004db5 	.word	0x08004db5
 8004e0c:	08004f67 	.word	0x08004f67
 8004e10:	08004db5 	.word	0x08004db5
 8004e14:	08004e69 	.word	0x08004e69
 8004e18:	08004db5 	.word	0x08004db5
 8004e1c:	08004db5 	.word	0x08004db5
 8004e20:	08004f2f 	.word	0x08004f2f
 8004e24:	680b      	ldr	r3, [r1, #0]
 8004e26:	1d1a      	adds	r2, r3, #4
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	600a      	str	r2, [r1, #0]
 8004e2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e34:	2301      	movs	r3, #1
 8004e36:	e0a3      	b.n	8004f80 <_printf_i+0x1f4>
 8004e38:	6825      	ldr	r5, [r4, #0]
 8004e3a:	6808      	ldr	r0, [r1, #0]
 8004e3c:	062e      	lsls	r6, r5, #24
 8004e3e:	f100 0304 	add.w	r3, r0, #4
 8004e42:	d50a      	bpl.n	8004e5a <_printf_i+0xce>
 8004e44:	6805      	ldr	r5, [r0, #0]
 8004e46:	600b      	str	r3, [r1, #0]
 8004e48:	2d00      	cmp	r5, #0
 8004e4a:	da03      	bge.n	8004e54 <_printf_i+0xc8>
 8004e4c:	232d      	movs	r3, #45	; 0x2d
 8004e4e:	426d      	negs	r5, r5
 8004e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e54:	485e      	ldr	r0, [pc, #376]	; (8004fd0 <_printf_i+0x244>)
 8004e56:	230a      	movs	r3, #10
 8004e58:	e019      	b.n	8004e8e <_printf_i+0x102>
 8004e5a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004e5e:	6805      	ldr	r5, [r0, #0]
 8004e60:	600b      	str	r3, [r1, #0]
 8004e62:	bf18      	it	ne
 8004e64:	b22d      	sxthne	r5, r5
 8004e66:	e7ef      	b.n	8004e48 <_printf_i+0xbc>
 8004e68:	680b      	ldr	r3, [r1, #0]
 8004e6a:	6825      	ldr	r5, [r4, #0]
 8004e6c:	1d18      	adds	r0, r3, #4
 8004e6e:	6008      	str	r0, [r1, #0]
 8004e70:	0628      	lsls	r0, r5, #24
 8004e72:	d501      	bpl.n	8004e78 <_printf_i+0xec>
 8004e74:	681d      	ldr	r5, [r3, #0]
 8004e76:	e002      	b.n	8004e7e <_printf_i+0xf2>
 8004e78:	0669      	lsls	r1, r5, #25
 8004e7a:	d5fb      	bpl.n	8004e74 <_printf_i+0xe8>
 8004e7c:	881d      	ldrh	r5, [r3, #0]
 8004e7e:	4854      	ldr	r0, [pc, #336]	; (8004fd0 <_printf_i+0x244>)
 8004e80:	2f6f      	cmp	r7, #111	; 0x6f
 8004e82:	bf0c      	ite	eq
 8004e84:	2308      	moveq	r3, #8
 8004e86:	230a      	movne	r3, #10
 8004e88:	2100      	movs	r1, #0
 8004e8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e8e:	6866      	ldr	r6, [r4, #4]
 8004e90:	60a6      	str	r6, [r4, #8]
 8004e92:	2e00      	cmp	r6, #0
 8004e94:	bfa2      	ittt	ge
 8004e96:	6821      	ldrge	r1, [r4, #0]
 8004e98:	f021 0104 	bicge.w	r1, r1, #4
 8004e9c:	6021      	strge	r1, [r4, #0]
 8004e9e:	b90d      	cbnz	r5, 8004ea4 <_printf_i+0x118>
 8004ea0:	2e00      	cmp	r6, #0
 8004ea2:	d04d      	beq.n	8004f40 <_printf_i+0x1b4>
 8004ea4:	4616      	mov	r6, r2
 8004ea6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004eaa:	fb03 5711 	mls	r7, r3, r1, r5
 8004eae:	5dc7      	ldrb	r7, [r0, r7]
 8004eb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004eb4:	462f      	mov	r7, r5
 8004eb6:	42bb      	cmp	r3, r7
 8004eb8:	460d      	mov	r5, r1
 8004eba:	d9f4      	bls.n	8004ea6 <_printf_i+0x11a>
 8004ebc:	2b08      	cmp	r3, #8
 8004ebe:	d10b      	bne.n	8004ed8 <_printf_i+0x14c>
 8004ec0:	6823      	ldr	r3, [r4, #0]
 8004ec2:	07df      	lsls	r7, r3, #31
 8004ec4:	d508      	bpl.n	8004ed8 <_printf_i+0x14c>
 8004ec6:	6923      	ldr	r3, [r4, #16]
 8004ec8:	6861      	ldr	r1, [r4, #4]
 8004eca:	4299      	cmp	r1, r3
 8004ecc:	bfde      	ittt	le
 8004ece:	2330      	movle	r3, #48	; 0x30
 8004ed0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ed4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004ed8:	1b92      	subs	r2, r2, r6
 8004eda:	6122      	str	r2, [r4, #16]
 8004edc:	f8cd a000 	str.w	sl, [sp]
 8004ee0:	464b      	mov	r3, r9
 8004ee2:	aa03      	add	r2, sp, #12
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	4640      	mov	r0, r8
 8004ee8:	f7ff fee2 	bl	8004cb0 <_printf_common>
 8004eec:	3001      	adds	r0, #1
 8004eee:	d14c      	bne.n	8004f8a <_printf_i+0x1fe>
 8004ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ef4:	b004      	add	sp, #16
 8004ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004efa:	4835      	ldr	r0, [pc, #212]	; (8004fd0 <_printf_i+0x244>)
 8004efc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	680e      	ldr	r6, [r1, #0]
 8004f04:	061f      	lsls	r7, r3, #24
 8004f06:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f0a:	600e      	str	r6, [r1, #0]
 8004f0c:	d514      	bpl.n	8004f38 <_printf_i+0x1ac>
 8004f0e:	07d9      	lsls	r1, r3, #31
 8004f10:	bf44      	itt	mi
 8004f12:	f043 0320 	orrmi.w	r3, r3, #32
 8004f16:	6023      	strmi	r3, [r4, #0]
 8004f18:	b91d      	cbnz	r5, 8004f22 <_printf_i+0x196>
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	f023 0320 	bic.w	r3, r3, #32
 8004f20:	6023      	str	r3, [r4, #0]
 8004f22:	2310      	movs	r3, #16
 8004f24:	e7b0      	b.n	8004e88 <_printf_i+0xfc>
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	f043 0320 	orr.w	r3, r3, #32
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	2378      	movs	r3, #120	; 0x78
 8004f30:	4828      	ldr	r0, [pc, #160]	; (8004fd4 <_printf_i+0x248>)
 8004f32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f36:	e7e3      	b.n	8004f00 <_printf_i+0x174>
 8004f38:	065e      	lsls	r6, r3, #25
 8004f3a:	bf48      	it	mi
 8004f3c:	b2ad      	uxthmi	r5, r5
 8004f3e:	e7e6      	b.n	8004f0e <_printf_i+0x182>
 8004f40:	4616      	mov	r6, r2
 8004f42:	e7bb      	b.n	8004ebc <_printf_i+0x130>
 8004f44:	680b      	ldr	r3, [r1, #0]
 8004f46:	6826      	ldr	r6, [r4, #0]
 8004f48:	6960      	ldr	r0, [r4, #20]
 8004f4a:	1d1d      	adds	r5, r3, #4
 8004f4c:	600d      	str	r5, [r1, #0]
 8004f4e:	0635      	lsls	r5, r6, #24
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	d501      	bpl.n	8004f58 <_printf_i+0x1cc>
 8004f54:	6018      	str	r0, [r3, #0]
 8004f56:	e002      	b.n	8004f5e <_printf_i+0x1d2>
 8004f58:	0671      	lsls	r1, r6, #25
 8004f5a:	d5fb      	bpl.n	8004f54 <_printf_i+0x1c8>
 8004f5c:	8018      	strh	r0, [r3, #0]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	6123      	str	r3, [r4, #16]
 8004f62:	4616      	mov	r6, r2
 8004f64:	e7ba      	b.n	8004edc <_printf_i+0x150>
 8004f66:	680b      	ldr	r3, [r1, #0]
 8004f68:	1d1a      	adds	r2, r3, #4
 8004f6a:	600a      	str	r2, [r1, #0]
 8004f6c:	681e      	ldr	r6, [r3, #0]
 8004f6e:	6862      	ldr	r2, [r4, #4]
 8004f70:	2100      	movs	r1, #0
 8004f72:	4630      	mov	r0, r6
 8004f74:	f7fb f93c 	bl	80001f0 <memchr>
 8004f78:	b108      	cbz	r0, 8004f7e <_printf_i+0x1f2>
 8004f7a:	1b80      	subs	r0, r0, r6
 8004f7c:	6060      	str	r0, [r4, #4]
 8004f7e:	6863      	ldr	r3, [r4, #4]
 8004f80:	6123      	str	r3, [r4, #16]
 8004f82:	2300      	movs	r3, #0
 8004f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f88:	e7a8      	b.n	8004edc <_printf_i+0x150>
 8004f8a:	6923      	ldr	r3, [r4, #16]
 8004f8c:	4632      	mov	r2, r6
 8004f8e:	4649      	mov	r1, r9
 8004f90:	4640      	mov	r0, r8
 8004f92:	47d0      	blx	sl
 8004f94:	3001      	adds	r0, #1
 8004f96:	d0ab      	beq.n	8004ef0 <_printf_i+0x164>
 8004f98:	6823      	ldr	r3, [r4, #0]
 8004f9a:	079b      	lsls	r3, r3, #30
 8004f9c:	d413      	bmi.n	8004fc6 <_printf_i+0x23a>
 8004f9e:	68e0      	ldr	r0, [r4, #12]
 8004fa0:	9b03      	ldr	r3, [sp, #12]
 8004fa2:	4298      	cmp	r0, r3
 8004fa4:	bfb8      	it	lt
 8004fa6:	4618      	movlt	r0, r3
 8004fa8:	e7a4      	b.n	8004ef4 <_printf_i+0x168>
 8004faa:	2301      	movs	r3, #1
 8004fac:	4632      	mov	r2, r6
 8004fae:	4649      	mov	r1, r9
 8004fb0:	4640      	mov	r0, r8
 8004fb2:	47d0      	blx	sl
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d09b      	beq.n	8004ef0 <_printf_i+0x164>
 8004fb8:	3501      	adds	r5, #1
 8004fba:	68e3      	ldr	r3, [r4, #12]
 8004fbc:	9903      	ldr	r1, [sp, #12]
 8004fbe:	1a5b      	subs	r3, r3, r1
 8004fc0:	42ab      	cmp	r3, r5
 8004fc2:	dcf2      	bgt.n	8004faa <_printf_i+0x21e>
 8004fc4:	e7eb      	b.n	8004f9e <_printf_i+0x212>
 8004fc6:	2500      	movs	r5, #0
 8004fc8:	f104 0619 	add.w	r6, r4, #25
 8004fcc:	e7f5      	b.n	8004fba <_printf_i+0x22e>
 8004fce:	bf00      	nop
 8004fd0:	08007d62 	.word	0x08007d62
 8004fd4:	08007d73 	.word	0x08007d73

08004fd8 <sniprintf>:
 8004fd8:	b40c      	push	{r2, r3}
 8004fda:	b530      	push	{r4, r5, lr}
 8004fdc:	4b17      	ldr	r3, [pc, #92]	; (800503c <sniprintf+0x64>)
 8004fde:	1e0c      	subs	r4, r1, #0
 8004fe0:	681d      	ldr	r5, [r3, #0]
 8004fe2:	b09d      	sub	sp, #116	; 0x74
 8004fe4:	da08      	bge.n	8004ff8 <sniprintf+0x20>
 8004fe6:	238b      	movs	r3, #139	; 0x8b
 8004fe8:	602b      	str	r3, [r5, #0]
 8004fea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fee:	b01d      	add	sp, #116	; 0x74
 8004ff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ff4:	b002      	add	sp, #8
 8004ff6:	4770      	bx	lr
 8004ff8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004ffc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005000:	bf14      	ite	ne
 8005002:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005006:	4623      	moveq	r3, r4
 8005008:	9304      	str	r3, [sp, #16]
 800500a:	9307      	str	r3, [sp, #28]
 800500c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005010:	9002      	str	r0, [sp, #8]
 8005012:	9006      	str	r0, [sp, #24]
 8005014:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005018:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800501a:	ab21      	add	r3, sp, #132	; 0x84
 800501c:	a902      	add	r1, sp, #8
 800501e:	4628      	mov	r0, r5
 8005020:	9301      	str	r3, [sp, #4]
 8005022:	f001 fb33 	bl	800668c <_svfiprintf_r>
 8005026:	1c43      	adds	r3, r0, #1
 8005028:	bfbc      	itt	lt
 800502a:	238b      	movlt	r3, #139	; 0x8b
 800502c:	602b      	strlt	r3, [r5, #0]
 800502e:	2c00      	cmp	r4, #0
 8005030:	d0dd      	beq.n	8004fee <sniprintf+0x16>
 8005032:	9b02      	ldr	r3, [sp, #8]
 8005034:	2200      	movs	r2, #0
 8005036:	701a      	strb	r2, [r3, #0]
 8005038:	e7d9      	b.n	8004fee <sniprintf+0x16>
 800503a:	bf00      	nop
 800503c:	2000000c 	.word	0x2000000c

08005040 <quorem>:
 8005040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005044:	6903      	ldr	r3, [r0, #16]
 8005046:	690c      	ldr	r4, [r1, #16]
 8005048:	42a3      	cmp	r3, r4
 800504a:	4607      	mov	r7, r0
 800504c:	f2c0 8081 	blt.w	8005152 <quorem+0x112>
 8005050:	3c01      	subs	r4, #1
 8005052:	f101 0814 	add.w	r8, r1, #20
 8005056:	f100 0514 	add.w	r5, r0, #20
 800505a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800505e:	9301      	str	r3, [sp, #4]
 8005060:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005064:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005068:	3301      	adds	r3, #1
 800506a:	429a      	cmp	r2, r3
 800506c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005070:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005074:	fbb2 f6f3 	udiv	r6, r2, r3
 8005078:	d331      	bcc.n	80050de <quorem+0x9e>
 800507a:	f04f 0e00 	mov.w	lr, #0
 800507e:	4640      	mov	r0, r8
 8005080:	46ac      	mov	ip, r5
 8005082:	46f2      	mov	sl, lr
 8005084:	f850 2b04 	ldr.w	r2, [r0], #4
 8005088:	b293      	uxth	r3, r2
 800508a:	fb06 e303 	mla	r3, r6, r3, lr
 800508e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005092:	b29b      	uxth	r3, r3
 8005094:	ebaa 0303 	sub.w	r3, sl, r3
 8005098:	0c12      	lsrs	r2, r2, #16
 800509a:	f8dc a000 	ldr.w	sl, [ip]
 800509e:	fb06 e202 	mla	r2, r6, r2, lr
 80050a2:	fa13 f38a 	uxtah	r3, r3, sl
 80050a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050aa:	fa1f fa82 	uxth.w	sl, r2
 80050ae:	f8dc 2000 	ldr.w	r2, [ip]
 80050b2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80050b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050c0:	4581      	cmp	r9, r0
 80050c2:	f84c 3b04 	str.w	r3, [ip], #4
 80050c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80050ca:	d2db      	bcs.n	8005084 <quorem+0x44>
 80050cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80050d0:	b92b      	cbnz	r3, 80050de <quorem+0x9e>
 80050d2:	9b01      	ldr	r3, [sp, #4]
 80050d4:	3b04      	subs	r3, #4
 80050d6:	429d      	cmp	r5, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	d32e      	bcc.n	800513a <quorem+0xfa>
 80050dc:	613c      	str	r4, [r7, #16]
 80050de:	4638      	mov	r0, r7
 80050e0:	f001 f8be 	bl	8006260 <__mcmp>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	db24      	blt.n	8005132 <quorem+0xf2>
 80050e8:	3601      	adds	r6, #1
 80050ea:	4628      	mov	r0, r5
 80050ec:	f04f 0c00 	mov.w	ip, #0
 80050f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80050f4:	f8d0 e000 	ldr.w	lr, [r0]
 80050f8:	b293      	uxth	r3, r2
 80050fa:	ebac 0303 	sub.w	r3, ip, r3
 80050fe:	0c12      	lsrs	r2, r2, #16
 8005100:	fa13 f38e 	uxtah	r3, r3, lr
 8005104:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005108:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800510c:	b29b      	uxth	r3, r3
 800510e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005112:	45c1      	cmp	r9, r8
 8005114:	f840 3b04 	str.w	r3, [r0], #4
 8005118:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800511c:	d2e8      	bcs.n	80050f0 <quorem+0xb0>
 800511e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005126:	b922      	cbnz	r2, 8005132 <quorem+0xf2>
 8005128:	3b04      	subs	r3, #4
 800512a:	429d      	cmp	r5, r3
 800512c:	461a      	mov	r2, r3
 800512e:	d30a      	bcc.n	8005146 <quorem+0x106>
 8005130:	613c      	str	r4, [r7, #16]
 8005132:	4630      	mov	r0, r6
 8005134:	b003      	add	sp, #12
 8005136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513a:	6812      	ldr	r2, [r2, #0]
 800513c:	3b04      	subs	r3, #4
 800513e:	2a00      	cmp	r2, #0
 8005140:	d1cc      	bne.n	80050dc <quorem+0x9c>
 8005142:	3c01      	subs	r4, #1
 8005144:	e7c7      	b.n	80050d6 <quorem+0x96>
 8005146:	6812      	ldr	r2, [r2, #0]
 8005148:	3b04      	subs	r3, #4
 800514a:	2a00      	cmp	r2, #0
 800514c:	d1f0      	bne.n	8005130 <quorem+0xf0>
 800514e:	3c01      	subs	r4, #1
 8005150:	e7eb      	b.n	800512a <quorem+0xea>
 8005152:	2000      	movs	r0, #0
 8005154:	e7ee      	b.n	8005134 <quorem+0xf4>
	...

08005158 <_dtoa_r>:
 8005158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515c:	ed2d 8b02 	vpush	{d8}
 8005160:	ec57 6b10 	vmov	r6, r7, d0
 8005164:	b095      	sub	sp, #84	; 0x54
 8005166:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005168:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800516c:	9105      	str	r1, [sp, #20]
 800516e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005172:	4604      	mov	r4, r0
 8005174:	9209      	str	r2, [sp, #36]	; 0x24
 8005176:	930f      	str	r3, [sp, #60]	; 0x3c
 8005178:	b975      	cbnz	r5, 8005198 <_dtoa_r+0x40>
 800517a:	2010      	movs	r0, #16
 800517c:	f000 fddc 	bl	8005d38 <malloc>
 8005180:	4602      	mov	r2, r0
 8005182:	6260      	str	r0, [r4, #36]	; 0x24
 8005184:	b920      	cbnz	r0, 8005190 <_dtoa_r+0x38>
 8005186:	4bb2      	ldr	r3, [pc, #712]	; (8005450 <_dtoa_r+0x2f8>)
 8005188:	21ea      	movs	r1, #234	; 0xea
 800518a:	48b2      	ldr	r0, [pc, #712]	; (8005454 <_dtoa_r+0x2fc>)
 800518c:	f001 fb8e 	bl	80068ac <__assert_func>
 8005190:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005194:	6005      	str	r5, [r0, #0]
 8005196:	60c5      	str	r5, [r0, #12]
 8005198:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800519a:	6819      	ldr	r1, [r3, #0]
 800519c:	b151      	cbz	r1, 80051b4 <_dtoa_r+0x5c>
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	604a      	str	r2, [r1, #4]
 80051a2:	2301      	movs	r3, #1
 80051a4:	4093      	lsls	r3, r2
 80051a6:	608b      	str	r3, [r1, #8]
 80051a8:	4620      	mov	r0, r4
 80051aa:	f000 fe1b 	bl	8005de4 <_Bfree>
 80051ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	1e3b      	subs	r3, r7, #0
 80051b6:	bfb9      	ittee	lt
 80051b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80051bc:	9303      	strlt	r3, [sp, #12]
 80051be:	2300      	movge	r3, #0
 80051c0:	f8c8 3000 	strge.w	r3, [r8]
 80051c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80051c8:	4ba3      	ldr	r3, [pc, #652]	; (8005458 <_dtoa_r+0x300>)
 80051ca:	bfbc      	itt	lt
 80051cc:	2201      	movlt	r2, #1
 80051ce:	f8c8 2000 	strlt.w	r2, [r8]
 80051d2:	ea33 0309 	bics.w	r3, r3, r9
 80051d6:	d11b      	bne.n	8005210 <_dtoa_r+0xb8>
 80051d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80051da:	f242 730f 	movw	r3, #9999	; 0x270f
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80051e4:	4333      	orrs	r3, r6
 80051e6:	f000 857a 	beq.w	8005cde <_dtoa_r+0xb86>
 80051ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051ec:	b963      	cbnz	r3, 8005208 <_dtoa_r+0xb0>
 80051ee:	4b9b      	ldr	r3, [pc, #620]	; (800545c <_dtoa_r+0x304>)
 80051f0:	e024      	b.n	800523c <_dtoa_r+0xe4>
 80051f2:	4b9b      	ldr	r3, [pc, #620]	; (8005460 <_dtoa_r+0x308>)
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	3308      	adds	r3, #8
 80051f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	9800      	ldr	r0, [sp, #0]
 80051fe:	b015      	add	sp, #84	; 0x54
 8005200:	ecbd 8b02 	vpop	{d8}
 8005204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005208:	4b94      	ldr	r3, [pc, #592]	; (800545c <_dtoa_r+0x304>)
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	3303      	adds	r3, #3
 800520e:	e7f3      	b.n	80051f8 <_dtoa_r+0xa0>
 8005210:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005214:	2200      	movs	r2, #0
 8005216:	ec51 0b17 	vmov	r0, r1, d7
 800521a:	2300      	movs	r3, #0
 800521c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005220:	f7fb fc5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005224:	4680      	mov	r8, r0
 8005226:	b158      	cbz	r0, 8005240 <_dtoa_r+0xe8>
 8005228:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800522a:	2301      	movs	r3, #1
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 8551 	beq.w	8005cd8 <_dtoa_r+0xb80>
 8005236:	488b      	ldr	r0, [pc, #556]	; (8005464 <_dtoa_r+0x30c>)
 8005238:	6018      	str	r0, [r3, #0]
 800523a:	1e43      	subs	r3, r0, #1
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	e7dd      	b.n	80051fc <_dtoa_r+0xa4>
 8005240:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005244:	aa12      	add	r2, sp, #72	; 0x48
 8005246:	a913      	add	r1, sp, #76	; 0x4c
 8005248:	4620      	mov	r0, r4
 800524a:	f001 f8ad 	bl	80063a8 <__d2b>
 800524e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005252:	4683      	mov	fp, r0
 8005254:	2d00      	cmp	r5, #0
 8005256:	d07c      	beq.n	8005352 <_dtoa_r+0x1fa>
 8005258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800525a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800525e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005262:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005266:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800526a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800526e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005272:	4b7d      	ldr	r3, [pc, #500]	; (8005468 <_dtoa_r+0x310>)
 8005274:	2200      	movs	r2, #0
 8005276:	4630      	mov	r0, r6
 8005278:	4639      	mov	r1, r7
 800527a:	f7fb f80d 	bl	8000298 <__aeabi_dsub>
 800527e:	a36e      	add	r3, pc, #440	; (adr r3, 8005438 <_dtoa_r+0x2e0>)
 8005280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005284:	f7fb f9c0 	bl	8000608 <__aeabi_dmul>
 8005288:	a36d      	add	r3, pc, #436	; (adr r3, 8005440 <_dtoa_r+0x2e8>)
 800528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528e:	f7fb f805 	bl	800029c <__adddf3>
 8005292:	4606      	mov	r6, r0
 8005294:	4628      	mov	r0, r5
 8005296:	460f      	mov	r7, r1
 8005298:	f7fb f94c 	bl	8000534 <__aeabi_i2d>
 800529c:	a36a      	add	r3, pc, #424	; (adr r3, 8005448 <_dtoa_r+0x2f0>)
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	f7fb f9b1 	bl	8000608 <__aeabi_dmul>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4630      	mov	r0, r6
 80052ac:	4639      	mov	r1, r7
 80052ae:	f7fa fff5 	bl	800029c <__adddf3>
 80052b2:	4606      	mov	r6, r0
 80052b4:	460f      	mov	r7, r1
 80052b6:	f7fb fc57 	bl	8000b68 <__aeabi_d2iz>
 80052ba:	2200      	movs	r2, #0
 80052bc:	4682      	mov	sl, r0
 80052be:	2300      	movs	r3, #0
 80052c0:	4630      	mov	r0, r6
 80052c2:	4639      	mov	r1, r7
 80052c4:	f7fb fc12 	bl	8000aec <__aeabi_dcmplt>
 80052c8:	b148      	cbz	r0, 80052de <_dtoa_r+0x186>
 80052ca:	4650      	mov	r0, sl
 80052cc:	f7fb f932 	bl	8000534 <__aeabi_i2d>
 80052d0:	4632      	mov	r2, r6
 80052d2:	463b      	mov	r3, r7
 80052d4:	f7fb fc00 	bl	8000ad8 <__aeabi_dcmpeq>
 80052d8:	b908      	cbnz	r0, 80052de <_dtoa_r+0x186>
 80052da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80052de:	f1ba 0f16 	cmp.w	sl, #22
 80052e2:	d854      	bhi.n	800538e <_dtoa_r+0x236>
 80052e4:	4b61      	ldr	r3, [pc, #388]	; (800546c <_dtoa_r+0x314>)
 80052e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80052f2:	f7fb fbfb 	bl	8000aec <__aeabi_dcmplt>
 80052f6:	2800      	cmp	r0, #0
 80052f8:	d04b      	beq.n	8005392 <_dtoa_r+0x23a>
 80052fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80052fe:	2300      	movs	r3, #0
 8005300:	930e      	str	r3, [sp, #56]	; 0x38
 8005302:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005304:	1b5d      	subs	r5, r3, r5
 8005306:	1e6b      	subs	r3, r5, #1
 8005308:	9304      	str	r3, [sp, #16]
 800530a:	bf43      	ittte	mi
 800530c:	2300      	movmi	r3, #0
 800530e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005312:	9304      	strmi	r3, [sp, #16]
 8005314:	f04f 0800 	movpl.w	r8, #0
 8005318:	f1ba 0f00 	cmp.w	sl, #0
 800531c:	db3b      	blt.n	8005396 <_dtoa_r+0x23e>
 800531e:	9b04      	ldr	r3, [sp, #16]
 8005320:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005324:	4453      	add	r3, sl
 8005326:	9304      	str	r3, [sp, #16]
 8005328:	2300      	movs	r3, #0
 800532a:	9306      	str	r3, [sp, #24]
 800532c:	9b05      	ldr	r3, [sp, #20]
 800532e:	2b09      	cmp	r3, #9
 8005330:	d869      	bhi.n	8005406 <_dtoa_r+0x2ae>
 8005332:	2b05      	cmp	r3, #5
 8005334:	bfc4      	itt	gt
 8005336:	3b04      	subgt	r3, #4
 8005338:	9305      	strgt	r3, [sp, #20]
 800533a:	9b05      	ldr	r3, [sp, #20]
 800533c:	f1a3 0302 	sub.w	r3, r3, #2
 8005340:	bfcc      	ite	gt
 8005342:	2500      	movgt	r5, #0
 8005344:	2501      	movle	r5, #1
 8005346:	2b03      	cmp	r3, #3
 8005348:	d869      	bhi.n	800541e <_dtoa_r+0x2c6>
 800534a:	e8df f003 	tbb	[pc, r3]
 800534e:	4e2c      	.short	0x4e2c
 8005350:	5a4c      	.short	0x5a4c
 8005352:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005356:	441d      	add	r5, r3
 8005358:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800535c:	2b20      	cmp	r3, #32
 800535e:	bfc1      	itttt	gt
 8005360:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005364:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005368:	fa09 f303 	lslgt.w	r3, r9, r3
 800536c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005370:	bfda      	itte	le
 8005372:	f1c3 0320 	rsble	r3, r3, #32
 8005376:	fa06 f003 	lslle.w	r0, r6, r3
 800537a:	4318      	orrgt	r0, r3
 800537c:	f7fb f8ca 	bl	8000514 <__aeabi_ui2d>
 8005380:	2301      	movs	r3, #1
 8005382:	4606      	mov	r6, r0
 8005384:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005388:	3d01      	subs	r5, #1
 800538a:	9310      	str	r3, [sp, #64]	; 0x40
 800538c:	e771      	b.n	8005272 <_dtoa_r+0x11a>
 800538e:	2301      	movs	r3, #1
 8005390:	e7b6      	b.n	8005300 <_dtoa_r+0x1a8>
 8005392:	900e      	str	r0, [sp, #56]	; 0x38
 8005394:	e7b5      	b.n	8005302 <_dtoa_r+0x1aa>
 8005396:	f1ca 0300 	rsb	r3, sl, #0
 800539a:	9306      	str	r3, [sp, #24]
 800539c:	2300      	movs	r3, #0
 800539e:	eba8 080a 	sub.w	r8, r8, sl
 80053a2:	930d      	str	r3, [sp, #52]	; 0x34
 80053a4:	e7c2      	b.n	800532c <_dtoa_r+0x1d4>
 80053a6:	2300      	movs	r3, #0
 80053a8:	9308      	str	r3, [sp, #32]
 80053aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	dc39      	bgt.n	8005424 <_dtoa_r+0x2cc>
 80053b0:	f04f 0901 	mov.w	r9, #1
 80053b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80053b8:	464b      	mov	r3, r9
 80053ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80053be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80053c0:	2200      	movs	r2, #0
 80053c2:	6042      	str	r2, [r0, #4]
 80053c4:	2204      	movs	r2, #4
 80053c6:	f102 0614 	add.w	r6, r2, #20
 80053ca:	429e      	cmp	r6, r3
 80053cc:	6841      	ldr	r1, [r0, #4]
 80053ce:	d92f      	bls.n	8005430 <_dtoa_r+0x2d8>
 80053d0:	4620      	mov	r0, r4
 80053d2:	f000 fcc7 	bl	8005d64 <_Balloc>
 80053d6:	9000      	str	r0, [sp, #0]
 80053d8:	2800      	cmp	r0, #0
 80053da:	d14b      	bne.n	8005474 <_dtoa_r+0x31c>
 80053dc:	4b24      	ldr	r3, [pc, #144]	; (8005470 <_dtoa_r+0x318>)
 80053de:	4602      	mov	r2, r0
 80053e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80053e4:	e6d1      	b.n	800518a <_dtoa_r+0x32>
 80053e6:	2301      	movs	r3, #1
 80053e8:	e7de      	b.n	80053a8 <_dtoa_r+0x250>
 80053ea:	2300      	movs	r3, #0
 80053ec:	9308      	str	r3, [sp, #32]
 80053ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f0:	eb0a 0903 	add.w	r9, sl, r3
 80053f4:	f109 0301 	add.w	r3, r9, #1
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	9301      	str	r3, [sp, #4]
 80053fc:	bfb8      	it	lt
 80053fe:	2301      	movlt	r3, #1
 8005400:	e7dd      	b.n	80053be <_dtoa_r+0x266>
 8005402:	2301      	movs	r3, #1
 8005404:	e7f2      	b.n	80053ec <_dtoa_r+0x294>
 8005406:	2501      	movs	r5, #1
 8005408:	2300      	movs	r3, #0
 800540a:	9305      	str	r3, [sp, #20]
 800540c:	9508      	str	r5, [sp, #32]
 800540e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005412:	2200      	movs	r2, #0
 8005414:	f8cd 9004 	str.w	r9, [sp, #4]
 8005418:	2312      	movs	r3, #18
 800541a:	9209      	str	r2, [sp, #36]	; 0x24
 800541c:	e7cf      	b.n	80053be <_dtoa_r+0x266>
 800541e:	2301      	movs	r3, #1
 8005420:	9308      	str	r3, [sp, #32]
 8005422:	e7f4      	b.n	800540e <_dtoa_r+0x2b6>
 8005424:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005428:	f8cd 9004 	str.w	r9, [sp, #4]
 800542c:	464b      	mov	r3, r9
 800542e:	e7c6      	b.n	80053be <_dtoa_r+0x266>
 8005430:	3101      	adds	r1, #1
 8005432:	6041      	str	r1, [r0, #4]
 8005434:	0052      	lsls	r2, r2, #1
 8005436:	e7c6      	b.n	80053c6 <_dtoa_r+0x26e>
 8005438:	636f4361 	.word	0x636f4361
 800543c:	3fd287a7 	.word	0x3fd287a7
 8005440:	8b60c8b3 	.word	0x8b60c8b3
 8005444:	3fc68a28 	.word	0x3fc68a28
 8005448:	509f79fb 	.word	0x509f79fb
 800544c:	3fd34413 	.word	0x3fd34413
 8005450:	08007d91 	.word	0x08007d91
 8005454:	08007da8 	.word	0x08007da8
 8005458:	7ff00000 	.word	0x7ff00000
 800545c:	08007d8d 	.word	0x08007d8d
 8005460:	08007d84 	.word	0x08007d84
 8005464:	08007d61 	.word	0x08007d61
 8005468:	3ff80000 	.word	0x3ff80000
 800546c:	08007ea0 	.word	0x08007ea0
 8005470:	08007e07 	.word	0x08007e07
 8005474:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005476:	9a00      	ldr	r2, [sp, #0]
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	9b01      	ldr	r3, [sp, #4]
 800547c:	2b0e      	cmp	r3, #14
 800547e:	f200 80ad 	bhi.w	80055dc <_dtoa_r+0x484>
 8005482:	2d00      	cmp	r5, #0
 8005484:	f000 80aa 	beq.w	80055dc <_dtoa_r+0x484>
 8005488:	f1ba 0f00 	cmp.w	sl, #0
 800548c:	dd36      	ble.n	80054fc <_dtoa_r+0x3a4>
 800548e:	4ac3      	ldr	r2, [pc, #780]	; (800579c <_dtoa_r+0x644>)
 8005490:	f00a 030f 	and.w	r3, sl, #15
 8005494:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005498:	ed93 7b00 	vldr	d7, [r3]
 800549c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80054a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80054a4:	eeb0 8a47 	vmov.f32	s16, s14
 80054a8:	eef0 8a67 	vmov.f32	s17, s15
 80054ac:	d016      	beq.n	80054dc <_dtoa_r+0x384>
 80054ae:	4bbc      	ldr	r3, [pc, #752]	; (80057a0 <_dtoa_r+0x648>)
 80054b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80054b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054b8:	f7fb f9d0 	bl	800085c <__aeabi_ddiv>
 80054bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054c0:	f007 070f 	and.w	r7, r7, #15
 80054c4:	2503      	movs	r5, #3
 80054c6:	4eb6      	ldr	r6, [pc, #728]	; (80057a0 <_dtoa_r+0x648>)
 80054c8:	b957      	cbnz	r7, 80054e0 <_dtoa_r+0x388>
 80054ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054ce:	ec53 2b18 	vmov	r2, r3, d8
 80054d2:	f7fb f9c3 	bl	800085c <__aeabi_ddiv>
 80054d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054da:	e029      	b.n	8005530 <_dtoa_r+0x3d8>
 80054dc:	2502      	movs	r5, #2
 80054de:	e7f2      	b.n	80054c6 <_dtoa_r+0x36e>
 80054e0:	07f9      	lsls	r1, r7, #31
 80054e2:	d508      	bpl.n	80054f6 <_dtoa_r+0x39e>
 80054e4:	ec51 0b18 	vmov	r0, r1, d8
 80054e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80054ec:	f7fb f88c 	bl	8000608 <__aeabi_dmul>
 80054f0:	ec41 0b18 	vmov	d8, r0, r1
 80054f4:	3501      	adds	r5, #1
 80054f6:	107f      	asrs	r7, r7, #1
 80054f8:	3608      	adds	r6, #8
 80054fa:	e7e5      	b.n	80054c8 <_dtoa_r+0x370>
 80054fc:	f000 80a6 	beq.w	800564c <_dtoa_r+0x4f4>
 8005500:	f1ca 0600 	rsb	r6, sl, #0
 8005504:	4ba5      	ldr	r3, [pc, #660]	; (800579c <_dtoa_r+0x644>)
 8005506:	4fa6      	ldr	r7, [pc, #664]	; (80057a0 <_dtoa_r+0x648>)
 8005508:	f006 020f 	and.w	r2, r6, #15
 800550c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005514:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005518:	f7fb f876 	bl	8000608 <__aeabi_dmul>
 800551c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005520:	1136      	asrs	r6, r6, #4
 8005522:	2300      	movs	r3, #0
 8005524:	2502      	movs	r5, #2
 8005526:	2e00      	cmp	r6, #0
 8005528:	f040 8085 	bne.w	8005636 <_dtoa_r+0x4de>
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1d2      	bne.n	80054d6 <_dtoa_r+0x37e>
 8005530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 808c 	beq.w	8005650 <_dtoa_r+0x4f8>
 8005538:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800553c:	4b99      	ldr	r3, [pc, #612]	; (80057a4 <_dtoa_r+0x64c>)
 800553e:	2200      	movs	r2, #0
 8005540:	4630      	mov	r0, r6
 8005542:	4639      	mov	r1, r7
 8005544:	f7fb fad2 	bl	8000aec <__aeabi_dcmplt>
 8005548:	2800      	cmp	r0, #0
 800554a:	f000 8081 	beq.w	8005650 <_dtoa_r+0x4f8>
 800554e:	9b01      	ldr	r3, [sp, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d07d      	beq.n	8005650 <_dtoa_r+0x4f8>
 8005554:	f1b9 0f00 	cmp.w	r9, #0
 8005558:	dd3c      	ble.n	80055d4 <_dtoa_r+0x47c>
 800555a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800555e:	9307      	str	r3, [sp, #28]
 8005560:	2200      	movs	r2, #0
 8005562:	4b91      	ldr	r3, [pc, #580]	; (80057a8 <_dtoa_r+0x650>)
 8005564:	4630      	mov	r0, r6
 8005566:	4639      	mov	r1, r7
 8005568:	f7fb f84e 	bl	8000608 <__aeabi_dmul>
 800556c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005570:	3501      	adds	r5, #1
 8005572:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005576:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800557a:	4628      	mov	r0, r5
 800557c:	f7fa ffda 	bl	8000534 <__aeabi_i2d>
 8005580:	4632      	mov	r2, r6
 8005582:	463b      	mov	r3, r7
 8005584:	f7fb f840 	bl	8000608 <__aeabi_dmul>
 8005588:	4b88      	ldr	r3, [pc, #544]	; (80057ac <_dtoa_r+0x654>)
 800558a:	2200      	movs	r2, #0
 800558c:	f7fa fe86 	bl	800029c <__adddf3>
 8005590:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005598:	9303      	str	r3, [sp, #12]
 800559a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800559c:	2b00      	cmp	r3, #0
 800559e:	d15c      	bne.n	800565a <_dtoa_r+0x502>
 80055a0:	4b83      	ldr	r3, [pc, #524]	; (80057b0 <_dtoa_r+0x658>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	4630      	mov	r0, r6
 80055a6:	4639      	mov	r1, r7
 80055a8:	f7fa fe76 	bl	8000298 <__aeabi_dsub>
 80055ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055b0:	4606      	mov	r6, r0
 80055b2:	460f      	mov	r7, r1
 80055b4:	f7fb fab8 	bl	8000b28 <__aeabi_dcmpgt>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	f040 8296 	bne.w	8005aea <_dtoa_r+0x992>
 80055be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80055c2:	4630      	mov	r0, r6
 80055c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055c8:	4639      	mov	r1, r7
 80055ca:	f7fb fa8f 	bl	8000aec <__aeabi_dcmplt>
 80055ce:	2800      	cmp	r0, #0
 80055d0:	f040 8288 	bne.w	8005ae4 <_dtoa_r+0x98c>
 80055d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80055d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f2c0 8158 	blt.w	8005894 <_dtoa_r+0x73c>
 80055e4:	f1ba 0f0e 	cmp.w	sl, #14
 80055e8:	f300 8154 	bgt.w	8005894 <_dtoa_r+0x73c>
 80055ec:	4b6b      	ldr	r3, [pc, #428]	; (800579c <_dtoa_r+0x644>)
 80055ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80055f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f280 80e3 	bge.w	80057c4 <_dtoa_r+0x66c>
 80055fe:	9b01      	ldr	r3, [sp, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	f300 80df 	bgt.w	80057c4 <_dtoa_r+0x66c>
 8005606:	f040 826d 	bne.w	8005ae4 <_dtoa_r+0x98c>
 800560a:	4b69      	ldr	r3, [pc, #420]	; (80057b0 <_dtoa_r+0x658>)
 800560c:	2200      	movs	r2, #0
 800560e:	4640      	mov	r0, r8
 8005610:	4649      	mov	r1, r9
 8005612:	f7fa fff9 	bl	8000608 <__aeabi_dmul>
 8005616:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800561a:	f7fb fa7b 	bl	8000b14 <__aeabi_dcmpge>
 800561e:	9e01      	ldr	r6, [sp, #4]
 8005620:	4637      	mov	r7, r6
 8005622:	2800      	cmp	r0, #0
 8005624:	f040 8243 	bne.w	8005aae <_dtoa_r+0x956>
 8005628:	9d00      	ldr	r5, [sp, #0]
 800562a:	2331      	movs	r3, #49	; 0x31
 800562c:	f805 3b01 	strb.w	r3, [r5], #1
 8005630:	f10a 0a01 	add.w	sl, sl, #1
 8005634:	e23f      	b.n	8005ab6 <_dtoa_r+0x95e>
 8005636:	07f2      	lsls	r2, r6, #31
 8005638:	d505      	bpl.n	8005646 <_dtoa_r+0x4ee>
 800563a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800563e:	f7fa ffe3 	bl	8000608 <__aeabi_dmul>
 8005642:	3501      	adds	r5, #1
 8005644:	2301      	movs	r3, #1
 8005646:	1076      	asrs	r6, r6, #1
 8005648:	3708      	adds	r7, #8
 800564a:	e76c      	b.n	8005526 <_dtoa_r+0x3ce>
 800564c:	2502      	movs	r5, #2
 800564e:	e76f      	b.n	8005530 <_dtoa_r+0x3d8>
 8005650:	9b01      	ldr	r3, [sp, #4]
 8005652:	f8cd a01c 	str.w	sl, [sp, #28]
 8005656:	930c      	str	r3, [sp, #48]	; 0x30
 8005658:	e78d      	b.n	8005576 <_dtoa_r+0x41e>
 800565a:	9900      	ldr	r1, [sp, #0]
 800565c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800565e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005660:	4b4e      	ldr	r3, [pc, #312]	; (800579c <_dtoa_r+0x644>)
 8005662:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005666:	4401      	add	r1, r0
 8005668:	9102      	str	r1, [sp, #8]
 800566a:	9908      	ldr	r1, [sp, #32]
 800566c:	eeb0 8a47 	vmov.f32	s16, s14
 8005670:	eef0 8a67 	vmov.f32	s17, s15
 8005674:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005678:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800567c:	2900      	cmp	r1, #0
 800567e:	d045      	beq.n	800570c <_dtoa_r+0x5b4>
 8005680:	494c      	ldr	r1, [pc, #304]	; (80057b4 <_dtoa_r+0x65c>)
 8005682:	2000      	movs	r0, #0
 8005684:	f7fb f8ea 	bl	800085c <__aeabi_ddiv>
 8005688:	ec53 2b18 	vmov	r2, r3, d8
 800568c:	f7fa fe04 	bl	8000298 <__aeabi_dsub>
 8005690:	9d00      	ldr	r5, [sp, #0]
 8005692:	ec41 0b18 	vmov	d8, r0, r1
 8005696:	4639      	mov	r1, r7
 8005698:	4630      	mov	r0, r6
 800569a:	f7fb fa65 	bl	8000b68 <__aeabi_d2iz>
 800569e:	900c      	str	r0, [sp, #48]	; 0x30
 80056a0:	f7fa ff48 	bl	8000534 <__aeabi_i2d>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4630      	mov	r0, r6
 80056aa:	4639      	mov	r1, r7
 80056ac:	f7fa fdf4 	bl	8000298 <__aeabi_dsub>
 80056b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056b2:	3330      	adds	r3, #48	; 0x30
 80056b4:	f805 3b01 	strb.w	r3, [r5], #1
 80056b8:	ec53 2b18 	vmov	r2, r3, d8
 80056bc:	4606      	mov	r6, r0
 80056be:	460f      	mov	r7, r1
 80056c0:	f7fb fa14 	bl	8000aec <__aeabi_dcmplt>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	d165      	bne.n	8005794 <_dtoa_r+0x63c>
 80056c8:	4632      	mov	r2, r6
 80056ca:	463b      	mov	r3, r7
 80056cc:	4935      	ldr	r1, [pc, #212]	; (80057a4 <_dtoa_r+0x64c>)
 80056ce:	2000      	movs	r0, #0
 80056d0:	f7fa fde2 	bl	8000298 <__aeabi_dsub>
 80056d4:	ec53 2b18 	vmov	r2, r3, d8
 80056d8:	f7fb fa08 	bl	8000aec <__aeabi_dcmplt>
 80056dc:	2800      	cmp	r0, #0
 80056de:	f040 80b9 	bne.w	8005854 <_dtoa_r+0x6fc>
 80056e2:	9b02      	ldr	r3, [sp, #8]
 80056e4:	429d      	cmp	r5, r3
 80056e6:	f43f af75 	beq.w	80055d4 <_dtoa_r+0x47c>
 80056ea:	4b2f      	ldr	r3, [pc, #188]	; (80057a8 <_dtoa_r+0x650>)
 80056ec:	ec51 0b18 	vmov	r0, r1, d8
 80056f0:	2200      	movs	r2, #0
 80056f2:	f7fa ff89 	bl	8000608 <__aeabi_dmul>
 80056f6:	4b2c      	ldr	r3, [pc, #176]	; (80057a8 <_dtoa_r+0x650>)
 80056f8:	ec41 0b18 	vmov	d8, r0, r1
 80056fc:	2200      	movs	r2, #0
 80056fe:	4630      	mov	r0, r6
 8005700:	4639      	mov	r1, r7
 8005702:	f7fa ff81 	bl	8000608 <__aeabi_dmul>
 8005706:	4606      	mov	r6, r0
 8005708:	460f      	mov	r7, r1
 800570a:	e7c4      	b.n	8005696 <_dtoa_r+0x53e>
 800570c:	ec51 0b17 	vmov	r0, r1, d7
 8005710:	f7fa ff7a 	bl	8000608 <__aeabi_dmul>
 8005714:	9b02      	ldr	r3, [sp, #8]
 8005716:	9d00      	ldr	r5, [sp, #0]
 8005718:	930c      	str	r3, [sp, #48]	; 0x30
 800571a:	ec41 0b18 	vmov	d8, r0, r1
 800571e:	4639      	mov	r1, r7
 8005720:	4630      	mov	r0, r6
 8005722:	f7fb fa21 	bl	8000b68 <__aeabi_d2iz>
 8005726:	9011      	str	r0, [sp, #68]	; 0x44
 8005728:	f7fa ff04 	bl	8000534 <__aeabi_i2d>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4630      	mov	r0, r6
 8005732:	4639      	mov	r1, r7
 8005734:	f7fa fdb0 	bl	8000298 <__aeabi_dsub>
 8005738:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800573a:	3330      	adds	r3, #48	; 0x30
 800573c:	f805 3b01 	strb.w	r3, [r5], #1
 8005740:	9b02      	ldr	r3, [sp, #8]
 8005742:	429d      	cmp	r5, r3
 8005744:	4606      	mov	r6, r0
 8005746:	460f      	mov	r7, r1
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	d134      	bne.n	80057b8 <_dtoa_r+0x660>
 800574e:	4b19      	ldr	r3, [pc, #100]	; (80057b4 <_dtoa_r+0x65c>)
 8005750:	ec51 0b18 	vmov	r0, r1, d8
 8005754:	f7fa fda2 	bl	800029c <__adddf3>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4630      	mov	r0, r6
 800575e:	4639      	mov	r1, r7
 8005760:	f7fb f9e2 	bl	8000b28 <__aeabi_dcmpgt>
 8005764:	2800      	cmp	r0, #0
 8005766:	d175      	bne.n	8005854 <_dtoa_r+0x6fc>
 8005768:	ec53 2b18 	vmov	r2, r3, d8
 800576c:	4911      	ldr	r1, [pc, #68]	; (80057b4 <_dtoa_r+0x65c>)
 800576e:	2000      	movs	r0, #0
 8005770:	f7fa fd92 	bl	8000298 <__aeabi_dsub>
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	4630      	mov	r0, r6
 800577a:	4639      	mov	r1, r7
 800577c:	f7fb f9b6 	bl	8000aec <__aeabi_dcmplt>
 8005780:	2800      	cmp	r0, #0
 8005782:	f43f af27 	beq.w	80055d4 <_dtoa_r+0x47c>
 8005786:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005788:	1e6b      	subs	r3, r5, #1
 800578a:	930c      	str	r3, [sp, #48]	; 0x30
 800578c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005790:	2b30      	cmp	r3, #48	; 0x30
 8005792:	d0f8      	beq.n	8005786 <_dtoa_r+0x62e>
 8005794:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005798:	e04a      	b.n	8005830 <_dtoa_r+0x6d8>
 800579a:	bf00      	nop
 800579c:	08007ea0 	.word	0x08007ea0
 80057a0:	08007e78 	.word	0x08007e78
 80057a4:	3ff00000 	.word	0x3ff00000
 80057a8:	40240000 	.word	0x40240000
 80057ac:	401c0000 	.word	0x401c0000
 80057b0:	40140000 	.word	0x40140000
 80057b4:	3fe00000 	.word	0x3fe00000
 80057b8:	4baf      	ldr	r3, [pc, #700]	; (8005a78 <_dtoa_r+0x920>)
 80057ba:	f7fa ff25 	bl	8000608 <__aeabi_dmul>
 80057be:	4606      	mov	r6, r0
 80057c0:	460f      	mov	r7, r1
 80057c2:	e7ac      	b.n	800571e <_dtoa_r+0x5c6>
 80057c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80057c8:	9d00      	ldr	r5, [sp, #0]
 80057ca:	4642      	mov	r2, r8
 80057cc:	464b      	mov	r3, r9
 80057ce:	4630      	mov	r0, r6
 80057d0:	4639      	mov	r1, r7
 80057d2:	f7fb f843 	bl	800085c <__aeabi_ddiv>
 80057d6:	f7fb f9c7 	bl	8000b68 <__aeabi_d2iz>
 80057da:	9002      	str	r0, [sp, #8]
 80057dc:	f7fa feaa 	bl	8000534 <__aeabi_i2d>
 80057e0:	4642      	mov	r2, r8
 80057e2:	464b      	mov	r3, r9
 80057e4:	f7fa ff10 	bl	8000608 <__aeabi_dmul>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4630      	mov	r0, r6
 80057ee:	4639      	mov	r1, r7
 80057f0:	f7fa fd52 	bl	8000298 <__aeabi_dsub>
 80057f4:	9e02      	ldr	r6, [sp, #8]
 80057f6:	9f01      	ldr	r7, [sp, #4]
 80057f8:	3630      	adds	r6, #48	; 0x30
 80057fa:	f805 6b01 	strb.w	r6, [r5], #1
 80057fe:	9e00      	ldr	r6, [sp, #0]
 8005800:	1bae      	subs	r6, r5, r6
 8005802:	42b7      	cmp	r7, r6
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	d137      	bne.n	800587a <_dtoa_r+0x722>
 800580a:	f7fa fd47 	bl	800029c <__adddf3>
 800580e:	4642      	mov	r2, r8
 8005810:	464b      	mov	r3, r9
 8005812:	4606      	mov	r6, r0
 8005814:	460f      	mov	r7, r1
 8005816:	f7fb f987 	bl	8000b28 <__aeabi_dcmpgt>
 800581a:	b9c8      	cbnz	r0, 8005850 <_dtoa_r+0x6f8>
 800581c:	4642      	mov	r2, r8
 800581e:	464b      	mov	r3, r9
 8005820:	4630      	mov	r0, r6
 8005822:	4639      	mov	r1, r7
 8005824:	f7fb f958 	bl	8000ad8 <__aeabi_dcmpeq>
 8005828:	b110      	cbz	r0, 8005830 <_dtoa_r+0x6d8>
 800582a:	9b02      	ldr	r3, [sp, #8]
 800582c:	07d9      	lsls	r1, r3, #31
 800582e:	d40f      	bmi.n	8005850 <_dtoa_r+0x6f8>
 8005830:	4620      	mov	r0, r4
 8005832:	4659      	mov	r1, fp
 8005834:	f000 fad6 	bl	8005de4 <_Bfree>
 8005838:	2300      	movs	r3, #0
 800583a:	702b      	strb	r3, [r5, #0]
 800583c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800583e:	f10a 0001 	add.w	r0, sl, #1
 8005842:	6018      	str	r0, [r3, #0]
 8005844:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005846:	2b00      	cmp	r3, #0
 8005848:	f43f acd8 	beq.w	80051fc <_dtoa_r+0xa4>
 800584c:	601d      	str	r5, [r3, #0]
 800584e:	e4d5      	b.n	80051fc <_dtoa_r+0xa4>
 8005850:	f8cd a01c 	str.w	sl, [sp, #28]
 8005854:	462b      	mov	r3, r5
 8005856:	461d      	mov	r5, r3
 8005858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800585c:	2a39      	cmp	r2, #57	; 0x39
 800585e:	d108      	bne.n	8005872 <_dtoa_r+0x71a>
 8005860:	9a00      	ldr	r2, [sp, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d1f7      	bne.n	8005856 <_dtoa_r+0x6fe>
 8005866:	9a07      	ldr	r2, [sp, #28]
 8005868:	9900      	ldr	r1, [sp, #0]
 800586a:	3201      	adds	r2, #1
 800586c:	9207      	str	r2, [sp, #28]
 800586e:	2230      	movs	r2, #48	; 0x30
 8005870:	700a      	strb	r2, [r1, #0]
 8005872:	781a      	ldrb	r2, [r3, #0]
 8005874:	3201      	adds	r2, #1
 8005876:	701a      	strb	r2, [r3, #0]
 8005878:	e78c      	b.n	8005794 <_dtoa_r+0x63c>
 800587a:	4b7f      	ldr	r3, [pc, #508]	; (8005a78 <_dtoa_r+0x920>)
 800587c:	2200      	movs	r2, #0
 800587e:	f7fa fec3 	bl	8000608 <__aeabi_dmul>
 8005882:	2200      	movs	r2, #0
 8005884:	2300      	movs	r3, #0
 8005886:	4606      	mov	r6, r0
 8005888:	460f      	mov	r7, r1
 800588a:	f7fb f925 	bl	8000ad8 <__aeabi_dcmpeq>
 800588e:	2800      	cmp	r0, #0
 8005890:	d09b      	beq.n	80057ca <_dtoa_r+0x672>
 8005892:	e7cd      	b.n	8005830 <_dtoa_r+0x6d8>
 8005894:	9a08      	ldr	r2, [sp, #32]
 8005896:	2a00      	cmp	r2, #0
 8005898:	f000 80c4 	beq.w	8005a24 <_dtoa_r+0x8cc>
 800589c:	9a05      	ldr	r2, [sp, #20]
 800589e:	2a01      	cmp	r2, #1
 80058a0:	f300 80a8 	bgt.w	80059f4 <_dtoa_r+0x89c>
 80058a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058a6:	2a00      	cmp	r2, #0
 80058a8:	f000 80a0 	beq.w	80059ec <_dtoa_r+0x894>
 80058ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80058b0:	9e06      	ldr	r6, [sp, #24]
 80058b2:	4645      	mov	r5, r8
 80058b4:	9a04      	ldr	r2, [sp, #16]
 80058b6:	2101      	movs	r1, #1
 80058b8:	441a      	add	r2, r3
 80058ba:	4620      	mov	r0, r4
 80058bc:	4498      	add	r8, r3
 80058be:	9204      	str	r2, [sp, #16]
 80058c0:	f000 fb4c 	bl	8005f5c <__i2b>
 80058c4:	4607      	mov	r7, r0
 80058c6:	2d00      	cmp	r5, #0
 80058c8:	dd0b      	ble.n	80058e2 <_dtoa_r+0x78a>
 80058ca:	9b04      	ldr	r3, [sp, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	dd08      	ble.n	80058e2 <_dtoa_r+0x78a>
 80058d0:	42ab      	cmp	r3, r5
 80058d2:	9a04      	ldr	r2, [sp, #16]
 80058d4:	bfa8      	it	ge
 80058d6:	462b      	movge	r3, r5
 80058d8:	eba8 0803 	sub.w	r8, r8, r3
 80058dc:	1aed      	subs	r5, r5, r3
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	9304      	str	r3, [sp, #16]
 80058e2:	9b06      	ldr	r3, [sp, #24]
 80058e4:	b1fb      	cbz	r3, 8005926 <_dtoa_r+0x7ce>
 80058e6:	9b08      	ldr	r3, [sp, #32]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 809f 	beq.w	8005a2c <_dtoa_r+0x8d4>
 80058ee:	2e00      	cmp	r6, #0
 80058f0:	dd11      	ble.n	8005916 <_dtoa_r+0x7be>
 80058f2:	4639      	mov	r1, r7
 80058f4:	4632      	mov	r2, r6
 80058f6:	4620      	mov	r0, r4
 80058f8:	f000 fbec 	bl	80060d4 <__pow5mult>
 80058fc:	465a      	mov	r2, fp
 80058fe:	4601      	mov	r1, r0
 8005900:	4607      	mov	r7, r0
 8005902:	4620      	mov	r0, r4
 8005904:	f000 fb40 	bl	8005f88 <__multiply>
 8005908:	4659      	mov	r1, fp
 800590a:	9007      	str	r0, [sp, #28]
 800590c:	4620      	mov	r0, r4
 800590e:	f000 fa69 	bl	8005de4 <_Bfree>
 8005912:	9b07      	ldr	r3, [sp, #28]
 8005914:	469b      	mov	fp, r3
 8005916:	9b06      	ldr	r3, [sp, #24]
 8005918:	1b9a      	subs	r2, r3, r6
 800591a:	d004      	beq.n	8005926 <_dtoa_r+0x7ce>
 800591c:	4659      	mov	r1, fp
 800591e:	4620      	mov	r0, r4
 8005920:	f000 fbd8 	bl	80060d4 <__pow5mult>
 8005924:	4683      	mov	fp, r0
 8005926:	2101      	movs	r1, #1
 8005928:	4620      	mov	r0, r4
 800592a:	f000 fb17 	bl	8005f5c <__i2b>
 800592e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005930:	2b00      	cmp	r3, #0
 8005932:	4606      	mov	r6, r0
 8005934:	dd7c      	ble.n	8005a30 <_dtoa_r+0x8d8>
 8005936:	461a      	mov	r2, r3
 8005938:	4601      	mov	r1, r0
 800593a:	4620      	mov	r0, r4
 800593c:	f000 fbca 	bl	80060d4 <__pow5mult>
 8005940:	9b05      	ldr	r3, [sp, #20]
 8005942:	2b01      	cmp	r3, #1
 8005944:	4606      	mov	r6, r0
 8005946:	dd76      	ble.n	8005a36 <_dtoa_r+0x8de>
 8005948:	2300      	movs	r3, #0
 800594a:	9306      	str	r3, [sp, #24]
 800594c:	6933      	ldr	r3, [r6, #16]
 800594e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005952:	6918      	ldr	r0, [r3, #16]
 8005954:	f000 fab2 	bl	8005ebc <__hi0bits>
 8005958:	f1c0 0020 	rsb	r0, r0, #32
 800595c:	9b04      	ldr	r3, [sp, #16]
 800595e:	4418      	add	r0, r3
 8005960:	f010 001f 	ands.w	r0, r0, #31
 8005964:	f000 8086 	beq.w	8005a74 <_dtoa_r+0x91c>
 8005968:	f1c0 0320 	rsb	r3, r0, #32
 800596c:	2b04      	cmp	r3, #4
 800596e:	dd7f      	ble.n	8005a70 <_dtoa_r+0x918>
 8005970:	f1c0 001c 	rsb	r0, r0, #28
 8005974:	9b04      	ldr	r3, [sp, #16]
 8005976:	4403      	add	r3, r0
 8005978:	4480      	add	r8, r0
 800597a:	4405      	add	r5, r0
 800597c:	9304      	str	r3, [sp, #16]
 800597e:	f1b8 0f00 	cmp.w	r8, #0
 8005982:	dd05      	ble.n	8005990 <_dtoa_r+0x838>
 8005984:	4659      	mov	r1, fp
 8005986:	4642      	mov	r2, r8
 8005988:	4620      	mov	r0, r4
 800598a:	f000 fbfd 	bl	8006188 <__lshift>
 800598e:	4683      	mov	fp, r0
 8005990:	9b04      	ldr	r3, [sp, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	dd05      	ble.n	80059a2 <_dtoa_r+0x84a>
 8005996:	4631      	mov	r1, r6
 8005998:	461a      	mov	r2, r3
 800599a:	4620      	mov	r0, r4
 800599c:	f000 fbf4 	bl	8006188 <__lshift>
 80059a0:	4606      	mov	r6, r0
 80059a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d069      	beq.n	8005a7c <_dtoa_r+0x924>
 80059a8:	4631      	mov	r1, r6
 80059aa:	4658      	mov	r0, fp
 80059ac:	f000 fc58 	bl	8006260 <__mcmp>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	da63      	bge.n	8005a7c <_dtoa_r+0x924>
 80059b4:	2300      	movs	r3, #0
 80059b6:	4659      	mov	r1, fp
 80059b8:	220a      	movs	r2, #10
 80059ba:	4620      	mov	r0, r4
 80059bc:	f000 fa34 	bl	8005e28 <__multadd>
 80059c0:	9b08      	ldr	r3, [sp, #32]
 80059c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80059c6:	4683      	mov	fp, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 818f 	beq.w	8005cec <_dtoa_r+0xb94>
 80059ce:	4639      	mov	r1, r7
 80059d0:	2300      	movs	r3, #0
 80059d2:	220a      	movs	r2, #10
 80059d4:	4620      	mov	r0, r4
 80059d6:	f000 fa27 	bl	8005e28 <__multadd>
 80059da:	f1b9 0f00 	cmp.w	r9, #0
 80059de:	4607      	mov	r7, r0
 80059e0:	f300 808e 	bgt.w	8005b00 <_dtoa_r+0x9a8>
 80059e4:	9b05      	ldr	r3, [sp, #20]
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	dc50      	bgt.n	8005a8c <_dtoa_r+0x934>
 80059ea:	e089      	b.n	8005b00 <_dtoa_r+0x9a8>
 80059ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059f2:	e75d      	b.n	80058b0 <_dtoa_r+0x758>
 80059f4:	9b01      	ldr	r3, [sp, #4]
 80059f6:	1e5e      	subs	r6, r3, #1
 80059f8:	9b06      	ldr	r3, [sp, #24]
 80059fa:	42b3      	cmp	r3, r6
 80059fc:	bfbf      	itttt	lt
 80059fe:	9b06      	ldrlt	r3, [sp, #24]
 8005a00:	9606      	strlt	r6, [sp, #24]
 8005a02:	1af2      	sublt	r2, r6, r3
 8005a04:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005a06:	bfb6      	itet	lt
 8005a08:	189b      	addlt	r3, r3, r2
 8005a0a:	1b9e      	subge	r6, r3, r6
 8005a0c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005a0e:	9b01      	ldr	r3, [sp, #4]
 8005a10:	bfb8      	it	lt
 8005a12:	2600      	movlt	r6, #0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	bfb5      	itete	lt
 8005a18:	eba8 0503 	sublt.w	r5, r8, r3
 8005a1c:	9b01      	ldrge	r3, [sp, #4]
 8005a1e:	2300      	movlt	r3, #0
 8005a20:	4645      	movge	r5, r8
 8005a22:	e747      	b.n	80058b4 <_dtoa_r+0x75c>
 8005a24:	9e06      	ldr	r6, [sp, #24]
 8005a26:	9f08      	ldr	r7, [sp, #32]
 8005a28:	4645      	mov	r5, r8
 8005a2a:	e74c      	b.n	80058c6 <_dtoa_r+0x76e>
 8005a2c:	9a06      	ldr	r2, [sp, #24]
 8005a2e:	e775      	b.n	800591c <_dtoa_r+0x7c4>
 8005a30:	9b05      	ldr	r3, [sp, #20]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	dc18      	bgt.n	8005a68 <_dtoa_r+0x910>
 8005a36:	9b02      	ldr	r3, [sp, #8]
 8005a38:	b9b3      	cbnz	r3, 8005a68 <_dtoa_r+0x910>
 8005a3a:	9b03      	ldr	r3, [sp, #12]
 8005a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a40:	b9a3      	cbnz	r3, 8005a6c <_dtoa_r+0x914>
 8005a42:	9b03      	ldr	r3, [sp, #12]
 8005a44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a48:	0d1b      	lsrs	r3, r3, #20
 8005a4a:	051b      	lsls	r3, r3, #20
 8005a4c:	b12b      	cbz	r3, 8005a5a <_dtoa_r+0x902>
 8005a4e:	9b04      	ldr	r3, [sp, #16]
 8005a50:	3301      	adds	r3, #1
 8005a52:	9304      	str	r3, [sp, #16]
 8005a54:	f108 0801 	add.w	r8, r8, #1
 8005a58:	2301      	movs	r3, #1
 8005a5a:	9306      	str	r3, [sp, #24]
 8005a5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f47f af74 	bne.w	800594c <_dtoa_r+0x7f4>
 8005a64:	2001      	movs	r0, #1
 8005a66:	e779      	b.n	800595c <_dtoa_r+0x804>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	e7f6      	b.n	8005a5a <_dtoa_r+0x902>
 8005a6c:	9b02      	ldr	r3, [sp, #8]
 8005a6e:	e7f4      	b.n	8005a5a <_dtoa_r+0x902>
 8005a70:	d085      	beq.n	800597e <_dtoa_r+0x826>
 8005a72:	4618      	mov	r0, r3
 8005a74:	301c      	adds	r0, #28
 8005a76:	e77d      	b.n	8005974 <_dtoa_r+0x81c>
 8005a78:	40240000 	.word	0x40240000
 8005a7c:	9b01      	ldr	r3, [sp, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	dc38      	bgt.n	8005af4 <_dtoa_r+0x99c>
 8005a82:	9b05      	ldr	r3, [sp, #20]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	dd35      	ble.n	8005af4 <_dtoa_r+0x99c>
 8005a88:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005a8c:	f1b9 0f00 	cmp.w	r9, #0
 8005a90:	d10d      	bne.n	8005aae <_dtoa_r+0x956>
 8005a92:	4631      	mov	r1, r6
 8005a94:	464b      	mov	r3, r9
 8005a96:	2205      	movs	r2, #5
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f000 f9c5 	bl	8005e28 <__multadd>
 8005a9e:	4601      	mov	r1, r0
 8005aa0:	4606      	mov	r6, r0
 8005aa2:	4658      	mov	r0, fp
 8005aa4:	f000 fbdc 	bl	8006260 <__mcmp>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	f73f adbd 	bgt.w	8005628 <_dtoa_r+0x4d0>
 8005aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab0:	9d00      	ldr	r5, [sp, #0]
 8005ab2:	ea6f 0a03 	mvn.w	sl, r3
 8005ab6:	f04f 0800 	mov.w	r8, #0
 8005aba:	4631      	mov	r1, r6
 8005abc:	4620      	mov	r0, r4
 8005abe:	f000 f991 	bl	8005de4 <_Bfree>
 8005ac2:	2f00      	cmp	r7, #0
 8005ac4:	f43f aeb4 	beq.w	8005830 <_dtoa_r+0x6d8>
 8005ac8:	f1b8 0f00 	cmp.w	r8, #0
 8005acc:	d005      	beq.n	8005ada <_dtoa_r+0x982>
 8005ace:	45b8      	cmp	r8, r7
 8005ad0:	d003      	beq.n	8005ada <_dtoa_r+0x982>
 8005ad2:	4641      	mov	r1, r8
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f000 f985 	bl	8005de4 <_Bfree>
 8005ada:	4639      	mov	r1, r7
 8005adc:	4620      	mov	r0, r4
 8005ade:	f000 f981 	bl	8005de4 <_Bfree>
 8005ae2:	e6a5      	b.n	8005830 <_dtoa_r+0x6d8>
 8005ae4:	2600      	movs	r6, #0
 8005ae6:	4637      	mov	r7, r6
 8005ae8:	e7e1      	b.n	8005aae <_dtoa_r+0x956>
 8005aea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005aec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005af0:	4637      	mov	r7, r6
 8005af2:	e599      	b.n	8005628 <_dtoa_r+0x4d0>
 8005af4:	9b08      	ldr	r3, [sp, #32]
 8005af6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 80fd 	beq.w	8005cfa <_dtoa_r+0xba2>
 8005b00:	2d00      	cmp	r5, #0
 8005b02:	dd05      	ble.n	8005b10 <_dtoa_r+0x9b8>
 8005b04:	4639      	mov	r1, r7
 8005b06:	462a      	mov	r2, r5
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f000 fb3d 	bl	8006188 <__lshift>
 8005b0e:	4607      	mov	r7, r0
 8005b10:	9b06      	ldr	r3, [sp, #24]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d05c      	beq.n	8005bd0 <_dtoa_r+0xa78>
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f000 f923 	bl	8005d64 <_Balloc>
 8005b1e:	4605      	mov	r5, r0
 8005b20:	b928      	cbnz	r0, 8005b2e <_dtoa_r+0x9d6>
 8005b22:	4b80      	ldr	r3, [pc, #512]	; (8005d24 <_dtoa_r+0xbcc>)
 8005b24:	4602      	mov	r2, r0
 8005b26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005b2a:	f7ff bb2e 	b.w	800518a <_dtoa_r+0x32>
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	3202      	adds	r2, #2
 8005b32:	0092      	lsls	r2, r2, #2
 8005b34:	f107 010c 	add.w	r1, r7, #12
 8005b38:	300c      	adds	r0, #12
 8005b3a:	f000 f905 	bl	8005d48 <memcpy>
 8005b3e:	2201      	movs	r2, #1
 8005b40:	4629      	mov	r1, r5
 8005b42:	4620      	mov	r0, r4
 8005b44:	f000 fb20 	bl	8006188 <__lshift>
 8005b48:	9b00      	ldr	r3, [sp, #0]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	9b00      	ldr	r3, [sp, #0]
 8005b50:	444b      	add	r3, r9
 8005b52:	9307      	str	r3, [sp, #28]
 8005b54:	9b02      	ldr	r3, [sp, #8]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	46b8      	mov	r8, r7
 8005b5c:	9306      	str	r3, [sp, #24]
 8005b5e:	4607      	mov	r7, r0
 8005b60:	9b01      	ldr	r3, [sp, #4]
 8005b62:	4631      	mov	r1, r6
 8005b64:	3b01      	subs	r3, #1
 8005b66:	4658      	mov	r0, fp
 8005b68:	9302      	str	r3, [sp, #8]
 8005b6a:	f7ff fa69 	bl	8005040 <quorem>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	3330      	adds	r3, #48	; 0x30
 8005b72:	9004      	str	r0, [sp, #16]
 8005b74:	4641      	mov	r1, r8
 8005b76:	4658      	mov	r0, fp
 8005b78:	9308      	str	r3, [sp, #32]
 8005b7a:	f000 fb71 	bl	8006260 <__mcmp>
 8005b7e:	463a      	mov	r2, r7
 8005b80:	4681      	mov	r9, r0
 8005b82:	4631      	mov	r1, r6
 8005b84:	4620      	mov	r0, r4
 8005b86:	f000 fb87 	bl	8006298 <__mdiff>
 8005b8a:	68c2      	ldr	r2, [r0, #12]
 8005b8c:	9b08      	ldr	r3, [sp, #32]
 8005b8e:	4605      	mov	r5, r0
 8005b90:	bb02      	cbnz	r2, 8005bd4 <_dtoa_r+0xa7c>
 8005b92:	4601      	mov	r1, r0
 8005b94:	4658      	mov	r0, fp
 8005b96:	f000 fb63 	bl	8006260 <__mcmp>
 8005b9a:	9b08      	ldr	r3, [sp, #32]
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005ba6:	f000 f91d 	bl	8005de4 <_Bfree>
 8005baa:	9b05      	ldr	r3, [sp, #20]
 8005bac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bae:	9d01      	ldr	r5, [sp, #4]
 8005bb0:	ea43 0102 	orr.w	r1, r3, r2
 8005bb4:	9b06      	ldr	r3, [sp, #24]
 8005bb6:	430b      	orrs	r3, r1
 8005bb8:	9b08      	ldr	r3, [sp, #32]
 8005bba:	d10d      	bne.n	8005bd8 <_dtoa_r+0xa80>
 8005bbc:	2b39      	cmp	r3, #57	; 0x39
 8005bbe:	d029      	beq.n	8005c14 <_dtoa_r+0xabc>
 8005bc0:	f1b9 0f00 	cmp.w	r9, #0
 8005bc4:	dd01      	ble.n	8005bca <_dtoa_r+0xa72>
 8005bc6:	9b04      	ldr	r3, [sp, #16]
 8005bc8:	3331      	adds	r3, #49	; 0x31
 8005bca:	9a02      	ldr	r2, [sp, #8]
 8005bcc:	7013      	strb	r3, [r2, #0]
 8005bce:	e774      	b.n	8005aba <_dtoa_r+0x962>
 8005bd0:	4638      	mov	r0, r7
 8005bd2:	e7b9      	b.n	8005b48 <_dtoa_r+0x9f0>
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	e7e2      	b.n	8005b9e <_dtoa_r+0xa46>
 8005bd8:	f1b9 0f00 	cmp.w	r9, #0
 8005bdc:	db06      	blt.n	8005bec <_dtoa_r+0xa94>
 8005bde:	9905      	ldr	r1, [sp, #20]
 8005be0:	ea41 0909 	orr.w	r9, r1, r9
 8005be4:	9906      	ldr	r1, [sp, #24]
 8005be6:	ea59 0101 	orrs.w	r1, r9, r1
 8005bea:	d120      	bne.n	8005c2e <_dtoa_r+0xad6>
 8005bec:	2a00      	cmp	r2, #0
 8005bee:	ddec      	ble.n	8005bca <_dtoa_r+0xa72>
 8005bf0:	4659      	mov	r1, fp
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	9301      	str	r3, [sp, #4]
 8005bf8:	f000 fac6 	bl	8006188 <__lshift>
 8005bfc:	4631      	mov	r1, r6
 8005bfe:	4683      	mov	fp, r0
 8005c00:	f000 fb2e 	bl	8006260 <__mcmp>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	9b01      	ldr	r3, [sp, #4]
 8005c08:	dc02      	bgt.n	8005c10 <_dtoa_r+0xab8>
 8005c0a:	d1de      	bne.n	8005bca <_dtoa_r+0xa72>
 8005c0c:	07da      	lsls	r2, r3, #31
 8005c0e:	d5dc      	bpl.n	8005bca <_dtoa_r+0xa72>
 8005c10:	2b39      	cmp	r3, #57	; 0x39
 8005c12:	d1d8      	bne.n	8005bc6 <_dtoa_r+0xa6e>
 8005c14:	9a02      	ldr	r2, [sp, #8]
 8005c16:	2339      	movs	r3, #57	; 0x39
 8005c18:	7013      	strb	r3, [r2, #0]
 8005c1a:	462b      	mov	r3, r5
 8005c1c:	461d      	mov	r5, r3
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005c24:	2a39      	cmp	r2, #57	; 0x39
 8005c26:	d050      	beq.n	8005cca <_dtoa_r+0xb72>
 8005c28:	3201      	adds	r2, #1
 8005c2a:	701a      	strb	r2, [r3, #0]
 8005c2c:	e745      	b.n	8005aba <_dtoa_r+0x962>
 8005c2e:	2a00      	cmp	r2, #0
 8005c30:	dd03      	ble.n	8005c3a <_dtoa_r+0xae2>
 8005c32:	2b39      	cmp	r3, #57	; 0x39
 8005c34:	d0ee      	beq.n	8005c14 <_dtoa_r+0xabc>
 8005c36:	3301      	adds	r3, #1
 8005c38:	e7c7      	b.n	8005bca <_dtoa_r+0xa72>
 8005c3a:	9a01      	ldr	r2, [sp, #4]
 8005c3c:	9907      	ldr	r1, [sp, #28]
 8005c3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005c42:	428a      	cmp	r2, r1
 8005c44:	d02a      	beq.n	8005c9c <_dtoa_r+0xb44>
 8005c46:	4659      	mov	r1, fp
 8005c48:	2300      	movs	r3, #0
 8005c4a:	220a      	movs	r2, #10
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	f000 f8eb 	bl	8005e28 <__multadd>
 8005c52:	45b8      	cmp	r8, r7
 8005c54:	4683      	mov	fp, r0
 8005c56:	f04f 0300 	mov.w	r3, #0
 8005c5a:	f04f 020a 	mov.w	r2, #10
 8005c5e:	4641      	mov	r1, r8
 8005c60:	4620      	mov	r0, r4
 8005c62:	d107      	bne.n	8005c74 <_dtoa_r+0xb1c>
 8005c64:	f000 f8e0 	bl	8005e28 <__multadd>
 8005c68:	4680      	mov	r8, r0
 8005c6a:	4607      	mov	r7, r0
 8005c6c:	9b01      	ldr	r3, [sp, #4]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	9301      	str	r3, [sp, #4]
 8005c72:	e775      	b.n	8005b60 <_dtoa_r+0xa08>
 8005c74:	f000 f8d8 	bl	8005e28 <__multadd>
 8005c78:	4639      	mov	r1, r7
 8005c7a:	4680      	mov	r8, r0
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	220a      	movs	r2, #10
 8005c80:	4620      	mov	r0, r4
 8005c82:	f000 f8d1 	bl	8005e28 <__multadd>
 8005c86:	4607      	mov	r7, r0
 8005c88:	e7f0      	b.n	8005c6c <_dtoa_r+0xb14>
 8005c8a:	f1b9 0f00 	cmp.w	r9, #0
 8005c8e:	9a00      	ldr	r2, [sp, #0]
 8005c90:	bfcc      	ite	gt
 8005c92:	464d      	movgt	r5, r9
 8005c94:	2501      	movle	r5, #1
 8005c96:	4415      	add	r5, r2
 8005c98:	f04f 0800 	mov.w	r8, #0
 8005c9c:	4659      	mov	r1, fp
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	9301      	str	r3, [sp, #4]
 8005ca4:	f000 fa70 	bl	8006188 <__lshift>
 8005ca8:	4631      	mov	r1, r6
 8005caa:	4683      	mov	fp, r0
 8005cac:	f000 fad8 	bl	8006260 <__mcmp>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	dcb2      	bgt.n	8005c1a <_dtoa_r+0xac2>
 8005cb4:	d102      	bne.n	8005cbc <_dtoa_r+0xb64>
 8005cb6:	9b01      	ldr	r3, [sp, #4]
 8005cb8:	07db      	lsls	r3, r3, #31
 8005cba:	d4ae      	bmi.n	8005c1a <_dtoa_r+0xac2>
 8005cbc:	462b      	mov	r3, r5
 8005cbe:	461d      	mov	r5, r3
 8005cc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cc4:	2a30      	cmp	r2, #48	; 0x30
 8005cc6:	d0fa      	beq.n	8005cbe <_dtoa_r+0xb66>
 8005cc8:	e6f7      	b.n	8005aba <_dtoa_r+0x962>
 8005cca:	9a00      	ldr	r2, [sp, #0]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d1a5      	bne.n	8005c1c <_dtoa_r+0xac4>
 8005cd0:	f10a 0a01 	add.w	sl, sl, #1
 8005cd4:	2331      	movs	r3, #49	; 0x31
 8005cd6:	e779      	b.n	8005bcc <_dtoa_r+0xa74>
 8005cd8:	4b13      	ldr	r3, [pc, #76]	; (8005d28 <_dtoa_r+0xbd0>)
 8005cda:	f7ff baaf 	b.w	800523c <_dtoa_r+0xe4>
 8005cde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f47f aa86 	bne.w	80051f2 <_dtoa_r+0x9a>
 8005ce6:	4b11      	ldr	r3, [pc, #68]	; (8005d2c <_dtoa_r+0xbd4>)
 8005ce8:	f7ff baa8 	b.w	800523c <_dtoa_r+0xe4>
 8005cec:	f1b9 0f00 	cmp.w	r9, #0
 8005cf0:	dc03      	bgt.n	8005cfa <_dtoa_r+0xba2>
 8005cf2:	9b05      	ldr	r3, [sp, #20]
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	f73f aec9 	bgt.w	8005a8c <_dtoa_r+0x934>
 8005cfa:	9d00      	ldr	r5, [sp, #0]
 8005cfc:	4631      	mov	r1, r6
 8005cfe:	4658      	mov	r0, fp
 8005d00:	f7ff f99e 	bl	8005040 <quorem>
 8005d04:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005d08:	f805 3b01 	strb.w	r3, [r5], #1
 8005d0c:	9a00      	ldr	r2, [sp, #0]
 8005d0e:	1aaa      	subs	r2, r5, r2
 8005d10:	4591      	cmp	r9, r2
 8005d12:	ddba      	ble.n	8005c8a <_dtoa_r+0xb32>
 8005d14:	4659      	mov	r1, fp
 8005d16:	2300      	movs	r3, #0
 8005d18:	220a      	movs	r2, #10
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f000 f884 	bl	8005e28 <__multadd>
 8005d20:	4683      	mov	fp, r0
 8005d22:	e7eb      	b.n	8005cfc <_dtoa_r+0xba4>
 8005d24:	08007e07 	.word	0x08007e07
 8005d28:	08007d60 	.word	0x08007d60
 8005d2c:	08007d84 	.word	0x08007d84

08005d30 <_localeconv_r>:
 8005d30:	4800      	ldr	r0, [pc, #0]	; (8005d34 <_localeconv_r+0x4>)
 8005d32:	4770      	bx	lr
 8005d34:	20000160 	.word	0x20000160

08005d38 <malloc>:
 8005d38:	4b02      	ldr	r3, [pc, #8]	; (8005d44 <malloc+0xc>)
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	f000 bbef 	b.w	8006520 <_malloc_r>
 8005d42:	bf00      	nop
 8005d44:	2000000c 	.word	0x2000000c

08005d48 <memcpy>:
 8005d48:	440a      	add	r2, r1
 8005d4a:	4291      	cmp	r1, r2
 8005d4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005d50:	d100      	bne.n	8005d54 <memcpy+0xc>
 8005d52:	4770      	bx	lr
 8005d54:	b510      	push	{r4, lr}
 8005d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d5e:	4291      	cmp	r1, r2
 8005d60:	d1f9      	bne.n	8005d56 <memcpy+0xe>
 8005d62:	bd10      	pop	{r4, pc}

08005d64 <_Balloc>:
 8005d64:	b570      	push	{r4, r5, r6, lr}
 8005d66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d68:	4604      	mov	r4, r0
 8005d6a:	460d      	mov	r5, r1
 8005d6c:	b976      	cbnz	r6, 8005d8c <_Balloc+0x28>
 8005d6e:	2010      	movs	r0, #16
 8005d70:	f7ff ffe2 	bl	8005d38 <malloc>
 8005d74:	4602      	mov	r2, r0
 8005d76:	6260      	str	r0, [r4, #36]	; 0x24
 8005d78:	b920      	cbnz	r0, 8005d84 <_Balloc+0x20>
 8005d7a:	4b18      	ldr	r3, [pc, #96]	; (8005ddc <_Balloc+0x78>)
 8005d7c:	4818      	ldr	r0, [pc, #96]	; (8005de0 <_Balloc+0x7c>)
 8005d7e:	2166      	movs	r1, #102	; 0x66
 8005d80:	f000 fd94 	bl	80068ac <__assert_func>
 8005d84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d88:	6006      	str	r6, [r0, #0]
 8005d8a:	60c6      	str	r6, [r0, #12]
 8005d8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005d8e:	68f3      	ldr	r3, [r6, #12]
 8005d90:	b183      	cbz	r3, 8005db4 <_Balloc+0x50>
 8005d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d9a:	b9b8      	cbnz	r0, 8005dcc <_Balloc+0x68>
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	fa01 f605 	lsl.w	r6, r1, r5
 8005da2:	1d72      	adds	r2, r6, #5
 8005da4:	0092      	lsls	r2, r2, #2
 8005da6:	4620      	mov	r0, r4
 8005da8:	f000 fb5a 	bl	8006460 <_calloc_r>
 8005dac:	b160      	cbz	r0, 8005dc8 <_Balloc+0x64>
 8005dae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005db2:	e00e      	b.n	8005dd2 <_Balloc+0x6e>
 8005db4:	2221      	movs	r2, #33	; 0x21
 8005db6:	2104      	movs	r1, #4
 8005db8:	4620      	mov	r0, r4
 8005dba:	f000 fb51 	bl	8006460 <_calloc_r>
 8005dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dc0:	60f0      	str	r0, [r6, #12]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1e4      	bne.n	8005d92 <_Balloc+0x2e>
 8005dc8:	2000      	movs	r0, #0
 8005dca:	bd70      	pop	{r4, r5, r6, pc}
 8005dcc:	6802      	ldr	r2, [r0, #0]
 8005dce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005dd8:	e7f7      	b.n	8005dca <_Balloc+0x66>
 8005dda:	bf00      	nop
 8005ddc:	08007d91 	.word	0x08007d91
 8005de0:	08007e18 	.word	0x08007e18

08005de4 <_Bfree>:
 8005de4:	b570      	push	{r4, r5, r6, lr}
 8005de6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005de8:	4605      	mov	r5, r0
 8005dea:	460c      	mov	r4, r1
 8005dec:	b976      	cbnz	r6, 8005e0c <_Bfree+0x28>
 8005dee:	2010      	movs	r0, #16
 8005df0:	f7ff ffa2 	bl	8005d38 <malloc>
 8005df4:	4602      	mov	r2, r0
 8005df6:	6268      	str	r0, [r5, #36]	; 0x24
 8005df8:	b920      	cbnz	r0, 8005e04 <_Bfree+0x20>
 8005dfa:	4b09      	ldr	r3, [pc, #36]	; (8005e20 <_Bfree+0x3c>)
 8005dfc:	4809      	ldr	r0, [pc, #36]	; (8005e24 <_Bfree+0x40>)
 8005dfe:	218a      	movs	r1, #138	; 0x8a
 8005e00:	f000 fd54 	bl	80068ac <__assert_func>
 8005e04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e08:	6006      	str	r6, [r0, #0]
 8005e0a:	60c6      	str	r6, [r0, #12]
 8005e0c:	b13c      	cbz	r4, 8005e1e <_Bfree+0x3a>
 8005e0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e10:	6862      	ldr	r2, [r4, #4]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e18:	6021      	str	r1, [r4, #0]
 8005e1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e1e:	bd70      	pop	{r4, r5, r6, pc}
 8005e20:	08007d91 	.word	0x08007d91
 8005e24:	08007e18 	.word	0x08007e18

08005e28 <__multadd>:
 8005e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e2c:	690e      	ldr	r6, [r1, #16]
 8005e2e:	4607      	mov	r7, r0
 8005e30:	4698      	mov	r8, r3
 8005e32:	460c      	mov	r4, r1
 8005e34:	f101 0014 	add.w	r0, r1, #20
 8005e38:	2300      	movs	r3, #0
 8005e3a:	6805      	ldr	r5, [r0, #0]
 8005e3c:	b2a9      	uxth	r1, r5
 8005e3e:	fb02 8101 	mla	r1, r2, r1, r8
 8005e42:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005e46:	0c2d      	lsrs	r5, r5, #16
 8005e48:	fb02 c505 	mla	r5, r2, r5, ip
 8005e4c:	b289      	uxth	r1, r1
 8005e4e:	3301      	adds	r3, #1
 8005e50:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005e54:	429e      	cmp	r6, r3
 8005e56:	f840 1b04 	str.w	r1, [r0], #4
 8005e5a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005e5e:	dcec      	bgt.n	8005e3a <__multadd+0x12>
 8005e60:	f1b8 0f00 	cmp.w	r8, #0
 8005e64:	d022      	beq.n	8005eac <__multadd+0x84>
 8005e66:	68a3      	ldr	r3, [r4, #8]
 8005e68:	42b3      	cmp	r3, r6
 8005e6a:	dc19      	bgt.n	8005ea0 <__multadd+0x78>
 8005e6c:	6861      	ldr	r1, [r4, #4]
 8005e6e:	4638      	mov	r0, r7
 8005e70:	3101      	adds	r1, #1
 8005e72:	f7ff ff77 	bl	8005d64 <_Balloc>
 8005e76:	4605      	mov	r5, r0
 8005e78:	b928      	cbnz	r0, 8005e86 <__multadd+0x5e>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	4b0d      	ldr	r3, [pc, #52]	; (8005eb4 <__multadd+0x8c>)
 8005e7e:	480e      	ldr	r0, [pc, #56]	; (8005eb8 <__multadd+0x90>)
 8005e80:	21b5      	movs	r1, #181	; 0xb5
 8005e82:	f000 fd13 	bl	80068ac <__assert_func>
 8005e86:	6922      	ldr	r2, [r4, #16]
 8005e88:	3202      	adds	r2, #2
 8005e8a:	f104 010c 	add.w	r1, r4, #12
 8005e8e:	0092      	lsls	r2, r2, #2
 8005e90:	300c      	adds	r0, #12
 8005e92:	f7ff ff59 	bl	8005d48 <memcpy>
 8005e96:	4621      	mov	r1, r4
 8005e98:	4638      	mov	r0, r7
 8005e9a:	f7ff ffa3 	bl	8005de4 <_Bfree>
 8005e9e:	462c      	mov	r4, r5
 8005ea0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005ea4:	3601      	adds	r6, #1
 8005ea6:	f8c3 8014 	str.w	r8, [r3, #20]
 8005eaa:	6126      	str	r6, [r4, #16]
 8005eac:	4620      	mov	r0, r4
 8005eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eb2:	bf00      	nop
 8005eb4:	08007e07 	.word	0x08007e07
 8005eb8:	08007e18 	.word	0x08007e18

08005ebc <__hi0bits>:
 8005ebc:	0c03      	lsrs	r3, r0, #16
 8005ebe:	041b      	lsls	r3, r3, #16
 8005ec0:	b9d3      	cbnz	r3, 8005ef8 <__hi0bits+0x3c>
 8005ec2:	0400      	lsls	r0, r0, #16
 8005ec4:	2310      	movs	r3, #16
 8005ec6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005eca:	bf04      	itt	eq
 8005ecc:	0200      	lsleq	r0, r0, #8
 8005ece:	3308      	addeq	r3, #8
 8005ed0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005ed4:	bf04      	itt	eq
 8005ed6:	0100      	lsleq	r0, r0, #4
 8005ed8:	3304      	addeq	r3, #4
 8005eda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005ede:	bf04      	itt	eq
 8005ee0:	0080      	lsleq	r0, r0, #2
 8005ee2:	3302      	addeq	r3, #2
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	db05      	blt.n	8005ef4 <__hi0bits+0x38>
 8005ee8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005eec:	f103 0301 	add.w	r3, r3, #1
 8005ef0:	bf08      	it	eq
 8005ef2:	2320      	moveq	r3, #32
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	4770      	bx	lr
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e7e4      	b.n	8005ec6 <__hi0bits+0xa>

08005efc <__lo0bits>:
 8005efc:	6803      	ldr	r3, [r0, #0]
 8005efe:	f013 0207 	ands.w	r2, r3, #7
 8005f02:	4601      	mov	r1, r0
 8005f04:	d00b      	beq.n	8005f1e <__lo0bits+0x22>
 8005f06:	07da      	lsls	r2, r3, #31
 8005f08:	d424      	bmi.n	8005f54 <__lo0bits+0x58>
 8005f0a:	0798      	lsls	r0, r3, #30
 8005f0c:	bf49      	itett	mi
 8005f0e:	085b      	lsrmi	r3, r3, #1
 8005f10:	089b      	lsrpl	r3, r3, #2
 8005f12:	2001      	movmi	r0, #1
 8005f14:	600b      	strmi	r3, [r1, #0]
 8005f16:	bf5c      	itt	pl
 8005f18:	600b      	strpl	r3, [r1, #0]
 8005f1a:	2002      	movpl	r0, #2
 8005f1c:	4770      	bx	lr
 8005f1e:	b298      	uxth	r0, r3
 8005f20:	b9b0      	cbnz	r0, 8005f50 <__lo0bits+0x54>
 8005f22:	0c1b      	lsrs	r3, r3, #16
 8005f24:	2010      	movs	r0, #16
 8005f26:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f2a:	bf04      	itt	eq
 8005f2c:	0a1b      	lsreq	r3, r3, #8
 8005f2e:	3008      	addeq	r0, #8
 8005f30:	071a      	lsls	r2, r3, #28
 8005f32:	bf04      	itt	eq
 8005f34:	091b      	lsreq	r3, r3, #4
 8005f36:	3004      	addeq	r0, #4
 8005f38:	079a      	lsls	r2, r3, #30
 8005f3a:	bf04      	itt	eq
 8005f3c:	089b      	lsreq	r3, r3, #2
 8005f3e:	3002      	addeq	r0, #2
 8005f40:	07da      	lsls	r2, r3, #31
 8005f42:	d403      	bmi.n	8005f4c <__lo0bits+0x50>
 8005f44:	085b      	lsrs	r3, r3, #1
 8005f46:	f100 0001 	add.w	r0, r0, #1
 8005f4a:	d005      	beq.n	8005f58 <__lo0bits+0x5c>
 8005f4c:	600b      	str	r3, [r1, #0]
 8005f4e:	4770      	bx	lr
 8005f50:	4610      	mov	r0, r2
 8005f52:	e7e8      	b.n	8005f26 <__lo0bits+0x2a>
 8005f54:	2000      	movs	r0, #0
 8005f56:	4770      	bx	lr
 8005f58:	2020      	movs	r0, #32
 8005f5a:	4770      	bx	lr

08005f5c <__i2b>:
 8005f5c:	b510      	push	{r4, lr}
 8005f5e:	460c      	mov	r4, r1
 8005f60:	2101      	movs	r1, #1
 8005f62:	f7ff feff 	bl	8005d64 <_Balloc>
 8005f66:	4602      	mov	r2, r0
 8005f68:	b928      	cbnz	r0, 8005f76 <__i2b+0x1a>
 8005f6a:	4b05      	ldr	r3, [pc, #20]	; (8005f80 <__i2b+0x24>)
 8005f6c:	4805      	ldr	r0, [pc, #20]	; (8005f84 <__i2b+0x28>)
 8005f6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005f72:	f000 fc9b 	bl	80068ac <__assert_func>
 8005f76:	2301      	movs	r3, #1
 8005f78:	6144      	str	r4, [r0, #20]
 8005f7a:	6103      	str	r3, [r0, #16]
 8005f7c:	bd10      	pop	{r4, pc}
 8005f7e:	bf00      	nop
 8005f80:	08007e07 	.word	0x08007e07
 8005f84:	08007e18 	.word	0x08007e18

08005f88 <__multiply>:
 8005f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8c:	4614      	mov	r4, r2
 8005f8e:	690a      	ldr	r2, [r1, #16]
 8005f90:	6923      	ldr	r3, [r4, #16]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	bfb8      	it	lt
 8005f96:	460b      	movlt	r3, r1
 8005f98:	460d      	mov	r5, r1
 8005f9a:	bfbc      	itt	lt
 8005f9c:	4625      	movlt	r5, r4
 8005f9e:	461c      	movlt	r4, r3
 8005fa0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005fa4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005fa8:	68ab      	ldr	r3, [r5, #8]
 8005faa:	6869      	ldr	r1, [r5, #4]
 8005fac:	eb0a 0709 	add.w	r7, sl, r9
 8005fb0:	42bb      	cmp	r3, r7
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	bfb8      	it	lt
 8005fb6:	3101      	addlt	r1, #1
 8005fb8:	f7ff fed4 	bl	8005d64 <_Balloc>
 8005fbc:	b930      	cbnz	r0, 8005fcc <__multiply+0x44>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	4b42      	ldr	r3, [pc, #264]	; (80060cc <__multiply+0x144>)
 8005fc2:	4843      	ldr	r0, [pc, #268]	; (80060d0 <__multiply+0x148>)
 8005fc4:	f240 115d 	movw	r1, #349	; 0x15d
 8005fc8:	f000 fc70 	bl	80068ac <__assert_func>
 8005fcc:	f100 0614 	add.w	r6, r0, #20
 8005fd0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005fd4:	4633      	mov	r3, r6
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	4543      	cmp	r3, r8
 8005fda:	d31e      	bcc.n	800601a <__multiply+0x92>
 8005fdc:	f105 0c14 	add.w	ip, r5, #20
 8005fe0:	f104 0314 	add.w	r3, r4, #20
 8005fe4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005fe8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005fec:	9202      	str	r2, [sp, #8]
 8005fee:	ebac 0205 	sub.w	r2, ip, r5
 8005ff2:	3a15      	subs	r2, #21
 8005ff4:	f022 0203 	bic.w	r2, r2, #3
 8005ff8:	3204      	adds	r2, #4
 8005ffa:	f105 0115 	add.w	r1, r5, #21
 8005ffe:	458c      	cmp	ip, r1
 8006000:	bf38      	it	cc
 8006002:	2204      	movcc	r2, #4
 8006004:	9201      	str	r2, [sp, #4]
 8006006:	9a02      	ldr	r2, [sp, #8]
 8006008:	9303      	str	r3, [sp, #12]
 800600a:	429a      	cmp	r2, r3
 800600c:	d808      	bhi.n	8006020 <__multiply+0x98>
 800600e:	2f00      	cmp	r7, #0
 8006010:	dc55      	bgt.n	80060be <__multiply+0x136>
 8006012:	6107      	str	r7, [r0, #16]
 8006014:	b005      	add	sp, #20
 8006016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601a:	f843 2b04 	str.w	r2, [r3], #4
 800601e:	e7db      	b.n	8005fd8 <__multiply+0x50>
 8006020:	f8b3 a000 	ldrh.w	sl, [r3]
 8006024:	f1ba 0f00 	cmp.w	sl, #0
 8006028:	d020      	beq.n	800606c <__multiply+0xe4>
 800602a:	f105 0e14 	add.w	lr, r5, #20
 800602e:	46b1      	mov	r9, r6
 8006030:	2200      	movs	r2, #0
 8006032:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006036:	f8d9 b000 	ldr.w	fp, [r9]
 800603a:	b2a1      	uxth	r1, r4
 800603c:	fa1f fb8b 	uxth.w	fp, fp
 8006040:	fb0a b101 	mla	r1, sl, r1, fp
 8006044:	4411      	add	r1, r2
 8006046:	f8d9 2000 	ldr.w	r2, [r9]
 800604a:	0c24      	lsrs	r4, r4, #16
 800604c:	0c12      	lsrs	r2, r2, #16
 800604e:	fb0a 2404 	mla	r4, sl, r4, r2
 8006052:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006056:	b289      	uxth	r1, r1
 8006058:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800605c:	45f4      	cmp	ip, lr
 800605e:	f849 1b04 	str.w	r1, [r9], #4
 8006062:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006066:	d8e4      	bhi.n	8006032 <__multiply+0xaa>
 8006068:	9901      	ldr	r1, [sp, #4]
 800606a:	5072      	str	r2, [r6, r1]
 800606c:	9a03      	ldr	r2, [sp, #12]
 800606e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006072:	3304      	adds	r3, #4
 8006074:	f1b9 0f00 	cmp.w	r9, #0
 8006078:	d01f      	beq.n	80060ba <__multiply+0x132>
 800607a:	6834      	ldr	r4, [r6, #0]
 800607c:	f105 0114 	add.w	r1, r5, #20
 8006080:	46b6      	mov	lr, r6
 8006082:	f04f 0a00 	mov.w	sl, #0
 8006086:	880a      	ldrh	r2, [r1, #0]
 8006088:	f8be b002 	ldrh.w	fp, [lr, #2]
 800608c:	fb09 b202 	mla	r2, r9, r2, fp
 8006090:	4492      	add	sl, r2
 8006092:	b2a4      	uxth	r4, r4
 8006094:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006098:	f84e 4b04 	str.w	r4, [lr], #4
 800609c:	f851 4b04 	ldr.w	r4, [r1], #4
 80060a0:	f8be 2000 	ldrh.w	r2, [lr]
 80060a4:	0c24      	lsrs	r4, r4, #16
 80060a6:	fb09 2404 	mla	r4, r9, r4, r2
 80060aa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80060ae:	458c      	cmp	ip, r1
 80060b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80060b4:	d8e7      	bhi.n	8006086 <__multiply+0xfe>
 80060b6:	9a01      	ldr	r2, [sp, #4]
 80060b8:	50b4      	str	r4, [r6, r2]
 80060ba:	3604      	adds	r6, #4
 80060bc:	e7a3      	b.n	8006006 <__multiply+0x7e>
 80060be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1a5      	bne.n	8006012 <__multiply+0x8a>
 80060c6:	3f01      	subs	r7, #1
 80060c8:	e7a1      	b.n	800600e <__multiply+0x86>
 80060ca:	bf00      	nop
 80060cc:	08007e07 	.word	0x08007e07
 80060d0:	08007e18 	.word	0x08007e18

080060d4 <__pow5mult>:
 80060d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060d8:	4615      	mov	r5, r2
 80060da:	f012 0203 	ands.w	r2, r2, #3
 80060de:	4606      	mov	r6, r0
 80060e0:	460f      	mov	r7, r1
 80060e2:	d007      	beq.n	80060f4 <__pow5mult+0x20>
 80060e4:	4c25      	ldr	r4, [pc, #148]	; (800617c <__pow5mult+0xa8>)
 80060e6:	3a01      	subs	r2, #1
 80060e8:	2300      	movs	r3, #0
 80060ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060ee:	f7ff fe9b 	bl	8005e28 <__multadd>
 80060f2:	4607      	mov	r7, r0
 80060f4:	10ad      	asrs	r5, r5, #2
 80060f6:	d03d      	beq.n	8006174 <__pow5mult+0xa0>
 80060f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80060fa:	b97c      	cbnz	r4, 800611c <__pow5mult+0x48>
 80060fc:	2010      	movs	r0, #16
 80060fe:	f7ff fe1b 	bl	8005d38 <malloc>
 8006102:	4602      	mov	r2, r0
 8006104:	6270      	str	r0, [r6, #36]	; 0x24
 8006106:	b928      	cbnz	r0, 8006114 <__pow5mult+0x40>
 8006108:	4b1d      	ldr	r3, [pc, #116]	; (8006180 <__pow5mult+0xac>)
 800610a:	481e      	ldr	r0, [pc, #120]	; (8006184 <__pow5mult+0xb0>)
 800610c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006110:	f000 fbcc 	bl	80068ac <__assert_func>
 8006114:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006118:	6004      	str	r4, [r0, #0]
 800611a:	60c4      	str	r4, [r0, #12]
 800611c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006120:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006124:	b94c      	cbnz	r4, 800613a <__pow5mult+0x66>
 8006126:	f240 2171 	movw	r1, #625	; 0x271
 800612a:	4630      	mov	r0, r6
 800612c:	f7ff ff16 	bl	8005f5c <__i2b>
 8006130:	2300      	movs	r3, #0
 8006132:	f8c8 0008 	str.w	r0, [r8, #8]
 8006136:	4604      	mov	r4, r0
 8006138:	6003      	str	r3, [r0, #0]
 800613a:	f04f 0900 	mov.w	r9, #0
 800613e:	07eb      	lsls	r3, r5, #31
 8006140:	d50a      	bpl.n	8006158 <__pow5mult+0x84>
 8006142:	4639      	mov	r1, r7
 8006144:	4622      	mov	r2, r4
 8006146:	4630      	mov	r0, r6
 8006148:	f7ff ff1e 	bl	8005f88 <__multiply>
 800614c:	4639      	mov	r1, r7
 800614e:	4680      	mov	r8, r0
 8006150:	4630      	mov	r0, r6
 8006152:	f7ff fe47 	bl	8005de4 <_Bfree>
 8006156:	4647      	mov	r7, r8
 8006158:	106d      	asrs	r5, r5, #1
 800615a:	d00b      	beq.n	8006174 <__pow5mult+0xa0>
 800615c:	6820      	ldr	r0, [r4, #0]
 800615e:	b938      	cbnz	r0, 8006170 <__pow5mult+0x9c>
 8006160:	4622      	mov	r2, r4
 8006162:	4621      	mov	r1, r4
 8006164:	4630      	mov	r0, r6
 8006166:	f7ff ff0f 	bl	8005f88 <__multiply>
 800616a:	6020      	str	r0, [r4, #0]
 800616c:	f8c0 9000 	str.w	r9, [r0]
 8006170:	4604      	mov	r4, r0
 8006172:	e7e4      	b.n	800613e <__pow5mult+0x6a>
 8006174:	4638      	mov	r0, r7
 8006176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800617a:	bf00      	nop
 800617c:	08007f68 	.word	0x08007f68
 8006180:	08007d91 	.word	0x08007d91
 8006184:	08007e18 	.word	0x08007e18

08006188 <__lshift>:
 8006188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800618c:	460c      	mov	r4, r1
 800618e:	6849      	ldr	r1, [r1, #4]
 8006190:	6923      	ldr	r3, [r4, #16]
 8006192:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006196:	68a3      	ldr	r3, [r4, #8]
 8006198:	4607      	mov	r7, r0
 800619a:	4691      	mov	r9, r2
 800619c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80061a0:	f108 0601 	add.w	r6, r8, #1
 80061a4:	42b3      	cmp	r3, r6
 80061a6:	db0b      	blt.n	80061c0 <__lshift+0x38>
 80061a8:	4638      	mov	r0, r7
 80061aa:	f7ff fddb 	bl	8005d64 <_Balloc>
 80061ae:	4605      	mov	r5, r0
 80061b0:	b948      	cbnz	r0, 80061c6 <__lshift+0x3e>
 80061b2:	4602      	mov	r2, r0
 80061b4:	4b28      	ldr	r3, [pc, #160]	; (8006258 <__lshift+0xd0>)
 80061b6:	4829      	ldr	r0, [pc, #164]	; (800625c <__lshift+0xd4>)
 80061b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80061bc:	f000 fb76 	bl	80068ac <__assert_func>
 80061c0:	3101      	adds	r1, #1
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	e7ee      	b.n	80061a4 <__lshift+0x1c>
 80061c6:	2300      	movs	r3, #0
 80061c8:	f100 0114 	add.w	r1, r0, #20
 80061cc:	f100 0210 	add.w	r2, r0, #16
 80061d0:	4618      	mov	r0, r3
 80061d2:	4553      	cmp	r3, sl
 80061d4:	db33      	blt.n	800623e <__lshift+0xb6>
 80061d6:	6920      	ldr	r0, [r4, #16]
 80061d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061dc:	f104 0314 	add.w	r3, r4, #20
 80061e0:	f019 091f 	ands.w	r9, r9, #31
 80061e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80061ec:	d02b      	beq.n	8006246 <__lshift+0xbe>
 80061ee:	f1c9 0e20 	rsb	lr, r9, #32
 80061f2:	468a      	mov	sl, r1
 80061f4:	2200      	movs	r2, #0
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	fa00 f009 	lsl.w	r0, r0, r9
 80061fc:	4302      	orrs	r2, r0
 80061fe:	f84a 2b04 	str.w	r2, [sl], #4
 8006202:	f853 2b04 	ldr.w	r2, [r3], #4
 8006206:	459c      	cmp	ip, r3
 8006208:	fa22 f20e 	lsr.w	r2, r2, lr
 800620c:	d8f3      	bhi.n	80061f6 <__lshift+0x6e>
 800620e:	ebac 0304 	sub.w	r3, ip, r4
 8006212:	3b15      	subs	r3, #21
 8006214:	f023 0303 	bic.w	r3, r3, #3
 8006218:	3304      	adds	r3, #4
 800621a:	f104 0015 	add.w	r0, r4, #21
 800621e:	4584      	cmp	ip, r0
 8006220:	bf38      	it	cc
 8006222:	2304      	movcc	r3, #4
 8006224:	50ca      	str	r2, [r1, r3]
 8006226:	b10a      	cbz	r2, 800622c <__lshift+0xa4>
 8006228:	f108 0602 	add.w	r6, r8, #2
 800622c:	3e01      	subs	r6, #1
 800622e:	4638      	mov	r0, r7
 8006230:	612e      	str	r6, [r5, #16]
 8006232:	4621      	mov	r1, r4
 8006234:	f7ff fdd6 	bl	8005de4 <_Bfree>
 8006238:	4628      	mov	r0, r5
 800623a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006242:	3301      	adds	r3, #1
 8006244:	e7c5      	b.n	80061d2 <__lshift+0x4a>
 8006246:	3904      	subs	r1, #4
 8006248:	f853 2b04 	ldr.w	r2, [r3], #4
 800624c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006250:	459c      	cmp	ip, r3
 8006252:	d8f9      	bhi.n	8006248 <__lshift+0xc0>
 8006254:	e7ea      	b.n	800622c <__lshift+0xa4>
 8006256:	bf00      	nop
 8006258:	08007e07 	.word	0x08007e07
 800625c:	08007e18 	.word	0x08007e18

08006260 <__mcmp>:
 8006260:	b530      	push	{r4, r5, lr}
 8006262:	6902      	ldr	r2, [r0, #16]
 8006264:	690c      	ldr	r4, [r1, #16]
 8006266:	1b12      	subs	r2, r2, r4
 8006268:	d10e      	bne.n	8006288 <__mcmp+0x28>
 800626a:	f100 0314 	add.w	r3, r0, #20
 800626e:	3114      	adds	r1, #20
 8006270:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006274:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006278:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800627c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006280:	42a5      	cmp	r5, r4
 8006282:	d003      	beq.n	800628c <__mcmp+0x2c>
 8006284:	d305      	bcc.n	8006292 <__mcmp+0x32>
 8006286:	2201      	movs	r2, #1
 8006288:	4610      	mov	r0, r2
 800628a:	bd30      	pop	{r4, r5, pc}
 800628c:	4283      	cmp	r3, r0
 800628e:	d3f3      	bcc.n	8006278 <__mcmp+0x18>
 8006290:	e7fa      	b.n	8006288 <__mcmp+0x28>
 8006292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006296:	e7f7      	b.n	8006288 <__mcmp+0x28>

08006298 <__mdiff>:
 8006298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629c:	460c      	mov	r4, r1
 800629e:	4606      	mov	r6, r0
 80062a0:	4611      	mov	r1, r2
 80062a2:	4620      	mov	r0, r4
 80062a4:	4617      	mov	r7, r2
 80062a6:	f7ff ffdb 	bl	8006260 <__mcmp>
 80062aa:	1e05      	subs	r5, r0, #0
 80062ac:	d110      	bne.n	80062d0 <__mdiff+0x38>
 80062ae:	4629      	mov	r1, r5
 80062b0:	4630      	mov	r0, r6
 80062b2:	f7ff fd57 	bl	8005d64 <_Balloc>
 80062b6:	b930      	cbnz	r0, 80062c6 <__mdiff+0x2e>
 80062b8:	4b39      	ldr	r3, [pc, #228]	; (80063a0 <__mdiff+0x108>)
 80062ba:	4602      	mov	r2, r0
 80062bc:	f240 2132 	movw	r1, #562	; 0x232
 80062c0:	4838      	ldr	r0, [pc, #224]	; (80063a4 <__mdiff+0x10c>)
 80062c2:	f000 faf3 	bl	80068ac <__assert_func>
 80062c6:	2301      	movs	r3, #1
 80062c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80062cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d0:	bfa4      	itt	ge
 80062d2:	463b      	movge	r3, r7
 80062d4:	4627      	movge	r7, r4
 80062d6:	4630      	mov	r0, r6
 80062d8:	6879      	ldr	r1, [r7, #4]
 80062da:	bfa6      	itte	ge
 80062dc:	461c      	movge	r4, r3
 80062de:	2500      	movge	r5, #0
 80062e0:	2501      	movlt	r5, #1
 80062e2:	f7ff fd3f 	bl	8005d64 <_Balloc>
 80062e6:	b920      	cbnz	r0, 80062f2 <__mdiff+0x5a>
 80062e8:	4b2d      	ldr	r3, [pc, #180]	; (80063a0 <__mdiff+0x108>)
 80062ea:	4602      	mov	r2, r0
 80062ec:	f44f 7110 	mov.w	r1, #576	; 0x240
 80062f0:	e7e6      	b.n	80062c0 <__mdiff+0x28>
 80062f2:	693e      	ldr	r6, [r7, #16]
 80062f4:	60c5      	str	r5, [r0, #12]
 80062f6:	6925      	ldr	r5, [r4, #16]
 80062f8:	f107 0114 	add.w	r1, r7, #20
 80062fc:	f104 0914 	add.w	r9, r4, #20
 8006300:	f100 0e14 	add.w	lr, r0, #20
 8006304:	f107 0210 	add.w	r2, r7, #16
 8006308:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800630c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006310:	46f2      	mov	sl, lr
 8006312:	2700      	movs	r7, #0
 8006314:	f859 3b04 	ldr.w	r3, [r9], #4
 8006318:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800631c:	fa1f f883 	uxth.w	r8, r3
 8006320:	fa17 f78b 	uxtah	r7, r7, fp
 8006324:	0c1b      	lsrs	r3, r3, #16
 8006326:	eba7 0808 	sub.w	r8, r7, r8
 800632a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800632e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006332:	fa1f f888 	uxth.w	r8, r8
 8006336:	141f      	asrs	r7, r3, #16
 8006338:	454d      	cmp	r5, r9
 800633a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800633e:	f84a 3b04 	str.w	r3, [sl], #4
 8006342:	d8e7      	bhi.n	8006314 <__mdiff+0x7c>
 8006344:	1b2b      	subs	r3, r5, r4
 8006346:	3b15      	subs	r3, #21
 8006348:	f023 0303 	bic.w	r3, r3, #3
 800634c:	3304      	adds	r3, #4
 800634e:	3415      	adds	r4, #21
 8006350:	42a5      	cmp	r5, r4
 8006352:	bf38      	it	cc
 8006354:	2304      	movcc	r3, #4
 8006356:	4419      	add	r1, r3
 8006358:	4473      	add	r3, lr
 800635a:	469e      	mov	lr, r3
 800635c:	460d      	mov	r5, r1
 800635e:	4565      	cmp	r5, ip
 8006360:	d30e      	bcc.n	8006380 <__mdiff+0xe8>
 8006362:	f10c 0203 	add.w	r2, ip, #3
 8006366:	1a52      	subs	r2, r2, r1
 8006368:	f022 0203 	bic.w	r2, r2, #3
 800636c:	3903      	subs	r1, #3
 800636e:	458c      	cmp	ip, r1
 8006370:	bf38      	it	cc
 8006372:	2200      	movcc	r2, #0
 8006374:	441a      	add	r2, r3
 8006376:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800637a:	b17b      	cbz	r3, 800639c <__mdiff+0x104>
 800637c:	6106      	str	r6, [r0, #16]
 800637e:	e7a5      	b.n	80062cc <__mdiff+0x34>
 8006380:	f855 8b04 	ldr.w	r8, [r5], #4
 8006384:	fa17 f488 	uxtah	r4, r7, r8
 8006388:	1422      	asrs	r2, r4, #16
 800638a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800638e:	b2a4      	uxth	r4, r4
 8006390:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006394:	f84e 4b04 	str.w	r4, [lr], #4
 8006398:	1417      	asrs	r7, r2, #16
 800639a:	e7e0      	b.n	800635e <__mdiff+0xc6>
 800639c:	3e01      	subs	r6, #1
 800639e:	e7ea      	b.n	8006376 <__mdiff+0xde>
 80063a0:	08007e07 	.word	0x08007e07
 80063a4:	08007e18 	.word	0x08007e18

080063a8 <__d2b>:
 80063a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80063ac:	4689      	mov	r9, r1
 80063ae:	2101      	movs	r1, #1
 80063b0:	ec57 6b10 	vmov	r6, r7, d0
 80063b4:	4690      	mov	r8, r2
 80063b6:	f7ff fcd5 	bl	8005d64 <_Balloc>
 80063ba:	4604      	mov	r4, r0
 80063bc:	b930      	cbnz	r0, 80063cc <__d2b+0x24>
 80063be:	4602      	mov	r2, r0
 80063c0:	4b25      	ldr	r3, [pc, #148]	; (8006458 <__d2b+0xb0>)
 80063c2:	4826      	ldr	r0, [pc, #152]	; (800645c <__d2b+0xb4>)
 80063c4:	f240 310a 	movw	r1, #778	; 0x30a
 80063c8:	f000 fa70 	bl	80068ac <__assert_func>
 80063cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80063d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80063d4:	bb35      	cbnz	r5, 8006424 <__d2b+0x7c>
 80063d6:	2e00      	cmp	r6, #0
 80063d8:	9301      	str	r3, [sp, #4]
 80063da:	d028      	beq.n	800642e <__d2b+0x86>
 80063dc:	4668      	mov	r0, sp
 80063de:	9600      	str	r6, [sp, #0]
 80063e0:	f7ff fd8c 	bl	8005efc <__lo0bits>
 80063e4:	9900      	ldr	r1, [sp, #0]
 80063e6:	b300      	cbz	r0, 800642a <__d2b+0x82>
 80063e8:	9a01      	ldr	r2, [sp, #4]
 80063ea:	f1c0 0320 	rsb	r3, r0, #32
 80063ee:	fa02 f303 	lsl.w	r3, r2, r3
 80063f2:	430b      	orrs	r3, r1
 80063f4:	40c2      	lsrs	r2, r0
 80063f6:	6163      	str	r3, [r4, #20]
 80063f8:	9201      	str	r2, [sp, #4]
 80063fa:	9b01      	ldr	r3, [sp, #4]
 80063fc:	61a3      	str	r3, [r4, #24]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	bf14      	ite	ne
 8006402:	2202      	movne	r2, #2
 8006404:	2201      	moveq	r2, #1
 8006406:	6122      	str	r2, [r4, #16]
 8006408:	b1d5      	cbz	r5, 8006440 <__d2b+0x98>
 800640a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800640e:	4405      	add	r5, r0
 8006410:	f8c9 5000 	str.w	r5, [r9]
 8006414:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006418:	f8c8 0000 	str.w	r0, [r8]
 800641c:	4620      	mov	r0, r4
 800641e:	b003      	add	sp, #12
 8006420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006424:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006428:	e7d5      	b.n	80063d6 <__d2b+0x2e>
 800642a:	6161      	str	r1, [r4, #20]
 800642c:	e7e5      	b.n	80063fa <__d2b+0x52>
 800642e:	a801      	add	r0, sp, #4
 8006430:	f7ff fd64 	bl	8005efc <__lo0bits>
 8006434:	9b01      	ldr	r3, [sp, #4]
 8006436:	6163      	str	r3, [r4, #20]
 8006438:	2201      	movs	r2, #1
 800643a:	6122      	str	r2, [r4, #16]
 800643c:	3020      	adds	r0, #32
 800643e:	e7e3      	b.n	8006408 <__d2b+0x60>
 8006440:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006444:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006448:	f8c9 0000 	str.w	r0, [r9]
 800644c:	6918      	ldr	r0, [r3, #16]
 800644e:	f7ff fd35 	bl	8005ebc <__hi0bits>
 8006452:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006456:	e7df      	b.n	8006418 <__d2b+0x70>
 8006458:	08007e07 	.word	0x08007e07
 800645c:	08007e18 	.word	0x08007e18

08006460 <_calloc_r>:
 8006460:	b513      	push	{r0, r1, r4, lr}
 8006462:	434a      	muls	r2, r1
 8006464:	4611      	mov	r1, r2
 8006466:	9201      	str	r2, [sp, #4]
 8006468:	f000 f85a 	bl	8006520 <_malloc_r>
 800646c:	4604      	mov	r4, r0
 800646e:	b118      	cbz	r0, 8006478 <_calloc_r+0x18>
 8006470:	9a01      	ldr	r2, [sp, #4]
 8006472:	2100      	movs	r1, #0
 8006474:	f7fe f93e 	bl	80046f4 <memset>
 8006478:	4620      	mov	r0, r4
 800647a:	b002      	add	sp, #8
 800647c:	bd10      	pop	{r4, pc}
	...

08006480 <_free_r>:
 8006480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006482:	2900      	cmp	r1, #0
 8006484:	d048      	beq.n	8006518 <_free_r+0x98>
 8006486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800648a:	9001      	str	r0, [sp, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	f1a1 0404 	sub.w	r4, r1, #4
 8006492:	bfb8      	it	lt
 8006494:	18e4      	addlt	r4, r4, r3
 8006496:	f000 fa65 	bl	8006964 <__malloc_lock>
 800649a:	4a20      	ldr	r2, [pc, #128]	; (800651c <_free_r+0x9c>)
 800649c:	9801      	ldr	r0, [sp, #4]
 800649e:	6813      	ldr	r3, [r2, #0]
 80064a0:	4615      	mov	r5, r2
 80064a2:	b933      	cbnz	r3, 80064b2 <_free_r+0x32>
 80064a4:	6063      	str	r3, [r4, #4]
 80064a6:	6014      	str	r4, [r2, #0]
 80064a8:	b003      	add	sp, #12
 80064aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064ae:	f000 ba5f 	b.w	8006970 <__malloc_unlock>
 80064b2:	42a3      	cmp	r3, r4
 80064b4:	d90b      	bls.n	80064ce <_free_r+0x4e>
 80064b6:	6821      	ldr	r1, [r4, #0]
 80064b8:	1862      	adds	r2, r4, r1
 80064ba:	4293      	cmp	r3, r2
 80064bc:	bf04      	itt	eq
 80064be:	681a      	ldreq	r2, [r3, #0]
 80064c0:	685b      	ldreq	r3, [r3, #4]
 80064c2:	6063      	str	r3, [r4, #4]
 80064c4:	bf04      	itt	eq
 80064c6:	1852      	addeq	r2, r2, r1
 80064c8:	6022      	streq	r2, [r4, #0]
 80064ca:	602c      	str	r4, [r5, #0]
 80064cc:	e7ec      	b.n	80064a8 <_free_r+0x28>
 80064ce:	461a      	mov	r2, r3
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	b10b      	cbz	r3, 80064d8 <_free_r+0x58>
 80064d4:	42a3      	cmp	r3, r4
 80064d6:	d9fa      	bls.n	80064ce <_free_r+0x4e>
 80064d8:	6811      	ldr	r1, [r2, #0]
 80064da:	1855      	adds	r5, r2, r1
 80064dc:	42a5      	cmp	r5, r4
 80064de:	d10b      	bne.n	80064f8 <_free_r+0x78>
 80064e0:	6824      	ldr	r4, [r4, #0]
 80064e2:	4421      	add	r1, r4
 80064e4:	1854      	adds	r4, r2, r1
 80064e6:	42a3      	cmp	r3, r4
 80064e8:	6011      	str	r1, [r2, #0]
 80064ea:	d1dd      	bne.n	80064a8 <_free_r+0x28>
 80064ec:	681c      	ldr	r4, [r3, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	6053      	str	r3, [r2, #4]
 80064f2:	4421      	add	r1, r4
 80064f4:	6011      	str	r1, [r2, #0]
 80064f6:	e7d7      	b.n	80064a8 <_free_r+0x28>
 80064f8:	d902      	bls.n	8006500 <_free_r+0x80>
 80064fa:	230c      	movs	r3, #12
 80064fc:	6003      	str	r3, [r0, #0]
 80064fe:	e7d3      	b.n	80064a8 <_free_r+0x28>
 8006500:	6825      	ldr	r5, [r4, #0]
 8006502:	1961      	adds	r1, r4, r5
 8006504:	428b      	cmp	r3, r1
 8006506:	bf04      	itt	eq
 8006508:	6819      	ldreq	r1, [r3, #0]
 800650a:	685b      	ldreq	r3, [r3, #4]
 800650c:	6063      	str	r3, [r4, #4]
 800650e:	bf04      	itt	eq
 8006510:	1949      	addeq	r1, r1, r5
 8006512:	6021      	streq	r1, [r4, #0]
 8006514:	6054      	str	r4, [r2, #4]
 8006516:	e7c7      	b.n	80064a8 <_free_r+0x28>
 8006518:	b003      	add	sp, #12
 800651a:	bd30      	pop	{r4, r5, pc}
 800651c:	200009d4 	.word	0x200009d4

08006520 <_malloc_r>:
 8006520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006522:	1ccd      	adds	r5, r1, #3
 8006524:	f025 0503 	bic.w	r5, r5, #3
 8006528:	3508      	adds	r5, #8
 800652a:	2d0c      	cmp	r5, #12
 800652c:	bf38      	it	cc
 800652e:	250c      	movcc	r5, #12
 8006530:	2d00      	cmp	r5, #0
 8006532:	4606      	mov	r6, r0
 8006534:	db01      	blt.n	800653a <_malloc_r+0x1a>
 8006536:	42a9      	cmp	r1, r5
 8006538:	d903      	bls.n	8006542 <_malloc_r+0x22>
 800653a:	230c      	movs	r3, #12
 800653c:	6033      	str	r3, [r6, #0]
 800653e:	2000      	movs	r0, #0
 8006540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006542:	f000 fa0f 	bl	8006964 <__malloc_lock>
 8006546:	4921      	ldr	r1, [pc, #132]	; (80065cc <_malloc_r+0xac>)
 8006548:	680a      	ldr	r2, [r1, #0]
 800654a:	4614      	mov	r4, r2
 800654c:	b99c      	cbnz	r4, 8006576 <_malloc_r+0x56>
 800654e:	4f20      	ldr	r7, [pc, #128]	; (80065d0 <_malloc_r+0xb0>)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	b923      	cbnz	r3, 800655e <_malloc_r+0x3e>
 8006554:	4621      	mov	r1, r4
 8006556:	4630      	mov	r0, r6
 8006558:	f000 f998 	bl	800688c <_sbrk_r>
 800655c:	6038      	str	r0, [r7, #0]
 800655e:	4629      	mov	r1, r5
 8006560:	4630      	mov	r0, r6
 8006562:	f000 f993 	bl	800688c <_sbrk_r>
 8006566:	1c43      	adds	r3, r0, #1
 8006568:	d123      	bne.n	80065b2 <_malloc_r+0x92>
 800656a:	230c      	movs	r3, #12
 800656c:	6033      	str	r3, [r6, #0]
 800656e:	4630      	mov	r0, r6
 8006570:	f000 f9fe 	bl	8006970 <__malloc_unlock>
 8006574:	e7e3      	b.n	800653e <_malloc_r+0x1e>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	1b5b      	subs	r3, r3, r5
 800657a:	d417      	bmi.n	80065ac <_malloc_r+0x8c>
 800657c:	2b0b      	cmp	r3, #11
 800657e:	d903      	bls.n	8006588 <_malloc_r+0x68>
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	441c      	add	r4, r3
 8006584:	6025      	str	r5, [r4, #0]
 8006586:	e004      	b.n	8006592 <_malloc_r+0x72>
 8006588:	6863      	ldr	r3, [r4, #4]
 800658a:	42a2      	cmp	r2, r4
 800658c:	bf0c      	ite	eq
 800658e:	600b      	streq	r3, [r1, #0]
 8006590:	6053      	strne	r3, [r2, #4]
 8006592:	4630      	mov	r0, r6
 8006594:	f000 f9ec 	bl	8006970 <__malloc_unlock>
 8006598:	f104 000b 	add.w	r0, r4, #11
 800659c:	1d23      	adds	r3, r4, #4
 800659e:	f020 0007 	bic.w	r0, r0, #7
 80065a2:	1ac2      	subs	r2, r0, r3
 80065a4:	d0cc      	beq.n	8006540 <_malloc_r+0x20>
 80065a6:	1a1b      	subs	r3, r3, r0
 80065a8:	50a3      	str	r3, [r4, r2]
 80065aa:	e7c9      	b.n	8006540 <_malloc_r+0x20>
 80065ac:	4622      	mov	r2, r4
 80065ae:	6864      	ldr	r4, [r4, #4]
 80065b0:	e7cc      	b.n	800654c <_malloc_r+0x2c>
 80065b2:	1cc4      	adds	r4, r0, #3
 80065b4:	f024 0403 	bic.w	r4, r4, #3
 80065b8:	42a0      	cmp	r0, r4
 80065ba:	d0e3      	beq.n	8006584 <_malloc_r+0x64>
 80065bc:	1a21      	subs	r1, r4, r0
 80065be:	4630      	mov	r0, r6
 80065c0:	f000 f964 	bl	800688c <_sbrk_r>
 80065c4:	3001      	adds	r0, #1
 80065c6:	d1dd      	bne.n	8006584 <_malloc_r+0x64>
 80065c8:	e7cf      	b.n	800656a <_malloc_r+0x4a>
 80065ca:	bf00      	nop
 80065cc:	200009d4 	.word	0x200009d4
 80065d0:	200009d8 	.word	0x200009d8

080065d4 <__ssputs_r>:
 80065d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065d8:	688e      	ldr	r6, [r1, #8]
 80065da:	429e      	cmp	r6, r3
 80065dc:	4682      	mov	sl, r0
 80065de:	460c      	mov	r4, r1
 80065e0:	4690      	mov	r8, r2
 80065e2:	461f      	mov	r7, r3
 80065e4:	d838      	bhi.n	8006658 <__ssputs_r+0x84>
 80065e6:	898a      	ldrh	r2, [r1, #12]
 80065e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065ec:	d032      	beq.n	8006654 <__ssputs_r+0x80>
 80065ee:	6825      	ldr	r5, [r4, #0]
 80065f0:	6909      	ldr	r1, [r1, #16]
 80065f2:	eba5 0901 	sub.w	r9, r5, r1
 80065f6:	6965      	ldr	r5, [r4, #20]
 80065f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006600:	3301      	adds	r3, #1
 8006602:	444b      	add	r3, r9
 8006604:	106d      	asrs	r5, r5, #1
 8006606:	429d      	cmp	r5, r3
 8006608:	bf38      	it	cc
 800660a:	461d      	movcc	r5, r3
 800660c:	0553      	lsls	r3, r2, #21
 800660e:	d531      	bpl.n	8006674 <__ssputs_r+0xa0>
 8006610:	4629      	mov	r1, r5
 8006612:	f7ff ff85 	bl	8006520 <_malloc_r>
 8006616:	4606      	mov	r6, r0
 8006618:	b950      	cbnz	r0, 8006630 <__ssputs_r+0x5c>
 800661a:	230c      	movs	r3, #12
 800661c:	f8ca 3000 	str.w	r3, [sl]
 8006620:	89a3      	ldrh	r3, [r4, #12]
 8006622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006626:	81a3      	strh	r3, [r4, #12]
 8006628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800662c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006630:	6921      	ldr	r1, [r4, #16]
 8006632:	464a      	mov	r2, r9
 8006634:	f7ff fb88 	bl	8005d48 <memcpy>
 8006638:	89a3      	ldrh	r3, [r4, #12]
 800663a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800663e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006642:	81a3      	strh	r3, [r4, #12]
 8006644:	6126      	str	r6, [r4, #16]
 8006646:	6165      	str	r5, [r4, #20]
 8006648:	444e      	add	r6, r9
 800664a:	eba5 0509 	sub.w	r5, r5, r9
 800664e:	6026      	str	r6, [r4, #0]
 8006650:	60a5      	str	r5, [r4, #8]
 8006652:	463e      	mov	r6, r7
 8006654:	42be      	cmp	r6, r7
 8006656:	d900      	bls.n	800665a <__ssputs_r+0x86>
 8006658:	463e      	mov	r6, r7
 800665a:	4632      	mov	r2, r6
 800665c:	6820      	ldr	r0, [r4, #0]
 800665e:	4641      	mov	r1, r8
 8006660:	f000 f966 	bl	8006930 <memmove>
 8006664:	68a3      	ldr	r3, [r4, #8]
 8006666:	6822      	ldr	r2, [r4, #0]
 8006668:	1b9b      	subs	r3, r3, r6
 800666a:	4432      	add	r2, r6
 800666c:	60a3      	str	r3, [r4, #8]
 800666e:	6022      	str	r2, [r4, #0]
 8006670:	2000      	movs	r0, #0
 8006672:	e7db      	b.n	800662c <__ssputs_r+0x58>
 8006674:	462a      	mov	r2, r5
 8006676:	f000 f981 	bl	800697c <_realloc_r>
 800667a:	4606      	mov	r6, r0
 800667c:	2800      	cmp	r0, #0
 800667e:	d1e1      	bne.n	8006644 <__ssputs_r+0x70>
 8006680:	6921      	ldr	r1, [r4, #16]
 8006682:	4650      	mov	r0, sl
 8006684:	f7ff fefc 	bl	8006480 <_free_r>
 8006688:	e7c7      	b.n	800661a <__ssputs_r+0x46>
	...

0800668c <_svfiprintf_r>:
 800668c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006690:	4698      	mov	r8, r3
 8006692:	898b      	ldrh	r3, [r1, #12]
 8006694:	061b      	lsls	r3, r3, #24
 8006696:	b09d      	sub	sp, #116	; 0x74
 8006698:	4607      	mov	r7, r0
 800669a:	460d      	mov	r5, r1
 800669c:	4614      	mov	r4, r2
 800669e:	d50e      	bpl.n	80066be <_svfiprintf_r+0x32>
 80066a0:	690b      	ldr	r3, [r1, #16]
 80066a2:	b963      	cbnz	r3, 80066be <_svfiprintf_r+0x32>
 80066a4:	2140      	movs	r1, #64	; 0x40
 80066a6:	f7ff ff3b 	bl	8006520 <_malloc_r>
 80066aa:	6028      	str	r0, [r5, #0]
 80066ac:	6128      	str	r0, [r5, #16]
 80066ae:	b920      	cbnz	r0, 80066ba <_svfiprintf_r+0x2e>
 80066b0:	230c      	movs	r3, #12
 80066b2:	603b      	str	r3, [r7, #0]
 80066b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066b8:	e0d1      	b.n	800685e <_svfiprintf_r+0x1d2>
 80066ba:	2340      	movs	r3, #64	; 0x40
 80066bc:	616b      	str	r3, [r5, #20]
 80066be:	2300      	movs	r3, #0
 80066c0:	9309      	str	r3, [sp, #36]	; 0x24
 80066c2:	2320      	movs	r3, #32
 80066c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80066cc:	2330      	movs	r3, #48	; 0x30
 80066ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006878 <_svfiprintf_r+0x1ec>
 80066d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066d6:	f04f 0901 	mov.w	r9, #1
 80066da:	4623      	mov	r3, r4
 80066dc:	469a      	mov	sl, r3
 80066de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066e2:	b10a      	cbz	r2, 80066e8 <_svfiprintf_r+0x5c>
 80066e4:	2a25      	cmp	r2, #37	; 0x25
 80066e6:	d1f9      	bne.n	80066dc <_svfiprintf_r+0x50>
 80066e8:	ebba 0b04 	subs.w	fp, sl, r4
 80066ec:	d00b      	beq.n	8006706 <_svfiprintf_r+0x7a>
 80066ee:	465b      	mov	r3, fp
 80066f0:	4622      	mov	r2, r4
 80066f2:	4629      	mov	r1, r5
 80066f4:	4638      	mov	r0, r7
 80066f6:	f7ff ff6d 	bl	80065d4 <__ssputs_r>
 80066fa:	3001      	adds	r0, #1
 80066fc:	f000 80aa 	beq.w	8006854 <_svfiprintf_r+0x1c8>
 8006700:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006702:	445a      	add	r2, fp
 8006704:	9209      	str	r2, [sp, #36]	; 0x24
 8006706:	f89a 3000 	ldrb.w	r3, [sl]
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 80a2 	beq.w	8006854 <_svfiprintf_r+0x1c8>
 8006710:	2300      	movs	r3, #0
 8006712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006716:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800671a:	f10a 0a01 	add.w	sl, sl, #1
 800671e:	9304      	str	r3, [sp, #16]
 8006720:	9307      	str	r3, [sp, #28]
 8006722:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006726:	931a      	str	r3, [sp, #104]	; 0x68
 8006728:	4654      	mov	r4, sl
 800672a:	2205      	movs	r2, #5
 800672c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006730:	4851      	ldr	r0, [pc, #324]	; (8006878 <_svfiprintf_r+0x1ec>)
 8006732:	f7f9 fd5d 	bl	80001f0 <memchr>
 8006736:	9a04      	ldr	r2, [sp, #16]
 8006738:	b9d8      	cbnz	r0, 8006772 <_svfiprintf_r+0xe6>
 800673a:	06d0      	lsls	r0, r2, #27
 800673c:	bf44      	itt	mi
 800673e:	2320      	movmi	r3, #32
 8006740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006744:	0711      	lsls	r1, r2, #28
 8006746:	bf44      	itt	mi
 8006748:	232b      	movmi	r3, #43	; 0x2b
 800674a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800674e:	f89a 3000 	ldrb.w	r3, [sl]
 8006752:	2b2a      	cmp	r3, #42	; 0x2a
 8006754:	d015      	beq.n	8006782 <_svfiprintf_r+0xf6>
 8006756:	9a07      	ldr	r2, [sp, #28]
 8006758:	4654      	mov	r4, sl
 800675a:	2000      	movs	r0, #0
 800675c:	f04f 0c0a 	mov.w	ip, #10
 8006760:	4621      	mov	r1, r4
 8006762:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006766:	3b30      	subs	r3, #48	; 0x30
 8006768:	2b09      	cmp	r3, #9
 800676a:	d94e      	bls.n	800680a <_svfiprintf_r+0x17e>
 800676c:	b1b0      	cbz	r0, 800679c <_svfiprintf_r+0x110>
 800676e:	9207      	str	r2, [sp, #28]
 8006770:	e014      	b.n	800679c <_svfiprintf_r+0x110>
 8006772:	eba0 0308 	sub.w	r3, r0, r8
 8006776:	fa09 f303 	lsl.w	r3, r9, r3
 800677a:	4313      	orrs	r3, r2
 800677c:	9304      	str	r3, [sp, #16]
 800677e:	46a2      	mov	sl, r4
 8006780:	e7d2      	b.n	8006728 <_svfiprintf_r+0x9c>
 8006782:	9b03      	ldr	r3, [sp, #12]
 8006784:	1d19      	adds	r1, r3, #4
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	9103      	str	r1, [sp, #12]
 800678a:	2b00      	cmp	r3, #0
 800678c:	bfbb      	ittet	lt
 800678e:	425b      	neglt	r3, r3
 8006790:	f042 0202 	orrlt.w	r2, r2, #2
 8006794:	9307      	strge	r3, [sp, #28]
 8006796:	9307      	strlt	r3, [sp, #28]
 8006798:	bfb8      	it	lt
 800679a:	9204      	strlt	r2, [sp, #16]
 800679c:	7823      	ldrb	r3, [r4, #0]
 800679e:	2b2e      	cmp	r3, #46	; 0x2e
 80067a0:	d10c      	bne.n	80067bc <_svfiprintf_r+0x130>
 80067a2:	7863      	ldrb	r3, [r4, #1]
 80067a4:	2b2a      	cmp	r3, #42	; 0x2a
 80067a6:	d135      	bne.n	8006814 <_svfiprintf_r+0x188>
 80067a8:	9b03      	ldr	r3, [sp, #12]
 80067aa:	1d1a      	adds	r2, r3, #4
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	9203      	str	r2, [sp, #12]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	bfb8      	it	lt
 80067b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80067b8:	3402      	adds	r4, #2
 80067ba:	9305      	str	r3, [sp, #20]
 80067bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006888 <_svfiprintf_r+0x1fc>
 80067c0:	7821      	ldrb	r1, [r4, #0]
 80067c2:	2203      	movs	r2, #3
 80067c4:	4650      	mov	r0, sl
 80067c6:	f7f9 fd13 	bl	80001f0 <memchr>
 80067ca:	b140      	cbz	r0, 80067de <_svfiprintf_r+0x152>
 80067cc:	2340      	movs	r3, #64	; 0x40
 80067ce:	eba0 000a 	sub.w	r0, r0, sl
 80067d2:	fa03 f000 	lsl.w	r0, r3, r0
 80067d6:	9b04      	ldr	r3, [sp, #16]
 80067d8:	4303      	orrs	r3, r0
 80067da:	3401      	adds	r4, #1
 80067dc:	9304      	str	r3, [sp, #16]
 80067de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067e2:	4826      	ldr	r0, [pc, #152]	; (800687c <_svfiprintf_r+0x1f0>)
 80067e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067e8:	2206      	movs	r2, #6
 80067ea:	f7f9 fd01 	bl	80001f0 <memchr>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d038      	beq.n	8006864 <_svfiprintf_r+0x1d8>
 80067f2:	4b23      	ldr	r3, [pc, #140]	; (8006880 <_svfiprintf_r+0x1f4>)
 80067f4:	bb1b      	cbnz	r3, 800683e <_svfiprintf_r+0x1b2>
 80067f6:	9b03      	ldr	r3, [sp, #12]
 80067f8:	3307      	adds	r3, #7
 80067fa:	f023 0307 	bic.w	r3, r3, #7
 80067fe:	3308      	adds	r3, #8
 8006800:	9303      	str	r3, [sp, #12]
 8006802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006804:	4433      	add	r3, r6
 8006806:	9309      	str	r3, [sp, #36]	; 0x24
 8006808:	e767      	b.n	80066da <_svfiprintf_r+0x4e>
 800680a:	fb0c 3202 	mla	r2, ip, r2, r3
 800680e:	460c      	mov	r4, r1
 8006810:	2001      	movs	r0, #1
 8006812:	e7a5      	b.n	8006760 <_svfiprintf_r+0xd4>
 8006814:	2300      	movs	r3, #0
 8006816:	3401      	adds	r4, #1
 8006818:	9305      	str	r3, [sp, #20]
 800681a:	4619      	mov	r1, r3
 800681c:	f04f 0c0a 	mov.w	ip, #10
 8006820:	4620      	mov	r0, r4
 8006822:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006826:	3a30      	subs	r2, #48	; 0x30
 8006828:	2a09      	cmp	r2, #9
 800682a:	d903      	bls.n	8006834 <_svfiprintf_r+0x1a8>
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0c5      	beq.n	80067bc <_svfiprintf_r+0x130>
 8006830:	9105      	str	r1, [sp, #20]
 8006832:	e7c3      	b.n	80067bc <_svfiprintf_r+0x130>
 8006834:	fb0c 2101 	mla	r1, ip, r1, r2
 8006838:	4604      	mov	r4, r0
 800683a:	2301      	movs	r3, #1
 800683c:	e7f0      	b.n	8006820 <_svfiprintf_r+0x194>
 800683e:	ab03      	add	r3, sp, #12
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	462a      	mov	r2, r5
 8006844:	4b0f      	ldr	r3, [pc, #60]	; (8006884 <_svfiprintf_r+0x1f8>)
 8006846:	a904      	add	r1, sp, #16
 8006848:	4638      	mov	r0, r7
 800684a:	f7fd fffb 	bl	8004844 <_printf_float>
 800684e:	1c42      	adds	r2, r0, #1
 8006850:	4606      	mov	r6, r0
 8006852:	d1d6      	bne.n	8006802 <_svfiprintf_r+0x176>
 8006854:	89ab      	ldrh	r3, [r5, #12]
 8006856:	065b      	lsls	r3, r3, #25
 8006858:	f53f af2c 	bmi.w	80066b4 <_svfiprintf_r+0x28>
 800685c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800685e:	b01d      	add	sp, #116	; 0x74
 8006860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006864:	ab03      	add	r3, sp, #12
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	462a      	mov	r2, r5
 800686a:	4b06      	ldr	r3, [pc, #24]	; (8006884 <_svfiprintf_r+0x1f8>)
 800686c:	a904      	add	r1, sp, #16
 800686e:	4638      	mov	r0, r7
 8006870:	f7fe fa8c 	bl	8004d8c <_printf_i>
 8006874:	e7eb      	b.n	800684e <_svfiprintf_r+0x1c2>
 8006876:	bf00      	nop
 8006878:	08007f74 	.word	0x08007f74
 800687c:	08007f7e 	.word	0x08007f7e
 8006880:	08004845 	.word	0x08004845
 8006884:	080065d5 	.word	0x080065d5
 8006888:	08007f7a 	.word	0x08007f7a

0800688c <_sbrk_r>:
 800688c:	b538      	push	{r3, r4, r5, lr}
 800688e:	4d06      	ldr	r5, [pc, #24]	; (80068a8 <_sbrk_r+0x1c>)
 8006890:	2300      	movs	r3, #0
 8006892:	4604      	mov	r4, r0
 8006894:	4608      	mov	r0, r1
 8006896:	602b      	str	r3, [r5, #0]
 8006898:	f7fb f828 	bl	80018ec <_sbrk>
 800689c:	1c43      	adds	r3, r0, #1
 800689e:	d102      	bne.n	80068a6 <_sbrk_r+0x1a>
 80068a0:	682b      	ldr	r3, [r5, #0]
 80068a2:	b103      	cbz	r3, 80068a6 <_sbrk_r+0x1a>
 80068a4:	6023      	str	r3, [r4, #0]
 80068a6:	bd38      	pop	{r3, r4, r5, pc}
 80068a8:	20000b14 	.word	0x20000b14

080068ac <__assert_func>:
 80068ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80068ae:	4614      	mov	r4, r2
 80068b0:	461a      	mov	r2, r3
 80068b2:	4b09      	ldr	r3, [pc, #36]	; (80068d8 <__assert_func+0x2c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4605      	mov	r5, r0
 80068b8:	68d8      	ldr	r0, [r3, #12]
 80068ba:	b14c      	cbz	r4, 80068d0 <__assert_func+0x24>
 80068bc:	4b07      	ldr	r3, [pc, #28]	; (80068dc <__assert_func+0x30>)
 80068be:	9100      	str	r1, [sp, #0]
 80068c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80068c4:	4906      	ldr	r1, [pc, #24]	; (80068e0 <__assert_func+0x34>)
 80068c6:	462b      	mov	r3, r5
 80068c8:	f000 f80e 	bl	80068e8 <fiprintf>
 80068cc:	f000 faa4 	bl	8006e18 <abort>
 80068d0:	4b04      	ldr	r3, [pc, #16]	; (80068e4 <__assert_func+0x38>)
 80068d2:	461c      	mov	r4, r3
 80068d4:	e7f3      	b.n	80068be <__assert_func+0x12>
 80068d6:	bf00      	nop
 80068d8:	2000000c 	.word	0x2000000c
 80068dc:	08007f85 	.word	0x08007f85
 80068e0:	08007f92 	.word	0x08007f92
 80068e4:	08007fc0 	.word	0x08007fc0

080068e8 <fiprintf>:
 80068e8:	b40e      	push	{r1, r2, r3}
 80068ea:	b503      	push	{r0, r1, lr}
 80068ec:	4601      	mov	r1, r0
 80068ee:	ab03      	add	r3, sp, #12
 80068f0:	4805      	ldr	r0, [pc, #20]	; (8006908 <fiprintf+0x20>)
 80068f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80068f6:	6800      	ldr	r0, [r0, #0]
 80068f8:	9301      	str	r3, [sp, #4]
 80068fa:	f000 f88f 	bl	8006a1c <_vfiprintf_r>
 80068fe:	b002      	add	sp, #8
 8006900:	f85d eb04 	ldr.w	lr, [sp], #4
 8006904:	b003      	add	sp, #12
 8006906:	4770      	bx	lr
 8006908:	2000000c 	.word	0x2000000c

0800690c <__ascii_mbtowc>:
 800690c:	b082      	sub	sp, #8
 800690e:	b901      	cbnz	r1, 8006912 <__ascii_mbtowc+0x6>
 8006910:	a901      	add	r1, sp, #4
 8006912:	b142      	cbz	r2, 8006926 <__ascii_mbtowc+0x1a>
 8006914:	b14b      	cbz	r3, 800692a <__ascii_mbtowc+0x1e>
 8006916:	7813      	ldrb	r3, [r2, #0]
 8006918:	600b      	str	r3, [r1, #0]
 800691a:	7812      	ldrb	r2, [r2, #0]
 800691c:	1e10      	subs	r0, r2, #0
 800691e:	bf18      	it	ne
 8006920:	2001      	movne	r0, #1
 8006922:	b002      	add	sp, #8
 8006924:	4770      	bx	lr
 8006926:	4610      	mov	r0, r2
 8006928:	e7fb      	b.n	8006922 <__ascii_mbtowc+0x16>
 800692a:	f06f 0001 	mvn.w	r0, #1
 800692e:	e7f8      	b.n	8006922 <__ascii_mbtowc+0x16>

08006930 <memmove>:
 8006930:	4288      	cmp	r0, r1
 8006932:	b510      	push	{r4, lr}
 8006934:	eb01 0402 	add.w	r4, r1, r2
 8006938:	d902      	bls.n	8006940 <memmove+0x10>
 800693a:	4284      	cmp	r4, r0
 800693c:	4623      	mov	r3, r4
 800693e:	d807      	bhi.n	8006950 <memmove+0x20>
 8006940:	1e43      	subs	r3, r0, #1
 8006942:	42a1      	cmp	r1, r4
 8006944:	d008      	beq.n	8006958 <memmove+0x28>
 8006946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800694a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800694e:	e7f8      	b.n	8006942 <memmove+0x12>
 8006950:	4402      	add	r2, r0
 8006952:	4601      	mov	r1, r0
 8006954:	428a      	cmp	r2, r1
 8006956:	d100      	bne.n	800695a <memmove+0x2a>
 8006958:	bd10      	pop	{r4, pc}
 800695a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800695e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006962:	e7f7      	b.n	8006954 <memmove+0x24>

08006964 <__malloc_lock>:
 8006964:	4801      	ldr	r0, [pc, #4]	; (800696c <__malloc_lock+0x8>)
 8006966:	f000 bc17 	b.w	8007198 <__retarget_lock_acquire_recursive>
 800696a:	bf00      	nop
 800696c:	20000b1c 	.word	0x20000b1c

08006970 <__malloc_unlock>:
 8006970:	4801      	ldr	r0, [pc, #4]	; (8006978 <__malloc_unlock+0x8>)
 8006972:	f000 bc12 	b.w	800719a <__retarget_lock_release_recursive>
 8006976:	bf00      	nop
 8006978:	20000b1c 	.word	0x20000b1c

0800697c <_realloc_r>:
 800697c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697e:	4607      	mov	r7, r0
 8006980:	4614      	mov	r4, r2
 8006982:	460e      	mov	r6, r1
 8006984:	b921      	cbnz	r1, 8006990 <_realloc_r+0x14>
 8006986:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800698a:	4611      	mov	r1, r2
 800698c:	f7ff bdc8 	b.w	8006520 <_malloc_r>
 8006990:	b922      	cbnz	r2, 800699c <_realloc_r+0x20>
 8006992:	f7ff fd75 	bl	8006480 <_free_r>
 8006996:	4625      	mov	r5, r4
 8006998:	4628      	mov	r0, r5
 800699a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800699c:	f000 fc62 	bl	8007264 <_malloc_usable_size_r>
 80069a0:	42a0      	cmp	r0, r4
 80069a2:	d20f      	bcs.n	80069c4 <_realloc_r+0x48>
 80069a4:	4621      	mov	r1, r4
 80069a6:	4638      	mov	r0, r7
 80069a8:	f7ff fdba 	bl	8006520 <_malloc_r>
 80069ac:	4605      	mov	r5, r0
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d0f2      	beq.n	8006998 <_realloc_r+0x1c>
 80069b2:	4631      	mov	r1, r6
 80069b4:	4622      	mov	r2, r4
 80069b6:	f7ff f9c7 	bl	8005d48 <memcpy>
 80069ba:	4631      	mov	r1, r6
 80069bc:	4638      	mov	r0, r7
 80069be:	f7ff fd5f 	bl	8006480 <_free_r>
 80069c2:	e7e9      	b.n	8006998 <_realloc_r+0x1c>
 80069c4:	4635      	mov	r5, r6
 80069c6:	e7e7      	b.n	8006998 <_realloc_r+0x1c>

080069c8 <__sfputc_r>:
 80069c8:	6893      	ldr	r3, [r2, #8]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	b410      	push	{r4}
 80069d0:	6093      	str	r3, [r2, #8]
 80069d2:	da08      	bge.n	80069e6 <__sfputc_r+0x1e>
 80069d4:	6994      	ldr	r4, [r2, #24]
 80069d6:	42a3      	cmp	r3, r4
 80069d8:	db01      	blt.n	80069de <__sfputc_r+0x16>
 80069da:	290a      	cmp	r1, #10
 80069dc:	d103      	bne.n	80069e6 <__sfputc_r+0x1e>
 80069de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069e2:	f000 b94b 	b.w	8006c7c <__swbuf_r>
 80069e6:	6813      	ldr	r3, [r2, #0]
 80069e8:	1c58      	adds	r0, r3, #1
 80069ea:	6010      	str	r0, [r2, #0]
 80069ec:	7019      	strb	r1, [r3, #0]
 80069ee:	4608      	mov	r0, r1
 80069f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <__sfputs_r>:
 80069f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f8:	4606      	mov	r6, r0
 80069fa:	460f      	mov	r7, r1
 80069fc:	4614      	mov	r4, r2
 80069fe:	18d5      	adds	r5, r2, r3
 8006a00:	42ac      	cmp	r4, r5
 8006a02:	d101      	bne.n	8006a08 <__sfputs_r+0x12>
 8006a04:	2000      	movs	r0, #0
 8006a06:	e007      	b.n	8006a18 <__sfputs_r+0x22>
 8006a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a0c:	463a      	mov	r2, r7
 8006a0e:	4630      	mov	r0, r6
 8006a10:	f7ff ffda 	bl	80069c8 <__sfputc_r>
 8006a14:	1c43      	adds	r3, r0, #1
 8006a16:	d1f3      	bne.n	8006a00 <__sfputs_r+0xa>
 8006a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a1c <_vfiprintf_r>:
 8006a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a20:	460d      	mov	r5, r1
 8006a22:	b09d      	sub	sp, #116	; 0x74
 8006a24:	4614      	mov	r4, r2
 8006a26:	4698      	mov	r8, r3
 8006a28:	4606      	mov	r6, r0
 8006a2a:	b118      	cbz	r0, 8006a34 <_vfiprintf_r+0x18>
 8006a2c:	6983      	ldr	r3, [r0, #24]
 8006a2e:	b90b      	cbnz	r3, 8006a34 <_vfiprintf_r+0x18>
 8006a30:	f000 fb14 	bl	800705c <__sinit>
 8006a34:	4b89      	ldr	r3, [pc, #548]	; (8006c5c <_vfiprintf_r+0x240>)
 8006a36:	429d      	cmp	r5, r3
 8006a38:	d11b      	bne.n	8006a72 <_vfiprintf_r+0x56>
 8006a3a:	6875      	ldr	r5, [r6, #4]
 8006a3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a3e:	07d9      	lsls	r1, r3, #31
 8006a40:	d405      	bmi.n	8006a4e <_vfiprintf_r+0x32>
 8006a42:	89ab      	ldrh	r3, [r5, #12]
 8006a44:	059a      	lsls	r2, r3, #22
 8006a46:	d402      	bmi.n	8006a4e <_vfiprintf_r+0x32>
 8006a48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a4a:	f000 fba5 	bl	8007198 <__retarget_lock_acquire_recursive>
 8006a4e:	89ab      	ldrh	r3, [r5, #12]
 8006a50:	071b      	lsls	r3, r3, #28
 8006a52:	d501      	bpl.n	8006a58 <_vfiprintf_r+0x3c>
 8006a54:	692b      	ldr	r3, [r5, #16]
 8006a56:	b9eb      	cbnz	r3, 8006a94 <_vfiprintf_r+0x78>
 8006a58:	4629      	mov	r1, r5
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	f000 f96e 	bl	8006d3c <__swsetup_r>
 8006a60:	b1c0      	cbz	r0, 8006a94 <_vfiprintf_r+0x78>
 8006a62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a64:	07dc      	lsls	r4, r3, #31
 8006a66:	d50e      	bpl.n	8006a86 <_vfiprintf_r+0x6a>
 8006a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a6c:	b01d      	add	sp, #116	; 0x74
 8006a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a72:	4b7b      	ldr	r3, [pc, #492]	; (8006c60 <_vfiprintf_r+0x244>)
 8006a74:	429d      	cmp	r5, r3
 8006a76:	d101      	bne.n	8006a7c <_vfiprintf_r+0x60>
 8006a78:	68b5      	ldr	r5, [r6, #8]
 8006a7a:	e7df      	b.n	8006a3c <_vfiprintf_r+0x20>
 8006a7c:	4b79      	ldr	r3, [pc, #484]	; (8006c64 <_vfiprintf_r+0x248>)
 8006a7e:	429d      	cmp	r5, r3
 8006a80:	bf08      	it	eq
 8006a82:	68f5      	ldreq	r5, [r6, #12]
 8006a84:	e7da      	b.n	8006a3c <_vfiprintf_r+0x20>
 8006a86:	89ab      	ldrh	r3, [r5, #12]
 8006a88:	0598      	lsls	r0, r3, #22
 8006a8a:	d4ed      	bmi.n	8006a68 <_vfiprintf_r+0x4c>
 8006a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a8e:	f000 fb84 	bl	800719a <__retarget_lock_release_recursive>
 8006a92:	e7e9      	b.n	8006a68 <_vfiprintf_r+0x4c>
 8006a94:	2300      	movs	r3, #0
 8006a96:	9309      	str	r3, [sp, #36]	; 0x24
 8006a98:	2320      	movs	r3, #32
 8006a9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006aa2:	2330      	movs	r3, #48	; 0x30
 8006aa4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c68 <_vfiprintf_r+0x24c>
 8006aa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006aac:	f04f 0901 	mov.w	r9, #1
 8006ab0:	4623      	mov	r3, r4
 8006ab2:	469a      	mov	sl, r3
 8006ab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ab8:	b10a      	cbz	r2, 8006abe <_vfiprintf_r+0xa2>
 8006aba:	2a25      	cmp	r2, #37	; 0x25
 8006abc:	d1f9      	bne.n	8006ab2 <_vfiprintf_r+0x96>
 8006abe:	ebba 0b04 	subs.w	fp, sl, r4
 8006ac2:	d00b      	beq.n	8006adc <_vfiprintf_r+0xc0>
 8006ac4:	465b      	mov	r3, fp
 8006ac6:	4622      	mov	r2, r4
 8006ac8:	4629      	mov	r1, r5
 8006aca:	4630      	mov	r0, r6
 8006acc:	f7ff ff93 	bl	80069f6 <__sfputs_r>
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	f000 80aa 	beq.w	8006c2a <_vfiprintf_r+0x20e>
 8006ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ad8:	445a      	add	r2, fp
 8006ada:	9209      	str	r2, [sp, #36]	; 0x24
 8006adc:	f89a 3000 	ldrb.w	r3, [sl]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 80a2 	beq.w	8006c2a <_vfiprintf_r+0x20e>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006aec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006af0:	f10a 0a01 	add.w	sl, sl, #1
 8006af4:	9304      	str	r3, [sp, #16]
 8006af6:	9307      	str	r3, [sp, #28]
 8006af8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006afc:	931a      	str	r3, [sp, #104]	; 0x68
 8006afe:	4654      	mov	r4, sl
 8006b00:	2205      	movs	r2, #5
 8006b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b06:	4858      	ldr	r0, [pc, #352]	; (8006c68 <_vfiprintf_r+0x24c>)
 8006b08:	f7f9 fb72 	bl	80001f0 <memchr>
 8006b0c:	9a04      	ldr	r2, [sp, #16]
 8006b0e:	b9d8      	cbnz	r0, 8006b48 <_vfiprintf_r+0x12c>
 8006b10:	06d1      	lsls	r1, r2, #27
 8006b12:	bf44      	itt	mi
 8006b14:	2320      	movmi	r3, #32
 8006b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b1a:	0713      	lsls	r3, r2, #28
 8006b1c:	bf44      	itt	mi
 8006b1e:	232b      	movmi	r3, #43	; 0x2b
 8006b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b24:	f89a 3000 	ldrb.w	r3, [sl]
 8006b28:	2b2a      	cmp	r3, #42	; 0x2a
 8006b2a:	d015      	beq.n	8006b58 <_vfiprintf_r+0x13c>
 8006b2c:	9a07      	ldr	r2, [sp, #28]
 8006b2e:	4654      	mov	r4, sl
 8006b30:	2000      	movs	r0, #0
 8006b32:	f04f 0c0a 	mov.w	ip, #10
 8006b36:	4621      	mov	r1, r4
 8006b38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b3c:	3b30      	subs	r3, #48	; 0x30
 8006b3e:	2b09      	cmp	r3, #9
 8006b40:	d94e      	bls.n	8006be0 <_vfiprintf_r+0x1c4>
 8006b42:	b1b0      	cbz	r0, 8006b72 <_vfiprintf_r+0x156>
 8006b44:	9207      	str	r2, [sp, #28]
 8006b46:	e014      	b.n	8006b72 <_vfiprintf_r+0x156>
 8006b48:	eba0 0308 	sub.w	r3, r0, r8
 8006b4c:	fa09 f303 	lsl.w	r3, r9, r3
 8006b50:	4313      	orrs	r3, r2
 8006b52:	9304      	str	r3, [sp, #16]
 8006b54:	46a2      	mov	sl, r4
 8006b56:	e7d2      	b.n	8006afe <_vfiprintf_r+0xe2>
 8006b58:	9b03      	ldr	r3, [sp, #12]
 8006b5a:	1d19      	adds	r1, r3, #4
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	9103      	str	r1, [sp, #12]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	bfbb      	ittet	lt
 8006b64:	425b      	neglt	r3, r3
 8006b66:	f042 0202 	orrlt.w	r2, r2, #2
 8006b6a:	9307      	strge	r3, [sp, #28]
 8006b6c:	9307      	strlt	r3, [sp, #28]
 8006b6e:	bfb8      	it	lt
 8006b70:	9204      	strlt	r2, [sp, #16]
 8006b72:	7823      	ldrb	r3, [r4, #0]
 8006b74:	2b2e      	cmp	r3, #46	; 0x2e
 8006b76:	d10c      	bne.n	8006b92 <_vfiprintf_r+0x176>
 8006b78:	7863      	ldrb	r3, [r4, #1]
 8006b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b7c:	d135      	bne.n	8006bea <_vfiprintf_r+0x1ce>
 8006b7e:	9b03      	ldr	r3, [sp, #12]
 8006b80:	1d1a      	adds	r2, r3, #4
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	9203      	str	r2, [sp, #12]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	bfb8      	it	lt
 8006b8a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006b8e:	3402      	adds	r4, #2
 8006b90:	9305      	str	r3, [sp, #20]
 8006b92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c78 <_vfiprintf_r+0x25c>
 8006b96:	7821      	ldrb	r1, [r4, #0]
 8006b98:	2203      	movs	r2, #3
 8006b9a:	4650      	mov	r0, sl
 8006b9c:	f7f9 fb28 	bl	80001f0 <memchr>
 8006ba0:	b140      	cbz	r0, 8006bb4 <_vfiprintf_r+0x198>
 8006ba2:	2340      	movs	r3, #64	; 0x40
 8006ba4:	eba0 000a 	sub.w	r0, r0, sl
 8006ba8:	fa03 f000 	lsl.w	r0, r3, r0
 8006bac:	9b04      	ldr	r3, [sp, #16]
 8006bae:	4303      	orrs	r3, r0
 8006bb0:	3401      	adds	r4, #1
 8006bb2:	9304      	str	r3, [sp, #16]
 8006bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bb8:	482c      	ldr	r0, [pc, #176]	; (8006c6c <_vfiprintf_r+0x250>)
 8006bba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bbe:	2206      	movs	r2, #6
 8006bc0:	f7f9 fb16 	bl	80001f0 <memchr>
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	d03f      	beq.n	8006c48 <_vfiprintf_r+0x22c>
 8006bc8:	4b29      	ldr	r3, [pc, #164]	; (8006c70 <_vfiprintf_r+0x254>)
 8006bca:	bb1b      	cbnz	r3, 8006c14 <_vfiprintf_r+0x1f8>
 8006bcc:	9b03      	ldr	r3, [sp, #12]
 8006bce:	3307      	adds	r3, #7
 8006bd0:	f023 0307 	bic.w	r3, r3, #7
 8006bd4:	3308      	adds	r3, #8
 8006bd6:	9303      	str	r3, [sp, #12]
 8006bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bda:	443b      	add	r3, r7
 8006bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8006bde:	e767      	b.n	8006ab0 <_vfiprintf_r+0x94>
 8006be0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006be4:	460c      	mov	r4, r1
 8006be6:	2001      	movs	r0, #1
 8006be8:	e7a5      	b.n	8006b36 <_vfiprintf_r+0x11a>
 8006bea:	2300      	movs	r3, #0
 8006bec:	3401      	adds	r4, #1
 8006bee:	9305      	str	r3, [sp, #20]
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	f04f 0c0a 	mov.w	ip, #10
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bfc:	3a30      	subs	r2, #48	; 0x30
 8006bfe:	2a09      	cmp	r2, #9
 8006c00:	d903      	bls.n	8006c0a <_vfiprintf_r+0x1ee>
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0c5      	beq.n	8006b92 <_vfiprintf_r+0x176>
 8006c06:	9105      	str	r1, [sp, #20]
 8006c08:	e7c3      	b.n	8006b92 <_vfiprintf_r+0x176>
 8006c0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c0e:	4604      	mov	r4, r0
 8006c10:	2301      	movs	r3, #1
 8006c12:	e7f0      	b.n	8006bf6 <_vfiprintf_r+0x1da>
 8006c14:	ab03      	add	r3, sp, #12
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	462a      	mov	r2, r5
 8006c1a:	4b16      	ldr	r3, [pc, #88]	; (8006c74 <_vfiprintf_r+0x258>)
 8006c1c:	a904      	add	r1, sp, #16
 8006c1e:	4630      	mov	r0, r6
 8006c20:	f7fd fe10 	bl	8004844 <_printf_float>
 8006c24:	4607      	mov	r7, r0
 8006c26:	1c78      	adds	r0, r7, #1
 8006c28:	d1d6      	bne.n	8006bd8 <_vfiprintf_r+0x1bc>
 8006c2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c2c:	07d9      	lsls	r1, r3, #31
 8006c2e:	d405      	bmi.n	8006c3c <_vfiprintf_r+0x220>
 8006c30:	89ab      	ldrh	r3, [r5, #12]
 8006c32:	059a      	lsls	r2, r3, #22
 8006c34:	d402      	bmi.n	8006c3c <_vfiprintf_r+0x220>
 8006c36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c38:	f000 faaf 	bl	800719a <__retarget_lock_release_recursive>
 8006c3c:	89ab      	ldrh	r3, [r5, #12]
 8006c3e:	065b      	lsls	r3, r3, #25
 8006c40:	f53f af12 	bmi.w	8006a68 <_vfiprintf_r+0x4c>
 8006c44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c46:	e711      	b.n	8006a6c <_vfiprintf_r+0x50>
 8006c48:	ab03      	add	r3, sp, #12
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	462a      	mov	r2, r5
 8006c4e:	4b09      	ldr	r3, [pc, #36]	; (8006c74 <_vfiprintf_r+0x258>)
 8006c50:	a904      	add	r1, sp, #16
 8006c52:	4630      	mov	r0, r6
 8006c54:	f7fe f89a 	bl	8004d8c <_printf_i>
 8006c58:	e7e4      	b.n	8006c24 <_vfiprintf_r+0x208>
 8006c5a:	bf00      	nop
 8006c5c:	080080ec 	.word	0x080080ec
 8006c60:	0800810c 	.word	0x0800810c
 8006c64:	080080cc 	.word	0x080080cc
 8006c68:	08007f74 	.word	0x08007f74
 8006c6c:	08007f7e 	.word	0x08007f7e
 8006c70:	08004845 	.word	0x08004845
 8006c74:	080069f7 	.word	0x080069f7
 8006c78:	08007f7a 	.word	0x08007f7a

08006c7c <__swbuf_r>:
 8006c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7e:	460e      	mov	r6, r1
 8006c80:	4614      	mov	r4, r2
 8006c82:	4605      	mov	r5, r0
 8006c84:	b118      	cbz	r0, 8006c8e <__swbuf_r+0x12>
 8006c86:	6983      	ldr	r3, [r0, #24]
 8006c88:	b90b      	cbnz	r3, 8006c8e <__swbuf_r+0x12>
 8006c8a:	f000 f9e7 	bl	800705c <__sinit>
 8006c8e:	4b21      	ldr	r3, [pc, #132]	; (8006d14 <__swbuf_r+0x98>)
 8006c90:	429c      	cmp	r4, r3
 8006c92:	d12b      	bne.n	8006cec <__swbuf_r+0x70>
 8006c94:	686c      	ldr	r4, [r5, #4]
 8006c96:	69a3      	ldr	r3, [r4, #24]
 8006c98:	60a3      	str	r3, [r4, #8]
 8006c9a:	89a3      	ldrh	r3, [r4, #12]
 8006c9c:	071a      	lsls	r2, r3, #28
 8006c9e:	d52f      	bpl.n	8006d00 <__swbuf_r+0x84>
 8006ca0:	6923      	ldr	r3, [r4, #16]
 8006ca2:	b36b      	cbz	r3, 8006d00 <__swbuf_r+0x84>
 8006ca4:	6923      	ldr	r3, [r4, #16]
 8006ca6:	6820      	ldr	r0, [r4, #0]
 8006ca8:	1ac0      	subs	r0, r0, r3
 8006caa:	6963      	ldr	r3, [r4, #20]
 8006cac:	b2f6      	uxtb	r6, r6
 8006cae:	4283      	cmp	r3, r0
 8006cb0:	4637      	mov	r7, r6
 8006cb2:	dc04      	bgt.n	8006cbe <__swbuf_r+0x42>
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	f000 f93c 	bl	8006f34 <_fflush_r>
 8006cbc:	bb30      	cbnz	r0, 8006d0c <__swbuf_r+0x90>
 8006cbe:	68a3      	ldr	r3, [r4, #8]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	60a3      	str	r3, [r4, #8]
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	6022      	str	r2, [r4, #0]
 8006cca:	701e      	strb	r6, [r3, #0]
 8006ccc:	6963      	ldr	r3, [r4, #20]
 8006cce:	3001      	adds	r0, #1
 8006cd0:	4283      	cmp	r3, r0
 8006cd2:	d004      	beq.n	8006cde <__swbuf_r+0x62>
 8006cd4:	89a3      	ldrh	r3, [r4, #12]
 8006cd6:	07db      	lsls	r3, r3, #31
 8006cd8:	d506      	bpl.n	8006ce8 <__swbuf_r+0x6c>
 8006cda:	2e0a      	cmp	r6, #10
 8006cdc:	d104      	bne.n	8006ce8 <__swbuf_r+0x6c>
 8006cde:	4621      	mov	r1, r4
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	f000 f927 	bl	8006f34 <_fflush_r>
 8006ce6:	b988      	cbnz	r0, 8006d0c <__swbuf_r+0x90>
 8006ce8:	4638      	mov	r0, r7
 8006cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cec:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <__swbuf_r+0x9c>)
 8006cee:	429c      	cmp	r4, r3
 8006cf0:	d101      	bne.n	8006cf6 <__swbuf_r+0x7a>
 8006cf2:	68ac      	ldr	r4, [r5, #8]
 8006cf4:	e7cf      	b.n	8006c96 <__swbuf_r+0x1a>
 8006cf6:	4b09      	ldr	r3, [pc, #36]	; (8006d1c <__swbuf_r+0xa0>)
 8006cf8:	429c      	cmp	r4, r3
 8006cfa:	bf08      	it	eq
 8006cfc:	68ec      	ldreq	r4, [r5, #12]
 8006cfe:	e7ca      	b.n	8006c96 <__swbuf_r+0x1a>
 8006d00:	4621      	mov	r1, r4
 8006d02:	4628      	mov	r0, r5
 8006d04:	f000 f81a 	bl	8006d3c <__swsetup_r>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	d0cb      	beq.n	8006ca4 <__swbuf_r+0x28>
 8006d0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006d10:	e7ea      	b.n	8006ce8 <__swbuf_r+0x6c>
 8006d12:	bf00      	nop
 8006d14:	080080ec 	.word	0x080080ec
 8006d18:	0800810c 	.word	0x0800810c
 8006d1c:	080080cc 	.word	0x080080cc

08006d20 <__ascii_wctomb>:
 8006d20:	b149      	cbz	r1, 8006d36 <__ascii_wctomb+0x16>
 8006d22:	2aff      	cmp	r2, #255	; 0xff
 8006d24:	bf85      	ittet	hi
 8006d26:	238a      	movhi	r3, #138	; 0x8a
 8006d28:	6003      	strhi	r3, [r0, #0]
 8006d2a:	700a      	strbls	r2, [r1, #0]
 8006d2c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006d30:	bf98      	it	ls
 8006d32:	2001      	movls	r0, #1
 8006d34:	4770      	bx	lr
 8006d36:	4608      	mov	r0, r1
 8006d38:	4770      	bx	lr
	...

08006d3c <__swsetup_r>:
 8006d3c:	4b32      	ldr	r3, [pc, #200]	; (8006e08 <__swsetup_r+0xcc>)
 8006d3e:	b570      	push	{r4, r5, r6, lr}
 8006d40:	681d      	ldr	r5, [r3, #0]
 8006d42:	4606      	mov	r6, r0
 8006d44:	460c      	mov	r4, r1
 8006d46:	b125      	cbz	r5, 8006d52 <__swsetup_r+0x16>
 8006d48:	69ab      	ldr	r3, [r5, #24]
 8006d4a:	b913      	cbnz	r3, 8006d52 <__swsetup_r+0x16>
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	f000 f985 	bl	800705c <__sinit>
 8006d52:	4b2e      	ldr	r3, [pc, #184]	; (8006e0c <__swsetup_r+0xd0>)
 8006d54:	429c      	cmp	r4, r3
 8006d56:	d10f      	bne.n	8006d78 <__swsetup_r+0x3c>
 8006d58:	686c      	ldr	r4, [r5, #4]
 8006d5a:	89a3      	ldrh	r3, [r4, #12]
 8006d5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d60:	0719      	lsls	r1, r3, #28
 8006d62:	d42c      	bmi.n	8006dbe <__swsetup_r+0x82>
 8006d64:	06dd      	lsls	r5, r3, #27
 8006d66:	d411      	bmi.n	8006d8c <__swsetup_r+0x50>
 8006d68:	2309      	movs	r3, #9
 8006d6a:	6033      	str	r3, [r6, #0]
 8006d6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d70:	81a3      	strh	r3, [r4, #12]
 8006d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d76:	e03e      	b.n	8006df6 <__swsetup_r+0xba>
 8006d78:	4b25      	ldr	r3, [pc, #148]	; (8006e10 <__swsetup_r+0xd4>)
 8006d7a:	429c      	cmp	r4, r3
 8006d7c:	d101      	bne.n	8006d82 <__swsetup_r+0x46>
 8006d7e:	68ac      	ldr	r4, [r5, #8]
 8006d80:	e7eb      	b.n	8006d5a <__swsetup_r+0x1e>
 8006d82:	4b24      	ldr	r3, [pc, #144]	; (8006e14 <__swsetup_r+0xd8>)
 8006d84:	429c      	cmp	r4, r3
 8006d86:	bf08      	it	eq
 8006d88:	68ec      	ldreq	r4, [r5, #12]
 8006d8a:	e7e6      	b.n	8006d5a <__swsetup_r+0x1e>
 8006d8c:	0758      	lsls	r0, r3, #29
 8006d8e:	d512      	bpl.n	8006db6 <__swsetup_r+0x7a>
 8006d90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d92:	b141      	cbz	r1, 8006da6 <__swsetup_r+0x6a>
 8006d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d98:	4299      	cmp	r1, r3
 8006d9a:	d002      	beq.n	8006da2 <__swsetup_r+0x66>
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	f7ff fb6f 	bl	8006480 <_free_r>
 8006da2:	2300      	movs	r3, #0
 8006da4:	6363      	str	r3, [r4, #52]	; 0x34
 8006da6:	89a3      	ldrh	r3, [r4, #12]
 8006da8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006dac:	81a3      	strh	r3, [r4, #12]
 8006dae:	2300      	movs	r3, #0
 8006db0:	6063      	str	r3, [r4, #4]
 8006db2:	6923      	ldr	r3, [r4, #16]
 8006db4:	6023      	str	r3, [r4, #0]
 8006db6:	89a3      	ldrh	r3, [r4, #12]
 8006db8:	f043 0308 	orr.w	r3, r3, #8
 8006dbc:	81a3      	strh	r3, [r4, #12]
 8006dbe:	6923      	ldr	r3, [r4, #16]
 8006dc0:	b94b      	cbnz	r3, 8006dd6 <__swsetup_r+0x9a>
 8006dc2:	89a3      	ldrh	r3, [r4, #12]
 8006dc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dcc:	d003      	beq.n	8006dd6 <__swsetup_r+0x9a>
 8006dce:	4621      	mov	r1, r4
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	f000 fa07 	bl	80071e4 <__smakebuf_r>
 8006dd6:	89a0      	ldrh	r0, [r4, #12]
 8006dd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ddc:	f010 0301 	ands.w	r3, r0, #1
 8006de0:	d00a      	beq.n	8006df8 <__swsetup_r+0xbc>
 8006de2:	2300      	movs	r3, #0
 8006de4:	60a3      	str	r3, [r4, #8]
 8006de6:	6963      	ldr	r3, [r4, #20]
 8006de8:	425b      	negs	r3, r3
 8006dea:	61a3      	str	r3, [r4, #24]
 8006dec:	6923      	ldr	r3, [r4, #16]
 8006dee:	b943      	cbnz	r3, 8006e02 <__swsetup_r+0xc6>
 8006df0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006df4:	d1ba      	bne.n	8006d6c <__swsetup_r+0x30>
 8006df6:	bd70      	pop	{r4, r5, r6, pc}
 8006df8:	0781      	lsls	r1, r0, #30
 8006dfa:	bf58      	it	pl
 8006dfc:	6963      	ldrpl	r3, [r4, #20]
 8006dfe:	60a3      	str	r3, [r4, #8]
 8006e00:	e7f4      	b.n	8006dec <__swsetup_r+0xb0>
 8006e02:	2000      	movs	r0, #0
 8006e04:	e7f7      	b.n	8006df6 <__swsetup_r+0xba>
 8006e06:	bf00      	nop
 8006e08:	2000000c 	.word	0x2000000c
 8006e0c:	080080ec 	.word	0x080080ec
 8006e10:	0800810c 	.word	0x0800810c
 8006e14:	080080cc 	.word	0x080080cc

08006e18 <abort>:
 8006e18:	b508      	push	{r3, lr}
 8006e1a:	2006      	movs	r0, #6
 8006e1c:	f000 fa52 	bl	80072c4 <raise>
 8006e20:	2001      	movs	r0, #1
 8006e22:	f7fa fceb 	bl	80017fc <_exit>
	...

08006e28 <__sflush_r>:
 8006e28:	898a      	ldrh	r2, [r1, #12]
 8006e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e2e:	4605      	mov	r5, r0
 8006e30:	0710      	lsls	r0, r2, #28
 8006e32:	460c      	mov	r4, r1
 8006e34:	d458      	bmi.n	8006ee8 <__sflush_r+0xc0>
 8006e36:	684b      	ldr	r3, [r1, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	dc05      	bgt.n	8006e48 <__sflush_r+0x20>
 8006e3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	dc02      	bgt.n	8006e48 <__sflush_r+0x20>
 8006e42:	2000      	movs	r0, #0
 8006e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e4a:	2e00      	cmp	r6, #0
 8006e4c:	d0f9      	beq.n	8006e42 <__sflush_r+0x1a>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e54:	682f      	ldr	r7, [r5, #0]
 8006e56:	602b      	str	r3, [r5, #0]
 8006e58:	d032      	beq.n	8006ec0 <__sflush_r+0x98>
 8006e5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e5c:	89a3      	ldrh	r3, [r4, #12]
 8006e5e:	075a      	lsls	r2, r3, #29
 8006e60:	d505      	bpl.n	8006e6e <__sflush_r+0x46>
 8006e62:	6863      	ldr	r3, [r4, #4]
 8006e64:	1ac0      	subs	r0, r0, r3
 8006e66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e68:	b10b      	cbz	r3, 8006e6e <__sflush_r+0x46>
 8006e6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e6c:	1ac0      	subs	r0, r0, r3
 8006e6e:	2300      	movs	r3, #0
 8006e70:	4602      	mov	r2, r0
 8006e72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e74:	6a21      	ldr	r1, [r4, #32]
 8006e76:	4628      	mov	r0, r5
 8006e78:	47b0      	blx	r6
 8006e7a:	1c43      	adds	r3, r0, #1
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	d106      	bne.n	8006e8e <__sflush_r+0x66>
 8006e80:	6829      	ldr	r1, [r5, #0]
 8006e82:	291d      	cmp	r1, #29
 8006e84:	d82c      	bhi.n	8006ee0 <__sflush_r+0xb8>
 8006e86:	4a2a      	ldr	r2, [pc, #168]	; (8006f30 <__sflush_r+0x108>)
 8006e88:	40ca      	lsrs	r2, r1
 8006e8a:	07d6      	lsls	r6, r2, #31
 8006e8c:	d528      	bpl.n	8006ee0 <__sflush_r+0xb8>
 8006e8e:	2200      	movs	r2, #0
 8006e90:	6062      	str	r2, [r4, #4]
 8006e92:	04d9      	lsls	r1, r3, #19
 8006e94:	6922      	ldr	r2, [r4, #16]
 8006e96:	6022      	str	r2, [r4, #0]
 8006e98:	d504      	bpl.n	8006ea4 <__sflush_r+0x7c>
 8006e9a:	1c42      	adds	r2, r0, #1
 8006e9c:	d101      	bne.n	8006ea2 <__sflush_r+0x7a>
 8006e9e:	682b      	ldr	r3, [r5, #0]
 8006ea0:	b903      	cbnz	r3, 8006ea4 <__sflush_r+0x7c>
 8006ea2:	6560      	str	r0, [r4, #84]	; 0x54
 8006ea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ea6:	602f      	str	r7, [r5, #0]
 8006ea8:	2900      	cmp	r1, #0
 8006eaa:	d0ca      	beq.n	8006e42 <__sflush_r+0x1a>
 8006eac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006eb0:	4299      	cmp	r1, r3
 8006eb2:	d002      	beq.n	8006eba <__sflush_r+0x92>
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	f7ff fae3 	bl	8006480 <_free_r>
 8006eba:	2000      	movs	r0, #0
 8006ebc:	6360      	str	r0, [r4, #52]	; 0x34
 8006ebe:	e7c1      	b.n	8006e44 <__sflush_r+0x1c>
 8006ec0:	6a21      	ldr	r1, [r4, #32]
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	47b0      	blx	r6
 8006ec8:	1c41      	adds	r1, r0, #1
 8006eca:	d1c7      	bne.n	8006e5c <__sflush_r+0x34>
 8006ecc:	682b      	ldr	r3, [r5, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d0c4      	beq.n	8006e5c <__sflush_r+0x34>
 8006ed2:	2b1d      	cmp	r3, #29
 8006ed4:	d001      	beq.n	8006eda <__sflush_r+0xb2>
 8006ed6:	2b16      	cmp	r3, #22
 8006ed8:	d101      	bne.n	8006ede <__sflush_r+0xb6>
 8006eda:	602f      	str	r7, [r5, #0]
 8006edc:	e7b1      	b.n	8006e42 <__sflush_r+0x1a>
 8006ede:	89a3      	ldrh	r3, [r4, #12]
 8006ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ee4:	81a3      	strh	r3, [r4, #12]
 8006ee6:	e7ad      	b.n	8006e44 <__sflush_r+0x1c>
 8006ee8:	690f      	ldr	r7, [r1, #16]
 8006eea:	2f00      	cmp	r7, #0
 8006eec:	d0a9      	beq.n	8006e42 <__sflush_r+0x1a>
 8006eee:	0793      	lsls	r3, r2, #30
 8006ef0:	680e      	ldr	r6, [r1, #0]
 8006ef2:	bf08      	it	eq
 8006ef4:	694b      	ldreq	r3, [r1, #20]
 8006ef6:	600f      	str	r7, [r1, #0]
 8006ef8:	bf18      	it	ne
 8006efa:	2300      	movne	r3, #0
 8006efc:	eba6 0807 	sub.w	r8, r6, r7
 8006f00:	608b      	str	r3, [r1, #8]
 8006f02:	f1b8 0f00 	cmp.w	r8, #0
 8006f06:	dd9c      	ble.n	8006e42 <__sflush_r+0x1a>
 8006f08:	6a21      	ldr	r1, [r4, #32]
 8006f0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f0c:	4643      	mov	r3, r8
 8006f0e:	463a      	mov	r2, r7
 8006f10:	4628      	mov	r0, r5
 8006f12:	47b0      	blx	r6
 8006f14:	2800      	cmp	r0, #0
 8006f16:	dc06      	bgt.n	8006f26 <__sflush_r+0xfe>
 8006f18:	89a3      	ldrh	r3, [r4, #12]
 8006f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f1e:	81a3      	strh	r3, [r4, #12]
 8006f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f24:	e78e      	b.n	8006e44 <__sflush_r+0x1c>
 8006f26:	4407      	add	r7, r0
 8006f28:	eba8 0800 	sub.w	r8, r8, r0
 8006f2c:	e7e9      	b.n	8006f02 <__sflush_r+0xda>
 8006f2e:	bf00      	nop
 8006f30:	20400001 	.word	0x20400001

08006f34 <_fflush_r>:
 8006f34:	b538      	push	{r3, r4, r5, lr}
 8006f36:	690b      	ldr	r3, [r1, #16]
 8006f38:	4605      	mov	r5, r0
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	b913      	cbnz	r3, 8006f44 <_fflush_r+0x10>
 8006f3e:	2500      	movs	r5, #0
 8006f40:	4628      	mov	r0, r5
 8006f42:	bd38      	pop	{r3, r4, r5, pc}
 8006f44:	b118      	cbz	r0, 8006f4e <_fflush_r+0x1a>
 8006f46:	6983      	ldr	r3, [r0, #24]
 8006f48:	b90b      	cbnz	r3, 8006f4e <_fflush_r+0x1a>
 8006f4a:	f000 f887 	bl	800705c <__sinit>
 8006f4e:	4b14      	ldr	r3, [pc, #80]	; (8006fa0 <_fflush_r+0x6c>)
 8006f50:	429c      	cmp	r4, r3
 8006f52:	d11b      	bne.n	8006f8c <_fflush_r+0x58>
 8006f54:	686c      	ldr	r4, [r5, #4]
 8006f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d0ef      	beq.n	8006f3e <_fflush_r+0xa>
 8006f5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f60:	07d0      	lsls	r0, r2, #31
 8006f62:	d404      	bmi.n	8006f6e <_fflush_r+0x3a>
 8006f64:	0599      	lsls	r1, r3, #22
 8006f66:	d402      	bmi.n	8006f6e <_fflush_r+0x3a>
 8006f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f6a:	f000 f915 	bl	8007198 <__retarget_lock_acquire_recursive>
 8006f6e:	4628      	mov	r0, r5
 8006f70:	4621      	mov	r1, r4
 8006f72:	f7ff ff59 	bl	8006e28 <__sflush_r>
 8006f76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f78:	07da      	lsls	r2, r3, #31
 8006f7a:	4605      	mov	r5, r0
 8006f7c:	d4e0      	bmi.n	8006f40 <_fflush_r+0xc>
 8006f7e:	89a3      	ldrh	r3, [r4, #12]
 8006f80:	059b      	lsls	r3, r3, #22
 8006f82:	d4dd      	bmi.n	8006f40 <_fflush_r+0xc>
 8006f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f86:	f000 f908 	bl	800719a <__retarget_lock_release_recursive>
 8006f8a:	e7d9      	b.n	8006f40 <_fflush_r+0xc>
 8006f8c:	4b05      	ldr	r3, [pc, #20]	; (8006fa4 <_fflush_r+0x70>)
 8006f8e:	429c      	cmp	r4, r3
 8006f90:	d101      	bne.n	8006f96 <_fflush_r+0x62>
 8006f92:	68ac      	ldr	r4, [r5, #8]
 8006f94:	e7df      	b.n	8006f56 <_fflush_r+0x22>
 8006f96:	4b04      	ldr	r3, [pc, #16]	; (8006fa8 <_fflush_r+0x74>)
 8006f98:	429c      	cmp	r4, r3
 8006f9a:	bf08      	it	eq
 8006f9c:	68ec      	ldreq	r4, [r5, #12]
 8006f9e:	e7da      	b.n	8006f56 <_fflush_r+0x22>
 8006fa0:	080080ec 	.word	0x080080ec
 8006fa4:	0800810c 	.word	0x0800810c
 8006fa8:	080080cc 	.word	0x080080cc

08006fac <std>:
 8006fac:	2300      	movs	r3, #0
 8006fae:	b510      	push	{r4, lr}
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	e9c0 3300 	strd	r3, r3, [r0]
 8006fb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fba:	6083      	str	r3, [r0, #8]
 8006fbc:	8181      	strh	r1, [r0, #12]
 8006fbe:	6643      	str	r3, [r0, #100]	; 0x64
 8006fc0:	81c2      	strh	r2, [r0, #14]
 8006fc2:	6183      	str	r3, [r0, #24]
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	2208      	movs	r2, #8
 8006fc8:	305c      	adds	r0, #92	; 0x5c
 8006fca:	f7fd fb93 	bl	80046f4 <memset>
 8006fce:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <std+0x38>)
 8006fd0:	6263      	str	r3, [r4, #36]	; 0x24
 8006fd2:	4b05      	ldr	r3, [pc, #20]	; (8006fe8 <std+0x3c>)
 8006fd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fd6:	4b05      	ldr	r3, [pc, #20]	; (8006fec <std+0x40>)
 8006fd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fda:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <std+0x44>)
 8006fdc:	6224      	str	r4, [r4, #32]
 8006fde:	6323      	str	r3, [r4, #48]	; 0x30
 8006fe0:	bd10      	pop	{r4, pc}
 8006fe2:	bf00      	nop
 8006fe4:	080072fd 	.word	0x080072fd
 8006fe8:	0800731f 	.word	0x0800731f
 8006fec:	08007357 	.word	0x08007357
 8006ff0:	0800737b 	.word	0x0800737b

08006ff4 <_cleanup_r>:
 8006ff4:	4901      	ldr	r1, [pc, #4]	; (8006ffc <_cleanup_r+0x8>)
 8006ff6:	f000 b8af 	b.w	8007158 <_fwalk_reent>
 8006ffa:	bf00      	nop
 8006ffc:	08006f35 	.word	0x08006f35

08007000 <__sfmoreglue>:
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	1e4a      	subs	r2, r1, #1
 8007004:	2568      	movs	r5, #104	; 0x68
 8007006:	4355      	muls	r5, r2
 8007008:	460e      	mov	r6, r1
 800700a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800700e:	f7ff fa87 	bl	8006520 <_malloc_r>
 8007012:	4604      	mov	r4, r0
 8007014:	b140      	cbz	r0, 8007028 <__sfmoreglue+0x28>
 8007016:	2100      	movs	r1, #0
 8007018:	e9c0 1600 	strd	r1, r6, [r0]
 800701c:	300c      	adds	r0, #12
 800701e:	60a0      	str	r0, [r4, #8]
 8007020:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007024:	f7fd fb66 	bl	80046f4 <memset>
 8007028:	4620      	mov	r0, r4
 800702a:	bd70      	pop	{r4, r5, r6, pc}

0800702c <__sfp_lock_acquire>:
 800702c:	4801      	ldr	r0, [pc, #4]	; (8007034 <__sfp_lock_acquire+0x8>)
 800702e:	f000 b8b3 	b.w	8007198 <__retarget_lock_acquire_recursive>
 8007032:	bf00      	nop
 8007034:	20000b20 	.word	0x20000b20

08007038 <__sfp_lock_release>:
 8007038:	4801      	ldr	r0, [pc, #4]	; (8007040 <__sfp_lock_release+0x8>)
 800703a:	f000 b8ae 	b.w	800719a <__retarget_lock_release_recursive>
 800703e:	bf00      	nop
 8007040:	20000b20 	.word	0x20000b20

08007044 <__sinit_lock_acquire>:
 8007044:	4801      	ldr	r0, [pc, #4]	; (800704c <__sinit_lock_acquire+0x8>)
 8007046:	f000 b8a7 	b.w	8007198 <__retarget_lock_acquire_recursive>
 800704a:	bf00      	nop
 800704c:	20000b1b 	.word	0x20000b1b

08007050 <__sinit_lock_release>:
 8007050:	4801      	ldr	r0, [pc, #4]	; (8007058 <__sinit_lock_release+0x8>)
 8007052:	f000 b8a2 	b.w	800719a <__retarget_lock_release_recursive>
 8007056:	bf00      	nop
 8007058:	20000b1b 	.word	0x20000b1b

0800705c <__sinit>:
 800705c:	b510      	push	{r4, lr}
 800705e:	4604      	mov	r4, r0
 8007060:	f7ff fff0 	bl	8007044 <__sinit_lock_acquire>
 8007064:	69a3      	ldr	r3, [r4, #24]
 8007066:	b11b      	cbz	r3, 8007070 <__sinit+0x14>
 8007068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800706c:	f7ff bff0 	b.w	8007050 <__sinit_lock_release>
 8007070:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007074:	6523      	str	r3, [r4, #80]	; 0x50
 8007076:	4b13      	ldr	r3, [pc, #76]	; (80070c4 <__sinit+0x68>)
 8007078:	4a13      	ldr	r2, [pc, #76]	; (80070c8 <__sinit+0x6c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	62a2      	str	r2, [r4, #40]	; 0x28
 800707e:	42a3      	cmp	r3, r4
 8007080:	bf04      	itt	eq
 8007082:	2301      	moveq	r3, #1
 8007084:	61a3      	streq	r3, [r4, #24]
 8007086:	4620      	mov	r0, r4
 8007088:	f000 f820 	bl	80070cc <__sfp>
 800708c:	6060      	str	r0, [r4, #4]
 800708e:	4620      	mov	r0, r4
 8007090:	f000 f81c 	bl	80070cc <__sfp>
 8007094:	60a0      	str	r0, [r4, #8]
 8007096:	4620      	mov	r0, r4
 8007098:	f000 f818 	bl	80070cc <__sfp>
 800709c:	2200      	movs	r2, #0
 800709e:	60e0      	str	r0, [r4, #12]
 80070a0:	2104      	movs	r1, #4
 80070a2:	6860      	ldr	r0, [r4, #4]
 80070a4:	f7ff ff82 	bl	8006fac <std>
 80070a8:	68a0      	ldr	r0, [r4, #8]
 80070aa:	2201      	movs	r2, #1
 80070ac:	2109      	movs	r1, #9
 80070ae:	f7ff ff7d 	bl	8006fac <std>
 80070b2:	68e0      	ldr	r0, [r4, #12]
 80070b4:	2202      	movs	r2, #2
 80070b6:	2112      	movs	r1, #18
 80070b8:	f7ff ff78 	bl	8006fac <std>
 80070bc:	2301      	movs	r3, #1
 80070be:	61a3      	str	r3, [r4, #24]
 80070c0:	e7d2      	b.n	8007068 <__sinit+0xc>
 80070c2:	bf00      	nop
 80070c4:	08007d4c 	.word	0x08007d4c
 80070c8:	08006ff5 	.word	0x08006ff5

080070cc <__sfp>:
 80070cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ce:	4607      	mov	r7, r0
 80070d0:	f7ff ffac 	bl	800702c <__sfp_lock_acquire>
 80070d4:	4b1e      	ldr	r3, [pc, #120]	; (8007150 <__sfp+0x84>)
 80070d6:	681e      	ldr	r6, [r3, #0]
 80070d8:	69b3      	ldr	r3, [r6, #24]
 80070da:	b913      	cbnz	r3, 80070e2 <__sfp+0x16>
 80070dc:	4630      	mov	r0, r6
 80070de:	f7ff ffbd 	bl	800705c <__sinit>
 80070e2:	3648      	adds	r6, #72	; 0x48
 80070e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070e8:	3b01      	subs	r3, #1
 80070ea:	d503      	bpl.n	80070f4 <__sfp+0x28>
 80070ec:	6833      	ldr	r3, [r6, #0]
 80070ee:	b30b      	cbz	r3, 8007134 <__sfp+0x68>
 80070f0:	6836      	ldr	r6, [r6, #0]
 80070f2:	e7f7      	b.n	80070e4 <__sfp+0x18>
 80070f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070f8:	b9d5      	cbnz	r5, 8007130 <__sfp+0x64>
 80070fa:	4b16      	ldr	r3, [pc, #88]	; (8007154 <__sfp+0x88>)
 80070fc:	60e3      	str	r3, [r4, #12]
 80070fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007102:	6665      	str	r5, [r4, #100]	; 0x64
 8007104:	f000 f847 	bl	8007196 <__retarget_lock_init_recursive>
 8007108:	f7ff ff96 	bl	8007038 <__sfp_lock_release>
 800710c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007110:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007114:	6025      	str	r5, [r4, #0]
 8007116:	61a5      	str	r5, [r4, #24]
 8007118:	2208      	movs	r2, #8
 800711a:	4629      	mov	r1, r5
 800711c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007120:	f7fd fae8 	bl	80046f4 <memset>
 8007124:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007128:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800712c:	4620      	mov	r0, r4
 800712e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007130:	3468      	adds	r4, #104	; 0x68
 8007132:	e7d9      	b.n	80070e8 <__sfp+0x1c>
 8007134:	2104      	movs	r1, #4
 8007136:	4638      	mov	r0, r7
 8007138:	f7ff ff62 	bl	8007000 <__sfmoreglue>
 800713c:	4604      	mov	r4, r0
 800713e:	6030      	str	r0, [r6, #0]
 8007140:	2800      	cmp	r0, #0
 8007142:	d1d5      	bne.n	80070f0 <__sfp+0x24>
 8007144:	f7ff ff78 	bl	8007038 <__sfp_lock_release>
 8007148:	230c      	movs	r3, #12
 800714a:	603b      	str	r3, [r7, #0]
 800714c:	e7ee      	b.n	800712c <__sfp+0x60>
 800714e:	bf00      	nop
 8007150:	08007d4c 	.word	0x08007d4c
 8007154:	ffff0001 	.word	0xffff0001

08007158 <_fwalk_reent>:
 8007158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800715c:	4606      	mov	r6, r0
 800715e:	4688      	mov	r8, r1
 8007160:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007164:	2700      	movs	r7, #0
 8007166:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800716a:	f1b9 0901 	subs.w	r9, r9, #1
 800716e:	d505      	bpl.n	800717c <_fwalk_reent+0x24>
 8007170:	6824      	ldr	r4, [r4, #0]
 8007172:	2c00      	cmp	r4, #0
 8007174:	d1f7      	bne.n	8007166 <_fwalk_reent+0xe>
 8007176:	4638      	mov	r0, r7
 8007178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800717c:	89ab      	ldrh	r3, [r5, #12]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d907      	bls.n	8007192 <_fwalk_reent+0x3a>
 8007182:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007186:	3301      	adds	r3, #1
 8007188:	d003      	beq.n	8007192 <_fwalk_reent+0x3a>
 800718a:	4629      	mov	r1, r5
 800718c:	4630      	mov	r0, r6
 800718e:	47c0      	blx	r8
 8007190:	4307      	orrs	r7, r0
 8007192:	3568      	adds	r5, #104	; 0x68
 8007194:	e7e9      	b.n	800716a <_fwalk_reent+0x12>

08007196 <__retarget_lock_init_recursive>:
 8007196:	4770      	bx	lr

08007198 <__retarget_lock_acquire_recursive>:
 8007198:	4770      	bx	lr

0800719a <__retarget_lock_release_recursive>:
 800719a:	4770      	bx	lr

0800719c <__swhatbuf_r>:
 800719c:	b570      	push	{r4, r5, r6, lr}
 800719e:	460e      	mov	r6, r1
 80071a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a4:	2900      	cmp	r1, #0
 80071a6:	b096      	sub	sp, #88	; 0x58
 80071a8:	4614      	mov	r4, r2
 80071aa:	461d      	mov	r5, r3
 80071ac:	da07      	bge.n	80071be <__swhatbuf_r+0x22>
 80071ae:	2300      	movs	r3, #0
 80071b0:	602b      	str	r3, [r5, #0]
 80071b2:	89b3      	ldrh	r3, [r6, #12]
 80071b4:	061a      	lsls	r2, r3, #24
 80071b6:	d410      	bmi.n	80071da <__swhatbuf_r+0x3e>
 80071b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071bc:	e00e      	b.n	80071dc <__swhatbuf_r+0x40>
 80071be:	466a      	mov	r2, sp
 80071c0:	f000 f902 	bl	80073c8 <_fstat_r>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	dbf2      	blt.n	80071ae <__swhatbuf_r+0x12>
 80071c8:	9a01      	ldr	r2, [sp, #4]
 80071ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80071ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071d2:	425a      	negs	r2, r3
 80071d4:	415a      	adcs	r2, r3
 80071d6:	602a      	str	r2, [r5, #0]
 80071d8:	e7ee      	b.n	80071b8 <__swhatbuf_r+0x1c>
 80071da:	2340      	movs	r3, #64	; 0x40
 80071dc:	2000      	movs	r0, #0
 80071de:	6023      	str	r3, [r4, #0]
 80071e0:	b016      	add	sp, #88	; 0x58
 80071e2:	bd70      	pop	{r4, r5, r6, pc}

080071e4 <__smakebuf_r>:
 80071e4:	898b      	ldrh	r3, [r1, #12]
 80071e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071e8:	079d      	lsls	r5, r3, #30
 80071ea:	4606      	mov	r6, r0
 80071ec:	460c      	mov	r4, r1
 80071ee:	d507      	bpl.n	8007200 <__smakebuf_r+0x1c>
 80071f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	6123      	str	r3, [r4, #16]
 80071f8:	2301      	movs	r3, #1
 80071fa:	6163      	str	r3, [r4, #20]
 80071fc:	b002      	add	sp, #8
 80071fe:	bd70      	pop	{r4, r5, r6, pc}
 8007200:	ab01      	add	r3, sp, #4
 8007202:	466a      	mov	r2, sp
 8007204:	f7ff ffca 	bl	800719c <__swhatbuf_r>
 8007208:	9900      	ldr	r1, [sp, #0]
 800720a:	4605      	mov	r5, r0
 800720c:	4630      	mov	r0, r6
 800720e:	f7ff f987 	bl	8006520 <_malloc_r>
 8007212:	b948      	cbnz	r0, 8007228 <__smakebuf_r+0x44>
 8007214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007218:	059a      	lsls	r2, r3, #22
 800721a:	d4ef      	bmi.n	80071fc <__smakebuf_r+0x18>
 800721c:	f023 0303 	bic.w	r3, r3, #3
 8007220:	f043 0302 	orr.w	r3, r3, #2
 8007224:	81a3      	strh	r3, [r4, #12]
 8007226:	e7e3      	b.n	80071f0 <__smakebuf_r+0xc>
 8007228:	4b0d      	ldr	r3, [pc, #52]	; (8007260 <__smakebuf_r+0x7c>)
 800722a:	62b3      	str	r3, [r6, #40]	; 0x28
 800722c:	89a3      	ldrh	r3, [r4, #12]
 800722e:	6020      	str	r0, [r4, #0]
 8007230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007234:	81a3      	strh	r3, [r4, #12]
 8007236:	9b00      	ldr	r3, [sp, #0]
 8007238:	6163      	str	r3, [r4, #20]
 800723a:	9b01      	ldr	r3, [sp, #4]
 800723c:	6120      	str	r0, [r4, #16]
 800723e:	b15b      	cbz	r3, 8007258 <__smakebuf_r+0x74>
 8007240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007244:	4630      	mov	r0, r6
 8007246:	f000 f8d1 	bl	80073ec <_isatty_r>
 800724a:	b128      	cbz	r0, 8007258 <__smakebuf_r+0x74>
 800724c:	89a3      	ldrh	r3, [r4, #12]
 800724e:	f023 0303 	bic.w	r3, r3, #3
 8007252:	f043 0301 	orr.w	r3, r3, #1
 8007256:	81a3      	strh	r3, [r4, #12]
 8007258:	89a0      	ldrh	r0, [r4, #12]
 800725a:	4305      	orrs	r5, r0
 800725c:	81a5      	strh	r5, [r4, #12]
 800725e:	e7cd      	b.n	80071fc <__smakebuf_r+0x18>
 8007260:	08006ff5 	.word	0x08006ff5

08007264 <_malloc_usable_size_r>:
 8007264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007268:	1f18      	subs	r0, r3, #4
 800726a:	2b00      	cmp	r3, #0
 800726c:	bfbc      	itt	lt
 800726e:	580b      	ldrlt	r3, [r1, r0]
 8007270:	18c0      	addlt	r0, r0, r3
 8007272:	4770      	bx	lr

08007274 <_raise_r>:
 8007274:	291f      	cmp	r1, #31
 8007276:	b538      	push	{r3, r4, r5, lr}
 8007278:	4604      	mov	r4, r0
 800727a:	460d      	mov	r5, r1
 800727c:	d904      	bls.n	8007288 <_raise_r+0x14>
 800727e:	2316      	movs	r3, #22
 8007280:	6003      	str	r3, [r0, #0]
 8007282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007286:	bd38      	pop	{r3, r4, r5, pc}
 8007288:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800728a:	b112      	cbz	r2, 8007292 <_raise_r+0x1e>
 800728c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007290:	b94b      	cbnz	r3, 80072a6 <_raise_r+0x32>
 8007292:	4620      	mov	r0, r4
 8007294:	f000 f830 	bl	80072f8 <_getpid_r>
 8007298:	462a      	mov	r2, r5
 800729a:	4601      	mov	r1, r0
 800729c:	4620      	mov	r0, r4
 800729e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072a2:	f000 b817 	b.w	80072d4 <_kill_r>
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d00a      	beq.n	80072c0 <_raise_r+0x4c>
 80072aa:	1c59      	adds	r1, r3, #1
 80072ac:	d103      	bne.n	80072b6 <_raise_r+0x42>
 80072ae:	2316      	movs	r3, #22
 80072b0:	6003      	str	r3, [r0, #0]
 80072b2:	2001      	movs	r0, #1
 80072b4:	e7e7      	b.n	8007286 <_raise_r+0x12>
 80072b6:	2400      	movs	r4, #0
 80072b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80072bc:	4628      	mov	r0, r5
 80072be:	4798      	blx	r3
 80072c0:	2000      	movs	r0, #0
 80072c2:	e7e0      	b.n	8007286 <_raise_r+0x12>

080072c4 <raise>:
 80072c4:	4b02      	ldr	r3, [pc, #8]	; (80072d0 <raise+0xc>)
 80072c6:	4601      	mov	r1, r0
 80072c8:	6818      	ldr	r0, [r3, #0]
 80072ca:	f7ff bfd3 	b.w	8007274 <_raise_r>
 80072ce:	bf00      	nop
 80072d0:	2000000c 	.word	0x2000000c

080072d4 <_kill_r>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	4d07      	ldr	r5, [pc, #28]	; (80072f4 <_kill_r+0x20>)
 80072d8:	2300      	movs	r3, #0
 80072da:	4604      	mov	r4, r0
 80072dc:	4608      	mov	r0, r1
 80072de:	4611      	mov	r1, r2
 80072e0:	602b      	str	r3, [r5, #0]
 80072e2:	f7fa fa7b 	bl	80017dc <_kill>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	d102      	bne.n	80072f0 <_kill_r+0x1c>
 80072ea:	682b      	ldr	r3, [r5, #0]
 80072ec:	b103      	cbz	r3, 80072f0 <_kill_r+0x1c>
 80072ee:	6023      	str	r3, [r4, #0]
 80072f0:	bd38      	pop	{r3, r4, r5, pc}
 80072f2:	bf00      	nop
 80072f4:	20000b14 	.word	0x20000b14

080072f8 <_getpid_r>:
 80072f8:	f7fa ba68 	b.w	80017cc <_getpid>

080072fc <__sread>:
 80072fc:	b510      	push	{r4, lr}
 80072fe:	460c      	mov	r4, r1
 8007300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007304:	f000 f894 	bl	8007430 <_read_r>
 8007308:	2800      	cmp	r0, #0
 800730a:	bfab      	itete	ge
 800730c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800730e:	89a3      	ldrhlt	r3, [r4, #12]
 8007310:	181b      	addge	r3, r3, r0
 8007312:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007316:	bfac      	ite	ge
 8007318:	6563      	strge	r3, [r4, #84]	; 0x54
 800731a:	81a3      	strhlt	r3, [r4, #12]
 800731c:	bd10      	pop	{r4, pc}

0800731e <__swrite>:
 800731e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007322:	461f      	mov	r7, r3
 8007324:	898b      	ldrh	r3, [r1, #12]
 8007326:	05db      	lsls	r3, r3, #23
 8007328:	4605      	mov	r5, r0
 800732a:	460c      	mov	r4, r1
 800732c:	4616      	mov	r6, r2
 800732e:	d505      	bpl.n	800733c <__swrite+0x1e>
 8007330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007334:	2302      	movs	r3, #2
 8007336:	2200      	movs	r2, #0
 8007338:	f000 f868 	bl	800740c <_lseek_r>
 800733c:	89a3      	ldrh	r3, [r4, #12]
 800733e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007342:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007346:	81a3      	strh	r3, [r4, #12]
 8007348:	4632      	mov	r2, r6
 800734a:	463b      	mov	r3, r7
 800734c:	4628      	mov	r0, r5
 800734e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007352:	f000 b817 	b.w	8007384 <_write_r>

08007356 <__sseek>:
 8007356:	b510      	push	{r4, lr}
 8007358:	460c      	mov	r4, r1
 800735a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800735e:	f000 f855 	bl	800740c <_lseek_r>
 8007362:	1c43      	adds	r3, r0, #1
 8007364:	89a3      	ldrh	r3, [r4, #12]
 8007366:	bf15      	itete	ne
 8007368:	6560      	strne	r0, [r4, #84]	; 0x54
 800736a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800736e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007372:	81a3      	strheq	r3, [r4, #12]
 8007374:	bf18      	it	ne
 8007376:	81a3      	strhne	r3, [r4, #12]
 8007378:	bd10      	pop	{r4, pc}

0800737a <__sclose>:
 800737a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800737e:	f000 b813 	b.w	80073a8 <_close_r>
	...

08007384 <_write_r>:
 8007384:	b538      	push	{r3, r4, r5, lr}
 8007386:	4d07      	ldr	r5, [pc, #28]	; (80073a4 <_write_r+0x20>)
 8007388:	4604      	mov	r4, r0
 800738a:	4608      	mov	r0, r1
 800738c:	4611      	mov	r1, r2
 800738e:	2200      	movs	r2, #0
 8007390:	602a      	str	r2, [r5, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	f7fa fa59 	bl	800184a <_write>
 8007398:	1c43      	adds	r3, r0, #1
 800739a:	d102      	bne.n	80073a2 <_write_r+0x1e>
 800739c:	682b      	ldr	r3, [r5, #0]
 800739e:	b103      	cbz	r3, 80073a2 <_write_r+0x1e>
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	bd38      	pop	{r3, r4, r5, pc}
 80073a4:	20000b14 	.word	0x20000b14

080073a8 <_close_r>:
 80073a8:	b538      	push	{r3, r4, r5, lr}
 80073aa:	4d06      	ldr	r5, [pc, #24]	; (80073c4 <_close_r+0x1c>)
 80073ac:	2300      	movs	r3, #0
 80073ae:	4604      	mov	r4, r0
 80073b0:	4608      	mov	r0, r1
 80073b2:	602b      	str	r3, [r5, #0]
 80073b4:	f7fa fa65 	bl	8001882 <_close>
 80073b8:	1c43      	adds	r3, r0, #1
 80073ba:	d102      	bne.n	80073c2 <_close_r+0x1a>
 80073bc:	682b      	ldr	r3, [r5, #0]
 80073be:	b103      	cbz	r3, 80073c2 <_close_r+0x1a>
 80073c0:	6023      	str	r3, [r4, #0]
 80073c2:	bd38      	pop	{r3, r4, r5, pc}
 80073c4:	20000b14 	.word	0x20000b14

080073c8 <_fstat_r>:
 80073c8:	b538      	push	{r3, r4, r5, lr}
 80073ca:	4d07      	ldr	r5, [pc, #28]	; (80073e8 <_fstat_r+0x20>)
 80073cc:	2300      	movs	r3, #0
 80073ce:	4604      	mov	r4, r0
 80073d0:	4608      	mov	r0, r1
 80073d2:	4611      	mov	r1, r2
 80073d4:	602b      	str	r3, [r5, #0]
 80073d6:	f7fa fa60 	bl	800189a <_fstat>
 80073da:	1c43      	adds	r3, r0, #1
 80073dc:	d102      	bne.n	80073e4 <_fstat_r+0x1c>
 80073de:	682b      	ldr	r3, [r5, #0]
 80073e0:	b103      	cbz	r3, 80073e4 <_fstat_r+0x1c>
 80073e2:	6023      	str	r3, [r4, #0]
 80073e4:	bd38      	pop	{r3, r4, r5, pc}
 80073e6:	bf00      	nop
 80073e8:	20000b14 	.word	0x20000b14

080073ec <_isatty_r>:
 80073ec:	b538      	push	{r3, r4, r5, lr}
 80073ee:	4d06      	ldr	r5, [pc, #24]	; (8007408 <_isatty_r+0x1c>)
 80073f0:	2300      	movs	r3, #0
 80073f2:	4604      	mov	r4, r0
 80073f4:	4608      	mov	r0, r1
 80073f6:	602b      	str	r3, [r5, #0]
 80073f8:	f7fa fa5f 	bl	80018ba <_isatty>
 80073fc:	1c43      	adds	r3, r0, #1
 80073fe:	d102      	bne.n	8007406 <_isatty_r+0x1a>
 8007400:	682b      	ldr	r3, [r5, #0]
 8007402:	b103      	cbz	r3, 8007406 <_isatty_r+0x1a>
 8007404:	6023      	str	r3, [r4, #0]
 8007406:	bd38      	pop	{r3, r4, r5, pc}
 8007408:	20000b14 	.word	0x20000b14

0800740c <_lseek_r>:
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	4d07      	ldr	r5, [pc, #28]	; (800742c <_lseek_r+0x20>)
 8007410:	4604      	mov	r4, r0
 8007412:	4608      	mov	r0, r1
 8007414:	4611      	mov	r1, r2
 8007416:	2200      	movs	r2, #0
 8007418:	602a      	str	r2, [r5, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	f7fa fa58 	bl	80018d0 <_lseek>
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	d102      	bne.n	800742a <_lseek_r+0x1e>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	b103      	cbz	r3, 800742a <_lseek_r+0x1e>
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	bd38      	pop	{r3, r4, r5, pc}
 800742c:	20000b14 	.word	0x20000b14

08007430 <_read_r>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	4d07      	ldr	r5, [pc, #28]	; (8007450 <_read_r+0x20>)
 8007434:	4604      	mov	r4, r0
 8007436:	4608      	mov	r0, r1
 8007438:	4611      	mov	r1, r2
 800743a:	2200      	movs	r2, #0
 800743c:	602a      	str	r2, [r5, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	f7fa f9e6 	bl	8001810 <_read>
 8007444:	1c43      	adds	r3, r0, #1
 8007446:	d102      	bne.n	800744e <_read_r+0x1e>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	b103      	cbz	r3, 800744e <_read_r+0x1e>
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	20000b14 	.word	0x20000b14

08007454 <powf>:
 8007454:	b508      	push	{r3, lr}
 8007456:	ed2d 8b04 	vpush	{d8-d9}
 800745a:	eeb0 9a40 	vmov.f32	s18, s0
 800745e:	eef0 8a60 	vmov.f32	s17, s1
 8007462:	f000 f88f 	bl	8007584 <__ieee754_powf>
 8007466:	4b43      	ldr	r3, [pc, #268]	; (8007574 <powf+0x120>)
 8007468:	f993 3000 	ldrsb.w	r3, [r3]
 800746c:	3301      	adds	r3, #1
 800746e:	eeb0 8a40 	vmov.f32	s16, s0
 8007472:	d012      	beq.n	800749a <powf+0x46>
 8007474:	eef4 8a68 	vcmp.f32	s17, s17
 8007478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747c:	d60d      	bvs.n	800749a <powf+0x46>
 800747e:	eeb4 9a49 	vcmp.f32	s18, s18
 8007482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007486:	d70d      	bvc.n	80074a4 <powf+0x50>
 8007488:	eef5 8a40 	vcmp.f32	s17, #0.0
 800748c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007490:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007494:	bf08      	it	eq
 8007496:	eeb0 8a67 	vmoveq.f32	s16, s15
 800749a:	eeb0 0a48 	vmov.f32	s0, s16
 800749e:	ecbd 8b04 	vpop	{d8-d9}
 80074a2:	bd08      	pop	{r3, pc}
 80074a4:	eddf 9a34 	vldr	s19, [pc, #208]	; 8007578 <powf+0x124>
 80074a8:	eeb4 9a69 	vcmp.f32	s18, s19
 80074ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b0:	d116      	bne.n	80074e0 <powf+0x8c>
 80074b2:	eef4 8a69 	vcmp.f32	s17, s19
 80074b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ba:	d057      	beq.n	800756c <powf+0x118>
 80074bc:	eeb0 0a68 	vmov.f32	s0, s17
 80074c0:	f000 fb2a 	bl	8007b18 <finitef>
 80074c4:	2800      	cmp	r0, #0
 80074c6:	d0e8      	beq.n	800749a <powf+0x46>
 80074c8:	eef4 8ae9 	vcmpe.f32	s17, s19
 80074cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d0:	d5e3      	bpl.n	800749a <powf+0x46>
 80074d2:	f7fd f8e5 	bl	80046a0 <__errno>
 80074d6:	2321      	movs	r3, #33	; 0x21
 80074d8:	6003      	str	r3, [r0, #0]
 80074da:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800757c <powf+0x128>
 80074de:	e7dc      	b.n	800749a <powf+0x46>
 80074e0:	f000 fb1a 	bl	8007b18 <finitef>
 80074e4:	bb50      	cbnz	r0, 800753c <powf+0xe8>
 80074e6:	eeb0 0a49 	vmov.f32	s0, s18
 80074ea:	f000 fb15 	bl	8007b18 <finitef>
 80074ee:	b328      	cbz	r0, 800753c <powf+0xe8>
 80074f0:	eeb0 0a68 	vmov.f32	s0, s17
 80074f4:	f000 fb10 	bl	8007b18 <finitef>
 80074f8:	b300      	cbz	r0, 800753c <powf+0xe8>
 80074fa:	eeb4 8a48 	vcmp.f32	s16, s16
 80074fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007502:	d706      	bvc.n	8007512 <powf+0xbe>
 8007504:	f7fd f8cc 	bl	80046a0 <__errno>
 8007508:	2321      	movs	r3, #33	; 0x21
 800750a:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800750e:	6003      	str	r3, [r0, #0]
 8007510:	e7c3      	b.n	800749a <powf+0x46>
 8007512:	f7fd f8c5 	bl	80046a0 <__errno>
 8007516:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800751a:	2322      	movs	r3, #34	; 0x22
 800751c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007520:	6003      	str	r3, [r0, #0]
 8007522:	d508      	bpl.n	8007536 <powf+0xe2>
 8007524:	eeb0 0a68 	vmov.f32	s0, s17
 8007528:	f000 fb0a 	bl	8007b40 <rintf>
 800752c:	eeb4 0a68 	vcmp.f32	s0, s17
 8007530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007534:	d1d1      	bne.n	80074da <powf+0x86>
 8007536:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8007580 <powf+0x12c>
 800753a:	e7ae      	b.n	800749a <powf+0x46>
 800753c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007544:	d1a9      	bne.n	800749a <powf+0x46>
 8007546:	eeb0 0a49 	vmov.f32	s0, s18
 800754a:	f000 fae5 	bl	8007b18 <finitef>
 800754e:	2800      	cmp	r0, #0
 8007550:	d0a3      	beq.n	800749a <powf+0x46>
 8007552:	eeb0 0a68 	vmov.f32	s0, s17
 8007556:	f000 fadf 	bl	8007b18 <finitef>
 800755a:	2800      	cmp	r0, #0
 800755c:	d09d      	beq.n	800749a <powf+0x46>
 800755e:	f7fd f89f 	bl	80046a0 <__errno>
 8007562:	2322      	movs	r3, #34	; 0x22
 8007564:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8007578 <powf+0x124>
 8007568:	6003      	str	r3, [r0, #0]
 800756a:	e796      	b.n	800749a <powf+0x46>
 800756c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007570:	e793      	b.n	800749a <powf+0x46>
 8007572:	bf00      	nop
 8007574:	200001dc 	.word	0x200001dc
 8007578:	00000000 	.word	0x00000000
 800757c:	ff800000 	.word	0xff800000
 8007580:	7f800000 	.word	0x7f800000

08007584 <__ieee754_powf>:
 8007584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007588:	ee10 5a90 	vmov	r5, s1
 800758c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8007590:	ed2d 8b02 	vpush	{d8}
 8007594:	eeb0 8a40 	vmov.f32	s16, s0
 8007598:	eef0 8a60 	vmov.f32	s17, s1
 800759c:	f000 8291 	beq.w	8007ac2 <__ieee754_powf+0x53e>
 80075a0:	ee10 8a10 	vmov	r8, s0
 80075a4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80075a8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80075ac:	dc06      	bgt.n	80075bc <__ieee754_powf+0x38>
 80075ae:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80075b2:	dd0a      	ble.n	80075ca <__ieee754_powf+0x46>
 80075b4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80075b8:	f000 8283 	beq.w	8007ac2 <__ieee754_powf+0x53e>
 80075bc:	ecbd 8b02 	vpop	{d8}
 80075c0:	48d8      	ldr	r0, [pc, #864]	; (8007924 <__ieee754_powf+0x3a0>)
 80075c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075c6:	f000 bab5 	b.w	8007b34 <nanf>
 80075ca:	f1b8 0f00 	cmp.w	r8, #0
 80075ce:	da1f      	bge.n	8007610 <__ieee754_powf+0x8c>
 80075d0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80075d4:	da2e      	bge.n	8007634 <__ieee754_powf+0xb0>
 80075d6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80075da:	f2c0 827b 	blt.w	8007ad4 <__ieee754_powf+0x550>
 80075de:	15fb      	asrs	r3, r7, #23
 80075e0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80075e4:	fa47 f603 	asr.w	r6, r7, r3
 80075e8:	fa06 f303 	lsl.w	r3, r6, r3
 80075ec:	42bb      	cmp	r3, r7
 80075ee:	f040 8271 	bne.w	8007ad4 <__ieee754_powf+0x550>
 80075f2:	f006 0601 	and.w	r6, r6, #1
 80075f6:	f1c6 0602 	rsb	r6, r6, #2
 80075fa:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80075fe:	d120      	bne.n	8007642 <__ieee754_powf+0xbe>
 8007600:	2d00      	cmp	r5, #0
 8007602:	f280 8264 	bge.w	8007ace <__ieee754_powf+0x54a>
 8007606:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800760a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800760e:	e00d      	b.n	800762c <__ieee754_powf+0xa8>
 8007610:	2600      	movs	r6, #0
 8007612:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007616:	d1f0      	bne.n	80075fa <__ieee754_powf+0x76>
 8007618:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800761c:	f000 8251 	beq.w	8007ac2 <__ieee754_powf+0x53e>
 8007620:	dd0a      	ble.n	8007638 <__ieee754_powf+0xb4>
 8007622:	2d00      	cmp	r5, #0
 8007624:	f280 8250 	bge.w	8007ac8 <__ieee754_powf+0x544>
 8007628:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8007928 <__ieee754_powf+0x3a4>
 800762c:	ecbd 8b02 	vpop	{d8}
 8007630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007634:	2602      	movs	r6, #2
 8007636:	e7ec      	b.n	8007612 <__ieee754_powf+0x8e>
 8007638:	2d00      	cmp	r5, #0
 800763a:	daf5      	bge.n	8007628 <__ieee754_powf+0xa4>
 800763c:	eeb1 0a68 	vneg.f32	s0, s17
 8007640:	e7f4      	b.n	800762c <__ieee754_powf+0xa8>
 8007642:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8007646:	d102      	bne.n	800764e <__ieee754_powf+0xca>
 8007648:	ee28 0a08 	vmul.f32	s0, s16, s16
 800764c:	e7ee      	b.n	800762c <__ieee754_powf+0xa8>
 800764e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8007652:	eeb0 0a48 	vmov.f32	s0, s16
 8007656:	d108      	bne.n	800766a <__ieee754_powf+0xe6>
 8007658:	f1b8 0f00 	cmp.w	r8, #0
 800765c:	db05      	blt.n	800766a <__ieee754_powf+0xe6>
 800765e:	ecbd 8b02 	vpop	{d8}
 8007662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007666:	f000 ba4d 	b.w	8007b04 <__ieee754_sqrtf>
 800766a:	f000 fa4e 	bl	8007b0a <fabsf>
 800766e:	b124      	cbz	r4, 800767a <__ieee754_powf+0xf6>
 8007670:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8007674:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007678:	d117      	bne.n	80076aa <__ieee754_powf+0x126>
 800767a:	2d00      	cmp	r5, #0
 800767c:	bfbc      	itt	lt
 800767e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8007682:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007686:	f1b8 0f00 	cmp.w	r8, #0
 800768a:	dacf      	bge.n	800762c <__ieee754_powf+0xa8>
 800768c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8007690:	ea54 0306 	orrs.w	r3, r4, r6
 8007694:	d104      	bne.n	80076a0 <__ieee754_powf+0x11c>
 8007696:	ee70 7a40 	vsub.f32	s15, s0, s0
 800769a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800769e:	e7c5      	b.n	800762c <__ieee754_powf+0xa8>
 80076a0:	2e01      	cmp	r6, #1
 80076a2:	d1c3      	bne.n	800762c <__ieee754_powf+0xa8>
 80076a4:	eeb1 0a40 	vneg.f32	s0, s0
 80076a8:	e7c0      	b.n	800762c <__ieee754_powf+0xa8>
 80076aa:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80076ae:	3801      	subs	r0, #1
 80076b0:	ea56 0300 	orrs.w	r3, r6, r0
 80076b4:	d104      	bne.n	80076c0 <__ieee754_powf+0x13c>
 80076b6:	ee38 8a48 	vsub.f32	s16, s16, s16
 80076ba:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80076be:	e7b5      	b.n	800762c <__ieee754_powf+0xa8>
 80076c0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80076c4:	dd6b      	ble.n	800779e <__ieee754_powf+0x21a>
 80076c6:	4b99      	ldr	r3, [pc, #612]	; (800792c <__ieee754_powf+0x3a8>)
 80076c8:	429c      	cmp	r4, r3
 80076ca:	dc06      	bgt.n	80076da <__ieee754_powf+0x156>
 80076cc:	2d00      	cmp	r5, #0
 80076ce:	daab      	bge.n	8007628 <__ieee754_powf+0xa4>
 80076d0:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8007930 <__ieee754_powf+0x3ac>
 80076d4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80076d8:	e7a8      	b.n	800762c <__ieee754_powf+0xa8>
 80076da:	4b96      	ldr	r3, [pc, #600]	; (8007934 <__ieee754_powf+0x3b0>)
 80076dc:	429c      	cmp	r4, r3
 80076de:	dd02      	ble.n	80076e6 <__ieee754_powf+0x162>
 80076e0:	2d00      	cmp	r5, #0
 80076e2:	dcf5      	bgt.n	80076d0 <__ieee754_powf+0x14c>
 80076e4:	e7a0      	b.n	8007628 <__ieee754_powf+0xa4>
 80076e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80076ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 80076ee:	eddf 6a92 	vldr	s13, [pc, #584]	; 8007938 <__ieee754_powf+0x3b4>
 80076f2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80076f6:	eee0 6a67 	vfms.f32	s13, s0, s15
 80076fa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80076fe:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8007702:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800770a:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800793c <__ieee754_powf+0x3b8>
 800770e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8007712:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8007940 <__ieee754_powf+0x3bc>
 8007716:	eee0 7a07 	vfma.f32	s15, s0, s14
 800771a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8007944 <__ieee754_powf+0x3c0>
 800771e:	eef0 6a67 	vmov.f32	s13, s15
 8007722:	eee0 6a07 	vfma.f32	s13, s0, s14
 8007726:	ee16 3a90 	vmov	r3, s13
 800772a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800772e:	f023 030f 	bic.w	r3, r3, #15
 8007732:	ee00 3a90 	vmov	s1, r3
 8007736:	eee0 0a47 	vfms.f32	s1, s0, s14
 800773a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800773e:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8007742:	f025 050f 	bic.w	r5, r5, #15
 8007746:	ee07 5a10 	vmov	s14, r5
 800774a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800774e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eee7 0a27 	vfma.f32	s1, s14, s15
 800775a:	3e01      	subs	r6, #1
 800775c:	ea56 0200 	orrs.w	r2, r6, r0
 8007760:	ee07 5a10 	vmov	s14, r5
 8007764:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007768:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800776c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007770:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007774:	ee17 4a10 	vmov	r4, s14
 8007778:	bf08      	it	eq
 800777a:	eeb0 8a40 	vmoveq.f32	s16, s0
 800777e:	2c00      	cmp	r4, #0
 8007780:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007784:	f340 8184 	ble.w	8007a90 <__ieee754_powf+0x50c>
 8007788:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800778c:	f340 80fc 	ble.w	8007988 <__ieee754_powf+0x404>
 8007790:	eddf 7a67 	vldr	s15, [pc, #412]	; 8007930 <__ieee754_powf+0x3ac>
 8007794:	ee28 0a27 	vmul.f32	s0, s16, s15
 8007798:	ee20 0a27 	vmul.f32	s0, s0, s15
 800779c:	e746      	b.n	800762c <__ieee754_powf+0xa8>
 800779e:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 80077a2:	bf01      	itttt	eq
 80077a4:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8007948 <__ieee754_powf+0x3c4>
 80077a8:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80077ac:	f06f 0217 	mvneq.w	r2, #23
 80077b0:	ee17 4a90 	vmoveq	r4, s15
 80077b4:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80077b8:	bf18      	it	ne
 80077ba:	2200      	movne	r2, #0
 80077bc:	3b7f      	subs	r3, #127	; 0x7f
 80077be:	4413      	add	r3, r2
 80077c0:	4a62      	ldr	r2, [pc, #392]	; (800794c <__ieee754_powf+0x3c8>)
 80077c2:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80077c6:	4294      	cmp	r4, r2
 80077c8:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80077cc:	dd06      	ble.n	80077dc <__ieee754_powf+0x258>
 80077ce:	4a60      	ldr	r2, [pc, #384]	; (8007950 <__ieee754_powf+0x3cc>)
 80077d0:	4294      	cmp	r4, r2
 80077d2:	f340 80a4 	ble.w	800791e <__ieee754_powf+0x39a>
 80077d6:	3301      	adds	r3, #1
 80077d8:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80077dc:	2400      	movs	r4, #0
 80077de:	4a5d      	ldr	r2, [pc, #372]	; (8007954 <__ieee754_powf+0x3d0>)
 80077e0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80077e4:	ee07 1a90 	vmov	s15, r1
 80077e8:	ed92 7a00 	vldr	s14, [r2]
 80077ec:	4a5a      	ldr	r2, [pc, #360]	; (8007958 <__ieee754_powf+0x3d4>)
 80077ee:	ee37 6a27 	vadd.f32	s12, s14, s15
 80077f2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80077f6:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80077fa:	1049      	asrs	r1, r1, #1
 80077fc:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007800:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8007804:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8007808:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800780c:	ee06 1a10 	vmov	s12, r1
 8007810:	ee65 4a26 	vmul.f32	s9, s10, s13
 8007814:	ee36 7a47 	vsub.f32	s14, s12, s14
 8007818:	ee14 7a90 	vmov	r7, s9
 800781c:	4017      	ands	r7, r2
 800781e:	ee05 7a90 	vmov	s11, r7
 8007822:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8007826:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800782a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800795c <__ieee754_powf+0x3d8>
 800782e:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8007832:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8007836:	ee25 6a26 	vmul.f32	s12, s10, s13
 800783a:	eddf 6a49 	vldr	s13, [pc, #292]	; 8007960 <__ieee754_powf+0x3dc>
 800783e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007842:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007964 <__ieee754_powf+0x3e0>
 8007846:	eee7 6a27 	vfma.f32	s13, s14, s15
 800784a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007938 <__ieee754_powf+0x3b4>
 800784e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007852:	eddf 6a45 	vldr	s13, [pc, #276]	; 8007968 <__ieee754_powf+0x3e4>
 8007856:	eee7 6a27 	vfma.f32	s13, s14, s15
 800785a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800796c <__ieee754_powf+0x3e8>
 800785e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007862:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8007866:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800786a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800786e:	eee5 6a07 	vfma.f32	s13, s10, s14
 8007872:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8007876:	eef0 7a45 	vmov.f32	s15, s10
 800787a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800787e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007882:	ee17 1a90 	vmov	r1, s15
 8007886:	4011      	ands	r1, r2
 8007888:	ee07 1a90 	vmov	s15, r1
 800788c:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8007890:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8007894:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007898:	ee27 7a24 	vmul.f32	s14, s14, s9
 800789c:	eea6 7a27 	vfma.f32	s14, s12, s15
 80078a0:	eeb0 6a47 	vmov.f32	s12, s14
 80078a4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80078a8:	ee16 1a10 	vmov	r1, s12
 80078ac:	4011      	ands	r1, r2
 80078ae:	ee06 1a90 	vmov	s13, r1
 80078b2:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80078b6:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8007970 <__ieee754_powf+0x3ec>
 80078ba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007974 <__ieee754_powf+0x3f0>
 80078be:	ee37 7a66 	vsub.f32	s14, s14, s13
 80078c2:	ee06 1a10 	vmov	s12, r1
 80078c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078ca:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007978 <__ieee754_powf+0x3f4>
 80078ce:	492b      	ldr	r1, [pc, #172]	; (800797c <__ieee754_powf+0x3f8>)
 80078d0:	eea6 7a27 	vfma.f32	s14, s12, s15
 80078d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80078d8:	edd1 7a00 	vldr	s15, [r1]
 80078dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078e0:	ee07 3a90 	vmov	s15, r3
 80078e4:	4b26      	ldr	r3, [pc, #152]	; (8007980 <__ieee754_powf+0x3fc>)
 80078e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80078ea:	eef0 7a47 	vmov.f32	s15, s14
 80078ee:	eee6 7a25 	vfma.f32	s15, s12, s11
 80078f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80078f6:	edd4 0a00 	vldr	s1, [r4]
 80078fa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80078fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007902:	ee17 3a90 	vmov	r3, s15
 8007906:	4013      	ands	r3, r2
 8007908:	ee07 3a90 	vmov	s15, r3
 800790c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8007910:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8007914:	eee6 6a65 	vfms.f32	s13, s12, s11
 8007918:	ee77 7a66 	vsub.f32	s15, s14, s13
 800791c:	e70f      	b.n	800773e <__ieee754_powf+0x1ba>
 800791e:	2401      	movs	r4, #1
 8007920:	e75d      	b.n	80077de <__ieee754_powf+0x25a>
 8007922:	bf00      	nop
 8007924:	08007fc0 	.word	0x08007fc0
 8007928:	00000000 	.word	0x00000000
 800792c:	3f7ffff7 	.word	0x3f7ffff7
 8007930:	7149f2ca 	.word	0x7149f2ca
 8007934:	3f800007 	.word	0x3f800007
 8007938:	3eaaaaab 	.word	0x3eaaaaab
 800793c:	3fb8aa3b 	.word	0x3fb8aa3b
 8007940:	36eca570 	.word	0x36eca570
 8007944:	3fb8aa00 	.word	0x3fb8aa00
 8007948:	4b800000 	.word	0x4b800000
 800794c:	001cc471 	.word	0x001cc471
 8007950:	005db3d6 	.word	0x005db3d6
 8007954:	0800812c 	.word	0x0800812c
 8007958:	fffff000 	.word	0xfffff000
 800795c:	3e6c3255 	.word	0x3e6c3255
 8007960:	3e53f142 	.word	0x3e53f142
 8007964:	3e8ba305 	.word	0x3e8ba305
 8007968:	3edb6db7 	.word	0x3edb6db7
 800796c:	3f19999a 	.word	0x3f19999a
 8007970:	3f76384f 	.word	0x3f76384f
 8007974:	3f763800 	.word	0x3f763800
 8007978:	369dc3a0 	.word	0x369dc3a0
 800797c:	0800813c 	.word	0x0800813c
 8007980:	08008134 	.word	0x08008134
 8007984:	3338aa3c 	.word	0x3338aa3c
 8007988:	f040 8092 	bne.w	8007ab0 <__ieee754_powf+0x52c>
 800798c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8007984 <__ieee754_powf+0x400>
 8007990:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007994:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8007998:	eef4 6ac7 	vcmpe.f32	s13, s14
 800799c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a0:	f73f aef6 	bgt.w	8007790 <__ieee754_powf+0x20c>
 80079a4:	15db      	asrs	r3, r3, #23
 80079a6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80079aa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80079ae:	4103      	asrs	r3, r0
 80079b0:	4423      	add	r3, r4
 80079b2:	4949      	ldr	r1, [pc, #292]	; (8007ad8 <__ieee754_powf+0x554>)
 80079b4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80079b8:	3a7f      	subs	r2, #127	; 0x7f
 80079ba:	4111      	asrs	r1, r2
 80079bc:	ea23 0101 	bic.w	r1, r3, r1
 80079c0:	ee07 1a10 	vmov	s14, r1
 80079c4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80079c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80079cc:	f1c2 0217 	rsb	r2, r2, #23
 80079d0:	4110      	asrs	r0, r2
 80079d2:	2c00      	cmp	r4, #0
 80079d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079d8:	bfb8      	it	lt
 80079da:	4240      	neglt	r0, r0
 80079dc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80079e0:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8007adc <__ieee754_powf+0x558>
 80079e4:	ee17 3a10 	vmov	r3, s14
 80079e8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80079ec:	f023 030f 	bic.w	r3, r3, #15
 80079f0:	ee07 3a10 	vmov	s14, r3
 80079f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079f8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80079fc:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007ae0 <__ieee754_powf+0x55c>
 8007a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a04:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8007a08:	eddf 6a36 	vldr	s13, [pc, #216]	; 8007ae4 <__ieee754_powf+0x560>
 8007a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8007a10:	eea7 0a26 	vfma.f32	s0, s14, s13
 8007a14:	eeb0 6a40 	vmov.f32	s12, s0
 8007a18:	eea7 6a66 	vfms.f32	s12, s14, s13
 8007a1c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007a20:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007a24:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007ae8 <__ieee754_powf+0x564>
 8007a28:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8007aec <__ieee754_powf+0x568>
 8007a2c:	eea7 6a26 	vfma.f32	s12, s14, s13
 8007a30:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8007af0 <__ieee754_powf+0x56c>
 8007a34:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007a38:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8007af4 <__ieee754_powf+0x570>
 8007a3c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8007a40:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8007af8 <__ieee754_powf+0x574>
 8007a44:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007a48:	eeb0 6a40 	vmov.f32	s12, s0
 8007a4c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8007a50:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007a54:	eeb0 7a46 	vmov.f32	s14, s12
 8007a58:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007a5c:	ee20 6a06 	vmul.f32	s12, s0, s12
 8007a60:	eee0 7a27 	vfma.f32	s15, s0, s15
 8007a64:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a6c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007a70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007a74:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007a78:	ee10 3a10 	vmov	r3, s0
 8007a7c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8007a80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a84:	da1a      	bge.n	8007abc <__ieee754_powf+0x538>
 8007a86:	f000 f8b7 	bl	8007bf8 <scalbnf>
 8007a8a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007a8e:	e5cd      	b.n	800762c <__ieee754_powf+0xa8>
 8007a90:	4a1a      	ldr	r2, [pc, #104]	; (8007afc <__ieee754_powf+0x578>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	dd02      	ble.n	8007a9c <__ieee754_powf+0x518>
 8007a96:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8007b00 <__ieee754_powf+0x57c>
 8007a9a:	e67b      	b.n	8007794 <__ieee754_powf+0x210>
 8007a9c:	d108      	bne.n	8007ab0 <__ieee754_powf+0x52c>
 8007a9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007aa2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aaa:	f6ff af7b 	blt.w	80079a4 <__ieee754_powf+0x420>
 8007aae:	e7f2      	b.n	8007a96 <__ieee754_powf+0x512>
 8007ab0:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8007ab4:	f73f af76 	bgt.w	80079a4 <__ieee754_powf+0x420>
 8007ab8:	2000      	movs	r0, #0
 8007aba:	e78f      	b.n	80079dc <__ieee754_powf+0x458>
 8007abc:	ee00 3a10 	vmov	s0, r3
 8007ac0:	e7e3      	b.n	8007a8a <__ieee754_powf+0x506>
 8007ac2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007ac6:	e5b1      	b.n	800762c <__ieee754_powf+0xa8>
 8007ac8:	eeb0 0a68 	vmov.f32	s0, s17
 8007acc:	e5ae      	b.n	800762c <__ieee754_powf+0xa8>
 8007ace:	eeb0 0a48 	vmov.f32	s0, s16
 8007ad2:	e5ab      	b.n	800762c <__ieee754_powf+0xa8>
 8007ad4:	2600      	movs	r6, #0
 8007ad6:	e590      	b.n	80075fa <__ieee754_powf+0x76>
 8007ad8:	007fffff 	.word	0x007fffff
 8007adc:	3f317218 	.word	0x3f317218
 8007ae0:	35bfbe8c 	.word	0x35bfbe8c
 8007ae4:	3f317200 	.word	0x3f317200
 8007ae8:	3331bb4c 	.word	0x3331bb4c
 8007aec:	b5ddea0e 	.word	0xb5ddea0e
 8007af0:	388ab355 	.word	0x388ab355
 8007af4:	bb360b61 	.word	0xbb360b61
 8007af8:	3e2aaaab 	.word	0x3e2aaaab
 8007afc:	43160000 	.word	0x43160000
 8007b00:	0da24260 	.word	0x0da24260

08007b04 <__ieee754_sqrtf>:
 8007b04:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007b08:	4770      	bx	lr

08007b0a <fabsf>:
 8007b0a:	ee10 3a10 	vmov	r3, s0
 8007b0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b12:	ee00 3a10 	vmov	s0, r3
 8007b16:	4770      	bx	lr

08007b18 <finitef>:
 8007b18:	b082      	sub	sp, #8
 8007b1a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007b1e:	9801      	ldr	r0, [sp, #4]
 8007b20:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007b24:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007b28:	bfac      	ite	ge
 8007b2a:	2000      	movge	r0, #0
 8007b2c:	2001      	movlt	r0, #1
 8007b2e:	b002      	add	sp, #8
 8007b30:	4770      	bx	lr
	...

08007b34 <nanf>:
 8007b34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007b3c <nanf+0x8>
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	7fc00000 	.word	0x7fc00000

08007b40 <rintf>:
 8007b40:	ee10 2a10 	vmov	r2, s0
 8007b44:	b513      	push	{r0, r1, r4, lr}
 8007b46:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007b4a:	397f      	subs	r1, #127	; 0x7f
 8007b4c:	2916      	cmp	r1, #22
 8007b4e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8007b52:	dc47      	bgt.n	8007be4 <rintf+0xa4>
 8007b54:	b32b      	cbz	r3, 8007ba2 <rintf+0x62>
 8007b56:	2900      	cmp	r1, #0
 8007b58:	ee10 3a10 	vmov	r3, s0
 8007b5c:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8007b60:	da21      	bge.n	8007ba6 <rintf+0x66>
 8007b62:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8007b66:	425b      	negs	r3, r3
 8007b68:	4921      	ldr	r1, [pc, #132]	; (8007bf0 <rintf+0xb0>)
 8007b6a:	0a5b      	lsrs	r3, r3, #9
 8007b6c:	0d12      	lsrs	r2, r2, #20
 8007b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b72:	0512      	lsls	r2, r2, #20
 8007b74:	4313      	orrs	r3, r2
 8007b76:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	edd1 6a00 	vldr	s13, [r1]
 8007b82:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8007b86:	ed8d 7a01 	vstr	s14, [sp, #4]
 8007b8a:	eddd 7a01 	vldr	s15, [sp, #4]
 8007b8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007b92:	ee17 3a90 	vmov	r3, s15
 8007b96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b9a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8007b9e:	ee00 3a10 	vmov	s0, r3
 8007ba2:	b002      	add	sp, #8
 8007ba4:	bd10      	pop	{r4, pc}
 8007ba6:	4a13      	ldr	r2, [pc, #76]	; (8007bf4 <rintf+0xb4>)
 8007ba8:	410a      	asrs	r2, r1
 8007baa:	4213      	tst	r3, r2
 8007bac:	d0f9      	beq.n	8007ba2 <rintf+0x62>
 8007bae:	0854      	lsrs	r4, r2, #1
 8007bb0:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8007bb4:	d006      	beq.n	8007bc4 <rintf+0x84>
 8007bb6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007bba:	ea23 0304 	bic.w	r3, r3, r4
 8007bbe:	fa42 f101 	asr.w	r1, r2, r1
 8007bc2:	430b      	orrs	r3, r1
 8007bc4:	4a0a      	ldr	r2, [pc, #40]	; (8007bf0 <rintf+0xb0>)
 8007bc6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8007bca:	ed90 7a00 	vldr	s14, [r0]
 8007bce:	ee07 3a90 	vmov	s15, r3
 8007bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bd6:	edcd 7a01 	vstr	s15, [sp, #4]
 8007bda:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007bde:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007be2:	e7de      	b.n	8007ba2 <rintf+0x62>
 8007be4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007be8:	d3db      	bcc.n	8007ba2 <rintf+0x62>
 8007bea:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007bee:	e7d8      	b.n	8007ba2 <rintf+0x62>
 8007bf0:	08008144 	.word	0x08008144
 8007bf4:	007fffff 	.word	0x007fffff

08007bf8 <scalbnf>:
 8007bf8:	ee10 3a10 	vmov	r3, s0
 8007bfc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007c00:	d025      	beq.n	8007c4e <scalbnf+0x56>
 8007c02:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007c06:	d302      	bcc.n	8007c0e <scalbnf+0x16>
 8007c08:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007c0c:	4770      	bx	lr
 8007c0e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007c12:	d122      	bne.n	8007c5a <scalbnf+0x62>
 8007c14:	4b2a      	ldr	r3, [pc, #168]	; (8007cc0 <scalbnf+0xc8>)
 8007c16:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007cc4 <scalbnf+0xcc>
 8007c1a:	4298      	cmp	r0, r3
 8007c1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007c20:	db16      	blt.n	8007c50 <scalbnf+0x58>
 8007c22:	ee10 3a10 	vmov	r3, s0
 8007c26:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007c2a:	3a19      	subs	r2, #25
 8007c2c:	4402      	add	r2, r0
 8007c2e:	2afe      	cmp	r2, #254	; 0xfe
 8007c30:	dd15      	ble.n	8007c5e <scalbnf+0x66>
 8007c32:	ee10 3a10 	vmov	r3, s0
 8007c36:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007cc8 <scalbnf+0xd0>
 8007c3a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007ccc <scalbnf+0xd4>
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	eeb0 7a67 	vmov.f32	s14, s15
 8007c44:	bfb8      	it	lt
 8007c46:	eef0 7a66 	vmovlt.f32	s15, s13
 8007c4a:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007c4e:	4770      	bx	lr
 8007c50:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007cd0 <scalbnf+0xd8>
 8007c54:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007c58:	4770      	bx	lr
 8007c5a:	0dd2      	lsrs	r2, r2, #23
 8007c5c:	e7e6      	b.n	8007c2c <scalbnf+0x34>
 8007c5e:	2a00      	cmp	r2, #0
 8007c60:	dd06      	ble.n	8007c70 <scalbnf+0x78>
 8007c62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c66:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007c6a:	ee00 3a10 	vmov	s0, r3
 8007c6e:	4770      	bx	lr
 8007c70:	f112 0f16 	cmn.w	r2, #22
 8007c74:	da1a      	bge.n	8007cac <scalbnf+0xb4>
 8007c76:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007c7a:	4298      	cmp	r0, r3
 8007c7c:	ee10 3a10 	vmov	r3, s0
 8007c80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c84:	dd0a      	ble.n	8007c9c <scalbnf+0xa4>
 8007c86:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007cc8 <scalbnf+0xd0>
 8007c8a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007ccc <scalbnf+0xd4>
 8007c8e:	eef0 7a40 	vmov.f32	s15, s0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	bf18      	it	ne
 8007c96:	eeb0 0a47 	vmovne.f32	s0, s14
 8007c9a:	e7db      	b.n	8007c54 <scalbnf+0x5c>
 8007c9c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007cd0 <scalbnf+0xd8>
 8007ca0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007cd4 <scalbnf+0xdc>
 8007ca4:	eef0 7a40 	vmov.f32	s15, s0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	e7f3      	b.n	8007c94 <scalbnf+0x9c>
 8007cac:	3219      	adds	r2, #25
 8007cae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007cb2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007cb6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007cd8 <scalbnf+0xe0>
 8007cba:	ee07 3a10 	vmov	s14, r3
 8007cbe:	e7c4      	b.n	8007c4a <scalbnf+0x52>
 8007cc0:	ffff3cb0 	.word	0xffff3cb0
 8007cc4:	4c000000 	.word	0x4c000000
 8007cc8:	7149f2ca 	.word	0x7149f2ca
 8007ccc:	f149f2ca 	.word	0xf149f2ca
 8007cd0:	0da24260 	.word	0x0da24260
 8007cd4:	8da24260 	.word	0x8da24260
 8007cd8:	33000000 	.word	0x33000000

08007cdc <_init>:
 8007cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cde:	bf00      	nop
 8007ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ce2:	bc08      	pop	{r3}
 8007ce4:	469e      	mov	lr, r3
 8007ce6:	4770      	bx	lr

08007ce8 <_fini>:
 8007ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cea:	bf00      	nop
 8007cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cee:	bc08      	pop	{r3}
 8007cf0:	469e      	mov	lr, r3
 8007cf2:	4770      	bx	lr
