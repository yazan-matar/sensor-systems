
ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08007bb0  08007bb0  00017bb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fdc  08007fdc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007fdc  08007fdc  00017fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fe4  08007fe4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fe4  08007fe4  00017fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fe8  08007fe8  00017fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  200001dc  080081c8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  080081c8  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000caaf  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e12  00000000  00000000  0002ccbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  0002ead0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000868  00000000  00000000  0002f3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001759f  00000000  00000000  0002fc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b58a  00000000  00000000  000471f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009273c  00000000  00000000  00052781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e4ebd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003630  00000000  00000000  000e4f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007b94 	.word	0x08007b94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007b94 	.word	0x08007b94

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000f50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f54:	b0a8      	sub	sp, #160	; 0xa0
 8000f56:	af06      	add	r7, sp, #24
 8000f58:	6078      	str	r0, [r7, #4]
	char buffer[100];
	uint16_t potentiometer = ADC_results[0];
 8000f5a:	4b5b      	ldr	r3, [pc, #364]	; (80010c8 <HAL_ADC_ConvCpltCallback+0x178>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	uint16_t temperature = ADC_results[1];
 8000f62:	4b59      	ldr	r3, [pc, #356]	; (80010c8 <HAL_ADC_ConvCpltCallback+0x178>)
 8000f64:	885b      	ldrh	r3, [r3, #2]
 8000f66:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	uint16_t reference = ADC_results[2];
 8000f6a:	4b57      	ldr	r3, [pc, #348]	; (80010c8 <HAL_ADC_ConvCpltCallback+0x178>)
 8000f6c:	889b      	ldrh	r3, [r3, #4]
 8000f6e:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

	// convert to voltage and to temperature
	float pot_voltage =  potentiometer * 3.3 / 4096.0;
 8000f72:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fadc 	bl	8000534 <__aeabi_i2d>
 8000f7c:	a34c      	add	r3, pc, #304	; (adr r3, 80010b0 <HAL_ADC_ConvCpltCallback+0x160>)
 8000f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f82:	f7ff fb41 	bl	8000608 <__aeabi_dmul>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	4b4e      	ldr	r3, [pc, #312]	; (80010cc <HAL_ADC_ConvCpltCallback+0x17c>)
 8000f94:	f7ff fc62 	bl	800085c <__aeabi_ddiv>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f7ff fe0a 	bl	8000bb8 <__aeabi_d2f>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
	float temp_voltage = temperature * 3.3 / 4096.0;
 8000fa8:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fac1 	bl	8000534 <__aeabi_i2d>
 8000fb2:	a33f      	add	r3, pc, #252	; (adr r3, 80010b0 <HAL_ADC_ConvCpltCallback+0x160>)
 8000fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb8:	f7ff fb26 	bl	8000608 <__aeabi_dmul>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	4b40      	ldr	r3, [pc, #256]	; (80010cc <HAL_ADC_ConvCpltCallback+0x17c>)
 8000fca:	f7ff fc47 	bl	800085c <__aeabi_ddiv>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f7ff fdef 	bl	8000bb8 <__aeabi_d2f>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	67bb      	str	r3, [r7, #120]	; 0x78
	float ref_voltage = reference * 3.3 / 4096.0;
 8000fde:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff faa6 	bl	8000534 <__aeabi_i2d>
 8000fe8:	a331      	add	r3, pc, #196	; (adr r3, 80010b0 <HAL_ADC_ConvCpltCallback+0x160>)
 8000fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fee:	f7ff fb0b 	bl	8000608 <__aeabi_dmul>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	4b33      	ldr	r3, [pc, #204]	; (80010cc <HAL_ADC_ConvCpltCallback+0x17c>)
 8001000:	f7ff fc2c 	bl	800085c <__aeabi_ddiv>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fdd4 	bl	8000bb8 <__aeabi_d2f>
 8001010:	4603      	mov	r3, r0
 8001012:	677b      	str	r3, [r7, #116]	; 0x74

	float temp_celsius = (temp_voltage - V25)/AVG_SLOPE + 25;
 8001014:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001016:	f7ff fa9f 	bl	8000558 <__aeabi_f2d>
 800101a:	a327      	add	r3, pc, #156	; (adr r3, 80010b8 <HAL_ADC_ConvCpltCallback+0x168>)
 800101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001020:	f7ff f93a 	bl	8000298 <__aeabi_dsub>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4610      	mov	r0, r2
 800102a:	4619      	mov	r1, r3
 800102c:	a324      	add	r3, pc, #144	; (adr r3, 80010c0 <HAL_ADC_ConvCpltCallback+0x170>)
 800102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001032:	f7ff fc13 	bl	800085c <__aeabi_ddiv>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4610      	mov	r0, r2
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <HAL_ADC_ConvCpltCallback+0x180>)
 8001044:	f7ff f92a 	bl	800029c <__adddf3>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4610      	mov	r0, r2
 800104e:	4619      	mov	r1, r3
 8001050:	f7ff fdb2 	bl	8000bb8 <__aeabi_d2f>
 8001054:	4603      	mov	r3, r0
 8001056:	673b      	str	r3, [r7, #112]	; 0x70

	int length = snprintf(buffer, sizeof(buffer), "Pot: %.3f V\r\nTemp: %.3f C\r\nRef: %.3f V\r\n\r\n", pot_voltage, temp_celsius, ref_voltage);
 8001058:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800105a:	f7ff fa7d 	bl	8000558 <__aeabi_f2d>
 800105e:	4604      	mov	r4, r0
 8001060:	460d      	mov	r5, r1
 8001062:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001064:	f7ff fa78 	bl	8000558 <__aeabi_f2d>
 8001068:	4680      	mov	r8, r0
 800106a:	4689      	mov	r9, r1
 800106c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800106e:	f7ff fa73 	bl	8000558 <__aeabi_f2d>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	f107 0008 	add.w	r0, r7, #8
 800107a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800107e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001082:	e9cd 4500 	strd	r4, r5, [sp]
 8001086:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <HAL_ADC_ConvCpltCallback+0x184>)
 8001088:	2164      	movs	r1, #100	; 0x64
 800108a:	f004 fb45 	bl	8005718 <sniprintf>
 800108e:	66f8      	str	r0, [r7, #108]	; 0x6c
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, length, 100);
 8001090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001092:	b29a      	uxth	r2, r3
 8001094:	f107 0108 	add.w	r1, r7, #8
 8001098:	2364      	movs	r3, #100	; 0x64
 800109a:	480f      	ldr	r0, [pc, #60]	; (80010d8 <HAL_ADC_ConvCpltCallback+0x188>)
 800109c:	f002 ff85 	bl	8003faa <HAL_UART_Transmit>

}
 80010a0:	bf00      	nop
 80010a2:	3788      	adds	r7, #136	; 0x88
 80010a4:	46bd      	mov	sp, r7
 80010a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010aa:	bf00      	nop
 80010ac:	f3af 8000 	nop.w
 80010b0:	66666666 	.word	0x66666666
 80010b4:	400a6666 	.word	0x400a6666
 80010b8:	851eb852 	.word	0x851eb852
 80010bc:	3fe851eb 	.word	0x3fe851eb
 80010c0:	47ae147b 	.word	0x47ae147b
 80010c4:	3f647ae1 	.word	0x3f647ae1
 80010c8:	20000204 	.word	0x20000204
 80010cc:	40b00000 	.word	0x40b00000
 80010d0:	40390000 	.word	0x40390000
 80010d4:	08007bb0 	.word	0x08007bb0
 80010d8:	20000314 	.word	0x20000314

080010dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b09a      	sub	sp, #104	; 0x68
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e2:	f000 fc87 	bl	80019f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e6:	f000 f817 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ea:	f000 f991 	bl	8001410 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010ee:	f000 f92f 	bl	8001350 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80010f2:	f000 f957 	bl	80013a4 <MX_DMA_Init>
  MX_ADC1_Init();
 80010f6:	f000 f87b 	bl	80011f0 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, ADC_results, sizeof(ADC_results)/sizeof(ADC_results[0]));
 80010fa:	2203      	movs	r2, #3
 80010fc:	4904      	ldr	r1, [pc, #16]	; (8001110 <main+0x34>)
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <main+0x38>)
 8001100:	f000 fe92 	bl	8001e28 <HAL_ADC_Start_DMA>
	  HAL_Delay(1000);
 8001104:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001108:	f000 fce6 	bl	8001ad8 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, ADC_results, sizeof(ADC_results)/sizeof(ADC_results[0]));
 800110c:	e7f5      	b.n	80010fa <main+0x1e>
 800110e:	bf00      	nop
 8001110:	20000204 	.word	0x20000204
 8001114:	2000020c 	.word	0x2000020c

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b094      	sub	sp, #80	; 0x50
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	2230      	movs	r2, #48	; 0x30
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f003 fe84 	bl	8004e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <SystemClock_Config+0xd0>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	4a28      	ldr	r2, [pc, #160]	; (80011e8 <SystemClock_Config+0xd0>)
 8001146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114a:	6413      	str	r3, [r2, #64]	; 0x40
 800114c:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <SystemClock_Config+0xd0>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001158:	2300      	movs	r3, #0
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	4b23      	ldr	r3, [pc, #140]	; (80011ec <SystemClock_Config+0xd4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001164:	4a21      	ldr	r2, [pc, #132]	; (80011ec <SystemClock_Config+0xd4>)
 8001166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <SystemClock_Config+0xd4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001178:	2302      	movs	r3, #2
 800117a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800117c:	2301      	movs	r3, #1
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001180:	2310      	movs	r3, #16
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001184:	2302      	movs	r3, #2
 8001186:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001188:	2300      	movs	r3, #0
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800118c:	2310      	movs	r3, #16
 800118e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001190:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001194:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001196:	2304      	movs	r3, #4
 8001198:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800119a:	2307      	movs	r3, #7
 800119c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119e:	f107 0320 	add.w	r3, r7, #32
 80011a2:	4618      	mov	r0, r3
 80011a4:	f002 fa40 	bl	8003628 <HAL_RCC_OscConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011ae:	f000 f99d 	bl	80014ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b2:	230f      	movs	r3, #15
 80011b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b6:	2302      	movs	r3, #2
 80011b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2102      	movs	r1, #2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f002 fca2 	bl	8003b18 <HAL_RCC_ClockConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011da:	f000 f987 	bl	80014ec <Error_Handler>
  }
}
 80011de:	bf00      	nop
 80011e0:	3750      	adds	r7, #80	; 0x50
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40007000 	.word	0x40007000

080011f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08c      	sub	sp, #48	; 0x30
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011f6:	f107 0320 	add.w	r3, r7, #32
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001204:	463b      	mov	r3, r7
 8001206:	2220      	movs	r2, #32
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f003 fe12 	bl	8004e34 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001210:	4b4b      	ldr	r3, [pc, #300]	; (8001340 <MX_ADC1_Init+0x150>)
 8001212:	4a4c      	ldr	r2, [pc, #304]	; (8001344 <MX_ADC1_Init+0x154>)
 8001214:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001216:	4b4a      	ldr	r3, [pc, #296]	; (8001340 <MX_ADC1_Init+0x150>)
 8001218:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800121c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800121e:	4b48      	ldr	r3, [pc, #288]	; (8001340 <MX_ADC1_Init+0x150>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001224:	4b46      	ldr	r3, [pc, #280]	; (8001340 <MX_ADC1_Init+0x150>)
 8001226:	2201      	movs	r2, #1
 8001228:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800122a:	4b45      	ldr	r3, [pc, #276]	; (8001340 <MX_ADC1_Init+0x150>)
 800122c:	2200      	movs	r2, #0
 800122e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001230:	4b43      	ldr	r3, [pc, #268]	; (8001340 <MX_ADC1_Init+0x150>)
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001238:	4b41      	ldr	r3, [pc, #260]	; (8001340 <MX_ADC1_Init+0x150>)
 800123a:	2200      	movs	r2, #0
 800123c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800123e:	4b40      	ldr	r3, [pc, #256]	; (8001340 <MX_ADC1_Init+0x150>)
 8001240:	4a41      	ldr	r2, [pc, #260]	; (8001348 <MX_ADC1_Init+0x158>)
 8001242:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001244:	4b3e      	ldr	r3, [pc, #248]	; (8001340 <MX_ADC1_Init+0x150>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800124a:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <MX_ADC1_Init+0x150>)
 800124c:	2203      	movs	r2, #3
 800124e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001250:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <MX_ADC1_Init+0x150>)
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001258:	4b39      	ldr	r3, [pc, #228]	; (8001340 <MX_ADC1_Init+0x150>)
 800125a:	2201      	movs	r2, #1
 800125c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800125e:	4838      	ldr	r0, [pc, #224]	; (8001340 <MX_ADC1_Init+0x150>)
 8001260:	f000 fc5e 	bl	8001b20 <HAL_ADC_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 800126a:	f000 f93f 	bl	80014ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800126e:	2301      	movs	r3, #1
 8001270:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8001272:	2301      	movs	r3, #1
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001276:	2307      	movs	r3, #7
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800127a:	f107 0320 	add.w	r3, r7, #32
 800127e:	4619      	mov	r1, r3
 8001280:	482f      	ldr	r0, [pc, #188]	; (8001340 <MX_ADC1_Init+0x150>)
 8001282:	f000 fedf 	bl	8002044 <HAL_ADC_ConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800128c:	f000 f92e 	bl	80014ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001290:	2310      	movs	r3, #16
 8001292:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 8001294:	2302      	movs	r3, #2
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001298:	2300      	movs	r3, #0
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129c:	f107 0320 	add.w	r3, r7, #32
 80012a0:	4619      	mov	r1, r3
 80012a2:	4827      	ldr	r0, [pc, #156]	; (8001340 <MX_ADC1_Init+0x150>)
 80012a4:	f000 fece 	bl	8002044 <HAL_ADC_ConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80012ae:	f000 f91d 	bl	80014ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80012b2:	2311      	movs	r3, #17
 80012b4:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 80012b6:	2303      	movs	r3, #3
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ba:	f107 0320 	add.w	r3, r7, #32
 80012be:	4619      	mov	r1, r3
 80012c0:	481f      	ldr	r0, [pc, #124]	; (8001340 <MX_ADC1_Init+0x150>)
 80012c2:	f000 febf 	bl	8002044 <HAL_ADC_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80012cc:	f000 f90e 	bl	80014ec <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80012d4:	2301      	movs	r3, #1
 80012d6:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 80012d8:	2303      	movs	r3, #3
 80012da:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <MX_ADC1_Init+0x15c>)
 80012e6:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80012f4:	463b      	mov	r3, r7
 80012f6:	4619      	mov	r1, r3
 80012f8:	4811      	ldr	r0, [pc, #68]	; (8001340 <MX_ADC1_Init+0x150>)
 80012fa:	f001 f94d 	bl	8002598 <HAL_ADCEx_InjectedConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001304:	f000 f8f2 	bl	80014ec <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedRank = 2;
 8001308:	2302      	movs	r3, #2
 800130a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800130c:	463b      	mov	r3, r7
 800130e:	4619      	mov	r1, r3
 8001310:	480b      	ldr	r0, [pc, #44]	; (8001340 <MX_ADC1_Init+0x150>)
 8001312:	f001 f941 	bl	8002598 <HAL_ADCEx_InjectedConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 800131c:	f000 f8e6 	bl	80014ec <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedRank = 3;
 8001320:	2303      	movs	r3, #3
 8001322:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001324:	463b      	mov	r3, r7
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_ADC1_Init+0x150>)
 800132a:	f001 f935 	bl	8002598 <HAL_ADCEx_InjectedConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC1_Init+0x148>
  {
    Error_Handler();
 8001334:	f000 f8da 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	3730      	adds	r7, #48	; 0x30
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000020c 	.word	0x2000020c
 8001344:	40012000 	.word	0x40012000
 8001348:	0f000001 	.word	0x0f000001
 800134c:	000f0001 	.word	0x000f0001

08001350 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <MX_USART2_UART_Init+0x50>)
 8001358:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <MX_USART2_UART_Init+0x4c>)
 800135c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001360:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_USART2_UART_Init+0x4c>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001376:	220c      	movs	r2, #12
 8001378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <MX_USART2_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001388:	f002 fdc2 	bl	8003f10 <HAL_UART_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001392:	f000 f8ab 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000314 	.word	0x20000314
 80013a0:	40004400 	.word	0x40004400

080013a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <MX_DMA_Init+0x68>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a16      	ldr	r2, [pc, #88]	; (800140c <MX_DMA_Init+0x68>)
 80013b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b14      	ldr	r3, [pc, #80]	; (800140c <MX_DMA_Init+0x68>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <MX_DMA_Init+0x68>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a0f      	ldr	r2, [pc, #60]	; (800140c <MX_DMA_Init+0x68>)
 80013d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <MX_DMA_Init+0x68>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	2011      	movs	r0, #17
 80013e8:	f001 fb47 	bl	8002a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80013ec:	2011      	movs	r0, #17
 80013ee:	f001 fb60 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2100      	movs	r1, #0
 80013f6:	2038      	movs	r0, #56	; 0x38
 80013f8:	f001 fb3f 	bl	8002a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013fc:	2038      	movs	r0, #56	; 0x38
 80013fe:	f001 fb58 	bl	8002ab2 <HAL_NVIC_EnableIRQ>

}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800

08001410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <MX_GPIO_Init+0xd0>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a2c      	ldr	r2, [pc, #176]	; (80014e0 <MX_GPIO_Init+0xd0>)
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <MX_GPIO_Init+0xd0>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <MX_GPIO_Init+0xd0>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a25      	ldr	r2, [pc, #148]	; (80014e0 <MX_GPIO_Init+0xd0>)
 800144c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <MX_GPIO_Init+0xd0>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <MX_GPIO_Init+0xd0>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a1e      	ldr	r2, [pc, #120]	; (80014e0 <MX_GPIO_Init+0xd0>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <MX_GPIO_Init+0xd0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <MX_GPIO_Init+0xd0>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <MX_GPIO_Init+0xd0>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <MX_GPIO_Init+0xd0>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	2120      	movs	r1, #32
 800149a:	4812      	ldr	r0, [pc, #72]	; (80014e4 <MX_GPIO_Init+0xd4>)
 800149c:	f002 f8aa 	bl	80035f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	480c      	ldr	r0, [pc, #48]	; (80014e8 <MX_GPIO_Init+0xd8>)
 80014b8:	f001 ff18 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014bc:	2320      	movs	r3, #32
 80014be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c0:	2301      	movs	r3, #1
 80014c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	4804      	ldr	r0, [pc, #16]	; (80014e4 <MX_GPIO_Init+0xd4>)
 80014d4:	f001 ff0a 	bl	80032ec <HAL_GPIO_Init>

}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40020800 	.word	0x40020800

080014ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f0:	b672      	cpsid	i
}
 80014f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <Error_Handler+0x8>
	...

080014f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <HAL_MspInit+0x4c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	4a0f      	ldr	r2, [pc, #60]	; (8001544 <HAL_MspInit+0x4c>)
 8001508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150c:	6453      	str	r3, [r2, #68]	; 0x44
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <HAL_MspInit+0x4c>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_MspInit+0x4c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a08      	ldr	r2, [pc, #32]	; (8001544 <HAL_MspInit+0x4c>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_MspInit+0x4c>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001536:	2007      	movs	r0, #7
 8001538:	f001 fa94 	bl	8002a64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800

08001548 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a33      	ldr	r2, [pc, #204]	; (8001634 <HAL_ADC_MspInit+0xec>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d15f      	bne.n	800162a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b32      	ldr	r3, [pc, #200]	; (8001638 <HAL_ADC_MspInit+0xf0>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4a31      	ldr	r2, [pc, #196]	; (8001638 <HAL_ADC_MspInit+0xf0>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001578:	6453      	str	r3, [r2, #68]	; 0x44
 800157a:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <HAL_ADC_MspInit+0xf0>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b2b      	ldr	r3, [pc, #172]	; (8001638 <HAL_ADC_MspInit+0xf0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a2a      	ldr	r2, [pc, #168]	; (8001638 <HAL_ADC_MspInit+0xf0>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b28      	ldr	r3, [pc, #160]	; (8001638 <HAL_ADC_MspInit+0xf0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015a2:	2302      	movs	r3, #2
 80015a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a6:	2303      	movs	r3, #3
 80015a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	4821      	ldr	r0, [pc, #132]	; (800163c <HAL_ADC_MspInit+0xf4>)
 80015b6:	f001 fe99 	bl	80032ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015ba:	4b21      	ldr	r3, [pc, #132]	; (8001640 <HAL_ADC_MspInit+0xf8>)
 80015bc:	4a21      	ldr	r2, [pc, #132]	; (8001644 <HAL_ADC_MspInit+0xfc>)
 80015be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015c0:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <HAL_ADC_MspInit+0xf8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015c6:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <HAL_ADC_MspInit+0xf8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015cc:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <HAL_ADC_MspInit+0xf8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015d2:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <HAL_ADC_MspInit+0xf8>)
 80015d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015da:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_ADC_MspInit+0xf8>)
 80015dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <HAL_ADC_MspInit+0xf8>)
 80015e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_ADC_MspInit+0xf8>)
 80015ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015f2:	4b13      	ldr	r3, [pc, #76]	; (8001640 <HAL_ADC_MspInit+0xf8>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_ADC_MspInit+0xf8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015fe:	4810      	ldr	r0, [pc, #64]	; (8001640 <HAL_ADC_MspInit+0xf8>)
 8001600:	f001 fa72 	bl	8002ae8 <HAL_DMA_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800160a:	f7ff ff6f 	bl	80014ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a0b      	ldr	r2, [pc, #44]	; (8001640 <HAL_ADC_MspInit+0xf8>)
 8001612:	639a      	str	r2, [r3, #56]	; 0x38
 8001614:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <HAL_ADC_MspInit+0xf8>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	2012      	movs	r0, #18
 8001620:	f001 fa2b 	bl	8002a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001624:	2012      	movs	r0, #18
 8001626:	f001 fa44 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800162a:	bf00      	nop
 800162c:	3728      	adds	r7, #40	; 0x28
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40012000 	.word	0x40012000
 8001638:	40023800 	.word	0x40023800
 800163c:	40020000 	.word	0x40020000
 8001640:	200002b4 	.word	0x200002b4
 8001644:	40026410 	.word	0x40026410

08001648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a34      	ldr	r2, [pc, #208]	; (8001738 <HAL_UART_MspInit+0xf0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d162      	bne.n	8001730 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b33      	ldr	r3, [pc, #204]	; (800173c <HAL_UART_MspInit+0xf4>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a32      	ldr	r2, [pc, #200]	; (800173c <HAL_UART_MspInit+0xf4>)
 8001674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
 800167a:	4b30      	ldr	r3, [pc, #192]	; (800173c <HAL_UART_MspInit+0xf4>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b2c      	ldr	r3, [pc, #176]	; (800173c <HAL_UART_MspInit+0xf4>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a2b      	ldr	r2, [pc, #172]	; (800173c <HAL_UART_MspInit+0xf4>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b29      	ldr	r3, [pc, #164]	; (800173c <HAL_UART_MspInit+0xf4>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016a2:	230c      	movs	r3, #12
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b2:	2307      	movs	r3, #7
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	4820      	ldr	r0, [pc, #128]	; (8001740 <HAL_UART_MspInit+0xf8>)
 80016be:	f001 fe15 	bl	80032ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_UART_MspInit+0xfc>)
 80016c4:	4a20      	ldr	r2, [pc, #128]	; (8001748 <HAL_UART_MspInit+0x100>)
 80016c6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80016c8:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <HAL_UART_MspInit+0xfc>)
 80016ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016d0:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <HAL_UART_MspInit+0xfc>)
 80016d2:	2240      	movs	r2, #64	; 0x40
 80016d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d6:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <HAL_UART_MspInit+0xfc>)
 80016d8:	2200      	movs	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_UART_MspInit+0xfc>)
 80016de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016e2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016e4:	4b17      	ldr	r3, [pc, #92]	; (8001744 <HAL_UART_MspInit+0xfc>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <HAL_UART_MspInit+0xfc>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <HAL_UART_MspInit+0xfc>)
 80016f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_UART_MspInit+0xfc>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_UART_MspInit+0xfc>)
 8001700:	2200      	movs	r2, #0
 8001702:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001704:	480f      	ldr	r0, [pc, #60]	; (8001744 <HAL_UART_MspInit+0xfc>)
 8001706:	f001 f9ef 	bl	8002ae8 <HAL_DMA_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001710:	f7ff feec 	bl	80014ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <HAL_UART_MspInit+0xfc>)
 8001718:	635a      	str	r2, [r3, #52]	; 0x34
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <HAL_UART_MspInit+0xfc>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	2026      	movs	r0, #38	; 0x26
 8001726:	f001 f9a8 	bl	8002a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800172a:	2026      	movs	r0, #38	; 0x26
 800172c:	f001 f9c1 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001730:	bf00      	nop
 8001732:	3728      	adds	r7, #40	; 0x28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40004400 	.word	0x40004400
 800173c:	40023800 	.word	0x40023800
 8001740:	40020000 	.word	0x40020000
 8001744:	20000254 	.word	0x20000254
 8001748:	400260a0 	.word	0x400260a0

0800174c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <NMI_Handler+0x4>

08001752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <HardFault_Handler+0x4>

08001758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <MemManage_Handler+0x4>

0800175e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <BusFault_Handler+0x4>

08001764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <UsageFault_Handler+0x4>

0800176a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001798:	f000 f97e 	bl	8001a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}

080017a0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <DMA1_Stream6_IRQHandler+0x10>)
 80017a6:	f001 fb37 	bl	8002e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000254 	.word	0x20000254

080017b4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <ADC_IRQHandler+0x10>)
 80017ba:	f000 f9f4 	bl	8001ba6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	2000020c 	.word	0x2000020c

080017c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <USART2_IRQHandler+0x10>)
 80017ce:	f002 fc7f 	bl	80040d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000314 	.word	0x20000314

080017dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <DMA2_Stream0_IRQHandler+0x10>)
 80017e2:	f001 fb19 	bl	8002e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200002b4 	.word	0x200002b4

080017f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
	return 1;
 80017f4:	2301      	movs	r3, #1
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_kill>:

int _kill(int pid, int sig)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800180a:	f003 fae9 	bl	8004de0 <__errno>
 800180e:	4603      	mov	r3, r0
 8001810:	2216      	movs	r2, #22
 8001812:	601a      	str	r2, [r3, #0]
	return -1;
 8001814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_exit>:

void _exit (int status)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001828:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ffe7 	bl	8001800 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001832:	e7fe      	b.n	8001832 <_exit+0x12>

08001834 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e00a      	b.n	800185c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001846:	f3af 8000 	nop.w
 800184a:	4601      	mov	r1, r0
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	60ba      	str	r2, [r7, #8]
 8001852:	b2ca      	uxtb	r2, r1
 8001854:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	dbf0      	blt.n	8001846 <_read+0x12>
	}

return len;
 8001864:	687b      	ldr	r3, [r7, #4]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e009      	b.n	8001894 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	60ba      	str	r2, [r7, #8]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbf1      	blt.n	8001880 <_write+0x12>
	}
	return len;
 800189c:	687b      	ldr	r3, [r7, #4]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_close>:

int _close(int file)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
	return -1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ce:	605a      	str	r2, [r3, #4]
	return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <_isatty>:

int _isatty(int file)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
	return 1;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001918:	4a14      	ldr	r2, [pc, #80]	; (800196c <_sbrk+0x5c>)
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <_sbrk+0x60>)
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <_sbrk+0x64>)
 800192e:	4a12      	ldr	r2, [pc, #72]	; (8001978 <_sbrk+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	429a      	cmp	r2, r3
 800193e:	d207      	bcs.n	8001950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001940:	f003 fa4e 	bl	8004de0 <__errno>
 8001944:	4603      	mov	r3, r0
 8001946:	220c      	movs	r2, #12
 8001948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800194e:	e009      	b.n	8001964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <_sbrk+0x64>)
 8001960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20018000 	.word	0x20018000
 8001970:	00000400 	.word	0x00000400
 8001974:	200001f8 	.word	0x200001f8
 8001978:	20000370 	.word	0x20000370

0800197c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <SystemInit+0x20>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <SystemInit+0x20>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019a4:	480d      	ldr	r0, [pc, #52]	; (80019dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019a6:	490e      	ldr	r1, [pc, #56]	; (80019e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019a8:	4a0e      	ldr	r2, [pc, #56]	; (80019e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ac:	e002      	b.n	80019b4 <LoopCopyDataInit>

080019ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b2:	3304      	adds	r3, #4

080019b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b8:	d3f9      	bcc.n	80019ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ba:	4a0b      	ldr	r2, [pc, #44]	; (80019e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019bc:	4c0b      	ldr	r4, [pc, #44]	; (80019ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c0:	e001      	b.n	80019c6 <LoopFillZerobss>

080019c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c4:	3204      	adds	r2, #4

080019c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c8:	d3fb      	bcc.n	80019c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019ca:	f7ff ffd7 	bl	800197c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ce:	f003 fa0d 	bl	8004dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019d2:	f7ff fb83 	bl	80010dc <main>
  bx  lr    
 80019d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80019e4:	08007fec 	.word	0x08007fec
  ldr r2, =_sbss
 80019e8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80019ec:	2000036c 	.word	0x2000036c

080019f0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <DMA1_Stream0_IRQHandler>
	...

080019f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019f8:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_Init+0x40>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <HAL_Init+0x40>)
 80019fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_Init+0x40>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <HAL_Init+0x40>)
 8001a0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <HAL_Init+0x40>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <HAL_Init+0x40>)
 8001a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a1c:	2003      	movs	r0, #3
 8001a1e:	f001 f821 	bl	8002a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a22:	2000      	movs	r0, #0
 8001a24:	f000 f808 	bl	8001a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a28:	f7ff fd66 	bl	80014f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023c00 	.word	0x40023c00

08001a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_InitTick+0x54>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_InitTick+0x58>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f001 f839 	bl	8002ace <HAL_SYSTICK_Config>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00e      	b.n	8001a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b0f      	cmp	r3, #15
 8001a6a:	d80a      	bhi.n	8001a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a74:	f001 f801 	bl	8002a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a78:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <HAL_InitTick+0x5c>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e000      	b.n	8001a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	20000008 	.word	0x20000008
 8001a94:	20000004 	.word	0x20000004

08001a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_IncTick+0x20>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_IncTick+0x24>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4a04      	ldr	r2, [pc, #16]	; (8001abc <HAL_IncTick+0x24>)
 8001aaa:	6013      	str	r3, [r2, #0]
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	20000358 	.word	0x20000358

08001ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <HAL_GetTick+0x14>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000358 	.word	0x20000358

08001ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae0:	f7ff ffee 	bl	8001ac0 <HAL_GetTick>
 8001ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001af0:	d005      	beq.n	8001afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_Delay+0x44>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4413      	add	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001afe:	bf00      	nop
 8001b00:	f7ff ffde 	bl	8001ac0 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d8f7      	bhi.n	8001b00 <HAL_Delay+0x28>
  {
  }
}
 8001b10:	bf00      	nop
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000008 	.word	0x20000008

08001b20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e033      	b.n	8001b9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d109      	bne.n	8001b52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff fd02 	bl	8001548 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f003 0310 	and.w	r3, r3, #16
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d118      	bne.n	8001b90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b66:	f023 0302 	bic.w	r3, r3, #2
 8001b6a:	f043 0202 	orr.w	r2, r3, #2
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 fb88 	bl	8002288 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f023 0303 	bic.w	r3, r3, #3
 8001b86:	f043 0201 	orr.w	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b8e:	e001      	b.n	8001b94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	bf0c      	ite	eq
 8001bc4:	2301      	moveq	r3, #1
 8001bc6:	2300      	movne	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0320 	and.w	r3, r3, #32
 8001bd6:	2b20      	cmp	r3, #32
 8001bd8:	bf0c      	ite	eq
 8001bda:	2301      	moveq	r3, #1
 8001bdc:	2300      	movne	r3, #0
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d049      	beq.n	8001c7c <HAL_ADC_IRQHandler+0xd6>
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d046      	beq.n	8001c7c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d105      	bne.n	8001c06 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d12b      	bne.n	8001c6c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d127      	bne.n	8001c6c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d006      	beq.n	8001c38 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d119      	bne.n	8001c6c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0220 	bic.w	r2, r2, #32
 8001c46:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d105      	bne.n	8001c6c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	f043 0201 	orr.w	r2, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff f96f 	bl	8000f50 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f06f 0212 	mvn.w	r2, #18
 8001c7a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	bf0c      	ite	eq
 8001c8a:	2301      	moveq	r3, #1
 8001c8c:	2300      	movne	r3, #0
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9c:	2b80      	cmp	r3, #128	; 0x80
 8001c9e:	bf0c      	ite	eq
 8001ca0:	2301      	moveq	r3, #1
 8001ca2:	2300      	movne	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d057      	beq.n	8001d5e <HAL_ADC_IRQHandler+0x1b8>
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d054      	beq.n	8001d5e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d105      	bne.n	8001ccc <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d139      	bne.n	8001d4e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d006      	beq.n	8001cf6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d12b      	bne.n	8001d4e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d124      	bne.n	8001d4e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d11d      	bne.n	8001d4e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d119      	bne.n	8001d4e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d28:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d105      	bne.n	8001d4e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f043 0201 	orr.w	r2, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 fc18 	bl	8002584 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 020c 	mvn.w	r2, #12
 8001d5c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	bf0c      	ite	eq
 8001d6c:	2301      	moveq	r3, #1
 8001d6e:	2300      	movne	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7e:	2b40      	cmp	r3, #64	; 0x40
 8001d80:	bf0c      	ite	eq
 8001d82:	2301      	moveq	r3, #1
 8001d84:	2300      	movne	r3, #0
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d017      	beq.n	8001dc0 <HAL_ADC_IRQHandler+0x21a>
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d014      	beq.n	8001dc0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d10d      	bne.n	8001dc0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f933 	bl	800201c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f06f 0201 	mvn.w	r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0320 	and.w	r3, r3, #32
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	bf0c      	ite	eq
 8001dce:	2301      	moveq	r3, #1
 8001dd0:	2300      	movne	r3, #0
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001de0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001de4:	bf0c      	ite	eq
 8001de6:	2301      	moveq	r3, #1
 8001de8:	2300      	movne	r3, #0
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d015      	beq.n	8001e20 <HAL_ADC_IRQHandler+0x27a>
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d012      	beq.n	8001e20 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	f043 0202 	orr.w	r2, r3, #2
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f06f 0220 	mvn.w	r2, #32
 8001e0e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f90d 	bl	8002030 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f06f 0220 	mvn.w	r2, #32
 8001e1e:	601a      	str	r2, [r3, #0]
  }
}
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_ADC_Start_DMA+0x1e>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e0ce      	b.n	8001fe4 <HAL_ADC_Start_DMA+0x1bc>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d018      	beq.n	8001e8e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0201 	orr.w	r2, r2, #1
 8001e6a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e6c:	4b5f      	ldr	r3, [pc, #380]	; (8001fec <HAL_ADC_Start_DMA+0x1c4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a5f      	ldr	r2, [pc, #380]	; (8001ff0 <HAL_ADC_Start_DMA+0x1c8>)
 8001e72:	fba2 2303 	umull	r2, r3, r2, r3
 8001e76:	0c9a      	lsrs	r2, r3, #18
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e80:	e002      	b.n	8001e88 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f9      	bne.n	8001e82 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e9c:	d107      	bne.n	8001eae <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eac:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	f040 8086 	bne.w	8001fca <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ec6:	f023 0301 	bic.w	r3, r3, #1
 8001eca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d007      	beq.n	8001ef0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ee8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001efc:	d106      	bne.n	8001f0c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	f023 0206 	bic.w	r2, r3, #6
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	645a      	str	r2, [r3, #68]	; 0x44
 8001f0a:	e002      	b.n	8001f12 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f1a:	4b36      	ldr	r3, [pc, #216]	; (8001ff4 <HAL_ADC_Start_DMA+0x1cc>)
 8001f1c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f22:	4a35      	ldr	r2, [pc, #212]	; (8001ff8 <HAL_ADC_Start_DMA+0x1d0>)
 8001f24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2a:	4a34      	ldr	r2, [pc, #208]	; (8001ffc <HAL_ADC_Start_DMA+0x1d4>)
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f32:	4a33      	ldr	r2, [pc, #204]	; (8002000 <HAL_ADC_Start_DMA+0x1d8>)
 8001f34:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f3e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001f4e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f5e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	334c      	adds	r3, #76	; 0x4c
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f000 fe68 	bl	8002c44 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 031f 	and.w	r3, r3, #31
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10f      	bne.n	8001fa0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d129      	bne.n	8001fe2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	e020      	b.n	8001fe2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a17      	ldr	r2, [pc, #92]	; (8002004 <HAL_ADC_Start_DMA+0x1dc>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d11b      	bne.n	8001fe2 <HAL_ADC_Start_DMA+0x1ba>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d114      	bne.n	8001fe2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	e00b      	b.n	8001fe2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f043 0210 	orr.w	r2, r3, #16
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f043 0201 	orr.w	r2, r3, #1
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	431bde83 	.word	0x431bde83
 8001ff4:	40012300 	.word	0x40012300
 8001ff8:	08002481 	.word	0x08002481
 8001ffc:	0800253b 	.word	0x0800253b
 8002000:	08002557 	.word	0x08002557
 8002004:	40012000 	.word	0x40012000

08002008 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002058:	2b01      	cmp	r3, #1
 800205a:	d101      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x1c>
 800205c:	2302      	movs	r3, #2
 800205e:	e105      	b.n	800226c <HAL_ADC_ConfigChannel+0x228>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b09      	cmp	r3, #9
 800206e:	d925      	bls.n	80020bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68d9      	ldr	r1, [r3, #12]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	461a      	mov	r2, r3
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	3b1e      	subs	r3, #30
 8002086:	2207      	movs	r2, #7
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43da      	mvns	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	400a      	ands	r2, r1
 8002094:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68d9      	ldr	r1, [r3, #12]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	4618      	mov	r0, r3
 80020a8:	4603      	mov	r3, r0
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4403      	add	r3, r0
 80020ae:	3b1e      	subs	r3, #30
 80020b0:	409a      	lsls	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	e022      	b.n	8002102 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6919      	ldr	r1, [r3, #16]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	4613      	mov	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4413      	add	r3, r2
 80020d0:	2207      	movs	r2, #7
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43da      	mvns	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	400a      	ands	r2, r1
 80020de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6919      	ldr	r1, [r3, #16]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	4618      	mov	r0, r3
 80020f2:	4603      	mov	r3, r0
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	4403      	add	r3, r0
 80020f8:	409a      	lsls	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b06      	cmp	r3, #6
 8002108:	d824      	bhi.n	8002154 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	3b05      	subs	r3, #5
 800211c:	221f      	movs	r2, #31
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	400a      	ands	r2, r1
 800212a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	b29b      	uxth	r3, r3
 8002138:	4618      	mov	r0, r3
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	3b05      	subs	r3, #5
 8002146:	fa00 f203 	lsl.w	r2, r0, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	635a      	str	r2, [r3, #52]	; 0x34
 8002152:	e04c      	b.n	80021ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b0c      	cmp	r3, #12
 800215a:	d824      	bhi.n	80021a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	3b23      	subs	r3, #35	; 0x23
 800216e:	221f      	movs	r2, #31
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43da      	mvns	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	400a      	ands	r2, r1
 800217c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	b29b      	uxth	r3, r3
 800218a:	4618      	mov	r0, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	3b23      	subs	r3, #35	; 0x23
 8002198:	fa00 f203 	lsl.w	r2, r0, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	631a      	str	r2, [r3, #48]	; 0x30
 80021a4:	e023      	b.n	80021ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	3b41      	subs	r3, #65	; 0x41
 80021b8:	221f      	movs	r2, #31
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43da      	mvns	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	400a      	ands	r2, r1
 80021c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	4618      	mov	r0, r3
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	3b41      	subs	r3, #65	; 0x41
 80021e2:	fa00 f203 	lsl.w	r2, r0, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021ee:	4b22      	ldr	r3, [pc, #136]	; (8002278 <HAL_ADC_ConfigChannel+0x234>)
 80021f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a21      	ldr	r2, [pc, #132]	; (800227c <HAL_ADC_ConfigChannel+0x238>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d109      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x1cc>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b12      	cmp	r3, #18
 8002202:	d105      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a19      	ldr	r2, [pc, #100]	; (800227c <HAL_ADC_ConfigChannel+0x238>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d123      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x21e>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b10      	cmp	r3, #16
 8002220:	d003      	beq.n	800222a <HAL_ADC_ConfigChannel+0x1e6>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b11      	cmp	r3, #17
 8002228:	d11b      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b10      	cmp	r3, #16
 800223c:	d111      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <HAL_ADC_ConfigChannel+0x23c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a10      	ldr	r2, [pc, #64]	; (8002284 <HAL_ADC_ConfigChannel+0x240>)
 8002244:	fba2 2303 	umull	r2, r3, r2, r3
 8002248:	0c9a      	lsrs	r2, r3, #18
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002254:	e002      	b.n	800225c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	3b01      	subs	r3, #1
 800225a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f9      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	40012300 	.word	0x40012300
 800227c:	40012000 	.word	0x40012000
 8002280:	20000000 	.word	0x20000000
 8002284:	431bde83 	.word	0x431bde83

08002288 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002290:	4b79      	ldr	r3, [pc, #484]	; (8002478 <ADC_Init+0x1f0>)
 8002292:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	431a      	orrs	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6859      	ldr	r1, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	021a      	lsls	r2, r3, #8
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6859      	ldr	r1, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002302:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6899      	ldr	r1, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	4a58      	ldr	r2, [pc, #352]	; (800247c <ADC_Init+0x1f4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d022      	beq.n	8002366 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800232e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6899      	ldr	r1, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002350:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6899      	ldr	r1, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	e00f      	b.n	8002386 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002374:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002384:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0202 	bic.w	r2, r2, #2
 8002394:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6899      	ldr	r1, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	7e1b      	ldrb	r3, [r3, #24]
 80023a0:	005a      	lsls	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01b      	beq.n	80023ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6859      	ldr	r1, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	3b01      	subs	r3, #1
 80023e0:	035a      	lsls	r2, r3, #13
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	e007      	b.n	80023fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800240a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	3b01      	subs	r3, #1
 8002418:	051a      	lsls	r2, r3, #20
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002430:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6899      	ldr	r1, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800243e:	025a      	lsls	r2, r3, #9
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002456:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6899      	ldr	r1, [r3, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	029a      	lsls	r2, r3, #10
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	609a      	str	r2, [r3, #8]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40012300 	.word	0x40012300
 800247c:	0f000001 	.word	0x0f000001

08002480 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002496:	2b00      	cmp	r3, #0
 8002498:	d13c      	bne.n	8002514 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d12b      	bne.n	800250c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d127      	bne.n	800250c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d006      	beq.n	80024d8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d119      	bne.n	800250c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0220 	bic.w	r2, r2, #32
 80024e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d105      	bne.n	800250c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	f043 0201 	orr.w	r2, r3, #1
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f7fe fd1f 	bl	8000f50 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002512:	e00e      	b.n	8002532 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f7ff fd85 	bl	8002030 <HAL_ADC_ErrorCallback>
}
 8002526:	e004      	b.n	8002532 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	4798      	blx	r3
}
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b084      	sub	sp, #16
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002546:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f7ff fd5d 	bl	8002008 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b084      	sub	sp, #16
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002562:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2240      	movs	r2, #64	; 0x40
 8002568:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	f043 0204 	orr.w	r2, r3, #4
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f7ff fd5a 	bl	8002030 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800257c:	bf00      	nop
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_ADCEx_InjectedConfigChannel+0x18>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e17d      	b.n	80028ac <HAL_ADCEx_InjectedConfigChannel+0x314>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b09      	cmp	r3, #9
 80025be:	d925      	bls.n	800260c <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68d9      	ldr	r1, [r3, #12]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	3b1e      	subs	r3, #30
 80025d6:	2207      	movs	r2, #7
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43da      	mvns	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	400a      	ands	r2, r1
 80025e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68d9      	ldr	r1, [r3, #12]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	4618      	mov	r0, r3
 80025f8:	4603      	mov	r3, r0
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4403      	add	r3, r0
 80025fe:	3b1e      	subs	r3, #30
 8002600:	409a      	lsls	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	e022      	b.n	8002652 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6919      	ldr	r1, [r3, #16]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	4613      	mov	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	2207      	movs	r2, #7
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43da      	mvns	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	400a      	ands	r2, r1
 800262e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6919      	ldr	r1, [r3, #16]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	4618      	mov	r0, r3
 8002642:	4603      	mov	r3, r0
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	4403      	add	r3, r0
 8002648:	409a      	lsls	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002660:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	3b01      	subs	r3, #1
 800266e:	051a      	lsls	r2, r3, #20
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	b2da      	uxtb	r2, r3
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	b2db      	uxtb	r3, r3
 800268e:	3303      	adds	r3, #3
 8002690:	b2db      	uxtb	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	221f      	movs	r2, #31
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43da      	mvns	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	400a      	ands	r2, r1
 80026a8:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	3303      	adds	r3, #3
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	fa00 f203 	lsl.w	r2, r0, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	4a74      	ldr	r2, [pc, #464]	; (80028b8 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d022      	beq.n	8002730 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80026f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6899      	ldr	r1, [r3, #8]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	699a      	ldr	r2, [r3, #24]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800271a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6899      	ldr	r1, [r3, #8]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	69da      	ldr	r2, [r3, #28]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	e00f      	b.n	8002750 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800273e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800274e:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	7d5b      	ldrb	r3, [r3, #21]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002766:	605a      	str	r2, [r3, #4]
 8002768:	e007      	b.n	800277a <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002778:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	7d1b      	ldrb	r3, [r3, #20]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	e007      	b.n	80027a4 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027a2:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d02e      	beq.n	800280a <HAL_ADCEx_InjectedConfigChannel+0x272>
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d840      	bhi.n	8002832 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d002      	beq.n	80027ba <HAL_ADCEx_InjectedConfigChannel+0x222>
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d014      	beq.n	80027e2 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80027b8:	e03b      	b.n	8002832 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80027c8:	f023 030f 	bic.w	r3, r3, #15
 80027cc:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6959      	ldr	r1, [r3, #20]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	615a      	str	r2, [r3, #20]
      break;
 80027e0:	e03b      	b.n	800285a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80027f0:	f023 030f 	bic.w	r3, r3, #15
 80027f4:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6999      	ldr	r1, [r3, #24]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	619a      	str	r2, [r3, #24]
      break;
 8002808:	e027      	b.n	800285a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002818:	f023 030f 	bic.w	r3, r3, #15
 800281c:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	69d9      	ldr	r1, [r3, #28]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	61da      	str	r2, [r3, #28]
      break;
 8002830:	e013      	b.n	800285a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002840:	f023 030f 	bic.w	r3, r3, #15
 8002844:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6a19      	ldr	r1, [r3, #32]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	621a      	str	r2, [r3, #32]
      break;
 8002858:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800285a:	4b18      	ldr	r3, [pc, #96]	; (80028bc <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800285c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a17      	ldr	r2, [pc, #92]	; (80028c0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d109      	bne.n	800287c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b12      	cmp	r3, #18
 800286e:	d105      	bne.n	800287c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a0f      	ldr	r2, [pc, #60]	; (80028c0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d10d      	bne.n	80028a2 <HAL_ADCEx_InjectedConfigChannel+0x30a>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b10      	cmp	r3, #16
 800288c:	d003      	beq.n	8002896 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b11      	cmp	r3, #17
 8002894:	d105      	bne.n	80028a2 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	000f0001 	.word	0x000f0001
 80028bc:	40012300 	.word	0x40012300
 80028c0:	40012000 	.word	0x40012000

080028c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d4:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <__NVIC_SetPriorityGrouping+0x44>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e0:	4013      	ands	r3, r2
 80028e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028f6:	4a04      	ldr	r2, [pc, #16]	; (8002908 <__NVIC_SetPriorityGrouping+0x44>)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	60d3      	str	r3, [r2, #12]
}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002910:	4b04      	ldr	r3, [pc, #16]	; (8002924 <__NVIC_GetPriorityGrouping+0x18>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	0a1b      	lsrs	r3, r3, #8
 8002916:	f003 0307 	and.w	r3, r3, #7
}
 800291a:	4618      	mov	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	2b00      	cmp	r3, #0
 8002938:	db0b      	blt.n	8002952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	f003 021f 	and.w	r2, r3, #31
 8002940:	4907      	ldr	r1, [pc, #28]	; (8002960 <__NVIC_EnableIRQ+0x38>)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	2001      	movs	r0, #1
 800294a:	fa00 f202 	lsl.w	r2, r0, r2
 800294e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000e100 	.word	0xe000e100

08002964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	6039      	str	r1, [r7, #0]
 800296e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	2b00      	cmp	r3, #0
 8002976:	db0a      	blt.n	800298e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	b2da      	uxtb	r2, r3
 800297c:	490c      	ldr	r1, [pc, #48]	; (80029b0 <__NVIC_SetPriority+0x4c>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	0112      	lsls	r2, r2, #4
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	440b      	add	r3, r1
 8002988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800298c:	e00a      	b.n	80029a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4908      	ldr	r1, [pc, #32]	; (80029b4 <__NVIC_SetPriority+0x50>)
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	3b04      	subs	r3, #4
 800299c:	0112      	lsls	r2, r2, #4
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	440b      	add	r3, r1
 80029a2:	761a      	strb	r2, [r3, #24]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000e100 	.word	0xe000e100
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	; 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f1c3 0307 	rsb	r3, r3, #7
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	bf28      	it	cs
 80029d6:	2304      	movcs	r3, #4
 80029d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3304      	adds	r3, #4
 80029de:	2b06      	cmp	r3, #6
 80029e0:	d902      	bls.n	80029e8 <NVIC_EncodePriority+0x30>
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3b03      	subs	r3, #3
 80029e6:	e000      	b.n	80029ea <NVIC_EncodePriority+0x32>
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43da      	mvns	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	401a      	ands	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0a:	43d9      	mvns	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	4313      	orrs	r3, r2
         );
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3724      	adds	r7, #36	; 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a30:	d301      	bcc.n	8002a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a32:	2301      	movs	r3, #1
 8002a34:	e00f      	b.n	8002a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a36:	4a0a      	ldr	r2, [pc, #40]	; (8002a60 <SysTick_Config+0x40>)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3e:	210f      	movs	r1, #15
 8002a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a44:	f7ff ff8e 	bl	8002964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <SysTick_Config+0x40>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4e:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <SysTick_Config+0x40>)
 8002a50:	2207      	movs	r2, #7
 8002a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	e000e010 	.word	0xe000e010

08002a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff ff29 	bl	80028c4 <__NVIC_SetPriorityGrouping>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b086      	sub	sp, #24
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	4603      	mov	r3, r0
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a8c:	f7ff ff3e 	bl	800290c <__NVIC_GetPriorityGrouping>
 8002a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	6978      	ldr	r0, [r7, #20]
 8002a98:	f7ff ff8e 	bl	80029b8 <NVIC_EncodePriority>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ff5d 	bl	8002964 <__NVIC_SetPriority>
}
 8002aaa:	bf00      	nop
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	4603      	mov	r3, r0
 8002aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff31 	bl	8002928 <__NVIC_EnableIRQ>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ffa2 	bl	8002a20 <SysTick_Config>
 8002adc:	4603      	mov	r3, r0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002af4:	f7fe ffe4 	bl	8001ac0 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e099      	b.n	8002c38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0201 	bic.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b24:	e00f      	b.n	8002b46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b26:	f7fe ffcb 	bl	8001ac0 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b05      	cmp	r3, #5
 8002b32:	d908      	bls.n	8002b46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2220      	movs	r2, #32
 8002b38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e078      	b.n	8002c38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1e8      	bne.n	8002b26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4b38      	ldr	r3, [pc, #224]	; (8002c40 <HAL_DMA_Init+0x158>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d107      	bne.n	8002bb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f023 0307 	bic.w	r3, r3, #7
 8002bc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d117      	bne.n	8002c0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00e      	beq.n	8002c0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fb01 	bl	80031f4 <DMA_CheckFifoParam>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2240      	movs	r2, #64	; 0x40
 8002bfc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c06:	2301      	movs	r3, #1
 8002c08:	e016      	b.n	8002c38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fab8 	bl	8003188 <DMA_CalcBaseAndBitshift>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	223f      	movs	r2, #63	; 0x3f
 8002c22:	409a      	lsls	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	f010803f 	.word	0xf010803f

08002c44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_DMA_Start_IT+0x26>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e040      	b.n	8002cec <HAL_DMA_Start_IT+0xa8>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d12f      	bne.n	8002cde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2202      	movs	r2, #2
 8002c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 fa4a 	bl	800312c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9c:	223f      	movs	r2, #63	; 0x3f
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0216 	orr.w	r2, r2, #22
 8002cb2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d007      	beq.n	8002ccc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0208 	orr.w	r2, r2, #8
 8002cca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e005      	b.n	8002cea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d02:	f7fe fedd 	bl	8001ac0 <HAL_GetTick>
 8002d06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d008      	beq.n	8002d26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2280      	movs	r2, #128	; 0x80
 8002d18:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e052      	b.n	8002dcc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0216 	bic.w	r2, r2, #22
 8002d34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695a      	ldr	r2, [r3, #20]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d103      	bne.n	8002d56 <HAL_DMA_Abort+0x62>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d007      	beq.n	8002d66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0208 	bic.w	r2, r2, #8
 8002d64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0201 	bic.w	r2, r2, #1
 8002d74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d76:	e013      	b.n	8002da0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d78:	f7fe fea2 	bl	8001ac0 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b05      	cmp	r3, #5
 8002d84:	d90c      	bls.n	8002da0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2203      	movs	r2, #3
 8002d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e015      	b.n	8002dcc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1e4      	bne.n	8002d78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db2:	223f      	movs	r2, #63	; 0x3f
 8002db4:	409a      	lsls	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d004      	beq.n	8002df2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2280      	movs	r2, #128	; 0x80
 8002dec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e00c      	b.n	8002e0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2205      	movs	r2, #5
 8002df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0201 	bic.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e24:	4b92      	ldr	r3, [pc, #584]	; (8003070 <HAL_DMA_IRQHandler+0x258>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a92      	ldr	r2, [pc, #584]	; (8003074 <HAL_DMA_IRQHandler+0x25c>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	0a9b      	lsrs	r3, r3, #10
 8002e30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e42:	2208      	movs	r2, #8
 8002e44:	409a      	lsls	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d01a      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d013      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0204 	bic.w	r2, r2, #4
 8002e6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e70:	2208      	movs	r2, #8
 8002e72:	409a      	lsls	r2, r3
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7c:	f043 0201 	orr.w	r2, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e88:	2201      	movs	r2, #1
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d012      	beq.n	8002eba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00b      	beq.n	8002eba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb2:	f043 0202 	orr.w	r2, r3, #2
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebe:	2204      	movs	r2, #4
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d012      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00b      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002edc:	2204      	movs	r2, #4
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	f043 0204 	orr.w	r2, r3, #4
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef4:	2210      	movs	r2, #16
 8002ef6:	409a      	lsls	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d043      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d03c      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f12:	2210      	movs	r2, #16
 8002f14:	409a      	lsls	r2, r3
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d018      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d108      	bne.n	8002f48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d024      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	4798      	blx	r3
 8002f46:	e01f      	b.n	8002f88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01b      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4798      	blx	r3
 8002f58:	e016      	b.n	8002f88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d107      	bne.n	8002f78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0208 	bic.w	r2, r2, #8
 8002f76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	409a      	lsls	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 808e 	beq.w	80030b6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 8086 	beq.w	80030b6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fae:	2220      	movs	r2, #32
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b05      	cmp	r3, #5
 8002fc0:	d136      	bne.n	8003030 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0216 	bic.w	r2, r2, #22
 8002fd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d103      	bne.n	8002ff2 <HAL_DMA_IRQHandler+0x1da>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d007      	beq.n	8003002 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0208 	bic.w	r2, r2, #8
 8003000:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003006:	223f      	movs	r2, #63	; 0x3f
 8003008:	409a      	lsls	r2, r3
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003022:	2b00      	cmp	r3, #0
 8003024:	d07d      	beq.n	8003122 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
        }
        return;
 800302e:	e078      	b.n	8003122 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d01c      	beq.n	8003078 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d108      	bne.n	800305e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003050:	2b00      	cmp	r3, #0
 8003052:	d030      	beq.n	80030b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	4798      	blx	r3
 800305c:	e02b      	b.n	80030b6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003062:	2b00      	cmp	r3, #0
 8003064:	d027      	beq.n	80030b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	4798      	blx	r3
 800306e:	e022      	b.n	80030b6 <HAL_DMA_IRQHandler+0x29e>
 8003070:	20000000 	.word	0x20000000
 8003074:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10f      	bne.n	80030a6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0210 	bic.w	r2, r2, #16
 8003094:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d032      	beq.n	8003124 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d022      	beq.n	8003110 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2205      	movs	r2, #5
 80030ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0201 	bic.w	r2, r2, #1
 80030e0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	3301      	adds	r3, #1
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d307      	bcc.n	80030fe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f2      	bne.n	80030e2 <HAL_DMA_IRQHandler+0x2ca>
 80030fc:	e000      	b.n	8003100 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80030fe:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4798      	blx	r3
 8003120:	e000      	b.n	8003124 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003122:	bf00      	nop
    }
  }
}
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop

0800312c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003148:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2b40      	cmp	r3, #64	; 0x40
 8003158:	d108      	bne.n	800316c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800316a:	e007      	b.n	800317c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	60da      	str	r2, [r3, #12]
}
 800317c:	bf00      	nop
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	3b10      	subs	r3, #16
 8003198:	4a14      	ldr	r2, [pc, #80]	; (80031ec <DMA_CalcBaseAndBitshift+0x64>)
 800319a:	fba2 2303 	umull	r2, r3, r2, r3
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031a2:	4a13      	ldr	r2, [pc, #76]	; (80031f0 <DMA_CalcBaseAndBitshift+0x68>)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4413      	add	r3, r2
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d909      	bls.n	80031ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031be:	f023 0303 	bic.w	r3, r3, #3
 80031c2:	1d1a      	adds	r2, r3, #4
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	659a      	str	r2, [r3, #88]	; 0x58
 80031c8:	e007      	b.n	80031da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031d2:	f023 0303 	bic.w	r3, r3, #3
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	aaaaaaab 	.word	0xaaaaaaab
 80031f0:	08007bf4 	.word	0x08007bf4

080031f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d11f      	bne.n	800324e <DMA_CheckFifoParam+0x5a>
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	2b03      	cmp	r3, #3
 8003212:	d856      	bhi.n	80032c2 <DMA_CheckFifoParam+0xce>
 8003214:	a201      	add	r2, pc, #4	; (adr r2, 800321c <DMA_CheckFifoParam+0x28>)
 8003216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321a:	bf00      	nop
 800321c:	0800322d 	.word	0x0800322d
 8003220:	0800323f 	.word	0x0800323f
 8003224:	0800322d 	.word	0x0800322d
 8003228:	080032c3 	.word	0x080032c3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d046      	beq.n	80032c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800323c:	e043      	b.n	80032c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003246:	d140      	bne.n	80032ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800324c:	e03d      	b.n	80032ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003256:	d121      	bne.n	800329c <DMA_CheckFifoParam+0xa8>
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b03      	cmp	r3, #3
 800325c:	d837      	bhi.n	80032ce <DMA_CheckFifoParam+0xda>
 800325e:	a201      	add	r2, pc, #4	; (adr r2, 8003264 <DMA_CheckFifoParam+0x70>)
 8003260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003264:	08003275 	.word	0x08003275
 8003268:	0800327b 	.word	0x0800327b
 800326c:	08003275 	.word	0x08003275
 8003270:	0800328d 	.word	0x0800328d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
      break;
 8003278:	e030      	b.n	80032dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d025      	beq.n	80032d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800328a:	e022      	b.n	80032d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003294:	d11f      	bne.n	80032d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800329a:	e01c      	b.n	80032d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d903      	bls.n	80032aa <DMA_CheckFifoParam+0xb6>
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d003      	beq.n	80032b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032a8:	e018      	b.n	80032dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	73fb      	strb	r3, [r7, #15]
      break;
 80032ae:	e015      	b.n	80032dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00e      	beq.n	80032da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	73fb      	strb	r3, [r7, #15]
      break;
 80032c0:	e00b      	b.n	80032da <DMA_CheckFifoParam+0xe6>
      break;
 80032c2:	bf00      	nop
 80032c4:	e00a      	b.n	80032dc <DMA_CheckFifoParam+0xe8>
      break;
 80032c6:	bf00      	nop
 80032c8:	e008      	b.n	80032dc <DMA_CheckFifoParam+0xe8>
      break;
 80032ca:	bf00      	nop
 80032cc:	e006      	b.n	80032dc <DMA_CheckFifoParam+0xe8>
      break;
 80032ce:	bf00      	nop
 80032d0:	e004      	b.n	80032dc <DMA_CheckFifoParam+0xe8>
      break;
 80032d2:	bf00      	nop
 80032d4:	e002      	b.n	80032dc <DMA_CheckFifoParam+0xe8>
      break;   
 80032d6:	bf00      	nop
 80032d8:	e000      	b.n	80032dc <DMA_CheckFifoParam+0xe8>
      break;
 80032da:	bf00      	nop
    }
  } 
  
  return status; 
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop

080032ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b089      	sub	sp, #36	; 0x24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032fe:	2300      	movs	r3, #0
 8003300:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
 8003306:	e159      	b.n	80035bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003308:	2201      	movs	r2, #1
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4013      	ands	r3, r2
 800331a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	429a      	cmp	r2, r3
 8003322:	f040 8148 	bne.w	80035b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	2b01      	cmp	r3, #1
 8003330:	d005      	beq.n	800333e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800333a:	2b02      	cmp	r3, #2
 800333c:	d130      	bne.n	80033a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	2203      	movs	r2, #3
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4313      	orrs	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003374:	2201      	movs	r2, #1
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	f003 0201 	and.w	r2, r3, #1
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4313      	orrs	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	d017      	beq.n	80033dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	2203      	movs	r2, #3
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4013      	ands	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d123      	bne.n	8003430 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	08da      	lsrs	r2, r3, #3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3208      	adds	r2, #8
 80033f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	220f      	movs	r2, #15
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4313      	orrs	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	08da      	lsrs	r2, r3, #3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3208      	adds	r2, #8
 800342a:	69b9      	ldr	r1, [r7, #24]
 800342c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	2203      	movs	r2, #3
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	43db      	mvns	r3, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4013      	ands	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0203 	and.w	r2, r3, #3
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4313      	orrs	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80a2 	beq.w	80035b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	4b57      	ldr	r3, [pc, #348]	; (80035d4 <HAL_GPIO_Init+0x2e8>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	4a56      	ldr	r2, [pc, #344]	; (80035d4 <HAL_GPIO_Init+0x2e8>)
 800347c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003480:	6453      	str	r3, [r2, #68]	; 0x44
 8003482:	4b54      	ldr	r3, [pc, #336]	; (80035d4 <HAL_GPIO_Init+0x2e8>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800348e:	4a52      	ldr	r2, [pc, #328]	; (80035d8 <HAL_GPIO_Init+0x2ec>)
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	089b      	lsrs	r3, r3, #2
 8003494:	3302      	adds	r3, #2
 8003496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	220f      	movs	r2, #15
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43db      	mvns	r3, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4013      	ands	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a49      	ldr	r2, [pc, #292]	; (80035dc <HAL_GPIO_Init+0x2f0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d019      	beq.n	80034ee <HAL_GPIO_Init+0x202>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a48      	ldr	r2, [pc, #288]	; (80035e0 <HAL_GPIO_Init+0x2f4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d013      	beq.n	80034ea <HAL_GPIO_Init+0x1fe>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a47      	ldr	r2, [pc, #284]	; (80035e4 <HAL_GPIO_Init+0x2f8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00d      	beq.n	80034e6 <HAL_GPIO_Init+0x1fa>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a46      	ldr	r2, [pc, #280]	; (80035e8 <HAL_GPIO_Init+0x2fc>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d007      	beq.n	80034e2 <HAL_GPIO_Init+0x1f6>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a45      	ldr	r2, [pc, #276]	; (80035ec <HAL_GPIO_Init+0x300>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d101      	bne.n	80034de <HAL_GPIO_Init+0x1f2>
 80034da:	2304      	movs	r3, #4
 80034dc:	e008      	b.n	80034f0 <HAL_GPIO_Init+0x204>
 80034de:	2307      	movs	r3, #7
 80034e0:	e006      	b.n	80034f0 <HAL_GPIO_Init+0x204>
 80034e2:	2303      	movs	r3, #3
 80034e4:	e004      	b.n	80034f0 <HAL_GPIO_Init+0x204>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e002      	b.n	80034f0 <HAL_GPIO_Init+0x204>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <HAL_GPIO_Init+0x204>
 80034ee:	2300      	movs	r3, #0
 80034f0:	69fa      	ldr	r2, [r7, #28]
 80034f2:	f002 0203 	and.w	r2, r2, #3
 80034f6:	0092      	lsls	r2, r2, #2
 80034f8:	4093      	lsls	r3, r2
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003500:	4935      	ldr	r1, [pc, #212]	; (80035d8 <HAL_GPIO_Init+0x2ec>)
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	089b      	lsrs	r3, r3, #2
 8003506:	3302      	adds	r3, #2
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800350e:	4b38      	ldr	r3, [pc, #224]	; (80035f0 <HAL_GPIO_Init+0x304>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	43db      	mvns	r3, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4013      	ands	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003532:	4a2f      	ldr	r2, [pc, #188]	; (80035f0 <HAL_GPIO_Init+0x304>)
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003538:	4b2d      	ldr	r3, [pc, #180]	; (80035f0 <HAL_GPIO_Init+0x304>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800355c:	4a24      	ldr	r2, [pc, #144]	; (80035f0 <HAL_GPIO_Init+0x304>)
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003562:	4b23      	ldr	r3, [pc, #140]	; (80035f0 <HAL_GPIO_Init+0x304>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	43db      	mvns	r3, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4013      	ands	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003586:	4a1a      	ldr	r2, [pc, #104]	; (80035f0 <HAL_GPIO_Init+0x304>)
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800358c:	4b18      	ldr	r3, [pc, #96]	; (80035f0 <HAL_GPIO_Init+0x304>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	43db      	mvns	r3, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4013      	ands	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035b0:	4a0f      	ldr	r2, [pc, #60]	; (80035f0 <HAL_GPIO_Init+0x304>)
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	3301      	adds	r3, #1
 80035ba:	61fb      	str	r3, [r7, #28]
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	2b0f      	cmp	r3, #15
 80035c0:	f67f aea2 	bls.w	8003308 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop
 80035c8:	3724      	adds	r7, #36	; 0x24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40023800 	.word	0x40023800
 80035d8:	40013800 	.word	0x40013800
 80035dc:	40020000 	.word	0x40020000
 80035e0:	40020400 	.word	0x40020400
 80035e4:	40020800 	.word	0x40020800
 80035e8:	40020c00 	.word	0x40020c00
 80035ec:	40021000 	.word	0x40021000
 80035f0:	40013c00 	.word	0x40013c00

080035f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	807b      	strh	r3, [r7, #2]
 8003600:	4613      	mov	r3, r2
 8003602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003604:	787b      	ldrb	r3, [r7, #1]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800360a:	887a      	ldrh	r2, [r7, #2]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003610:	e003      	b.n	800361a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003612:	887b      	ldrh	r3, [r7, #2]
 8003614:	041a      	lsls	r2, r3, #16
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	619a      	str	r2, [r3, #24]
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e264      	b.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d075      	beq.n	8003732 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003646:	4ba3      	ldr	r3, [pc, #652]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	2b04      	cmp	r3, #4
 8003650:	d00c      	beq.n	800366c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003652:	4ba0      	ldr	r3, [pc, #640]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800365a:	2b08      	cmp	r3, #8
 800365c:	d112      	bne.n	8003684 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800365e:	4b9d      	ldr	r3, [pc, #628]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800366a:	d10b      	bne.n	8003684 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800366c:	4b99      	ldr	r3, [pc, #612]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d05b      	beq.n	8003730 <HAL_RCC_OscConfig+0x108>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d157      	bne.n	8003730 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e23f      	b.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368c:	d106      	bne.n	800369c <HAL_RCC_OscConfig+0x74>
 800368e:	4b91      	ldr	r3, [pc, #580]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a90      	ldr	r2, [pc, #576]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 8003694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	e01d      	b.n	80036d8 <HAL_RCC_OscConfig+0xb0>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036a4:	d10c      	bne.n	80036c0 <HAL_RCC_OscConfig+0x98>
 80036a6:	4b8b      	ldr	r3, [pc, #556]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a8a      	ldr	r2, [pc, #552]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 80036ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	4b88      	ldr	r3, [pc, #544]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a87      	ldr	r2, [pc, #540]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 80036b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	e00b      	b.n	80036d8 <HAL_RCC_OscConfig+0xb0>
 80036c0:	4b84      	ldr	r3, [pc, #528]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a83      	ldr	r2, [pc, #524]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 80036c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	4b81      	ldr	r3, [pc, #516]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a80      	ldr	r2, [pc, #512]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 80036d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d013      	beq.n	8003708 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7fe f9ee 	bl	8001ac0 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e8:	f7fe f9ea 	bl	8001ac0 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b64      	cmp	r3, #100	; 0x64
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e204      	b.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fa:	4b76      	ldr	r3, [pc, #472]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0xc0>
 8003706:	e014      	b.n	8003732 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003708:	f7fe f9da 	bl	8001ac0 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003710:	f7fe f9d6 	bl	8001ac0 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	; 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e1f0      	b.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003722:	4b6c      	ldr	r3, [pc, #432]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0xe8>
 800372e:	e000      	b.n	8003732 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d063      	beq.n	8003806 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800373e:	4b65      	ldr	r3, [pc, #404]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00b      	beq.n	8003762 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800374a:	4b62      	ldr	r3, [pc, #392]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003752:	2b08      	cmp	r3, #8
 8003754:	d11c      	bne.n	8003790 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003756:	4b5f      	ldr	r3, [pc, #380]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d116      	bne.n	8003790 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003762:	4b5c      	ldr	r3, [pc, #368]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <HAL_RCC_OscConfig+0x152>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d001      	beq.n	800377a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e1c4      	b.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377a:	4b56      	ldr	r3, [pc, #344]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	4952      	ldr	r1, [pc, #328]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 800378a:	4313      	orrs	r3, r2
 800378c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378e:	e03a      	b.n	8003806 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d020      	beq.n	80037da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003798:	4b4f      	ldr	r3, [pc, #316]	; (80038d8 <HAL_RCC_OscConfig+0x2b0>)
 800379a:	2201      	movs	r2, #1
 800379c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379e:	f7fe f98f 	bl	8001ac0 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a6:	f7fe f98b 	bl	8001ac0 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e1a5      	b.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b8:	4b46      	ldr	r3, [pc, #280]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c4:	4b43      	ldr	r3, [pc, #268]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	4940      	ldr	r1, [pc, #256]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	600b      	str	r3, [r1, #0]
 80037d8:	e015      	b.n	8003806 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037da:	4b3f      	ldr	r3, [pc, #252]	; (80038d8 <HAL_RCC_OscConfig+0x2b0>)
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fe f96e 	bl	8001ac0 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e8:	f7fe f96a 	bl	8001ac0 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e184      	b.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fa:	4b36      	ldr	r3, [pc, #216]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d030      	beq.n	8003874 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d016      	beq.n	8003848 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800381a:	4b30      	ldr	r3, [pc, #192]	; (80038dc <HAL_RCC_OscConfig+0x2b4>)
 800381c:	2201      	movs	r2, #1
 800381e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003820:	f7fe f94e 	bl	8001ac0 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003828:	f7fe f94a 	bl	8001ac0 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e164      	b.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800383a:	4b26      	ldr	r3, [pc, #152]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 800383c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCC_OscConfig+0x200>
 8003846:	e015      	b.n	8003874 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003848:	4b24      	ldr	r3, [pc, #144]	; (80038dc <HAL_RCC_OscConfig+0x2b4>)
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384e:	f7fe f937 	bl	8001ac0 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003856:	f7fe f933 	bl	8001ac0 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e14d      	b.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003868:	4b1a      	ldr	r3, [pc, #104]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 800386a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f0      	bne.n	8003856 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 80a0 	beq.w	80039c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003882:	2300      	movs	r3, #0
 8003884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003886:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10f      	bne.n	80038b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	4a0e      	ldr	r2, [pc, #56]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 800389c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a0:	6413      	str	r3, [r2, #64]	; 0x40
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <HAL_RCC_OscConfig+0x2ac>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ae:	2301      	movs	r3, #1
 80038b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b2:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_RCC_OscConfig+0x2b8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d121      	bne.n	8003902 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038be:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <HAL_RCC_OscConfig+0x2b8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a07      	ldr	r2, [pc, #28]	; (80038e0 <HAL_RCC_OscConfig+0x2b8>)
 80038c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ca:	f7fe f8f9 	bl	8001ac0 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d0:	e011      	b.n	80038f6 <HAL_RCC_OscConfig+0x2ce>
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800
 80038d8:	42470000 	.word	0x42470000
 80038dc:	42470e80 	.word	0x42470e80
 80038e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e4:	f7fe f8ec 	bl	8001ac0 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e106      	b.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f6:	4b85      	ldr	r3, [pc, #532]	; (8003b0c <HAL_RCC_OscConfig+0x4e4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d106      	bne.n	8003918 <HAL_RCC_OscConfig+0x2f0>
 800390a:	4b81      	ldr	r3, [pc, #516]	; (8003b10 <HAL_RCC_OscConfig+0x4e8>)
 800390c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390e:	4a80      	ldr	r2, [pc, #512]	; (8003b10 <HAL_RCC_OscConfig+0x4e8>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	6713      	str	r3, [r2, #112]	; 0x70
 8003916:	e01c      	b.n	8003952 <HAL_RCC_OscConfig+0x32a>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b05      	cmp	r3, #5
 800391e:	d10c      	bne.n	800393a <HAL_RCC_OscConfig+0x312>
 8003920:	4b7b      	ldr	r3, [pc, #492]	; (8003b10 <HAL_RCC_OscConfig+0x4e8>)
 8003922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003924:	4a7a      	ldr	r2, [pc, #488]	; (8003b10 <HAL_RCC_OscConfig+0x4e8>)
 8003926:	f043 0304 	orr.w	r3, r3, #4
 800392a:	6713      	str	r3, [r2, #112]	; 0x70
 800392c:	4b78      	ldr	r3, [pc, #480]	; (8003b10 <HAL_RCC_OscConfig+0x4e8>)
 800392e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003930:	4a77      	ldr	r2, [pc, #476]	; (8003b10 <HAL_RCC_OscConfig+0x4e8>)
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	6713      	str	r3, [r2, #112]	; 0x70
 8003938:	e00b      	b.n	8003952 <HAL_RCC_OscConfig+0x32a>
 800393a:	4b75      	ldr	r3, [pc, #468]	; (8003b10 <HAL_RCC_OscConfig+0x4e8>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393e:	4a74      	ldr	r2, [pc, #464]	; (8003b10 <HAL_RCC_OscConfig+0x4e8>)
 8003940:	f023 0301 	bic.w	r3, r3, #1
 8003944:	6713      	str	r3, [r2, #112]	; 0x70
 8003946:	4b72      	ldr	r3, [pc, #456]	; (8003b10 <HAL_RCC_OscConfig+0x4e8>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394a:	4a71      	ldr	r2, [pc, #452]	; (8003b10 <HAL_RCC_OscConfig+0x4e8>)
 800394c:	f023 0304 	bic.w	r3, r3, #4
 8003950:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d015      	beq.n	8003986 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395a:	f7fe f8b1 	bl	8001ac0 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003960:	e00a      	b.n	8003978 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003962:	f7fe f8ad 	bl	8001ac0 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003970:	4293      	cmp	r3, r2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e0c5      	b.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003978:	4b65      	ldr	r3, [pc, #404]	; (8003b10 <HAL_RCC_OscConfig+0x4e8>)
 800397a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0ee      	beq.n	8003962 <HAL_RCC_OscConfig+0x33a>
 8003984:	e014      	b.n	80039b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003986:	f7fe f89b 	bl	8001ac0 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800398c:	e00a      	b.n	80039a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800398e:	f7fe f897 	bl	8001ac0 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	f241 3288 	movw	r2, #5000	; 0x1388
 800399c:	4293      	cmp	r3, r2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e0af      	b.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a4:	4b5a      	ldr	r3, [pc, #360]	; (8003b10 <HAL_RCC_OscConfig+0x4e8>)
 80039a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1ee      	bne.n	800398e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039b0:	7dfb      	ldrb	r3, [r7, #23]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d105      	bne.n	80039c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b6:	4b56      	ldr	r3, [pc, #344]	; (8003b10 <HAL_RCC_OscConfig+0x4e8>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	4a55      	ldr	r2, [pc, #340]	; (8003b10 <HAL_RCC_OscConfig+0x4e8>)
 80039bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 809b 	beq.w	8003b02 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039cc:	4b50      	ldr	r3, [pc, #320]	; (8003b10 <HAL_RCC_OscConfig+0x4e8>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 030c 	and.w	r3, r3, #12
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d05c      	beq.n	8003a92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d141      	bne.n	8003a64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e0:	4b4c      	ldr	r3, [pc, #304]	; (8003b14 <HAL_RCC_OscConfig+0x4ec>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e6:	f7fe f86b 	bl	8001ac0 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ee:	f7fe f867 	bl	8001ac0 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e081      	b.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a00:	4b43      	ldr	r3, [pc, #268]	; (8003b10 <HAL_RCC_OscConfig+0x4e8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1f0      	bne.n	80039ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69da      	ldr	r2, [r3, #28]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	019b      	lsls	r3, r3, #6
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	085b      	lsrs	r3, r3, #1
 8003a24:	3b01      	subs	r3, #1
 8003a26:	041b      	lsls	r3, r3, #16
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	061b      	lsls	r3, r3, #24
 8003a30:	4937      	ldr	r1, [pc, #220]	; (8003b10 <HAL_RCC_OscConfig+0x4e8>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a36:	4b37      	ldr	r3, [pc, #220]	; (8003b14 <HAL_RCC_OscConfig+0x4ec>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3c:	f7fe f840 	bl	8001ac0 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a44:	f7fe f83c 	bl	8001ac0 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e056      	b.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a56:	4b2e      	ldr	r3, [pc, #184]	; (8003b10 <HAL_RCC_OscConfig+0x4e8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0x41c>
 8003a62:	e04e      	b.n	8003b02 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a64:	4b2b      	ldr	r3, [pc, #172]	; (8003b14 <HAL_RCC_OscConfig+0x4ec>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6a:	f7fe f829 	bl	8001ac0 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a72:	f7fe f825 	bl	8001ac0 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e03f      	b.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a84:	4b22      	ldr	r3, [pc, #136]	; (8003b10 <HAL_RCC_OscConfig+0x4e8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f0      	bne.n	8003a72 <HAL_RCC_OscConfig+0x44a>
 8003a90:	e037      	b.n	8003b02 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e032      	b.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a9e:	4b1c      	ldr	r3, [pc, #112]	; (8003b10 <HAL_RCC_OscConfig+0x4e8>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d028      	beq.n	8003afe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d121      	bne.n	8003afe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d11a      	bne.n	8003afe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ace:	4013      	ands	r3, r2
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ad4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d111      	bne.n	8003afe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae4:	085b      	lsrs	r3, r3, #1
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d107      	bne.n	8003afe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d001      	beq.n	8003b02 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40007000 	.word	0x40007000
 8003b10:	40023800 	.word	0x40023800
 8003b14:	42470060 	.word	0x42470060

08003b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0cc      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b2c:	4b68      	ldr	r3, [pc, #416]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d90c      	bls.n	8003b54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3a:	4b65      	ldr	r3, [pc, #404]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b42:	4b63      	ldr	r3, [pc, #396]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d001      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0b8      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d020      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b6c:	4b59      	ldr	r3, [pc, #356]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4a58      	ldr	r2, [pc, #352]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b84:	4b53      	ldr	r3, [pc, #332]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	4a52      	ldr	r2, [pc, #328]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b90:	4b50      	ldr	r3, [pc, #320]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	494d      	ldr	r1, [pc, #308]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d044      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d107      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb6:	4b47      	ldr	r3, [pc, #284]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d119      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e07f      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d003      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d107      	bne.n	8003be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd6:	4b3f      	ldr	r3, [pc, #252]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d109      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e06f      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be6:	4b3b      	ldr	r3, [pc, #236]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e067      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bf6:	4b37      	ldr	r3, [pc, #220]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f023 0203 	bic.w	r2, r3, #3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	4934      	ldr	r1, [pc, #208]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c08:	f7fd ff5a 	bl	8001ac0 <HAL_GetTick>
 8003c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0e:	e00a      	b.n	8003c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c10:	f7fd ff56 	bl	8001ac0 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e04f      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c26:	4b2b      	ldr	r3, [pc, #172]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 020c 	and.w	r2, r3, #12
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d1eb      	bne.n	8003c10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c38:	4b25      	ldr	r3, [pc, #148]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d20c      	bcs.n	8003c60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c46:	4b22      	ldr	r3, [pc, #136]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4e:	4b20      	ldr	r3, [pc, #128]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e032      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c6c:	4b19      	ldr	r3, [pc, #100]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4916      	ldr	r1, [pc, #88]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d009      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c8a:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	490e      	ldr	r1, [pc, #56]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c9e:	f000 f821 	bl	8003ce4 <HAL_RCC_GetSysClockFreq>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	490a      	ldr	r1, [pc, #40]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb0:	5ccb      	ldrb	r3, [r1, r3]
 8003cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb6:	4a09      	ldr	r2, [pc, #36]	; (8003cdc <HAL_RCC_ClockConfig+0x1c4>)
 8003cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cba:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fd feba 	bl	8001a38 <HAL_InitTick>

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40023c00 	.word	0x40023c00
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	08007bdc 	.word	0x08007bdc
 8003cdc:	20000000 	.word	0x20000000
 8003ce0:	20000004 	.word	0x20000004

08003ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ce8:	b084      	sub	sp, #16
 8003cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	607b      	str	r3, [r7, #4]
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cfc:	4b67      	ldr	r3, [pc, #412]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 030c 	and.w	r3, r3, #12
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d00d      	beq.n	8003d24 <HAL_RCC_GetSysClockFreq+0x40>
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	f200 80bd 	bhi.w	8003e88 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x34>
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d003      	beq.n	8003d1e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d16:	e0b7      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d18:	4b61      	ldr	r3, [pc, #388]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d1a:	60bb      	str	r3, [r7, #8]
       break;
 8003d1c:	e0b7      	b.n	8003e8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d1e:	4b61      	ldr	r3, [pc, #388]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003d20:	60bb      	str	r3, [r7, #8]
      break;
 8003d22:	e0b4      	b.n	8003e8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d24:	4b5d      	ldr	r3, [pc, #372]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d2c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d2e:	4b5b      	ldr	r3, [pc, #364]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d04d      	beq.n	8003dd6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d3a:	4b58      	ldr	r3, [pc, #352]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	099b      	lsrs	r3, r3, #6
 8003d40:	461a      	mov	r2, r3
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d4a:	f04f 0100 	mov.w	r1, #0
 8003d4e:	ea02 0800 	and.w	r8, r2, r0
 8003d52:	ea03 0901 	and.w	r9, r3, r1
 8003d56:	4640      	mov	r0, r8
 8003d58:	4649      	mov	r1, r9
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	014b      	lsls	r3, r1, #5
 8003d64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d68:	0142      	lsls	r2, r0, #5
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	ebb0 0008 	subs.w	r0, r0, r8
 8003d72:	eb61 0109 	sbc.w	r1, r1, r9
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	018b      	lsls	r3, r1, #6
 8003d80:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d84:	0182      	lsls	r2, r0, #6
 8003d86:	1a12      	subs	r2, r2, r0
 8003d88:	eb63 0301 	sbc.w	r3, r3, r1
 8003d8c:	f04f 0000 	mov.w	r0, #0
 8003d90:	f04f 0100 	mov.w	r1, #0
 8003d94:	00d9      	lsls	r1, r3, #3
 8003d96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d9a:	00d0      	lsls	r0, r2, #3
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	eb12 0208 	adds.w	r2, r2, r8
 8003da4:	eb43 0309 	adc.w	r3, r3, r9
 8003da8:	f04f 0000 	mov.w	r0, #0
 8003dac:	f04f 0100 	mov.w	r1, #0
 8003db0:	0259      	lsls	r1, r3, #9
 8003db2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003db6:	0250      	lsls	r0, r2, #9
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	f7fc ff46 	bl	8000c58 <__aeabi_uldivmod>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	e04a      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd6:	4b31      	ldr	r3, [pc, #196]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	099b      	lsrs	r3, r3, #6
 8003ddc:	461a      	mov	r2, r3
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003de6:	f04f 0100 	mov.w	r1, #0
 8003dea:	ea02 0400 	and.w	r4, r2, r0
 8003dee:	ea03 0501 	and.w	r5, r3, r1
 8003df2:	4620      	mov	r0, r4
 8003df4:	4629      	mov	r1, r5
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	014b      	lsls	r3, r1, #5
 8003e00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e04:	0142      	lsls	r2, r0, #5
 8003e06:	4610      	mov	r0, r2
 8003e08:	4619      	mov	r1, r3
 8003e0a:	1b00      	subs	r0, r0, r4
 8003e0c:	eb61 0105 	sbc.w	r1, r1, r5
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	018b      	lsls	r3, r1, #6
 8003e1a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e1e:	0182      	lsls	r2, r0, #6
 8003e20:	1a12      	subs	r2, r2, r0
 8003e22:	eb63 0301 	sbc.w	r3, r3, r1
 8003e26:	f04f 0000 	mov.w	r0, #0
 8003e2a:	f04f 0100 	mov.w	r1, #0
 8003e2e:	00d9      	lsls	r1, r3, #3
 8003e30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e34:	00d0      	lsls	r0, r2, #3
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	1912      	adds	r2, r2, r4
 8003e3c:	eb45 0303 	adc.w	r3, r5, r3
 8003e40:	f04f 0000 	mov.w	r0, #0
 8003e44:	f04f 0100 	mov.w	r1, #0
 8003e48:	0299      	lsls	r1, r3, #10
 8003e4a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e4e:	0290      	lsls	r0, r2, #10
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4610      	mov	r0, r2
 8003e56:	4619      	mov	r1, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	f7fc fefa 	bl	8000c58 <__aeabi_uldivmod>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4613      	mov	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	0c1b      	lsrs	r3, r3, #16
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	3301      	adds	r3, #1
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e84:	60bb      	str	r3, [r7, #8]
      break;
 8003e86:	e002      	b.n	8003e8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e88:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e8a:	60bb      	str	r3, [r7, #8]
      break;
 8003e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	00f42400 	.word	0x00f42400
 8003ea4:	007a1200 	.word	0x007a1200

08003ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eac:	4b03      	ldr	r3, [pc, #12]	; (8003ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8003eae:	681b      	ldr	r3, [r3, #0]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	20000000 	.word	0x20000000

08003ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ec4:	f7ff fff0 	bl	8003ea8 <HAL_RCC_GetHCLKFreq>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	0a9b      	lsrs	r3, r3, #10
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	4903      	ldr	r1, [pc, #12]	; (8003ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ed6:	5ccb      	ldrb	r3, [r1, r3]
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	08007bec 	.word	0x08007bec

08003ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003eec:	f7ff ffdc 	bl	8003ea8 <HAL_RCC_GetHCLKFreq>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	0b5b      	lsrs	r3, r3, #13
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	4903      	ldr	r1, [pc, #12]	; (8003f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003efe:	5ccb      	ldrb	r3, [r1, r3]
 8003f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	08007bec 	.word	0x08007bec

08003f10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e03f      	b.n	8003fa2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fd fb86 	bl	8001648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2224      	movs	r2, #36	; 0x24
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fd7b 	bl	8004a50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b08a      	sub	sp, #40	; 0x28
 8003fae:	af02      	add	r7, sp, #8
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	603b      	str	r3, [r7, #0]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b20      	cmp	r3, #32
 8003fc8:	d17c      	bne.n	80040c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <HAL_UART_Transmit+0x2c>
 8003fd0:	88fb      	ldrh	r3, [r7, #6]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e075      	b.n	80040c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_UART_Transmit+0x3e>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e06e      	b.n	80040c6 <HAL_UART_Transmit+0x11c>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2221      	movs	r2, #33	; 0x21
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ffe:	f7fd fd5f 	bl	8001ac0 <HAL_GetTick>
 8004002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	88fa      	ldrh	r2, [r7, #6]
 8004008:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	88fa      	ldrh	r2, [r7, #6]
 800400e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004018:	d108      	bne.n	800402c <HAL_UART_Transmit+0x82>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d104      	bne.n	800402c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004022:	2300      	movs	r3, #0
 8004024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	e003      	b.n	8004034 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004030:	2300      	movs	r3, #0
 8004032:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800403c:	e02a      	b.n	8004094 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2200      	movs	r2, #0
 8004046:	2180      	movs	r1, #128	; 0x80
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 faf9 	bl	8004640 <UART_WaitOnFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e036      	b.n	80040c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10b      	bne.n	8004076 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800406c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	3302      	adds	r3, #2
 8004072:	61bb      	str	r3, [r7, #24]
 8004074:	e007      	b.n	8004086 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	781a      	ldrb	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	3301      	adds	r3, #1
 8004084:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1cf      	bne.n	800403e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2200      	movs	r2, #0
 80040a6:	2140      	movs	r1, #64	; 0x40
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 fac9 	bl	8004640 <UART_WaitOnFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e006      	b.n	80040c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040c0:	2300      	movs	r3, #0
 80040c2:	e000      	b.n	80040c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040c4:	2302      	movs	r3, #2
  }
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3720      	adds	r7, #32
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b0ba      	sub	sp, #232	; 0xe8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800410e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10f      	bne.n	8004136 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b00      	cmp	r3, #0
 8004120:	d009      	beq.n	8004136 <HAL_UART_IRQHandler+0x66>
 8004122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fbd3 	bl	80048da <UART_Receive_IT>
      return;
 8004134:	e256      	b.n	80045e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004136:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 80de 	beq.w	80042fc <HAL_UART_IRQHandler+0x22c>
 8004140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d106      	bne.n	800415a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800414c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004150:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80d1 	beq.w	80042fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800415a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00b      	beq.n	800417e <HAL_UART_IRQHandler+0xae>
 8004166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800416a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f043 0201 	orr.w	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800417e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004182:	f003 0304 	and.w	r3, r3, #4
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00b      	beq.n	80041a2 <HAL_UART_IRQHandler+0xd2>
 800418a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d005      	beq.n	80041a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f043 0202 	orr.w	r2, r3, #2
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00b      	beq.n	80041c6 <HAL_UART_IRQHandler+0xf6>
 80041ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d005      	beq.n	80041c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	f043 0204 	orr.w	r2, r3, #4
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d011      	beq.n	80041f6 <HAL_UART_IRQHandler+0x126>
 80041d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d105      	bne.n	80041ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d005      	beq.n	80041f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f043 0208 	orr.w	r2, r3, #8
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 81ed 	beq.w	80045da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <HAL_UART_IRQHandler+0x14e>
 800420c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fb5e 	bl	80048da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004228:	2b40      	cmp	r3, #64	; 0x40
 800422a:	bf0c      	ite	eq
 800422c:	2301      	moveq	r3, #1
 800422e:	2300      	movne	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d103      	bne.n	800424a <HAL_UART_IRQHandler+0x17a>
 8004242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004246:	2b00      	cmp	r3, #0
 8004248:	d04f      	beq.n	80042ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fa66 	bl	800471c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425a:	2b40      	cmp	r3, #64	; 0x40
 800425c:	d141      	bne.n	80042e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3314      	adds	r3, #20
 8004264:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004268:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004274:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800427c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3314      	adds	r3, #20
 8004286:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800428a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800428e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004296:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80042a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1d9      	bne.n	800425e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d013      	beq.n	80042da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b6:	4a7d      	ldr	r2, [pc, #500]	; (80044ac <HAL_UART_IRQHandler+0x3dc>)
 80042b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fe fd88 	bl	8002dd4 <HAL_DMA_Abort_IT>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d016      	beq.n	80042f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042d4:	4610      	mov	r0, r2
 80042d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d8:	e00e      	b.n	80042f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f99a 	bl	8004614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e0:	e00a      	b.n	80042f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f996 	bl	8004614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e8:	e006      	b.n	80042f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f992 	bl	8004614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80042f6:	e170      	b.n	80045da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f8:	bf00      	nop
    return;
 80042fa:	e16e      	b.n	80045da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	2b01      	cmp	r3, #1
 8004302:	f040 814a 	bne.w	800459a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800430a:	f003 0310 	and.w	r3, r3, #16
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 8143 	beq.w	800459a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 813c 	beq.w	800459a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004322:	2300      	movs	r3, #0
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	60bb      	str	r3, [r7, #8]
 8004336:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004342:	2b40      	cmp	r3, #64	; 0x40
 8004344:	f040 80b4 	bne.w	80044b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004354:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 8140 	beq.w	80045de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004362:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004366:	429a      	cmp	r2, r3
 8004368:	f080 8139 	bcs.w	80045de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004372:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800437e:	f000 8088 	beq.w	8004492 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	330c      	adds	r3, #12
 8004388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004390:	e853 3f00 	ldrex	r3, [r3]
 8004394:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004398:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800439c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	330c      	adds	r3, #12
 80043aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80043ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1d9      	bne.n	8004382 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3314      	adds	r3, #20
 80043d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043e0:	f023 0301 	bic.w	r3, r3, #1
 80043e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3314      	adds	r3, #20
 80043ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e1      	bne.n	80043ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3314      	adds	r3, #20
 8004410:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004412:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004414:	e853 3f00 	ldrex	r3, [r3]
 8004418:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800441a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800441c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004420:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3314      	adds	r3, #20
 800442a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800442e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004430:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004432:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004434:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004436:	e841 2300 	strex	r3, r2, [r1]
 800443a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800443c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e3      	bne.n	800440a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	330c      	adds	r3, #12
 8004456:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004462:	f023 0310 	bic.w	r3, r3, #16
 8004466:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	330c      	adds	r3, #12
 8004470:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004474:	65ba      	str	r2, [r7, #88]	; 0x58
 8004476:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004478:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800447a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800447c:	e841 2300 	strex	r3, r2, [r1]
 8004480:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e3      	bne.n	8004450 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	4618      	mov	r0, r3
 800448e:	f7fe fc31 	bl	8002cf4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800449a:	b29b      	uxth	r3, r3
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	b29b      	uxth	r3, r3
 80044a0:	4619      	mov	r1, r3
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f8c0 	bl	8004628 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044a8:	e099      	b.n	80045de <HAL_UART_IRQHandler+0x50e>
 80044aa:	bf00      	nop
 80044ac:	080047e3 	.word	0x080047e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 808b 	beq.w	80045e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80044cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 8086 	beq.w	80045e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	330c      	adds	r3, #12
 80044dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	330c      	adds	r3, #12
 80044f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80044fa:	647a      	str	r2, [r7, #68]	; 0x44
 80044fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004500:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004502:	e841 2300 	strex	r3, r2, [r1]
 8004506:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1e3      	bne.n	80044d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3314      	adds	r3, #20
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	623b      	str	r3, [r7, #32]
   return(result);
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	f023 0301 	bic.w	r3, r3, #1
 8004524:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3314      	adds	r3, #20
 800452e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004532:	633a      	str	r2, [r7, #48]	; 0x30
 8004534:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004536:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e3      	bne.n	800450e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	330c      	adds	r3, #12
 800455a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	e853 3f00 	ldrex	r3, [r3]
 8004562:	60fb      	str	r3, [r7, #12]
   return(result);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0310 	bic.w	r3, r3, #16
 800456a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	330c      	adds	r3, #12
 8004574:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004578:	61fa      	str	r2, [r7, #28]
 800457a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457c:	69b9      	ldr	r1, [r7, #24]
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	e841 2300 	strex	r3, r2, [r1]
 8004584:	617b      	str	r3, [r7, #20]
   return(result);
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e3      	bne.n	8004554 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800458c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004590:	4619      	mov	r1, r3
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f848 	bl	8004628 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004598:	e023      	b.n	80045e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800459a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800459e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <HAL_UART_IRQHandler+0x4ea>
 80045a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f929 	bl	800480a <UART_Transmit_IT>
    return;
 80045b8:	e014      	b.n	80045e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00e      	beq.n	80045e4 <HAL_UART_IRQHandler+0x514>
 80045c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d008      	beq.n	80045e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f969 	bl	80048aa <UART_EndTransmit_IT>
    return;
 80045d8:	e004      	b.n	80045e4 <HAL_UART_IRQHandler+0x514>
    return;
 80045da:	bf00      	nop
 80045dc:	e002      	b.n	80045e4 <HAL_UART_IRQHandler+0x514>
      return;
 80045de:	bf00      	nop
 80045e0:	e000      	b.n	80045e4 <HAL_UART_IRQHandler+0x514>
      return;
 80045e2:	bf00      	nop
  }
}
 80045e4:	37e8      	adds	r7, #232	; 0xe8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop

080045ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b090      	sub	sp, #64	; 0x40
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	603b      	str	r3, [r7, #0]
 800464c:	4613      	mov	r3, r2
 800464e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004650:	e050      	b.n	80046f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004658:	d04c      	beq.n	80046f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800465a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800465c:	2b00      	cmp	r3, #0
 800465e:	d007      	beq.n	8004670 <UART_WaitOnFlagUntilTimeout+0x30>
 8004660:	f7fd fa2e 	bl	8001ac0 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800466c:	429a      	cmp	r2, r3
 800466e:	d241      	bcs.n	80046f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	330c      	adds	r3, #12
 8004676:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467a:	e853 3f00 	ldrex	r3, [r3]
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	330c      	adds	r3, #12
 800468e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004690:	637a      	str	r2, [r7, #52]	; 0x34
 8004692:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004698:	e841 2300 	strex	r3, r2, [r1]
 800469c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e5      	bne.n	8004670 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3314      	adds	r3, #20
 80046aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	e853 3f00 	ldrex	r3, [r3]
 80046b2:	613b      	str	r3, [r7, #16]
   return(result);
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f023 0301 	bic.w	r3, r3, #1
 80046ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3314      	adds	r3, #20
 80046c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046c4:	623a      	str	r2, [r7, #32]
 80046c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	69f9      	ldr	r1, [r7, #28]
 80046ca:	6a3a      	ldr	r2, [r7, #32]
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e5      	bne.n	80046a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e00f      	b.n	8004714 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	4013      	ands	r3, r2
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	429a      	cmp	r2, r3
 8004702:	bf0c      	ite	eq
 8004704:	2301      	moveq	r3, #1
 8004706:	2300      	movne	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	461a      	mov	r2, r3
 800470c:	79fb      	ldrb	r3, [r7, #7]
 800470e:	429a      	cmp	r2, r3
 8004710:	d09f      	beq.n	8004652 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3740      	adds	r7, #64	; 0x40
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800471c:	b480      	push	{r7}
 800471e:	b095      	sub	sp, #84	; 0x54
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472e:	e853 3f00 	ldrex	r3, [r3]
 8004732:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800473a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	330c      	adds	r3, #12
 8004742:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004744:	643a      	str	r2, [r7, #64]	; 0x40
 8004746:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004748:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800474a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800474c:	e841 2300 	strex	r3, r2, [r1]
 8004750:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1e5      	bne.n	8004724 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3314      	adds	r3, #20
 800475e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	e853 3f00 	ldrex	r3, [r3]
 8004766:	61fb      	str	r3, [r7, #28]
   return(result);
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f023 0301 	bic.w	r3, r3, #1
 800476e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3314      	adds	r3, #20
 8004776:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004778:	62fa      	str	r2, [r7, #44]	; 0x2c
 800477a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800477e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004780:	e841 2300 	strex	r3, r2, [r1]
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1e5      	bne.n	8004758 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	2b01      	cmp	r3, #1
 8004792:	d119      	bne.n	80047c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	330c      	adds	r3, #12
 800479a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	e853 3f00 	ldrex	r3, [r3]
 80047a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f023 0310 	bic.w	r3, r3, #16
 80047aa:	647b      	str	r3, [r7, #68]	; 0x44
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	330c      	adds	r3, #12
 80047b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047b4:	61ba      	str	r2, [r7, #24]
 80047b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b8:	6979      	ldr	r1, [r7, #20]
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	e841 2300 	strex	r3, r2, [r1]
 80047c0:	613b      	str	r3, [r7, #16]
   return(result);
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1e5      	bne.n	8004794 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80047d6:	bf00      	nop
 80047d8:	3754      	adds	r7, #84	; 0x54
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b084      	sub	sp, #16
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f7ff ff09 	bl	8004614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004802:	bf00      	nop
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800480a:	b480      	push	{r7}
 800480c:	b085      	sub	sp, #20
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b21      	cmp	r3, #33	; 0x21
 800481c:	d13e      	bne.n	800489c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004826:	d114      	bne.n	8004852 <UART_Transmit_IT+0x48>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d110      	bne.n	8004852 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004844:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	1c9a      	adds	r2, r3, #2
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	621a      	str	r2, [r3, #32]
 8004850:	e008      	b.n	8004864 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	1c59      	adds	r1, r3, #1
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6211      	str	r1, [r2, #32]
 800485c:	781a      	ldrb	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29b      	uxth	r3, r3
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	4619      	mov	r1, r3
 8004872:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10f      	bne.n	8004898 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004886:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004896:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	e000      	b.n	800489e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800489c:	2302      	movs	r3, #2
  }
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b082      	sub	sp, #8
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7ff fe8e 	bl	80045ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b08c      	sub	sp, #48	; 0x30
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b22      	cmp	r3, #34	; 0x22
 80048ec:	f040 80ab 	bne.w	8004a46 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f8:	d117      	bne.n	800492a <UART_Receive_IT+0x50>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d113      	bne.n	800492a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004902:	2300      	movs	r3, #0
 8004904:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	b29b      	uxth	r3, r3
 8004914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004918:	b29a      	uxth	r2, r3
 800491a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004922:	1c9a      	adds	r2, r3, #2
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	629a      	str	r2, [r3, #40]	; 0x28
 8004928:	e026      	b.n	8004978 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004930:	2300      	movs	r3, #0
 8004932:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800493c:	d007      	beq.n	800494e <UART_Receive_IT+0x74>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10a      	bne.n	800495c <UART_Receive_IT+0x82>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	b2da      	uxtb	r2, r3
 8004956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004958:	701a      	strb	r2, [r3, #0]
 800495a:	e008      	b.n	800496e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004968:	b2da      	uxtb	r2, r3
 800496a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29b      	uxth	r3, r3
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	4619      	mov	r1, r3
 8004986:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004988:	2b00      	cmp	r3, #0
 800498a:	d15a      	bne.n	8004a42 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0220 	bic.w	r2, r2, #32
 800499a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695a      	ldr	r2, [r3, #20]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0201 	bic.w	r2, r2, #1
 80049ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d135      	bne.n	8004a38 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	330c      	adds	r3, #12
 80049d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	e853 3f00 	ldrex	r3, [r3]
 80049e0:	613b      	str	r3, [r7, #16]
   return(result);
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f023 0310 	bic.w	r3, r3, #16
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	330c      	adds	r3, #12
 80049f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f2:	623a      	str	r2, [r7, #32]
 80049f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	69f9      	ldr	r1, [r7, #28]
 80049f8:	6a3a      	ldr	r2, [r7, #32]
 80049fa:	e841 2300 	strex	r3, r2, [r1]
 80049fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e5      	bne.n	80049d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d10a      	bne.n	8004a2a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a2e:	4619      	mov	r1, r3
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7ff fdf9 	bl	8004628 <HAL_UARTEx_RxEventCallback>
 8004a36:	e002      	b.n	8004a3e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7ff fde1 	bl	8004600 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	e002      	b.n	8004a48 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	e000      	b.n	8004a48 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004a46:	2302      	movs	r3, #2
  }
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3730      	adds	r7, #48	; 0x30
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a54:	b09f      	sub	sp, #124	; 0x7c
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a66:	68d9      	ldr	r1, [r3, #12]
 8004a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	ea40 0301 	orr.w	r3, r0, r1
 8004a70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	431a      	orrs	r2, r3
 8004a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a94:	f021 010c 	bic.w	r1, r1, #12
 8004a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a9e:	430b      	orrs	r3, r1
 8004aa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aae:	6999      	ldr	r1, [r3, #24]
 8004ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	ea40 0301 	orr.w	r3, r0, r1
 8004ab8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	4bc5      	ldr	r3, [pc, #788]	; (8004dd4 <UART_SetConfig+0x384>)
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d004      	beq.n	8004ace <UART_SetConfig+0x7e>
 8004ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	4bc3      	ldr	r3, [pc, #780]	; (8004dd8 <UART_SetConfig+0x388>)
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d103      	bne.n	8004ad6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ace:	f7ff fa0b 	bl	8003ee8 <HAL_RCC_GetPCLK2Freq>
 8004ad2:	6778      	str	r0, [r7, #116]	; 0x74
 8004ad4:	e002      	b.n	8004adc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ad6:	f7ff f9f3 	bl	8003ec0 <HAL_RCC_GetPCLK1Freq>
 8004ada:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae4:	f040 80b6 	bne.w	8004c54 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ae8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aea:	461c      	mov	r4, r3
 8004aec:	f04f 0500 	mov.w	r5, #0
 8004af0:	4622      	mov	r2, r4
 8004af2:	462b      	mov	r3, r5
 8004af4:	1891      	adds	r1, r2, r2
 8004af6:	6439      	str	r1, [r7, #64]	; 0x40
 8004af8:	415b      	adcs	r3, r3
 8004afa:	647b      	str	r3, [r7, #68]	; 0x44
 8004afc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b00:	1912      	adds	r2, r2, r4
 8004b02:	eb45 0303 	adc.w	r3, r5, r3
 8004b06:	f04f 0000 	mov.w	r0, #0
 8004b0a:	f04f 0100 	mov.w	r1, #0
 8004b0e:	00d9      	lsls	r1, r3, #3
 8004b10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b14:	00d0      	lsls	r0, r2, #3
 8004b16:	4602      	mov	r2, r0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	1911      	adds	r1, r2, r4
 8004b1c:	6639      	str	r1, [r7, #96]	; 0x60
 8004b1e:	416b      	adcs	r3, r5
 8004b20:	667b      	str	r3, [r7, #100]	; 0x64
 8004b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	461a      	mov	r2, r3
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	1891      	adds	r1, r2, r2
 8004b2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b30:	415b      	adcs	r3, r3
 8004b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b38:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004b3c:	f7fc f88c 	bl	8000c58 <__aeabi_uldivmod>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4ba5      	ldr	r3, [pc, #660]	; (8004ddc <UART_SetConfig+0x38c>)
 8004b46:	fba3 2302 	umull	r2, r3, r3, r2
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	011e      	lsls	r6, r3, #4
 8004b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b50:	461c      	mov	r4, r3
 8004b52:	f04f 0500 	mov.w	r5, #0
 8004b56:	4622      	mov	r2, r4
 8004b58:	462b      	mov	r3, r5
 8004b5a:	1891      	adds	r1, r2, r2
 8004b5c:	6339      	str	r1, [r7, #48]	; 0x30
 8004b5e:	415b      	adcs	r3, r3
 8004b60:	637b      	str	r3, [r7, #52]	; 0x34
 8004b62:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b66:	1912      	adds	r2, r2, r4
 8004b68:	eb45 0303 	adc.w	r3, r5, r3
 8004b6c:	f04f 0000 	mov.w	r0, #0
 8004b70:	f04f 0100 	mov.w	r1, #0
 8004b74:	00d9      	lsls	r1, r3, #3
 8004b76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b7a:	00d0      	lsls	r0, r2, #3
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	1911      	adds	r1, r2, r4
 8004b82:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b84:	416b      	adcs	r3, r5
 8004b86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	1891      	adds	r1, r2, r2
 8004b94:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b96:	415b      	adcs	r3, r3
 8004b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b9e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004ba2:	f7fc f859 	bl	8000c58 <__aeabi_uldivmod>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4b8c      	ldr	r3, [pc, #560]	; (8004ddc <UART_SetConfig+0x38c>)
 8004bac:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb0:	095b      	lsrs	r3, r3, #5
 8004bb2:	2164      	movs	r1, #100	; 0x64
 8004bb4:	fb01 f303 	mul.w	r3, r1, r3
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	3332      	adds	r3, #50	; 0x32
 8004bbe:	4a87      	ldr	r2, [pc, #540]	; (8004ddc <UART_SetConfig+0x38c>)
 8004bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bcc:	441e      	add	r6, r3
 8004bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f04f 0100 	mov.w	r1, #0
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	1894      	adds	r4, r2, r2
 8004bdc:	623c      	str	r4, [r7, #32]
 8004bde:	415b      	adcs	r3, r3
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
 8004be2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004be6:	1812      	adds	r2, r2, r0
 8004be8:	eb41 0303 	adc.w	r3, r1, r3
 8004bec:	f04f 0400 	mov.w	r4, #0
 8004bf0:	f04f 0500 	mov.w	r5, #0
 8004bf4:	00dd      	lsls	r5, r3, #3
 8004bf6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004bfa:	00d4      	lsls	r4, r2, #3
 8004bfc:	4622      	mov	r2, r4
 8004bfe:	462b      	mov	r3, r5
 8004c00:	1814      	adds	r4, r2, r0
 8004c02:	653c      	str	r4, [r7, #80]	; 0x50
 8004c04:	414b      	adcs	r3, r1
 8004c06:	657b      	str	r3, [r7, #84]	; 0x54
 8004c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	1891      	adds	r1, r2, r2
 8004c14:	61b9      	str	r1, [r7, #24]
 8004c16:	415b      	adcs	r3, r3
 8004c18:	61fb      	str	r3, [r7, #28]
 8004c1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c1e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004c22:	f7fc f819 	bl	8000c58 <__aeabi_uldivmod>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4b6c      	ldr	r3, [pc, #432]	; (8004ddc <UART_SetConfig+0x38c>)
 8004c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c30:	095b      	lsrs	r3, r3, #5
 8004c32:	2164      	movs	r1, #100	; 0x64
 8004c34:	fb01 f303 	mul.w	r3, r1, r3
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	3332      	adds	r3, #50	; 0x32
 8004c3e:	4a67      	ldr	r2, [pc, #412]	; (8004ddc <UART_SetConfig+0x38c>)
 8004c40:	fba2 2303 	umull	r2, r3, r2, r3
 8004c44:	095b      	lsrs	r3, r3, #5
 8004c46:	f003 0207 	and.w	r2, r3, #7
 8004c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4432      	add	r2, r6
 8004c50:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c52:	e0b9      	b.n	8004dc8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c56:	461c      	mov	r4, r3
 8004c58:	f04f 0500 	mov.w	r5, #0
 8004c5c:	4622      	mov	r2, r4
 8004c5e:	462b      	mov	r3, r5
 8004c60:	1891      	adds	r1, r2, r2
 8004c62:	6139      	str	r1, [r7, #16]
 8004c64:	415b      	adcs	r3, r3
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c6c:	1912      	adds	r2, r2, r4
 8004c6e:	eb45 0303 	adc.w	r3, r5, r3
 8004c72:	f04f 0000 	mov.w	r0, #0
 8004c76:	f04f 0100 	mov.w	r1, #0
 8004c7a:	00d9      	lsls	r1, r3, #3
 8004c7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c80:	00d0      	lsls	r0, r2, #3
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	eb12 0804 	adds.w	r8, r2, r4
 8004c8a:	eb43 0905 	adc.w	r9, r3, r5
 8004c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f04f 0100 	mov.w	r1, #0
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	008b      	lsls	r3, r1, #2
 8004ca2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ca6:	0082      	lsls	r2, r0, #2
 8004ca8:	4640      	mov	r0, r8
 8004caa:	4649      	mov	r1, r9
 8004cac:	f7fb ffd4 	bl	8000c58 <__aeabi_uldivmod>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4b49      	ldr	r3, [pc, #292]	; (8004ddc <UART_SetConfig+0x38c>)
 8004cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cba:	095b      	lsrs	r3, r3, #5
 8004cbc:	011e      	lsls	r6, r3, #4
 8004cbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f04f 0100 	mov.w	r1, #0
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	1894      	adds	r4, r2, r2
 8004ccc:	60bc      	str	r4, [r7, #8]
 8004cce:	415b      	adcs	r3, r3
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cd6:	1812      	adds	r2, r2, r0
 8004cd8:	eb41 0303 	adc.w	r3, r1, r3
 8004cdc:	f04f 0400 	mov.w	r4, #0
 8004ce0:	f04f 0500 	mov.w	r5, #0
 8004ce4:	00dd      	lsls	r5, r3, #3
 8004ce6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004cea:	00d4      	lsls	r4, r2, #3
 8004cec:	4622      	mov	r2, r4
 8004cee:	462b      	mov	r3, r5
 8004cf0:	1814      	adds	r4, r2, r0
 8004cf2:	64bc      	str	r4, [r7, #72]	; 0x48
 8004cf4:	414b      	adcs	r3, r1
 8004cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f04f 0100 	mov.w	r1, #0
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	008b      	lsls	r3, r1, #2
 8004d0c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d10:	0082      	lsls	r2, r0, #2
 8004d12:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004d16:	f7fb ff9f 	bl	8000c58 <__aeabi_uldivmod>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4b2f      	ldr	r3, [pc, #188]	; (8004ddc <UART_SetConfig+0x38c>)
 8004d20:	fba3 1302 	umull	r1, r3, r3, r2
 8004d24:	095b      	lsrs	r3, r3, #5
 8004d26:	2164      	movs	r1, #100	; 0x64
 8004d28:	fb01 f303 	mul.w	r3, r1, r3
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	3332      	adds	r3, #50	; 0x32
 8004d32:	4a2a      	ldr	r2, [pc, #168]	; (8004ddc <UART_SetConfig+0x38c>)
 8004d34:	fba2 2303 	umull	r2, r3, r2, r3
 8004d38:	095b      	lsrs	r3, r3, #5
 8004d3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d3e:	441e      	add	r6, r3
 8004d40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d42:	4618      	mov	r0, r3
 8004d44:	f04f 0100 	mov.w	r1, #0
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	1894      	adds	r4, r2, r2
 8004d4e:	603c      	str	r4, [r7, #0]
 8004d50:	415b      	adcs	r3, r3
 8004d52:	607b      	str	r3, [r7, #4]
 8004d54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d58:	1812      	adds	r2, r2, r0
 8004d5a:	eb41 0303 	adc.w	r3, r1, r3
 8004d5e:	f04f 0400 	mov.w	r4, #0
 8004d62:	f04f 0500 	mov.w	r5, #0
 8004d66:	00dd      	lsls	r5, r3, #3
 8004d68:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d6c:	00d4      	lsls	r4, r2, #3
 8004d6e:	4622      	mov	r2, r4
 8004d70:	462b      	mov	r3, r5
 8004d72:	eb12 0a00 	adds.w	sl, r2, r0
 8004d76:	eb43 0b01 	adc.w	fp, r3, r1
 8004d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f04f 0100 	mov.w	r1, #0
 8004d84:	f04f 0200 	mov.w	r2, #0
 8004d88:	f04f 0300 	mov.w	r3, #0
 8004d8c:	008b      	lsls	r3, r1, #2
 8004d8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d92:	0082      	lsls	r2, r0, #2
 8004d94:	4650      	mov	r0, sl
 8004d96:	4659      	mov	r1, fp
 8004d98:	f7fb ff5e 	bl	8000c58 <__aeabi_uldivmod>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4b0e      	ldr	r3, [pc, #56]	; (8004ddc <UART_SetConfig+0x38c>)
 8004da2:	fba3 1302 	umull	r1, r3, r3, r2
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	2164      	movs	r1, #100	; 0x64
 8004daa:	fb01 f303 	mul.w	r3, r1, r3
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	3332      	adds	r3, #50	; 0x32
 8004db4:	4a09      	ldr	r2, [pc, #36]	; (8004ddc <UART_SetConfig+0x38c>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	f003 020f 	and.w	r2, r3, #15
 8004dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4432      	add	r2, r6
 8004dc6:	609a      	str	r2, [r3, #8]
}
 8004dc8:	bf00      	nop
 8004dca:	377c      	adds	r7, #124	; 0x7c
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40011000 	.word	0x40011000
 8004dd8:	40011400 	.word	0x40011400
 8004ddc:	51eb851f 	.word	0x51eb851f

08004de0 <__errno>:
 8004de0:	4b01      	ldr	r3, [pc, #4]	; (8004de8 <__errno+0x8>)
 8004de2:	6818      	ldr	r0, [r3, #0]
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	2000000c 	.word	0x2000000c

08004dec <__libc_init_array>:
 8004dec:	b570      	push	{r4, r5, r6, lr}
 8004dee:	4d0d      	ldr	r5, [pc, #52]	; (8004e24 <__libc_init_array+0x38>)
 8004df0:	4c0d      	ldr	r4, [pc, #52]	; (8004e28 <__libc_init_array+0x3c>)
 8004df2:	1b64      	subs	r4, r4, r5
 8004df4:	10a4      	asrs	r4, r4, #2
 8004df6:	2600      	movs	r6, #0
 8004df8:	42a6      	cmp	r6, r4
 8004dfa:	d109      	bne.n	8004e10 <__libc_init_array+0x24>
 8004dfc:	4d0b      	ldr	r5, [pc, #44]	; (8004e2c <__libc_init_array+0x40>)
 8004dfe:	4c0c      	ldr	r4, [pc, #48]	; (8004e30 <__libc_init_array+0x44>)
 8004e00:	f002 fec8 	bl	8007b94 <_init>
 8004e04:	1b64      	subs	r4, r4, r5
 8004e06:	10a4      	asrs	r4, r4, #2
 8004e08:	2600      	movs	r6, #0
 8004e0a:	42a6      	cmp	r6, r4
 8004e0c:	d105      	bne.n	8004e1a <__libc_init_array+0x2e>
 8004e0e:	bd70      	pop	{r4, r5, r6, pc}
 8004e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e14:	4798      	blx	r3
 8004e16:	3601      	adds	r6, #1
 8004e18:	e7ee      	b.n	8004df8 <__libc_init_array+0xc>
 8004e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e1e:	4798      	blx	r3
 8004e20:	3601      	adds	r6, #1
 8004e22:	e7f2      	b.n	8004e0a <__libc_init_array+0x1e>
 8004e24:	08007fe4 	.word	0x08007fe4
 8004e28:	08007fe4 	.word	0x08007fe4
 8004e2c:	08007fe4 	.word	0x08007fe4
 8004e30:	08007fe8 	.word	0x08007fe8

08004e34 <memset>:
 8004e34:	4402      	add	r2, r0
 8004e36:	4603      	mov	r3, r0
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d100      	bne.n	8004e3e <memset+0xa>
 8004e3c:	4770      	bx	lr
 8004e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e42:	e7f9      	b.n	8004e38 <memset+0x4>

08004e44 <__cvt>:
 8004e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e48:	ec55 4b10 	vmov	r4, r5, d0
 8004e4c:	2d00      	cmp	r5, #0
 8004e4e:	460e      	mov	r6, r1
 8004e50:	4619      	mov	r1, r3
 8004e52:	462b      	mov	r3, r5
 8004e54:	bfbb      	ittet	lt
 8004e56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e5a:	461d      	movlt	r5, r3
 8004e5c:	2300      	movge	r3, #0
 8004e5e:	232d      	movlt	r3, #45	; 0x2d
 8004e60:	700b      	strb	r3, [r1, #0]
 8004e62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e68:	4691      	mov	r9, r2
 8004e6a:	f023 0820 	bic.w	r8, r3, #32
 8004e6e:	bfbc      	itt	lt
 8004e70:	4622      	movlt	r2, r4
 8004e72:	4614      	movlt	r4, r2
 8004e74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e78:	d005      	beq.n	8004e86 <__cvt+0x42>
 8004e7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e7e:	d100      	bne.n	8004e82 <__cvt+0x3e>
 8004e80:	3601      	adds	r6, #1
 8004e82:	2102      	movs	r1, #2
 8004e84:	e000      	b.n	8004e88 <__cvt+0x44>
 8004e86:	2103      	movs	r1, #3
 8004e88:	ab03      	add	r3, sp, #12
 8004e8a:	9301      	str	r3, [sp, #4]
 8004e8c:	ab02      	add	r3, sp, #8
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	ec45 4b10 	vmov	d0, r4, r5
 8004e94:	4653      	mov	r3, sl
 8004e96:	4632      	mov	r2, r6
 8004e98:	f000 fcfe 	bl	8005898 <_dtoa_r>
 8004e9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ea0:	4607      	mov	r7, r0
 8004ea2:	d102      	bne.n	8004eaa <__cvt+0x66>
 8004ea4:	f019 0f01 	tst.w	r9, #1
 8004ea8:	d022      	beq.n	8004ef0 <__cvt+0xac>
 8004eaa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004eae:	eb07 0906 	add.w	r9, r7, r6
 8004eb2:	d110      	bne.n	8004ed6 <__cvt+0x92>
 8004eb4:	783b      	ldrb	r3, [r7, #0]
 8004eb6:	2b30      	cmp	r3, #48	; 0x30
 8004eb8:	d10a      	bne.n	8004ed0 <__cvt+0x8c>
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	4629      	mov	r1, r5
 8004ec2:	f7fb fe09 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ec6:	b918      	cbnz	r0, 8004ed0 <__cvt+0x8c>
 8004ec8:	f1c6 0601 	rsb	r6, r6, #1
 8004ecc:	f8ca 6000 	str.w	r6, [sl]
 8004ed0:	f8da 3000 	ldr.w	r3, [sl]
 8004ed4:	4499      	add	r9, r3
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2300      	movs	r3, #0
 8004eda:	4620      	mov	r0, r4
 8004edc:	4629      	mov	r1, r5
 8004ede:	f7fb fdfb 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ee2:	b108      	cbz	r0, 8004ee8 <__cvt+0xa4>
 8004ee4:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ee8:	2230      	movs	r2, #48	; 0x30
 8004eea:	9b03      	ldr	r3, [sp, #12]
 8004eec:	454b      	cmp	r3, r9
 8004eee:	d307      	bcc.n	8004f00 <__cvt+0xbc>
 8004ef0:	9b03      	ldr	r3, [sp, #12]
 8004ef2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ef4:	1bdb      	subs	r3, r3, r7
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	b004      	add	sp, #16
 8004efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f00:	1c59      	adds	r1, r3, #1
 8004f02:	9103      	str	r1, [sp, #12]
 8004f04:	701a      	strb	r2, [r3, #0]
 8004f06:	e7f0      	b.n	8004eea <__cvt+0xa6>

08004f08 <__exponent>:
 8004f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2900      	cmp	r1, #0
 8004f0e:	bfb8      	it	lt
 8004f10:	4249      	neglt	r1, r1
 8004f12:	f803 2b02 	strb.w	r2, [r3], #2
 8004f16:	bfb4      	ite	lt
 8004f18:	222d      	movlt	r2, #45	; 0x2d
 8004f1a:	222b      	movge	r2, #43	; 0x2b
 8004f1c:	2909      	cmp	r1, #9
 8004f1e:	7042      	strb	r2, [r0, #1]
 8004f20:	dd2a      	ble.n	8004f78 <__exponent+0x70>
 8004f22:	f10d 0407 	add.w	r4, sp, #7
 8004f26:	46a4      	mov	ip, r4
 8004f28:	270a      	movs	r7, #10
 8004f2a:	46a6      	mov	lr, r4
 8004f2c:	460a      	mov	r2, r1
 8004f2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004f32:	fb07 1516 	mls	r5, r7, r6, r1
 8004f36:	3530      	adds	r5, #48	; 0x30
 8004f38:	2a63      	cmp	r2, #99	; 0x63
 8004f3a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004f3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004f42:	4631      	mov	r1, r6
 8004f44:	dcf1      	bgt.n	8004f2a <__exponent+0x22>
 8004f46:	3130      	adds	r1, #48	; 0x30
 8004f48:	f1ae 0502 	sub.w	r5, lr, #2
 8004f4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004f50:	1c44      	adds	r4, r0, #1
 8004f52:	4629      	mov	r1, r5
 8004f54:	4561      	cmp	r1, ip
 8004f56:	d30a      	bcc.n	8004f6e <__exponent+0x66>
 8004f58:	f10d 0209 	add.w	r2, sp, #9
 8004f5c:	eba2 020e 	sub.w	r2, r2, lr
 8004f60:	4565      	cmp	r5, ip
 8004f62:	bf88      	it	hi
 8004f64:	2200      	movhi	r2, #0
 8004f66:	4413      	add	r3, r2
 8004f68:	1a18      	subs	r0, r3, r0
 8004f6a:	b003      	add	sp, #12
 8004f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f72:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004f76:	e7ed      	b.n	8004f54 <__exponent+0x4c>
 8004f78:	2330      	movs	r3, #48	; 0x30
 8004f7a:	3130      	adds	r1, #48	; 0x30
 8004f7c:	7083      	strb	r3, [r0, #2]
 8004f7e:	70c1      	strb	r1, [r0, #3]
 8004f80:	1d03      	adds	r3, r0, #4
 8004f82:	e7f1      	b.n	8004f68 <__exponent+0x60>

08004f84 <_printf_float>:
 8004f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f88:	ed2d 8b02 	vpush	{d8}
 8004f8c:	b08d      	sub	sp, #52	; 0x34
 8004f8e:	460c      	mov	r4, r1
 8004f90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004f94:	4616      	mov	r6, r2
 8004f96:	461f      	mov	r7, r3
 8004f98:	4605      	mov	r5, r0
 8004f9a:	f001 fa69 	bl	8006470 <_localeconv_r>
 8004f9e:	f8d0 a000 	ldr.w	sl, [r0]
 8004fa2:	4650      	mov	r0, sl
 8004fa4:	f7fb f91c 	bl	80001e0 <strlen>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	930a      	str	r3, [sp, #40]	; 0x28
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	9305      	str	r3, [sp, #20]
 8004fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8004fb4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004fb8:	3307      	adds	r3, #7
 8004fba:	f023 0307 	bic.w	r3, r3, #7
 8004fbe:	f103 0208 	add.w	r2, r3, #8
 8004fc2:	f8c8 2000 	str.w	r2, [r8]
 8004fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004fce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004fd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004fd6:	9307      	str	r3, [sp, #28]
 8004fd8:	f8cd 8018 	str.w	r8, [sp, #24]
 8004fdc:	ee08 0a10 	vmov	s16, r0
 8004fe0:	4b9f      	ldr	r3, [pc, #636]	; (8005260 <_printf_float+0x2dc>)
 8004fe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fea:	f7fb fda7 	bl	8000b3c <__aeabi_dcmpun>
 8004fee:	bb88      	cbnz	r0, 8005054 <_printf_float+0xd0>
 8004ff0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ff4:	4b9a      	ldr	r3, [pc, #616]	; (8005260 <_printf_float+0x2dc>)
 8004ff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ffa:	f7fb fd81 	bl	8000b00 <__aeabi_dcmple>
 8004ffe:	bb48      	cbnz	r0, 8005054 <_printf_float+0xd0>
 8005000:	2200      	movs	r2, #0
 8005002:	2300      	movs	r3, #0
 8005004:	4640      	mov	r0, r8
 8005006:	4649      	mov	r1, r9
 8005008:	f7fb fd70 	bl	8000aec <__aeabi_dcmplt>
 800500c:	b110      	cbz	r0, 8005014 <_printf_float+0x90>
 800500e:	232d      	movs	r3, #45	; 0x2d
 8005010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005014:	4b93      	ldr	r3, [pc, #588]	; (8005264 <_printf_float+0x2e0>)
 8005016:	4894      	ldr	r0, [pc, #592]	; (8005268 <_printf_float+0x2e4>)
 8005018:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800501c:	bf94      	ite	ls
 800501e:	4698      	movls	r8, r3
 8005020:	4680      	movhi	r8, r0
 8005022:	2303      	movs	r3, #3
 8005024:	6123      	str	r3, [r4, #16]
 8005026:	9b05      	ldr	r3, [sp, #20]
 8005028:	f023 0204 	bic.w	r2, r3, #4
 800502c:	6022      	str	r2, [r4, #0]
 800502e:	f04f 0900 	mov.w	r9, #0
 8005032:	9700      	str	r7, [sp, #0]
 8005034:	4633      	mov	r3, r6
 8005036:	aa0b      	add	r2, sp, #44	; 0x2c
 8005038:	4621      	mov	r1, r4
 800503a:	4628      	mov	r0, r5
 800503c:	f000 f9d8 	bl	80053f0 <_printf_common>
 8005040:	3001      	adds	r0, #1
 8005042:	f040 8090 	bne.w	8005166 <_printf_float+0x1e2>
 8005046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800504a:	b00d      	add	sp, #52	; 0x34
 800504c:	ecbd 8b02 	vpop	{d8}
 8005050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005054:	4642      	mov	r2, r8
 8005056:	464b      	mov	r3, r9
 8005058:	4640      	mov	r0, r8
 800505a:	4649      	mov	r1, r9
 800505c:	f7fb fd6e 	bl	8000b3c <__aeabi_dcmpun>
 8005060:	b140      	cbz	r0, 8005074 <_printf_float+0xf0>
 8005062:	464b      	mov	r3, r9
 8005064:	2b00      	cmp	r3, #0
 8005066:	bfbc      	itt	lt
 8005068:	232d      	movlt	r3, #45	; 0x2d
 800506a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800506e:	487f      	ldr	r0, [pc, #508]	; (800526c <_printf_float+0x2e8>)
 8005070:	4b7f      	ldr	r3, [pc, #508]	; (8005270 <_printf_float+0x2ec>)
 8005072:	e7d1      	b.n	8005018 <_printf_float+0x94>
 8005074:	6863      	ldr	r3, [r4, #4]
 8005076:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800507a:	9206      	str	r2, [sp, #24]
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	d13f      	bne.n	8005100 <_printf_float+0x17c>
 8005080:	2306      	movs	r3, #6
 8005082:	6063      	str	r3, [r4, #4]
 8005084:	9b05      	ldr	r3, [sp, #20]
 8005086:	6861      	ldr	r1, [r4, #4]
 8005088:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800508c:	2300      	movs	r3, #0
 800508e:	9303      	str	r3, [sp, #12]
 8005090:	ab0a      	add	r3, sp, #40	; 0x28
 8005092:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005096:	ab09      	add	r3, sp, #36	; 0x24
 8005098:	ec49 8b10 	vmov	d0, r8, r9
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	6022      	str	r2, [r4, #0]
 80050a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050a4:	4628      	mov	r0, r5
 80050a6:	f7ff fecd 	bl	8004e44 <__cvt>
 80050aa:	9b06      	ldr	r3, [sp, #24]
 80050ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050ae:	2b47      	cmp	r3, #71	; 0x47
 80050b0:	4680      	mov	r8, r0
 80050b2:	d108      	bne.n	80050c6 <_printf_float+0x142>
 80050b4:	1cc8      	adds	r0, r1, #3
 80050b6:	db02      	blt.n	80050be <_printf_float+0x13a>
 80050b8:	6863      	ldr	r3, [r4, #4]
 80050ba:	4299      	cmp	r1, r3
 80050bc:	dd41      	ble.n	8005142 <_printf_float+0x1be>
 80050be:	f1ab 0b02 	sub.w	fp, fp, #2
 80050c2:	fa5f fb8b 	uxtb.w	fp, fp
 80050c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050ca:	d820      	bhi.n	800510e <_printf_float+0x18a>
 80050cc:	3901      	subs	r1, #1
 80050ce:	465a      	mov	r2, fp
 80050d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80050d4:	9109      	str	r1, [sp, #36]	; 0x24
 80050d6:	f7ff ff17 	bl	8004f08 <__exponent>
 80050da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050dc:	1813      	adds	r3, r2, r0
 80050de:	2a01      	cmp	r2, #1
 80050e0:	4681      	mov	r9, r0
 80050e2:	6123      	str	r3, [r4, #16]
 80050e4:	dc02      	bgt.n	80050ec <_printf_float+0x168>
 80050e6:	6822      	ldr	r2, [r4, #0]
 80050e8:	07d2      	lsls	r2, r2, #31
 80050ea:	d501      	bpl.n	80050f0 <_printf_float+0x16c>
 80050ec:	3301      	adds	r3, #1
 80050ee:	6123      	str	r3, [r4, #16]
 80050f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d09c      	beq.n	8005032 <_printf_float+0xae>
 80050f8:	232d      	movs	r3, #45	; 0x2d
 80050fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050fe:	e798      	b.n	8005032 <_printf_float+0xae>
 8005100:	9a06      	ldr	r2, [sp, #24]
 8005102:	2a47      	cmp	r2, #71	; 0x47
 8005104:	d1be      	bne.n	8005084 <_printf_float+0x100>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1bc      	bne.n	8005084 <_printf_float+0x100>
 800510a:	2301      	movs	r3, #1
 800510c:	e7b9      	b.n	8005082 <_printf_float+0xfe>
 800510e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005112:	d118      	bne.n	8005146 <_printf_float+0x1c2>
 8005114:	2900      	cmp	r1, #0
 8005116:	6863      	ldr	r3, [r4, #4]
 8005118:	dd0b      	ble.n	8005132 <_printf_float+0x1ae>
 800511a:	6121      	str	r1, [r4, #16]
 800511c:	b913      	cbnz	r3, 8005124 <_printf_float+0x1a0>
 800511e:	6822      	ldr	r2, [r4, #0]
 8005120:	07d0      	lsls	r0, r2, #31
 8005122:	d502      	bpl.n	800512a <_printf_float+0x1a6>
 8005124:	3301      	adds	r3, #1
 8005126:	440b      	add	r3, r1
 8005128:	6123      	str	r3, [r4, #16]
 800512a:	65a1      	str	r1, [r4, #88]	; 0x58
 800512c:	f04f 0900 	mov.w	r9, #0
 8005130:	e7de      	b.n	80050f0 <_printf_float+0x16c>
 8005132:	b913      	cbnz	r3, 800513a <_printf_float+0x1b6>
 8005134:	6822      	ldr	r2, [r4, #0]
 8005136:	07d2      	lsls	r2, r2, #31
 8005138:	d501      	bpl.n	800513e <_printf_float+0x1ba>
 800513a:	3302      	adds	r3, #2
 800513c:	e7f4      	b.n	8005128 <_printf_float+0x1a4>
 800513e:	2301      	movs	r3, #1
 8005140:	e7f2      	b.n	8005128 <_printf_float+0x1a4>
 8005142:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005148:	4299      	cmp	r1, r3
 800514a:	db05      	blt.n	8005158 <_printf_float+0x1d4>
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	6121      	str	r1, [r4, #16]
 8005150:	07d8      	lsls	r0, r3, #31
 8005152:	d5ea      	bpl.n	800512a <_printf_float+0x1a6>
 8005154:	1c4b      	adds	r3, r1, #1
 8005156:	e7e7      	b.n	8005128 <_printf_float+0x1a4>
 8005158:	2900      	cmp	r1, #0
 800515a:	bfd4      	ite	le
 800515c:	f1c1 0202 	rsble	r2, r1, #2
 8005160:	2201      	movgt	r2, #1
 8005162:	4413      	add	r3, r2
 8005164:	e7e0      	b.n	8005128 <_printf_float+0x1a4>
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	055a      	lsls	r2, r3, #21
 800516a:	d407      	bmi.n	800517c <_printf_float+0x1f8>
 800516c:	6923      	ldr	r3, [r4, #16]
 800516e:	4642      	mov	r2, r8
 8005170:	4631      	mov	r1, r6
 8005172:	4628      	mov	r0, r5
 8005174:	47b8      	blx	r7
 8005176:	3001      	adds	r0, #1
 8005178:	d12c      	bne.n	80051d4 <_printf_float+0x250>
 800517a:	e764      	b.n	8005046 <_printf_float+0xc2>
 800517c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005180:	f240 80e0 	bls.w	8005344 <_printf_float+0x3c0>
 8005184:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005188:	2200      	movs	r2, #0
 800518a:	2300      	movs	r3, #0
 800518c:	f7fb fca4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005190:	2800      	cmp	r0, #0
 8005192:	d034      	beq.n	80051fe <_printf_float+0x27a>
 8005194:	4a37      	ldr	r2, [pc, #220]	; (8005274 <_printf_float+0x2f0>)
 8005196:	2301      	movs	r3, #1
 8005198:	4631      	mov	r1, r6
 800519a:	4628      	mov	r0, r5
 800519c:	47b8      	blx	r7
 800519e:	3001      	adds	r0, #1
 80051a0:	f43f af51 	beq.w	8005046 <_printf_float+0xc2>
 80051a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051a8:	429a      	cmp	r2, r3
 80051aa:	db02      	blt.n	80051b2 <_printf_float+0x22e>
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	07d8      	lsls	r0, r3, #31
 80051b0:	d510      	bpl.n	80051d4 <_printf_float+0x250>
 80051b2:	ee18 3a10 	vmov	r3, s16
 80051b6:	4652      	mov	r2, sl
 80051b8:	4631      	mov	r1, r6
 80051ba:	4628      	mov	r0, r5
 80051bc:	47b8      	blx	r7
 80051be:	3001      	adds	r0, #1
 80051c0:	f43f af41 	beq.w	8005046 <_printf_float+0xc2>
 80051c4:	f04f 0800 	mov.w	r8, #0
 80051c8:	f104 091a 	add.w	r9, r4, #26
 80051cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051ce:	3b01      	subs	r3, #1
 80051d0:	4543      	cmp	r3, r8
 80051d2:	dc09      	bgt.n	80051e8 <_printf_float+0x264>
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	079b      	lsls	r3, r3, #30
 80051d8:	f100 8105 	bmi.w	80053e6 <_printf_float+0x462>
 80051dc:	68e0      	ldr	r0, [r4, #12]
 80051de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051e0:	4298      	cmp	r0, r3
 80051e2:	bfb8      	it	lt
 80051e4:	4618      	movlt	r0, r3
 80051e6:	e730      	b.n	800504a <_printf_float+0xc6>
 80051e8:	2301      	movs	r3, #1
 80051ea:	464a      	mov	r2, r9
 80051ec:	4631      	mov	r1, r6
 80051ee:	4628      	mov	r0, r5
 80051f0:	47b8      	blx	r7
 80051f2:	3001      	adds	r0, #1
 80051f4:	f43f af27 	beq.w	8005046 <_printf_float+0xc2>
 80051f8:	f108 0801 	add.w	r8, r8, #1
 80051fc:	e7e6      	b.n	80051cc <_printf_float+0x248>
 80051fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005200:	2b00      	cmp	r3, #0
 8005202:	dc39      	bgt.n	8005278 <_printf_float+0x2f4>
 8005204:	4a1b      	ldr	r2, [pc, #108]	; (8005274 <_printf_float+0x2f0>)
 8005206:	2301      	movs	r3, #1
 8005208:	4631      	mov	r1, r6
 800520a:	4628      	mov	r0, r5
 800520c:	47b8      	blx	r7
 800520e:	3001      	adds	r0, #1
 8005210:	f43f af19 	beq.w	8005046 <_printf_float+0xc2>
 8005214:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005218:	4313      	orrs	r3, r2
 800521a:	d102      	bne.n	8005222 <_printf_float+0x29e>
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	07d9      	lsls	r1, r3, #31
 8005220:	d5d8      	bpl.n	80051d4 <_printf_float+0x250>
 8005222:	ee18 3a10 	vmov	r3, s16
 8005226:	4652      	mov	r2, sl
 8005228:	4631      	mov	r1, r6
 800522a:	4628      	mov	r0, r5
 800522c:	47b8      	blx	r7
 800522e:	3001      	adds	r0, #1
 8005230:	f43f af09 	beq.w	8005046 <_printf_float+0xc2>
 8005234:	f04f 0900 	mov.w	r9, #0
 8005238:	f104 0a1a 	add.w	sl, r4, #26
 800523c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800523e:	425b      	negs	r3, r3
 8005240:	454b      	cmp	r3, r9
 8005242:	dc01      	bgt.n	8005248 <_printf_float+0x2c4>
 8005244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005246:	e792      	b.n	800516e <_printf_float+0x1ea>
 8005248:	2301      	movs	r3, #1
 800524a:	4652      	mov	r2, sl
 800524c:	4631      	mov	r1, r6
 800524e:	4628      	mov	r0, r5
 8005250:	47b8      	blx	r7
 8005252:	3001      	adds	r0, #1
 8005254:	f43f aef7 	beq.w	8005046 <_printf_float+0xc2>
 8005258:	f109 0901 	add.w	r9, r9, #1
 800525c:	e7ee      	b.n	800523c <_printf_float+0x2b8>
 800525e:	bf00      	nop
 8005260:	7fefffff 	.word	0x7fefffff
 8005264:	08007c00 	.word	0x08007c00
 8005268:	08007c04 	.word	0x08007c04
 800526c:	08007c0c 	.word	0x08007c0c
 8005270:	08007c08 	.word	0x08007c08
 8005274:	08007c10 	.word	0x08007c10
 8005278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800527a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800527c:	429a      	cmp	r2, r3
 800527e:	bfa8      	it	ge
 8005280:	461a      	movge	r2, r3
 8005282:	2a00      	cmp	r2, #0
 8005284:	4691      	mov	r9, r2
 8005286:	dc37      	bgt.n	80052f8 <_printf_float+0x374>
 8005288:	f04f 0b00 	mov.w	fp, #0
 800528c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005290:	f104 021a 	add.w	r2, r4, #26
 8005294:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005296:	9305      	str	r3, [sp, #20]
 8005298:	eba3 0309 	sub.w	r3, r3, r9
 800529c:	455b      	cmp	r3, fp
 800529e:	dc33      	bgt.n	8005308 <_printf_float+0x384>
 80052a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052a4:	429a      	cmp	r2, r3
 80052a6:	db3b      	blt.n	8005320 <_printf_float+0x39c>
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	07da      	lsls	r2, r3, #31
 80052ac:	d438      	bmi.n	8005320 <_printf_float+0x39c>
 80052ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052b0:	9b05      	ldr	r3, [sp, #20]
 80052b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	eba2 0901 	sub.w	r9, r2, r1
 80052ba:	4599      	cmp	r9, r3
 80052bc:	bfa8      	it	ge
 80052be:	4699      	movge	r9, r3
 80052c0:	f1b9 0f00 	cmp.w	r9, #0
 80052c4:	dc35      	bgt.n	8005332 <_printf_float+0x3ae>
 80052c6:	f04f 0800 	mov.w	r8, #0
 80052ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052ce:	f104 0a1a 	add.w	sl, r4, #26
 80052d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052d6:	1a9b      	subs	r3, r3, r2
 80052d8:	eba3 0309 	sub.w	r3, r3, r9
 80052dc:	4543      	cmp	r3, r8
 80052de:	f77f af79 	ble.w	80051d4 <_printf_float+0x250>
 80052e2:	2301      	movs	r3, #1
 80052e4:	4652      	mov	r2, sl
 80052e6:	4631      	mov	r1, r6
 80052e8:	4628      	mov	r0, r5
 80052ea:	47b8      	blx	r7
 80052ec:	3001      	adds	r0, #1
 80052ee:	f43f aeaa 	beq.w	8005046 <_printf_float+0xc2>
 80052f2:	f108 0801 	add.w	r8, r8, #1
 80052f6:	e7ec      	b.n	80052d2 <_printf_float+0x34e>
 80052f8:	4613      	mov	r3, r2
 80052fa:	4631      	mov	r1, r6
 80052fc:	4642      	mov	r2, r8
 80052fe:	4628      	mov	r0, r5
 8005300:	47b8      	blx	r7
 8005302:	3001      	adds	r0, #1
 8005304:	d1c0      	bne.n	8005288 <_printf_float+0x304>
 8005306:	e69e      	b.n	8005046 <_printf_float+0xc2>
 8005308:	2301      	movs	r3, #1
 800530a:	4631      	mov	r1, r6
 800530c:	4628      	mov	r0, r5
 800530e:	9205      	str	r2, [sp, #20]
 8005310:	47b8      	blx	r7
 8005312:	3001      	adds	r0, #1
 8005314:	f43f ae97 	beq.w	8005046 <_printf_float+0xc2>
 8005318:	9a05      	ldr	r2, [sp, #20]
 800531a:	f10b 0b01 	add.w	fp, fp, #1
 800531e:	e7b9      	b.n	8005294 <_printf_float+0x310>
 8005320:	ee18 3a10 	vmov	r3, s16
 8005324:	4652      	mov	r2, sl
 8005326:	4631      	mov	r1, r6
 8005328:	4628      	mov	r0, r5
 800532a:	47b8      	blx	r7
 800532c:	3001      	adds	r0, #1
 800532e:	d1be      	bne.n	80052ae <_printf_float+0x32a>
 8005330:	e689      	b.n	8005046 <_printf_float+0xc2>
 8005332:	9a05      	ldr	r2, [sp, #20]
 8005334:	464b      	mov	r3, r9
 8005336:	4442      	add	r2, r8
 8005338:	4631      	mov	r1, r6
 800533a:	4628      	mov	r0, r5
 800533c:	47b8      	blx	r7
 800533e:	3001      	adds	r0, #1
 8005340:	d1c1      	bne.n	80052c6 <_printf_float+0x342>
 8005342:	e680      	b.n	8005046 <_printf_float+0xc2>
 8005344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005346:	2a01      	cmp	r2, #1
 8005348:	dc01      	bgt.n	800534e <_printf_float+0x3ca>
 800534a:	07db      	lsls	r3, r3, #31
 800534c:	d538      	bpl.n	80053c0 <_printf_float+0x43c>
 800534e:	2301      	movs	r3, #1
 8005350:	4642      	mov	r2, r8
 8005352:	4631      	mov	r1, r6
 8005354:	4628      	mov	r0, r5
 8005356:	47b8      	blx	r7
 8005358:	3001      	adds	r0, #1
 800535a:	f43f ae74 	beq.w	8005046 <_printf_float+0xc2>
 800535e:	ee18 3a10 	vmov	r3, s16
 8005362:	4652      	mov	r2, sl
 8005364:	4631      	mov	r1, r6
 8005366:	4628      	mov	r0, r5
 8005368:	47b8      	blx	r7
 800536a:	3001      	adds	r0, #1
 800536c:	f43f ae6b 	beq.w	8005046 <_printf_float+0xc2>
 8005370:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005374:	2200      	movs	r2, #0
 8005376:	2300      	movs	r3, #0
 8005378:	f7fb fbae 	bl	8000ad8 <__aeabi_dcmpeq>
 800537c:	b9d8      	cbnz	r0, 80053b6 <_printf_float+0x432>
 800537e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005380:	f108 0201 	add.w	r2, r8, #1
 8005384:	3b01      	subs	r3, #1
 8005386:	4631      	mov	r1, r6
 8005388:	4628      	mov	r0, r5
 800538a:	47b8      	blx	r7
 800538c:	3001      	adds	r0, #1
 800538e:	d10e      	bne.n	80053ae <_printf_float+0x42a>
 8005390:	e659      	b.n	8005046 <_printf_float+0xc2>
 8005392:	2301      	movs	r3, #1
 8005394:	4652      	mov	r2, sl
 8005396:	4631      	mov	r1, r6
 8005398:	4628      	mov	r0, r5
 800539a:	47b8      	blx	r7
 800539c:	3001      	adds	r0, #1
 800539e:	f43f ae52 	beq.w	8005046 <_printf_float+0xc2>
 80053a2:	f108 0801 	add.w	r8, r8, #1
 80053a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053a8:	3b01      	subs	r3, #1
 80053aa:	4543      	cmp	r3, r8
 80053ac:	dcf1      	bgt.n	8005392 <_printf_float+0x40e>
 80053ae:	464b      	mov	r3, r9
 80053b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80053b4:	e6dc      	b.n	8005170 <_printf_float+0x1ec>
 80053b6:	f04f 0800 	mov.w	r8, #0
 80053ba:	f104 0a1a 	add.w	sl, r4, #26
 80053be:	e7f2      	b.n	80053a6 <_printf_float+0x422>
 80053c0:	2301      	movs	r3, #1
 80053c2:	4642      	mov	r2, r8
 80053c4:	e7df      	b.n	8005386 <_printf_float+0x402>
 80053c6:	2301      	movs	r3, #1
 80053c8:	464a      	mov	r2, r9
 80053ca:	4631      	mov	r1, r6
 80053cc:	4628      	mov	r0, r5
 80053ce:	47b8      	blx	r7
 80053d0:	3001      	adds	r0, #1
 80053d2:	f43f ae38 	beq.w	8005046 <_printf_float+0xc2>
 80053d6:	f108 0801 	add.w	r8, r8, #1
 80053da:	68e3      	ldr	r3, [r4, #12]
 80053dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053de:	1a5b      	subs	r3, r3, r1
 80053e0:	4543      	cmp	r3, r8
 80053e2:	dcf0      	bgt.n	80053c6 <_printf_float+0x442>
 80053e4:	e6fa      	b.n	80051dc <_printf_float+0x258>
 80053e6:	f04f 0800 	mov.w	r8, #0
 80053ea:	f104 0919 	add.w	r9, r4, #25
 80053ee:	e7f4      	b.n	80053da <_printf_float+0x456>

080053f0 <_printf_common>:
 80053f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053f4:	4616      	mov	r6, r2
 80053f6:	4699      	mov	r9, r3
 80053f8:	688a      	ldr	r2, [r1, #8]
 80053fa:	690b      	ldr	r3, [r1, #16]
 80053fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005400:	4293      	cmp	r3, r2
 8005402:	bfb8      	it	lt
 8005404:	4613      	movlt	r3, r2
 8005406:	6033      	str	r3, [r6, #0]
 8005408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800540c:	4607      	mov	r7, r0
 800540e:	460c      	mov	r4, r1
 8005410:	b10a      	cbz	r2, 8005416 <_printf_common+0x26>
 8005412:	3301      	adds	r3, #1
 8005414:	6033      	str	r3, [r6, #0]
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	0699      	lsls	r1, r3, #26
 800541a:	bf42      	ittt	mi
 800541c:	6833      	ldrmi	r3, [r6, #0]
 800541e:	3302      	addmi	r3, #2
 8005420:	6033      	strmi	r3, [r6, #0]
 8005422:	6825      	ldr	r5, [r4, #0]
 8005424:	f015 0506 	ands.w	r5, r5, #6
 8005428:	d106      	bne.n	8005438 <_printf_common+0x48>
 800542a:	f104 0a19 	add.w	sl, r4, #25
 800542e:	68e3      	ldr	r3, [r4, #12]
 8005430:	6832      	ldr	r2, [r6, #0]
 8005432:	1a9b      	subs	r3, r3, r2
 8005434:	42ab      	cmp	r3, r5
 8005436:	dc26      	bgt.n	8005486 <_printf_common+0x96>
 8005438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800543c:	1e13      	subs	r3, r2, #0
 800543e:	6822      	ldr	r2, [r4, #0]
 8005440:	bf18      	it	ne
 8005442:	2301      	movne	r3, #1
 8005444:	0692      	lsls	r2, r2, #26
 8005446:	d42b      	bmi.n	80054a0 <_printf_common+0xb0>
 8005448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800544c:	4649      	mov	r1, r9
 800544e:	4638      	mov	r0, r7
 8005450:	47c0      	blx	r8
 8005452:	3001      	adds	r0, #1
 8005454:	d01e      	beq.n	8005494 <_printf_common+0xa4>
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	68e5      	ldr	r5, [r4, #12]
 800545a:	6832      	ldr	r2, [r6, #0]
 800545c:	f003 0306 	and.w	r3, r3, #6
 8005460:	2b04      	cmp	r3, #4
 8005462:	bf08      	it	eq
 8005464:	1aad      	subeq	r5, r5, r2
 8005466:	68a3      	ldr	r3, [r4, #8]
 8005468:	6922      	ldr	r2, [r4, #16]
 800546a:	bf0c      	ite	eq
 800546c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005470:	2500      	movne	r5, #0
 8005472:	4293      	cmp	r3, r2
 8005474:	bfc4      	itt	gt
 8005476:	1a9b      	subgt	r3, r3, r2
 8005478:	18ed      	addgt	r5, r5, r3
 800547a:	2600      	movs	r6, #0
 800547c:	341a      	adds	r4, #26
 800547e:	42b5      	cmp	r5, r6
 8005480:	d11a      	bne.n	80054b8 <_printf_common+0xc8>
 8005482:	2000      	movs	r0, #0
 8005484:	e008      	b.n	8005498 <_printf_common+0xa8>
 8005486:	2301      	movs	r3, #1
 8005488:	4652      	mov	r2, sl
 800548a:	4649      	mov	r1, r9
 800548c:	4638      	mov	r0, r7
 800548e:	47c0      	blx	r8
 8005490:	3001      	adds	r0, #1
 8005492:	d103      	bne.n	800549c <_printf_common+0xac>
 8005494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800549c:	3501      	adds	r5, #1
 800549e:	e7c6      	b.n	800542e <_printf_common+0x3e>
 80054a0:	18e1      	adds	r1, r4, r3
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	2030      	movs	r0, #48	; 0x30
 80054a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054aa:	4422      	add	r2, r4
 80054ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054b4:	3302      	adds	r3, #2
 80054b6:	e7c7      	b.n	8005448 <_printf_common+0x58>
 80054b8:	2301      	movs	r3, #1
 80054ba:	4622      	mov	r2, r4
 80054bc:	4649      	mov	r1, r9
 80054be:	4638      	mov	r0, r7
 80054c0:	47c0      	blx	r8
 80054c2:	3001      	adds	r0, #1
 80054c4:	d0e6      	beq.n	8005494 <_printf_common+0xa4>
 80054c6:	3601      	adds	r6, #1
 80054c8:	e7d9      	b.n	800547e <_printf_common+0x8e>
	...

080054cc <_printf_i>:
 80054cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054d0:	460c      	mov	r4, r1
 80054d2:	4691      	mov	r9, r2
 80054d4:	7e27      	ldrb	r7, [r4, #24]
 80054d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80054d8:	2f78      	cmp	r7, #120	; 0x78
 80054da:	4680      	mov	r8, r0
 80054dc:	469a      	mov	sl, r3
 80054de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054e2:	d807      	bhi.n	80054f4 <_printf_i+0x28>
 80054e4:	2f62      	cmp	r7, #98	; 0x62
 80054e6:	d80a      	bhi.n	80054fe <_printf_i+0x32>
 80054e8:	2f00      	cmp	r7, #0
 80054ea:	f000 80d8 	beq.w	800569e <_printf_i+0x1d2>
 80054ee:	2f58      	cmp	r7, #88	; 0x58
 80054f0:	f000 80a3 	beq.w	800563a <_printf_i+0x16e>
 80054f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80054f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054fc:	e03a      	b.n	8005574 <_printf_i+0xa8>
 80054fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005502:	2b15      	cmp	r3, #21
 8005504:	d8f6      	bhi.n	80054f4 <_printf_i+0x28>
 8005506:	a001      	add	r0, pc, #4	; (adr r0, 800550c <_printf_i+0x40>)
 8005508:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800550c:	08005565 	.word	0x08005565
 8005510:	08005579 	.word	0x08005579
 8005514:	080054f5 	.word	0x080054f5
 8005518:	080054f5 	.word	0x080054f5
 800551c:	080054f5 	.word	0x080054f5
 8005520:	080054f5 	.word	0x080054f5
 8005524:	08005579 	.word	0x08005579
 8005528:	080054f5 	.word	0x080054f5
 800552c:	080054f5 	.word	0x080054f5
 8005530:	080054f5 	.word	0x080054f5
 8005534:	080054f5 	.word	0x080054f5
 8005538:	08005685 	.word	0x08005685
 800553c:	080055a9 	.word	0x080055a9
 8005540:	08005667 	.word	0x08005667
 8005544:	080054f5 	.word	0x080054f5
 8005548:	080054f5 	.word	0x080054f5
 800554c:	080056a7 	.word	0x080056a7
 8005550:	080054f5 	.word	0x080054f5
 8005554:	080055a9 	.word	0x080055a9
 8005558:	080054f5 	.word	0x080054f5
 800555c:	080054f5 	.word	0x080054f5
 8005560:	0800566f 	.word	0x0800566f
 8005564:	680b      	ldr	r3, [r1, #0]
 8005566:	1d1a      	adds	r2, r3, #4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	600a      	str	r2, [r1, #0]
 800556c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005574:	2301      	movs	r3, #1
 8005576:	e0a3      	b.n	80056c0 <_printf_i+0x1f4>
 8005578:	6825      	ldr	r5, [r4, #0]
 800557a:	6808      	ldr	r0, [r1, #0]
 800557c:	062e      	lsls	r6, r5, #24
 800557e:	f100 0304 	add.w	r3, r0, #4
 8005582:	d50a      	bpl.n	800559a <_printf_i+0xce>
 8005584:	6805      	ldr	r5, [r0, #0]
 8005586:	600b      	str	r3, [r1, #0]
 8005588:	2d00      	cmp	r5, #0
 800558a:	da03      	bge.n	8005594 <_printf_i+0xc8>
 800558c:	232d      	movs	r3, #45	; 0x2d
 800558e:	426d      	negs	r5, r5
 8005590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005594:	485e      	ldr	r0, [pc, #376]	; (8005710 <_printf_i+0x244>)
 8005596:	230a      	movs	r3, #10
 8005598:	e019      	b.n	80055ce <_printf_i+0x102>
 800559a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800559e:	6805      	ldr	r5, [r0, #0]
 80055a0:	600b      	str	r3, [r1, #0]
 80055a2:	bf18      	it	ne
 80055a4:	b22d      	sxthne	r5, r5
 80055a6:	e7ef      	b.n	8005588 <_printf_i+0xbc>
 80055a8:	680b      	ldr	r3, [r1, #0]
 80055aa:	6825      	ldr	r5, [r4, #0]
 80055ac:	1d18      	adds	r0, r3, #4
 80055ae:	6008      	str	r0, [r1, #0]
 80055b0:	0628      	lsls	r0, r5, #24
 80055b2:	d501      	bpl.n	80055b8 <_printf_i+0xec>
 80055b4:	681d      	ldr	r5, [r3, #0]
 80055b6:	e002      	b.n	80055be <_printf_i+0xf2>
 80055b8:	0669      	lsls	r1, r5, #25
 80055ba:	d5fb      	bpl.n	80055b4 <_printf_i+0xe8>
 80055bc:	881d      	ldrh	r5, [r3, #0]
 80055be:	4854      	ldr	r0, [pc, #336]	; (8005710 <_printf_i+0x244>)
 80055c0:	2f6f      	cmp	r7, #111	; 0x6f
 80055c2:	bf0c      	ite	eq
 80055c4:	2308      	moveq	r3, #8
 80055c6:	230a      	movne	r3, #10
 80055c8:	2100      	movs	r1, #0
 80055ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055ce:	6866      	ldr	r6, [r4, #4]
 80055d0:	60a6      	str	r6, [r4, #8]
 80055d2:	2e00      	cmp	r6, #0
 80055d4:	bfa2      	ittt	ge
 80055d6:	6821      	ldrge	r1, [r4, #0]
 80055d8:	f021 0104 	bicge.w	r1, r1, #4
 80055dc:	6021      	strge	r1, [r4, #0]
 80055de:	b90d      	cbnz	r5, 80055e4 <_printf_i+0x118>
 80055e0:	2e00      	cmp	r6, #0
 80055e2:	d04d      	beq.n	8005680 <_printf_i+0x1b4>
 80055e4:	4616      	mov	r6, r2
 80055e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80055ea:	fb03 5711 	mls	r7, r3, r1, r5
 80055ee:	5dc7      	ldrb	r7, [r0, r7]
 80055f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055f4:	462f      	mov	r7, r5
 80055f6:	42bb      	cmp	r3, r7
 80055f8:	460d      	mov	r5, r1
 80055fa:	d9f4      	bls.n	80055e6 <_printf_i+0x11a>
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d10b      	bne.n	8005618 <_printf_i+0x14c>
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	07df      	lsls	r7, r3, #31
 8005604:	d508      	bpl.n	8005618 <_printf_i+0x14c>
 8005606:	6923      	ldr	r3, [r4, #16]
 8005608:	6861      	ldr	r1, [r4, #4]
 800560a:	4299      	cmp	r1, r3
 800560c:	bfde      	ittt	le
 800560e:	2330      	movle	r3, #48	; 0x30
 8005610:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005614:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005618:	1b92      	subs	r2, r2, r6
 800561a:	6122      	str	r2, [r4, #16]
 800561c:	f8cd a000 	str.w	sl, [sp]
 8005620:	464b      	mov	r3, r9
 8005622:	aa03      	add	r2, sp, #12
 8005624:	4621      	mov	r1, r4
 8005626:	4640      	mov	r0, r8
 8005628:	f7ff fee2 	bl	80053f0 <_printf_common>
 800562c:	3001      	adds	r0, #1
 800562e:	d14c      	bne.n	80056ca <_printf_i+0x1fe>
 8005630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005634:	b004      	add	sp, #16
 8005636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800563a:	4835      	ldr	r0, [pc, #212]	; (8005710 <_printf_i+0x244>)
 800563c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	680e      	ldr	r6, [r1, #0]
 8005644:	061f      	lsls	r7, r3, #24
 8005646:	f856 5b04 	ldr.w	r5, [r6], #4
 800564a:	600e      	str	r6, [r1, #0]
 800564c:	d514      	bpl.n	8005678 <_printf_i+0x1ac>
 800564e:	07d9      	lsls	r1, r3, #31
 8005650:	bf44      	itt	mi
 8005652:	f043 0320 	orrmi.w	r3, r3, #32
 8005656:	6023      	strmi	r3, [r4, #0]
 8005658:	b91d      	cbnz	r5, 8005662 <_printf_i+0x196>
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	f023 0320 	bic.w	r3, r3, #32
 8005660:	6023      	str	r3, [r4, #0]
 8005662:	2310      	movs	r3, #16
 8005664:	e7b0      	b.n	80055c8 <_printf_i+0xfc>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	f043 0320 	orr.w	r3, r3, #32
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	2378      	movs	r3, #120	; 0x78
 8005670:	4828      	ldr	r0, [pc, #160]	; (8005714 <_printf_i+0x248>)
 8005672:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005676:	e7e3      	b.n	8005640 <_printf_i+0x174>
 8005678:	065e      	lsls	r6, r3, #25
 800567a:	bf48      	it	mi
 800567c:	b2ad      	uxthmi	r5, r5
 800567e:	e7e6      	b.n	800564e <_printf_i+0x182>
 8005680:	4616      	mov	r6, r2
 8005682:	e7bb      	b.n	80055fc <_printf_i+0x130>
 8005684:	680b      	ldr	r3, [r1, #0]
 8005686:	6826      	ldr	r6, [r4, #0]
 8005688:	6960      	ldr	r0, [r4, #20]
 800568a:	1d1d      	adds	r5, r3, #4
 800568c:	600d      	str	r5, [r1, #0]
 800568e:	0635      	lsls	r5, r6, #24
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	d501      	bpl.n	8005698 <_printf_i+0x1cc>
 8005694:	6018      	str	r0, [r3, #0]
 8005696:	e002      	b.n	800569e <_printf_i+0x1d2>
 8005698:	0671      	lsls	r1, r6, #25
 800569a:	d5fb      	bpl.n	8005694 <_printf_i+0x1c8>
 800569c:	8018      	strh	r0, [r3, #0]
 800569e:	2300      	movs	r3, #0
 80056a0:	6123      	str	r3, [r4, #16]
 80056a2:	4616      	mov	r6, r2
 80056a4:	e7ba      	b.n	800561c <_printf_i+0x150>
 80056a6:	680b      	ldr	r3, [r1, #0]
 80056a8:	1d1a      	adds	r2, r3, #4
 80056aa:	600a      	str	r2, [r1, #0]
 80056ac:	681e      	ldr	r6, [r3, #0]
 80056ae:	6862      	ldr	r2, [r4, #4]
 80056b0:	2100      	movs	r1, #0
 80056b2:	4630      	mov	r0, r6
 80056b4:	f7fa fd9c 	bl	80001f0 <memchr>
 80056b8:	b108      	cbz	r0, 80056be <_printf_i+0x1f2>
 80056ba:	1b80      	subs	r0, r0, r6
 80056bc:	6060      	str	r0, [r4, #4]
 80056be:	6863      	ldr	r3, [r4, #4]
 80056c0:	6123      	str	r3, [r4, #16]
 80056c2:	2300      	movs	r3, #0
 80056c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056c8:	e7a8      	b.n	800561c <_printf_i+0x150>
 80056ca:	6923      	ldr	r3, [r4, #16]
 80056cc:	4632      	mov	r2, r6
 80056ce:	4649      	mov	r1, r9
 80056d0:	4640      	mov	r0, r8
 80056d2:	47d0      	blx	sl
 80056d4:	3001      	adds	r0, #1
 80056d6:	d0ab      	beq.n	8005630 <_printf_i+0x164>
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	079b      	lsls	r3, r3, #30
 80056dc:	d413      	bmi.n	8005706 <_printf_i+0x23a>
 80056de:	68e0      	ldr	r0, [r4, #12]
 80056e0:	9b03      	ldr	r3, [sp, #12]
 80056e2:	4298      	cmp	r0, r3
 80056e4:	bfb8      	it	lt
 80056e6:	4618      	movlt	r0, r3
 80056e8:	e7a4      	b.n	8005634 <_printf_i+0x168>
 80056ea:	2301      	movs	r3, #1
 80056ec:	4632      	mov	r2, r6
 80056ee:	4649      	mov	r1, r9
 80056f0:	4640      	mov	r0, r8
 80056f2:	47d0      	blx	sl
 80056f4:	3001      	adds	r0, #1
 80056f6:	d09b      	beq.n	8005630 <_printf_i+0x164>
 80056f8:	3501      	adds	r5, #1
 80056fa:	68e3      	ldr	r3, [r4, #12]
 80056fc:	9903      	ldr	r1, [sp, #12]
 80056fe:	1a5b      	subs	r3, r3, r1
 8005700:	42ab      	cmp	r3, r5
 8005702:	dcf2      	bgt.n	80056ea <_printf_i+0x21e>
 8005704:	e7eb      	b.n	80056de <_printf_i+0x212>
 8005706:	2500      	movs	r5, #0
 8005708:	f104 0619 	add.w	r6, r4, #25
 800570c:	e7f5      	b.n	80056fa <_printf_i+0x22e>
 800570e:	bf00      	nop
 8005710:	08007c12 	.word	0x08007c12
 8005714:	08007c23 	.word	0x08007c23

08005718 <sniprintf>:
 8005718:	b40c      	push	{r2, r3}
 800571a:	b530      	push	{r4, r5, lr}
 800571c:	4b17      	ldr	r3, [pc, #92]	; (800577c <sniprintf+0x64>)
 800571e:	1e0c      	subs	r4, r1, #0
 8005720:	681d      	ldr	r5, [r3, #0]
 8005722:	b09d      	sub	sp, #116	; 0x74
 8005724:	da08      	bge.n	8005738 <sniprintf+0x20>
 8005726:	238b      	movs	r3, #139	; 0x8b
 8005728:	602b      	str	r3, [r5, #0]
 800572a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800572e:	b01d      	add	sp, #116	; 0x74
 8005730:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005734:	b002      	add	sp, #8
 8005736:	4770      	bx	lr
 8005738:	f44f 7302 	mov.w	r3, #520	; 0x208
 800573c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005740:	bf14      	ite	ne
 8005742:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005746:	4623      	moveq	r3, r4
 8005748:	9304      	str	r3, [sp, #16]
 800574a:	9307      	str	r3, [sp, #28]
 800574c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005750:	9002      	str	r0, [sp, #8]
 8005752:	9006      	str	r0, [sp, #24]
 8005754:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005758:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800575a:	ab21      	add	r3, sp, #132	; 0x84
 800575c:	a902      	add	r1, sp, #8
 800575e:	4628      	mov	r0, r5
 8005760:	9301      	str	r3, [sp, #4]
 8005762:	f001 fb33 	bl	8006dcc <_svfiprintf_r>
 8005766:	1c43      	adds	r3, r0, #1
 8005768:	bfbc      	itt	lt
 800576a:	238b      	movlt	r3, #139	; 0x8b
 800576c:	602b      	strlt	r3, [r5, #0]
 800576e:	2c00      	cmp	r4, #0
 8005770:	d0dd      	beq.n	800572e <sniprintf+0x16>
 8005772:	9b02      	ldr	r3, [sp, #8]
 8005774:	2200      	movs	r2, #0
 8005776:	701a      	strb	r2, [r3, #0]
 8005778:	e7d9      	b.n	800572e <sniprintf+0x16>
 800577a:	bf00      	nop
 800577c:	2000000c 	.word	0x2000000c

08005780 <quorem>:
 8005780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005784:	6903      	ldr	r3, [r0, #16]
 8005786:	690c      	ldr	r4, [r1, #16]
 8005788:	42a3      	cmp	r3, r4
 800578a:	4607      	mov	r7, r0
 800578c:	f2c0 8081 	blt.w	8005892 <quorem+0x112>
 8005790:	3c01      	subs	r4, #1
 8005792:	f101 0814 	add.w	r8, r1, #20
 8005796:	f100 0514 	add.w	r5, r0, #20
 800579a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800579e:	9301      	str	r3, [sp, #4]
 80057a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80057a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057a8:	3301      	adds	r3, #1
 80057aa:	429a      	cmp	r2, r3
 80057ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80057b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80057b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80057b8:	d331      	bcc.n	800581e <quorem+0x9e>
 80057ba:	f04f 0e00 	mov.w	lr, #0
 80057be:	4640      	mov	r0, r8
 80057c0:	46ac      	mov	ip, r5
 80057c2:	46f2      	mov	sl, lr
 80057c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80057c8:	b293      	uxth	r3, r2
 80057ca:	fb06 e303 	mla	r3, r6, r3, lr
 80057ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	ebaa 0303 	sub.w	r3, sl, r3
 80057d8:	0c12      	lsrs	r2, r2, #16
 80057da:	f8dc a000 	ldr.w	sl, [ip]
 80057de:	fb06 e202 	mla	r2, r6, r2, lr
 80057e2:	fa13 f38a 	uxtah	r3, r3, sl
 80057e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80057ea:	fa1f fa82 	uxth.w	sl, r2
 80057ee:	f8dc 2000 	ldr.w	r2, [ip]
 80057f2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80057f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005800:	4581      	cmp	r9, r0
 8005802:	f84c 3b04 	str.w	r3, [ip], #4
 8005806:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800580a:	d2db      	bcs.n	80057c4 <quorem+0x44>
 800580c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005810:	b92b      	cbnz	r3, 800581e <quorem+0x9e>
 8005812:	9b01      	ldr	r3, [sp, #4]
 8005814:	3b04      	subs	r3, #4
 8005816:	429d      	cmp	r5, r3
 8005818:	461a      	mov	r2, r3
 800581a:	d32e      	bcc.n	800587a <quorem+0xfa>
 800581c:	613c      	str	r4, [r7, #16]
 800581e:	4638      	mov	r0, r7
 8005820:	f001 f8be 	bl	80069a0 <__mcmp>
 8005824:	2800      	cmp	r0, #0
 8005826:	db24      	blt.n	8005872 <quorem+0xf2>
 8005828:	3601      	adds	r6, #1
 800582a:	4628      	mov	r0, r5
 800582c:	f04f 0c00 	mov.w	ip, #0
 8005830:	f858 2b04 	ldr.w	r2, [r8], #4
 8005834:	f8d0 e000 	ldr.w	lr, [r0]
 8005838:	b293      	uxth	r3, r2
 800583a:	ebac 0303 	sub.w	r3, ip, r3
 800583e:	0c12      	lsrs	r2, r2, #16
 8005840:	fa13 f38e 	uxtah	r3, r3, lr
 8005844:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005848:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800584c:	b29b      	uxth	r3, r3
 800584e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005852:	45c1      	cmp	r9, r8
 8005854:	f840 3b04 	str.w	r3, [r0], #4
 8005858:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800585c:	d2e8      	bcs.n	8005830 <quorem+0xb0>
 800585e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005862:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005866:	b922      	cbnz	r2, 8005872 <quorem+0xf2>
 8005868:	3b04      	subs	r3, #4
 800586a:	429d      	cmp	r5, r3
 800586c:	461a      	mov	r2, r3
 800586e:	d30a      	bcc.n	8005886 <quorem+0x106>
 8005870:	613c      	str	r4, [r7, #16]
 8005872:	4630      	mov	r0, r6
 8005874:	b003      	add	sp, #12
 8005876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800587a:	6812      	ldr	r2, [r2, #0]
 800587c:	3b04      	subs	r3, #4
 800587e:	2a00      	cmp	r2, #0
 8005880:	d1cc      	bne.n	800581c <quorem+0x9c>
 8005882:	3c01      	subs	r4, #1
 8005884:	e7c7      	b.n	8005816 <quorem+0x96>
 8005886:	6812      	ldr	r2, [r2, #0]
 8005888:	3b04      	subs	r3, #4
 800588a:	2a00      	cmp	r2, #0
 800588c:	d1f0      	bne.n	8005870 <quorem+0xf0>
 800588e:	3c01      	subs	r4, #1
 8005890:	e7eb      	b.n	800586a <quorem+0xea>
 8005892:	2000      	movs	r0, #0
 8005894:	e7ee      	b.n	8005874 <quorem+0xf4>
	...

08005898 <_dtoa_r>:
 8005898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589c:	ed2d 8b02 	vpush	{d8}
 80058a0:	ec57 6b10 	vmov	r6, r7, d0
 80058a4:	b095      	sub	sp, #84	; 0x54
 80058a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80058a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80058ac:	9105      	str	r1, [sp, #20]
 80058ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80058b2:	4604      	mov	r4, r0
 80058b4:	9209      	str	r2, [sp, #36]	; 0x24
 80058b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80058b8:	b975      	cbnz	r5, 80058d8 <_dtoa_r+0x40>
 80058ba:	2010      	movs	r0, #16
 80058bc:	f000 fddc 	bl	8006478 <malloc>
 80058c0:	4602      	mov	r2, r0
 80058c2:	6260      	str	r0, [r4, #36]	; 0x24
 80058c4:	b920      	cbnz	r0, 80058d0 <_dtoa_r+0x38>
 80058c6:	4bb2      	ldr	r3, [pc, #712]	; (8005b90 <_dtoa_r+0x2f8>)
 80058c8:	21ea      	movs	r1, #234	; 0xea
 80058ca:	48b2      	ldr	r0, [pc, #712]	; (8005b94 <_dtoa_r+0x2fc>)
 80058cc:	f001 fb8e 	bl	8006fec <__assert_func>
 80058d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80058d4:	6005      	str	r5, [r0, #0]
 80058d6:	60c5      	str	r5, [r0, #12]
 80058d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058da:	6819      	ldr	r1, [r3, #0]
 80058dc:	b151      	cbz	r1, 80058f4 <_dtoa_r+0x5c>
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	604a      	str	r2, [r1, #4]
 80058e2:	2301      	movs	r3, #1
 80058e4:	4093      	lsls	r3, r2
 80058e6:	608b      	str	r3, [r1, #8]
 80058e8:	4620      	mov	r0, r4
 80058ea:	f000 fe1b 	bl	8006524 <_Bfree>
 80058ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058f0:	2200      	movs	r2, #0
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	1e3b      	subs	r3, r7, #0
 80058f6:	bfb9      	ittee	lt
 80058f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80058fc:	9303      	strlt	r3, [sp, #12]
 80058fe:	2300      	movge	r3, #0
 8005900:	f8c8 3000 	strge.w	r3, [r8]
 8005904:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005908:	4ba3      	ldr	r3, [pc, #652]	; (8005b98 <_dtoa_r+0x300>)
 800590a:	bfbc      	itt	lt
 800590c:	2201      	movlt	r2, #1
 800590e:	f8c8 2000 	strlt.w	r2, [r8]
 8005912:	ea33 0309 	bics.w	r3, r3, r9
 8005916:	d11b      	bne.n	8005950 <_dtoa_r+0xb8>
 8005918:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800591a:	f242 730f 	movw	r3, #9999	; 0x270f
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005924:	4333      	orrs	r3, r6
 8005926:	f000 857a 	beq.w	800641e <_dtoa_r+0xb86>
 800592a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800592c:	b963      	cbnz	r3, 8005948 <_dtoa_r+0xb0>
 800592e:	4b9b      	ldr	r3, [pc, #620]	; (8005b9c <_dtoa_r+0x304>)
 8005930:	e024      	b.n	800597c <_dtoa_r+0xe4>
 8005932:	4b9b      	ldr	r3, [pc, #620]	; (8005ba0 <_dtoa_r+0x308>)
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	3308      	adds	r3, #8
 8005938:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	9800      	ldr	r0, [sp, #0]
 800593e:	b015      	add	sp, #84	; 0x54
 8005940:	ecbd 8b02 	vpop	{d8}
 8005944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005948:	4b94      	ldr	r3, [pc, #592]	; (8005b9c <_dtoa_r+0x304>)
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	3303      	adds	r3, #3
 800594e:	e7f3      	b.n	8005938 <_dtoa_r+0xa0>
 8005950:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005954:	2200      	movs	r2, #0
 8005956:	ec51 0b17 	vmov	r0, r1, d7
 800595a:	2300      	movs	r3, #0
 800595c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005960:	f7fb f8ba 	bl	8000ad8 <__aeabi_dcmpeq>
 8005964:	4680      	mov	r8, r0
 8005966:	b158      	cbz	r0, 8005980 <_dtoa_r+0xe8>
 8005968:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800596a:	2301      	movs	r3, #1
 800596c:	6013      	str	r3, [r2, #0]
 800596e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 8551 	beq.w	8006418 <_dtoa_r+0xb80>
 8005976:	488b      	ldr	r0, [pc, #556]	; (8005ba4 <_dtoa_r+0x30c>)
 8005978:	6018      	str	r0, [r3, #0]
 800597a:	1e43      	subs	r3, r0, #1
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	e7dd      	b.n	800593c <_dtoa_r+0xa4>
 8005980:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005984:	aa12      	add	r2, sp, #72	; 0x48
 8005986:	a913      	add	r1, sp, #76	; 0x4c
 8005988:	4620      	mov	r0, r4
 800598a:	f001 f8ad 	bl	8006ae8 <__d2b>
 800598e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005992:	4683      	mov	fp, r0
 8005994:	2d00      	cmp	r5, #0
 8005996:	d07c      	beq.n	8005a92 <_dtoa_r+0x1fa>
 8005998:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800599a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800599e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80059a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80059aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80059ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80059b2:	4b7d      	ldr	r3, [pc, #500]	; (8005ba8 <_dtoa_r+0x310>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	4630      	mov	r0, r6
 80059b8:	4639      	mov	r1, r7
 80059ba:	f7fa fc6d 	bl	8000298 <__aeabi_dsub>
 80059be:	a36e      	add	r3, pc, #440	; (adr r3, 8005b78 <_dtoa_r+0x2e0>)
 80059c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c4:	f7fa fe20 	bl	8000608 <__aeabi_dmul>
 80059c8:	a36d      	add	r3, pc, #436	; (adr r3, 8005b80 <_dtoa_r+0x2e8>)
 80059ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ce:	f7fa fc65 	bl	800029c <__adddf3>
 80059d2:	4606      	mov	r6, r0
 80059d4:	4628      	mov	r0, r5
 80059d6:	460f      	mov	r7, r1
 80059d8:	f7fa fdac 	bl	8000534 <__aeabi_i2d>
 80059dc:	a36a      	add	r3, pc, #424	; (adr r3, 8005b88 <_dtoa_r+0x2f0>)
 80059de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e2:	f7fa fe11 	bl	8000608 <__aeabi_dmul>
 80059e6:	4602      	mov	r2, r0
 80059e8:	460b      	mov	r3, r1
 80059ea:	4630      	mov	r0, r6
 80059ec:	4639      	mov	r1, r7
 80059ee:	f7fa fc55 	bl	800029c <__adddf3>
 80059f2:	4606      	mov	r6, r0
 80059f4:	460f      	mov	r7, r1
 80059f6:	f7fb f8b7 	bl	8000b68 <__aeabi_d2iz>
 80059fa:	2200      	movs	r2, #0
 80059fc:	4682      	mov	sl, r0
 80059fe:	2300      	movs	r3, #0
 8005a00:	4630      	mov	r0, r6
 8005a02:	4639      	mov	r1, r7
 8005a04:	f7fb f872 	bl	8000aec <__aeabi_dcmplt>
 8005a08:	b148      	cbz	r0, 8005a1e <_dtoa_r+0x186>
 8005a0a:	4650      	mov	r0, sl
 8005a0c:	f7fa fd92 	bl	8000534 <__aeabi_i2d>
 8005a10:	4632      	mov	r2, r6
 8005a12:	463b      	mov	r3, r7
 8005a14:	f7fb f860 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a18:	b908      	cbnz	r0, 8005a1e <_dtoa_r+0x186>
 8005a1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005a1e:	f1ba 0f16 	cmp.w	sl, #22
 8005a22:	d854      	bhi.n	8005ace <_dtoa_r+0x236>
 8005a24:	4b61      	ldr	r3, [pc, #388]	; (8005bac <_dtoa_r+0x314>)
 8005a26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a32:	f7fb f85b 	bl	8000aec <__aeabi_dcmplt>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	d04b      	beq.n	8005ad2 <_dtoa_r+0x23a>
 8005a3a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005a3e:	2300      	movs	r3, #0
 8005a40:	930e      	str	r3, [sp, #56]	; 0x38
 8005a42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a44:	1b5d      	subs	r5, r3, r5
 8005a46:	1e6b      	subs	r3, r5, #1
 8005a48:	9304      	str	r3, [sp, #16]
 8005a4a:	bf43      	ittte	mi
 8005a4c:	2300      	movmi	r3, #0
 8005a4e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005a52:	9304      	strmi	r3, [sp, #16]
 8005a54:	f04f 0800 	movpl.w	r8, #0
 8005a58:	f1ba 0f00 	cmp.w	sl, #0
 8005a5c:	db3b      	blt.n	8005ad6 <_dtoa_r+0x23e>
 8005a5e:	9b04      	ldr	r3, [sp, #16]
 8005a60:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005a64:	4453      	add	r3, sl
 8005a66:	9304      	str	r3, [sp, #16]
 8005a68:	2300      	movs	r3, #0
 8005a6a:	9306      	str	r3, [sp, #24]
 8005a6c:	9b05      	ldr	r3, [sp, #20]
 8005a6e:	2b09      	cmp	r3, #9
 8005a70:	d869      	bhi.n	8005b46 <_dtoa_r+0x2ae>
 8005a72:	2b05      	cmp	r3, #5
 8005a74:	bfc4      	itt	gt
 8005a76:	3b04      	subgt	r3, #4
 8005a78:	9305      	strgt	r3, [sp, #20]
 8005a7a:	9b05      	ldr	r3, [sp, #20]
 8005a7c:	f1a3 0302 	sub.w	r3, r3, #2
 8005a80:	bfcc      	ite	gt
 8005a82:	2500      	movgt	r5, #0
 8005a84:	2501      	movle	r5, #1
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d869      	bhi.n	8005b5e <_dtoa_r+0x2c6>
 8005a8a:	e8df f003 	tbb	[pc, r3]
 8005a8e:	4e2c      	.short	0x4e2c
 8005a90:	5a4c      	.short	0x5a4c
 8005a92:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005a96:	441d      	add	r5, r3
 8005a98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	bfc1      	itttt	gt
 8005aa0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005aa4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005aa8:	fa09 f303 	lslgt.w	r3, r9, r3
 8005aac:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005ab0:	bfda      	itte	le
 8005ab2:	f1c3 0320 	rsble	r3, r3, #32
 8005ab6:	fa06 f003 	lslle.w	r0, r6, r3
 8005aba:	4318      	orrgt	r0, r3
 8005abc:	f7fa fd2a 	bl	8000514 <__aeabi_ui2d>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005ac8:	3d01      	subs	r5, #1
 8005aca:	9310      	str	r3, [sp, #64]	; 0x40
 8005acc:	e771      	b.n	80059b2 <_dtoa_r+0x11a>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e7b6      	b.n	8005a40 <_dtoa_r+0x1a8>
 8005ad2:	900e      	str	r0, [sp, #56]	; 0x38
 8005ad4:	e7b5      	b.n	8005a42 <_dtoa_r+0x1aa>
 8005ad6:	f1ca 0300 	rsb	r3, sl, #0
 8005ada:	9306      	str	r3, [sp, #24]
 8005adc:	2300      	movs	r3, #0
 8005ade:	eba8 080a 	sub.w	r8, r8, sl
 8005ae2:	930d      	str	r3, [sp, #52]	; 0x34
 8005ae4:	e7c2      	b.n	8005a6c <_dtoa_r+0x1d4>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	9308      	str	r3, [sp, #32]
 8005aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	dc39      	bgt.n	8005b64 <_dtoa_r+0x2cc>
 8005af0:	f04f 0901 	mov.w	r9, #1
 8005af4:	f8cd 9004 	str.w	r9, [sp, #4]
 8005af8:	464b      	mov	r3, r9
 8005afa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005afe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005b00:	2200      	movs	r2, #0
 8005b02:	6042      	str	r2, [r0, #4]
 8005b04:	2204      	movs	r2, #4
 8005b06:	f102 0614 	add.w	r6, r2, #20
 8005b0a:	429e      	cmp	r6, r3
 8005b0c:	6841      	ldr	r1, [r0, #4]
 8005b0e:	d92f      	bls.n	8005b70 <_dtoa_r+0x2d8>
 8005b10:	4620      	mov	r0, r4
 8005b12:	f000 fcc7 	bl	80064a4 <_Balloc>
 8005b16:	9000      	str	r0, [sp, #0]
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d14b      	bne.n	8005bb4 <_dtoa_r+0x31c>
 8005b1c:	4b24      	ldr	r3, [pc, #144]	; (8005bb0 <_dtoa_r+0x318>)
 8005b1e:	4602      	mov	r2, r0
 8005b20:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005b24:	e6d1      	b.n	80058ca <_dtoa_r+0x32>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e7de      	b.n	8005ae8 <_dtoa_r+0x250>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	9308      	str	r3, [sp, #32]
 8005b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b30:	eb0a 0903 	add.w	r9, sl, r3
 8005b34:	f109 0301 	add.w	r3, r9, #1
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	9301      	str	r3, [sp, #4]
 8005b3c:	bfb8      	it	lt
 8005b3e:	2301      	movlt	r3, #1
 8005b40:	e7dd      	b.n	8005afe <_dtoa_r+0x266>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e7f2      	b.n	8005b2c <_dtoa_r+0x294>
 8005b46:	2501      	movs	r5, #1
 8005b48:	2300      	movs	r3, #0
 8005b4a:	9305      	str	r3, [sp, #20]
 8005b4c:	9508      	str	r5, [sp, #32]
 8005b4e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8cd 9004 	str.w	r9, [sp, #4]
 8005b58:	2312      	movs	r3, #18
 8005b5a:	9209      	str	r2, [sp, #36]	; 0x24
 8005b5c:	e7cf      	b.n	8005afe <_dtoa_r+0x266>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	9308      	str	r3, [sp, #32]
 8005b62:	e7f4      	b.n	8005b4e <_dtoa_r+0x2b6>
 8005b64:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005b68:	f8cd 9004 	str.w	r9, [sp, #4]
 8005b6c:	464b      	mov	r3, r9
 8005b6e:	e7c6      	b.n	8005afe <_dtoa_r+0x266>
 8005b70:	3101      	adds	r1, #1
 8005b72:	6041      	str	r1, [r0, #4]
 8005b74:	0052      	lsls	r2, r2, #1
 8005b76:	e7c6      	b.n	8005b06 <_dtoa_r+0x26e>
 8005b78:	636f4361 	.word	0x636f4361
 8005b7c:	3fd287a7 	.word	0x3fd287a7
 8005b80:	8b60c8b3 	.word	0x8b60c8b3
 8005b84:	3fc68a28 	.word	0x3fc68a28
 8005b88:	509f79fb 	.word	0x509f79fb
 8005b8c:	3fd34413 	.word	0x3fd34413
 8005b90:	08007c41 	.word	0x08007c41
 8005b94:	08007c58 	.word	0x08007c58
 8005b98:	7ff00000 	.word	0x7ff00000
 8005b9c:	08007c3d 	.word	0x08007c3d
 8005ba0:	08007c34 	.word	0x08007c34
 8005ba4:	08007c11 	.word	0x08007c11
 8005ba8:	3ff80000 	.word	0x3ff80000
 8005bac:	08007d50 	.word	0x08007d50
 8005bb0:	08007cb7 	.word	0x08007cb7
 8005bb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bb6:	9a00      	ldr	r2, [sp, #0]
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	9b01      	ldr	r3, [sp, #4]
 8005bbc:	2b0e      	cmp	r3, #14
 8005bbe:	f200 80ad 	bhi.w	8005d1c <_dtoa_r+0x484>
 8005bc2:	2d00      	cmp	r5, #0
 8005bc4:	f000 80aa 	beq.w	8005d1c <_dtoa_r+0x484>
 8005bc8:	f1ba 0f00 	cmp.w	sl, #0
 8005bcc:	dd36      	ble.n	8005c3c <_dtoa_r+0x3a4>
 8005bce:	4ac3      	ldr	r2, [pc, #780]	; (8005edc <_dtoa_r+0x644>)
 8005bd0:	f00a 030f 	and.w	r3, sl, #15
 8005bd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005bd8:	ed93 7b00 	vldr	d7, [r3]
 8005bdc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005be0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005be4:	eeb0 8a47 	vmov.f32	s16, s14
 8005be8:	eef0 8a67 	vmov.f32	s17, s15
 8005bec:	d016      	beq.n	8005c1c <_dtoa_r+0x384>
 8005bee:	4bbc      	ldr	r3, [pc, #752]	; (8005ee0 <_dtoa_r+0x648>)
 8005bf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005bf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005bf8:	f7fa fe30 	bl	800085c <__aeabi_ddiv>
 8005bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c00:	f007 070f 	and.w	r7, r7, #15
 8005c04:	2503      	movs	r5, #3
 8005c06:	4eb6      	ldr	r6, [pc, #728]	; (8005ee0 <_dtoa_r+0x648>)
 8005c08:	b957      	cbnz	r7, 8005c20 <_dtoa_r+0x388>
 8005c0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c0e:	ec53 2b18 	vmov	r2, r3, d8
 8005c12:	f7fa fe23 	bl	800085c <__aeabi_ddiv>
 8005c16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c1a:	e029      	b.n	8005c70 <_dtoa_r+0x3d8>
 8005c1c:	2502      	movs	r5, #2
 8005c1e:	e7f2      	b.n	8005c06 <_dtoa_r+0x36e>
 8005c20:	07f9      	lsls	r1, r7, #31
 8005c22:	d508      	bpl.n	8005c36 <_dtoa_r+0x39e>
 8005c24:	ec51 0b18 	vmov	r0, r1, d8
 8005c28:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c2c:	f7fa fcec 	bl	8000608 <__aeabi_dmul>
 8005c30:	ec41 0b18 	vmov	d8, r0, r1
 8005c34:	3501      	adds	r5, #1
 8005c36:	107f      	asrs	r7, r7, #1
 8005c38:	3608      	adds	r6, #8
 8005c3a:	e7e5      	b.n	8005c08 <_dtoa_r+0x370>
 8005c3c:	f000 80a6 	beq.w	8005d8c <_dtoa_r+0x4f4>
 8005c40:	f1ca 0600 	rsb	r6, sl, #0
 8005c44:	4ba5      	ldr	r3, [pc, #660]	; (8005edc <_dtoa_r+0x644>)
 8005c46:	4fa6      	ldr	r7, [pc, #664]	; (8005ee0 <_dtoa_r+0x648>)
 8005c48:	f006 020f 	and.w	r2, r6, #15
 8005c4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c58:	f7fa fcd6 	bl	8000608 <__aeabi_dmul>
 8005c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c60:	1136      	asrs	r6, r6, #4
 8005c62:	2300      	movs	r3, #0
 8005c64:	2502      	movs	r5, #2
 8005c66:	2e00      	cmp	r6, #0
 8005c68:	f040 8085 	bne.w	8005d76 <_dtoa_r+0x4de>
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1d2      	bne.n	8005c16 <_dtoa_r+0x37e>
 8005c70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f000 808c 	beq.w	8005d90 <_dtoa_r+0x4f8>
 8005c78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005c7c:	4b99      	ldr	r3, [pc, #612]	; (8005ee4 <_dtoa_r+0x64c>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	4630      	mov	r0, r6
 8005c82:	4639      	mov	r1, r7
 8005c84:	f7fa ff32 	bl	8000aec <__aeabi_dcmplt>
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	f000 8081 	beq.w	8005d90 <_dtoa_r+0x4f8>
 8005c8e:	9b01      	ldr	r3, [sp, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d07d      	beq.n	8005d90 <_dtoa_r+0x4f8>
 8005c94:	f1b9 0f00 	cmp.w	r9, #0
 8005c98:	dd3c      	ble.n	8005d14 <_dtoa_r+0x47c>
 8005c9a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005c9e:	9307      	str	r3, [sp, #28]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	4b91      	ldr	r3, [pc, #580]	; (8005ee8 <_dtoa_r+0x650>)
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	4639      	mov	r1, r7
 8005ca8:	f7fa fcae 	bl	8000608 <__aeabi_dmul>
 8005cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cb0:	3501      	adds	r5, #1
 8005cb2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005cb6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005cba:	4628      	mov	r0, r5
 8005cbc:	f7fa fc3a 	bl	8000534 <__aeabi_i2d>
 8005cc0:	4632      	mov	r2, r6
 8005cc2:	463b      	mov	r3, r7
 8005cc4:	f7fa fca0 	bl	8000608 <__aeabi_dmul>
 8005cc8:	4b88      	ldr	r3, [pc, #544]	; (8005eec <_dtoa_r+0x654>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f7fa fae6 	bl	800029c <__adddf3>
 8005cd0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005cd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cd8:	9303      	str	r3, [sp, #12]
 8005cda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d15c      	bne.n	8005d9a <_dtoa_r+0x502>
 8005ce0:	4b83      	ldr	r3, [pc, #524]	; (8005ef0 <_dtoa_r+0x658>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	4630      	mov	r0, r6
 8005ce6:	4639      	mov	r1, r7
 8005ce8:	f7fa fad6 	bl	8000298 <__aeabi_dsub>
 8005cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cf0:	4606      	mov	r6, r0
 8005cf2:	460f      	mov	r7, r1
 8005cf4:	f7fa ff18 	bl	8000b28 <__aeabi_dcmpgt>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	f040 8296 	bne.w	800622a <_dtoa_r+0x992>
 8005cfe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005d02:	4630      	mov	r0, r6
 8005d04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d08:	4639      	mov	r1, r7
 8005d0a:	f7fa feef 	bl	8000aec <__aeabi_dcmplt>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	f040 8288 	bne.w	8006224 <_dtoa_r+0x98c>
 8005d14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f2c0 8158 	blt.w	8005fd4 <_dtoa_r+0x73c>
 8005d24:	f1ba 0f0e 	cmp.w	sl, #14
 8005d28:	f300 8154 	bgt.w	8005fd4 <_dtoa_r+0x73c>
 8005d2c:	4b6b      	ldr	r3, [pc, #428]	; (8005edc <_dtoa_r+0x644>)
 8005d2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005d32:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f280 80e3 	bge.w	8005f04 <_dtoa_r+0x66c>
 8005d3e:	9b01      	ldr	r3, [sp, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f300 80df 	bgt.w	8005f04 <_dtoa_r+0x66c>
 8005d46:	f040 826d 	bne.w	8006224 <_dtoa_r+0x98c>
 8005d4a:	4b69      	ldr	r3, [pc, #420]	; (8005ef0 <_dtoa_r+0x658>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	4640      	mov	r0, r8
 8005d50:	4649      	mov	r1, r9
 8005d52:	f7fa fc59 	bl	8000608 <__aeabi_dmul>
 8005d56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d5a:	f7fa fedb 	bl	8000b14 <__aeabi_dcmpge>
 8005d5e:	9e01      	ldr	r6, [sp, #4]
 8005d60:	4637      	mov	r7, r6
 8005d62:	2800      	cmp	r0, #0
 8005d64:	f040 8243 	bne.w	80061ee <_dtoa_r+0x956>
 8005d68:	9d00      	ldr	r5, [sp, #0]
 8005d6a:	2331      	movs	r3, #49	; 0x31
 8005d6c:	f805 3b01 	strb.w	r3, [r5], #1
 8005d70:	f10a 0a01 	add.w	sl, sl, #1
 8005d74:	e23f      	b.n	80061f6 <_dtoa_r+0x95e>
 8005d76:	07f2      	lsls	r2, r6, #31
 8005d78:	d505      	bpl.n	8005d86 <_dtoa_r+0x4ee>
 8005d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d7e:	f7fa fc43 	bl	8000608 <__aeabi_dmul>
 8005d82:	3501      	adds	r5, #1
 8005d84:	2301      	movs	r3, #1
 8005d86:	1076      	asrs	r6, r6, #1
 8005d88:	3708      	adds	r7, #8
 8005d8a:	e76c      	b.n	8005c66 <_dtoa_r+0x3ce>
 8005d8c:	2502      	movs	r5, #2
 8005d8e:	e76f      	b.n	8005c70 <_dtoa_r+0x3d8>
 8005d90:	9b01      	ldr	r3, [sp, #4]
 8005d92:	f8cd a01c 	str.w	sl, [sp, #28]
 8005d96:	930c      	str	r3, [sp, #48]	; 0x30
 8005d98:	e78d      	b.n	8005cb6 <_dtoa_r+0x41e>
 8005d9a:	9900      	ldr	r1, [sp, #0]
 8005d9c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005d9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005da0:	4b4e      	ldr	r3, [pc, #312]	; (8005edc <_dtoa_r+0x644>)
 8005da2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005da6:	4401      	add	r1, r0
 8005da8:	9102      	str	r1, [sp, #8]
 8005daa:	9908      	ldr	r1, [sp, #32]
 8005dac:	eeb0 8a47 	vmov.f32	s16, s14
 8005db0:	eef0 8a67 	vmov.f32	s17, s15
 8005db4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005db8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005dbc:	2900      	cmp	r1, #0
 8005dbe:	d045      	beq.n	8005e4c <_dtoa_r+0x5b4>
 8005dc0:	494c      	ldr	r1, [pc, #304]	; (8005ef4 <_dtoa_r+0x65c>)
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	f7fa fd4a 	bl	800085c <__aeabi_ddiv>
 8005dc8:	ec53 2b18 	vmov	r2, r3, d8
 8005dcc:	f7fa fa64 	bl	8000298 <__aeabi_dsub>
 8005dd0:	9d00      	ldr	r5, [sp, #0]
 8005dd2:	ec41 0b18 	vmov	d8, r0, r1
 8005dd6:	4639      	mov	r1, r7
 8005dd8:	4630      	mov	r0, r6
 8005dda:	f7fa fec5 	bl	8000b68 <__aeabi_d2iz>
 8005dde:	900c      	str	r0, [sp, #48]	; 0x30
 8005de0:	f7fa fba8 	bl	8000534 <__aeabi_i2d>
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	4630      	mov	r0, r6
 8005dea:	4639      	mov	r1, r7
 8005dec:	f7fa fa54 	bl	8000298 <__aeabi_dsub>
 8005df0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005df2:	3330      	adds	r3, #48	; 0x30
 8005df4:	f805 3b01 	strb.w	r3, [r5], #1
 8005df8:	ec53 2b18 	vmov	r2, r3, d8
 8005dfc:	4606      	mov	r6, r0
 8005dfe:	460f      	mov	r7, r1
 8005e00:	f7fa fe74 	bl	8000aec <__aeabi_dcmplt>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d165      	bne.n	8005ed4 <_dtoa_r+0x63c>
 8005e08:	4632      	mov	r2, r6
 8005e0a:	463b      	mov	r3, r7
 8005e0c:	4935      	ldr	r1, [pc, #212]	; (8005ee4 <_dtoa_r+0x64c>)
 8005e0e:	2000      	movs	r0, #0
 8005e10:	f7fa fa42 	bl	8000298 <__aeabi_dsub>
 8005e14:	ec53 2b18 	vmov	r2, r3, d8
 8005e18:	f7fa fe68 	bl	8000aec <__aeabi_dcmplt>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	f040 80b9 	bne.w	8005f94 <_dtoa_r+0x6fc>
 8005e22:	9b02      	ldr	r3, [sp, #8]
 8005e24:	429d      	cmp	r5, r3
 8005e26:	f43f af75 	beq.w	8005d14 <_dtoa_r+0x47c>
 8005e2a:	4b2f      	ldr	r3, [pc, #188]	; (8005ee8 <_dtoa_r+0x650>)
 8005e2c:	ec51 0b18 	vmov	r0, r1, d8
 8005e30:	2200      	movs	r2, #0
 8005e32:	f7fa fbe9 	bl	8000608 <__aeabi_dmul>
 8005e36:	4b2c      	ldr	r3, [pc, #176]	; (8005ee8 <_dtoa_r+0x650>)
 8005e38:	ec41 0b18 	vmov	d8, r0, r1
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	4630      	mov	r0, r6
 8005e40:	4639      	mov	r1, r7
 8005e42:	f7fa fbe1 	bl	8000608 <__aeabi_dmul>
 8005e46:	4606      	mov	r6, r0
 8005e48:	460f      	mov	r7, r1
 8005e4a:	e7c4      	b.n	8005dd6 <_dtoa_r+0x53e>
 8005e4c:	ec51 0b17 	vmov	r0, r1, d7
 8005e50:	f7fa fbda 	bl	8000608 <__aeabi_dmul>
 8005e54:	9b02      	ldr	r3, [sp, #8]
 8005e56:	9d00      	ldr	r5, [sp, #0]
 8005e58:	930c      	str	r3, [sp, #48]	; 0x30
 8005e5a:	ec41 0b18 	vmov	d8, r0, r1
 8005e5e:	4639      	mov	r1, r7
 8005e60:	4630      	mov	r0, r6
 8005e62:	f7fa fe81 	bl	8000b68 <__aeabi_d2iz>
 8005e66:	9011      	str	r0, [sp, #68]	; 0x44
 8005e68:	f7fa fb64 	bl	8000534 <__aeabi_i2d>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4630      	mov	r0, r6
 8005e72:	4639      	mov	r1, r7
 8005e74:	f7fa fa10 	bl	8000298 <__aeabi_dsub>
 8005e78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e7a:	3330      	adds	r3, #48	; 0x30
 8005e7c:	f805 3b01 	strb.w	r3, [r5], #1
 8005e80:	9b02      	ldr	r3, [sp, #8]
 8005e82:	429d      	cmp	r5, r3
 8005e84:	4606      	mov	r6, r0
 8005e86:	460f      	mov	r7, r1
 8005e88:	f04f 0200 	mov.w	r2, #0
 8005e8c:	d134      	bne.n	8005ef8 <_dtoa_r+0x660>
 8005e8e:	4b19      	ldr	r3, [pc, #100]	; (8005ef4 <_dtoa_r+0x65c>)
 8005e90:	ec51 0b18 	vmov	r0, r1, d8
 8005e94:	f7fa fa02 	bl	800029c <__adddf3>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	4639      	mov	r1, r7
 8005ea0:	f7fa fe42 	bl	8000b28 <__aeabi_dcmpgt>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	d175      	bne.n	8005f94 <_dtoa_r+0x6fc>
 8005ea8:	ec53 2b18 	vmov	r2, r3, d8
 8005eac:	4911      	ldr	r1, [pc, #68]	; (8005ef4 <_dtoa_r+0x65c>)
 8005eae:	2000      	movs	r0, #0
 8005eb0:	f7fa f9f2 	bl	8000298 <__aeabi_dsub>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4630      	mov	r0, r6
 8005eba:	4639      	mov	r1, r7
 8005ebc:	f7fa fe16 	bl	8000aec <__aeabi_dcmplt>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	f43f af27 	beq.w	8005d14 <_dtoa_r+0x47c>
 8005ec6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ec8:	1e6b      	subs	r3, r5, #1
 8005eca:	930c      	str	r3, [sp, #48]	; 0x30
 8005ecc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ed0:	2b30      	cmp	r3, #48	; 0x30
 8005ed2:	d0f8      	beq.n	8005ec6 <_dtoa_r+0x62e>
 8005ed4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005ed8:	e04a      	b.n	8005f70 <_dtoa_r+0x6d8>
 8005eda:	bf00      	nop
 8005edc:	08007d50 	.word	0x08007d50
 8005ee0:	08007d28 	.word	0x08007d28
 8005ee4:	3ff00000 	.word	0x3ff00000
 8005ee8:	40240000 	.word	0x40240000
 8005eec:	401c0000 	.word	0x401c0000
 8005ef0:	40140000 	.word	0x40140000
 8005ef4:	3fe00000 	.word	0x3fe00000
 8005ef8:	4baf      	ldr	r3, [pc, #700]	; (80061b8 <_dtoa_r+0x920>)
 8005efa:	f7fa fb85 	bl	8000608 <__aeabi_dmul>
 8005efe:	4606      	mov	r6, r0
 8005f00:	460f      	mov	r7, r1
 8005f02:	e7ac      	b.n	8005e5e <_dtoa_r+0x5c6>
 8005f04:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005f08:	9d00      	ldr	r5, [sp, #0]
 8005f0a:	4642      	mov	r2, r8
 8005f0c:	464b      	mov	r3, r9
 8005f0e:	4630      	mov	r0, r6
 8005f10:	4639      	mov	r1, r7
 8005f12:	f7fa fca3 	bl	800085c <__aeabi_ddiv>
 8005f16:	f7fa fe27 	bl	8000b68 <__aeabi_d2iz>
 8005f1a:	9002      	str	r0, [sp, #8]
 8005f1c:	f7fa fb0a 	bl	8000534 <__aeabi_i2d>
 8005f20:	4642      	mov	r2, r8
 8005f22:	464b      	mov	r3, r9
 8005f24:	f7fa fb70 	bl	8000608 <__aeabi_dmul>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	4639      	mov	r1, r7
 8005f30:	f7fa f9b2 	bl	8000298 <__aeabi_dsub>
 8005f34:	9e02      	ldr	r6, [sp, #8]
 8005f36:	9f01      	ldr	r7, [sp, #4]
 8005f38:	3630      	adds	r6, #48	; 0x30
 8005f3a:	f805 6b01 	strb.w	r6, [r5], #1
 8005f3e:	9e00      	ldr	r6, [sp, #0]
 8005f40:	1bae      	subs	r6, r5, r6
 8005f42:	42b7      	cmp	r7, r6
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	d137      	bne.n	8005fba <_dtoa_r+0x722>
 8005f4a:	f7fa f9a7 	bl	800029c <__adddf3>
 8005f4e:	4642      	mov	r2, r8
 8005f50:	464b      	mov	r3, r9
 8005f52:	4606      	mov	r6, r0
 8005f54:	460f      	mov	r7, r1
 8005f56:	f7fa fde7 	bl	8000b28 <__aeabi_dcmpgt>
 8005f5a:	b9c8      	cbnz	r0, 8005f90 <_dtoa_r+0x6f8>
 8005f5c:	4642      	mov	r2, r8
 8005f5e:	464b      	mov	r3, r9
 8005f60:	4630      	mov	r0, r6
 8005f62:	4639      	mov	r1, r7
 8005f64:	f7fa fdb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f68:	b110      	cbz	r0, 8005f70 <_dtoa_r+0x6d8>
 8005f6a:	9b02      	ldr	r3, [sp, #8]
 8005f6c:	07d9      	lsls	r1, r3, #31
 8005f6e:	d40f      	bmi.n	8005f90 <_dtoa_r+0x6f8>
 8005f70:	4620      	mov	r0, r4
 8005f72:	4659      	mov	r1, fp
 8005f74:	f000 fad6 	bl	8006524 <_Bfree>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	702b      	strb	r3, [r5, #0]
 8005f7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f7e:	f10a 0001 	add.w	r0, sl, #1
 8005f82:	6018      	str	r0, [r3, #0]
 8005f84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f43f acd8 	beq.w	800593c <_dtoa_r+0xa4>
 8005f8c:	601d      	str	r5, [r3, #0]
 8005f8e:	e4d5      	b.n	800593c <_dtoa_r+0xa4>
 8005f90:	f8cd a01c 	str.w	sl, [sp, #28]
 8005f94:	462b      	mov	r3, r5
 8005f96:	461d      	mov	r5, r3
 8005f98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f9c:	2a39      	cmp	r2, #57	; 0x39
 8005f9e:	d108      	bne.n	8005fb2 <_dtoa_r+0x71a>
 8005fa0:	9a00      	ldr	r2, [sp, #0]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d1f7      	bne.n	8005f96 <_dtoa_r+0x6fe>
 8005fa6:	9a07      	ldr	r2, [sp, #28]
 8005fa8:	9900      	ldr	r1, [sp, #0]
 8005faa:	3201      	adds	r2, #1
 8005fac:	9207      	str	r2, [sp, #28]
 8005fae:	2230      	movs	r2, #48	; 0x30
 8005fb0:	700a      	strb	r2, [r1, #0]
 8005fb2:	781a      	ldrb	r2, [r3, #0]
 8005fb4:	3201      	adds	r2, #1
 8005fb6:	701a      	strb	r2, [r3, #0]
 8005fb8:	e78c      	b.n	8005ed4 <_dtoa_r+0x63c>
 8005fba:	4b7f      	ldr	r3, [pc, #508]	; (80061b8 <_dtoa_r+0x920>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f7fa fb23 	bl	8000608 <__aeabi_dmul>
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	4606      	mov	r6, r0
 8005fc8:	460f      	mov	r7, r1
 8005fca:	f7fa fd85 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	d09b      	beq.n	8005f0a <_dtoa_r+0x672>
 8005fd2:	e7cd      	b.n	8005f70 <_dtoa_r+0x6d8>
 8005fd4:	9a08      	ldr	r2, [sp, #32]
 8005fd6:	2a00      	cmp	r2, #0
 8005fd8:	f000 80c4 	beq.w	8006164 <_dtoa_r+0x8cc>
 8005fdc:	9a05      	ldr	r2, [sp, #20]
 8005fde:	2a01      	cmp	r2, #1
 8005fe0:	f300 80a8 	bgt.w	8006134 <_dtoa_r+0x89c>
 8005fe4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005fe6:	2a00      	cmp	r2, #0
 8005fe8:	f000 80a0 	beq.w	800612c <_dtoa_r+0x894>
 8005fec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ff0:	9e06      	ldr	r6, [sp, #24]
 8005ff2:	4645      	mov	r5, r8
 8005ff4:	9a04      	ldr	r2, [sp, #16]
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	441a      	add	r2, r3
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	4498      	add	r8, r3
 8005ffe:	9204      	str	r2, [sp, #16]
 8006000:	f000 fb4c 	bl	800669c <__i2b>
 8006004:	4607      	mov	r7, r0
 8006006:	2d00      	cmp	r5, #0
 8006008:	dd0b      	ble.n	8006022 <_dtoa_r+0x78a>
 800600a:	9b04      	ldr	r3, [sp, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	dd08      	ble.n	8006022 <_dtoa_r+0x78a>
 8006010:	42ab      	cmp	r3, r5
 8006012:	9a04      	ldr	r2, [sp, #16]
 8006014:	bfa8      	it	ge
 8006016:	462b      	movge	r3, r5
 8006018:	eba8 0803 	sub.w	r8, r8, r3
 800601c:	1aed      	subs	r5, r5, r3
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	9304      	str	r3, [sp, #16]
 8006022:	9b06      	ldr	r3, [sp, #24]
 8006024:	b1fb      	cbz	r3, 8006066 <_dtoa_r+0x7ce>
 8006026:	9b08      	ldr	r3, [sp, #32]
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 809f 	beq.w	800616c <_dtoa_r+0x8d4>
 800602e:	2e00      	cmp	r6, #0
 8006030:	dd11      	ble.n	8006056 <_dtoa_r+0x7be>
 8006032:	4639      	mov	r1, r7
 8006034:	4632      	mov	r2, r6
 8006036:	4620      	mov	r0, r4
 8006038:	f000 fbec 	bl	8006814 <__pow5mult>
 800603c:	465a      	mov	r2, fp
 800603e:	4601      	mov	r1, r0
 8006040:	4607      	mov	r7, r0
 8006042:	4620      	mov	r0, r4
 8006044:	f000 fb40 	bl	80066c8 <__multiply>
 8006048:	4659      	mov	r1, fp
 800604a:	9007      	str	r0, [sp, #28]
 800604c:	4620      	mov	r0, r4
 800604e:	f000 fa69 	bl	8006524 <_Bfree>
 8006052:	9b07      	ldr	r3, [sp, #28]
 8006054:	469b      	mov	fp, r3
 8006056:	9b06      	ldr	r3, [sp, #24]
 8006058:	1b9a      	subs	r2, r3, r6
 800605a:	d004      	beq.n	8006066 <_dtoa_r+0x7ce>
 800605c:	4659      	mov	r1, fp
 800605e:	4620      	mov	r0, r4
 8006060:	f000 fbd8 	bl	8006814 <__pow5mult>
 8006064:	4683      	mov	fp, r0
 8006066:	2101      	movs	r1, #1
 8006068:	4620      	mov	r0, r4
 800606a:	f000 fb17 	bl	800669c <__i2b>
 800606e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006070:	2b00      	cmp	r3, #0
 8006072:	4606      	mov	r6, r0
 8006074:	dd7c      	ble.n	8006170 <_dtoa_r+0x8d8>
 8006076:	461a      	mov	r2, r3
 8006078:	4601      	mov	r1, r0
 800607a:	4620      	mov	r0, r4
 800607c:	f000 fbca 	bl	8006814 <__pow5mult>
 8006080:	9b05      	ldr	r3, [sp, #20]
 8006082:	2b01      	cmp	r3, #1
 8006084:	4606      	mov	r6, r0
 8006086:	dd76      	ble.n	8006176 <_dtoa_r+0x8de>
 8006088:	2300      	movs	r3, #0
 800608a:	9306      	str	r3, [sp, #24]
 800608c:	6933      	ldr	r3, [r6, #16]
 800608e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006092:	6918      	ldr	r0, [r3, #16]
 8006094:	f000 fab2 	bl	80065fc <__hi0bits>
 8006098:	f1c0 0020 	rsb	r0, r0, #32
 800609c:	9b04      	ldr	r3, [sp, #16]
 800609e:	4418      	add	r0, r3
 80060a0:	f010 001f 	ands.w	r0, r0, #31
 80060a4:	f000 8086 	beq.w	80061b4 <_dtoa_r+0x91c>
 80060a8:	f1c0 0320 	rsb	r3, r0, #32
 80060ac:	2b04      	cmp	r3, #4
 80060ae:	dd7f      	ble.n	80061b0 <_dtoa_r+0x918>
 80060b0:	f1c0 001c 	rsb	r0, r0, #28
 80060b4:	9b04      	ldr	r3, [sp, #16]
 80060b6:	4403      	add	r3, r0
 80060b8:	4480      	add	r8, r0
 80060ba:	4405      	add	r5, r0
 80060bc:	9304      	str	r3, [sp, #16]
 80060be:	f1b8 0f00 	cmp.w	r8, #0
 80060c2:	dd05      	ble.n	80060d0 <_dtoa_r+0x838>
 80060c4:	4659      	mov	r1, fp
 80060c6:	4642      	mov	r2, r8
 80060c8:	4620      	mov	r0, r4
 80060ca:	f000 fbfd 	bl	80068c8 <__lshift>
 80060ce:	4683      	mov	fp, r0
 80060d0:	9b04      	ldr	r3, [sp, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	dd05      	ble.n	80060e2 <_dtoa_r+0x84a>
 80060d6:	4631      	mov	r1, r6
 80060d8:	461a      	mov	r2, r3
 80060da:	4620      	mov	r0, r4
 80060dc:	f000 fbf4 	bl	80068c8 <__lshift>
 80060e0:	4606      	mov	r6, r0
 80060e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d069      	beq.n	80061bc <_dtoa_r+0x924>
 80060e8:	4631      	mov	r1, r6
 80060ea:	4658      	mov	r0, fp
 80060ec:	f000 fc58 	bl	80069a0 <__mcmp>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	da63      	bge.n	80061bc <_dtoa_r+0x924>
 80060f4:	2300      	movs	r3, #0
 80060f6:	4659      	mov	r1, fp
 80060f8:	220a      	movs	r2, #10
 80060fa:	4620      	mov	r0, r4
 80060fc:	f000 fa34 	bl	8006568 <__multadd>
 8006100:	9b08      	ldr	r3, [sp, #32]
 8006102:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006106:	4683      	mov	fp, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 818f 	beq.w	800642c <_dtoa_r+0xb94>
 800610e:	4639      	mov	r1, r7
 8006110:	2300      	movs	r3, #0
 8006112:	220a      	movs	r2, #10
 8006114:	4620      	mov	r0, r4
 8006116:	f000 fa27 	bl	8006568 <__multadd>
 800611a:	f1b9 0f00 	cmp.w	r9, #0
 800611e:	4607      	mov	r7, r0
 8006120:	f300 808e 	bgt.w	8006240 <_dtoa_r+0x9a8>
 8006124:	9b05      	ldr	r3, [sp, #20]
 8006126:	2b02      	cmp	r3, #2
 8006128:	dc50      	bgt.n	80061cc <_dtoa_r+0x934>
 800612a:	e089      	b.n	8006240 <_dtoa_r+0x9a8>
 800612c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800612e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006132:	e75d      	b.n	8005ff0 <_dtoa_r+0x758>
 8006134:	9b01      	ldr	r3, [sp, #4]
 8006136:	1e5e      	subs	r6, r3, #1
 8006138:	9b06      	ldr	r3, [sp, #24]
 800613a:	42b3      	cmp	r3, r6
 800613c:	bfbf      	itttt	lt
 800613e:	9b06      	ldrlt	r3, [sp, #24]
 8006140:	9606      	strlt	r6, [sp, #24]
 8006142:	1af2      	sublt	r2, r6, r3
 8006144:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006146:	bfb6      	itet	lt
 8006148:	189b      	addlt	r3, r3, r2
 800614a:	1b9e      	subge	r6, r3, r6
 800614c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800614e:	9b01      	ldr	r3, [sp, #4]
 8006150:	bfb8      	it	lt
 8006152:	2600      	movlt	r6, #0
 8006154:	2b00      	cmp	r3, #0
 8006156:	bfb5      	itete	lt
 8006158:	eba8 0503 	sublt.w	r5, r8, r3
 800615c:	9b01      	ldrge	r3, [sp, #4]
 800615e:	2300      	movlt	r3, #0
 8006160:	4645      	movge	r5, r8
 8006162:	e747      	b.n	8005ff4 <_dtoa_r+0x75c>
 8006164:	9e06      	ldr	r6, [sp, #24]
 8006166:	9f08      	ldr	r7, [sp, #32]
 8006168:	4645      	mov	r5, r8
 800616a:	e74c      	b.n	8006006 <_dtoa_r+0x76e>
 800616c:	9a06      	ldr	r2, [sp, #24]
 800616e:	e775      	b.n	800605c <_dtoa_r+0x7c4>
 8006170:	9b05      	ldr	r3, [sp, #20]
 8006172:	2b01      	cmp	r3, #1
 8006174:	dc18      	bgt.n	80061a8 <_dtoa_r+0x910>
 8006176:	9b02      	ldr	r3, [sp, #8]
 8006178:	b9b3      	cbnz	r3, 80061a8 <_dtoa_r+0x910>
 800617a:	9b03      	ldr	r3, [sp, #12]
 800617c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006180:	b9a3      	cbnz	r3, 80061ac <_dtoa_r+0x914>
 8006182:	9b03      	ldr	r3, [sp, #12]
 8006184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006188:	0d1b      	lsrs	r3, r3, #20
 800618a:	051b      	lsls	r3, r3, #20
 800618c:	b12b      	cbz	r3, 800619a <_dtoa_r+0x902>
 800618e:	9b04      	ldr	r3, [sp, #16]
 8006190:	3301      	adds	r3, #1
 8006192:	9304      	str	r3, [sp, #16]
 8006194:	f108 0801 	add.w	r8, r8, #1
 8006198:	2301      	movs	r3, #1
 800619a:	9306      	str	r3, [sp, #24]
 800619c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f47f af74 	bne.w	800608c <_dtoa_r+0x7f4>
 80061a4:	2001      	movs	r0, #1
 80061a6:	e779      	b.n	800609c <_dtoa_r+0x804>
 80061a8:	2300      	movs	r3, #0
 80061aa:	e7f6      	b.n	800619a <_dtoa_r+0x902>
 80061ac:	9b02      	ldr	r3, [sp, #8]
 80061ae:	e7f4      	b.n	800619a <_dtoa_r+0x902>
 80061b0:	d085      	beq.n	80060be <_dtoa_r+0x826>
 80061b2:	4618      	mov	r0, r3
 80061b4:	301c      	adds	r0, #28
 80061b6:	e77d      	b.n	80060b4 <_dtoa_r+0x81c>
 80061b8:	40240000 	.word	0x40240000
 80061bc:	9b01      	ldr	r3, [sp, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	dc38      	bgt.n	8006234 <_dtoa_r+0x99c>
 80061c2:	9b05      	ldr	r3, [sp, #20]
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	dd35      	ble.n	8006234 <_dtoa_r+0x99c>
 80061c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80061cc:	f1b9 0f00 	cmp.w	r9, #0
 80061d0:	d10d      	bne.n	80061ee <_dtoa_r+0x956>
 80061d2:	4631      	mov	r1, r6
 80061d4:	464b      	mov	r3, r9
 80061d6:	2205      	movs	r2, #5
 80061d8:	4620      	mov	r0, r4
 80061da:	f000 f9c5 	bl	8006568 <__multadd>
 80061de:	4601      	mov	r1, r0
 80061e0:	4606      	mov	r6, r0
 80061e2:	4658      	mov	r0, fp
 80061e4:	f000 fbdc 	bl	80069a0 <__mcmp>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	f73f adbd 	bgt.w	8005d68 <_dtoa_r+0x4d0>
 80061ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f0:	9d00      	ldr	r5, [sp, #0]
 80061f2:	ea6f 0a03 	mvn.w	sl, r3
 80061f6:	f04f 0800 	mov.w	r8, #0
 80061fa:	4631      	mov	r1, r6
 80061fc:	4620      	mov	r0, r4
 80061fe:	f000 f991 	bl	8006524 <_Bfree>
 8006202:	2f00      	cmp	r7, #0
 8006204:	f43f aeb4 	beq.w	8005f70 <_dtoa_r+0x6d8>
 8006208:	f1b8 0f00 	cmp.w	r8, #0
 800620c:	d005      	beq.n	800621a <_dtoa_r+0x982>
 800620e:	45b8      	cmp	r8, r7
 8006210:	d003      	beq.n	800621a <_dtoa_r+0x982>
 8006212:	4641      	mov	r1, r8
 8006214:	4620      	mov	r0, r4
 8006216:	f000 f985 	bl	8006524 <_Bfree>
 800621a:	4639      	mov	r1, r7
 800621c:	4620      	mov	r0, r4
 800621e:	f000 f981 	bl	8006524 <_Bfree>
 8006222:	e6a5      	b.n	8005f70 <_dtoa_r+0x6d8>
 8006224:	2600      	movs	r6, #0
 8006226:	4637      	mov	r7, r6
 8006228:	e7e1      	b.n	80061ee <_dtoa_r+0x956>
 800622a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800622c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006230:	4637      	mov	r7, r6
 8006232:	e599      	b.n	8005d68 <_dtoa_r+0x4d0>
 8006234:	9b08      	ldr	r3, [sp, #32]
 8006236:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 80fd 	beq.w	800643a <_dtoa_r+0xba2>
 8006240:	2d00      	cmp	r5, #0
 8006242:	dd05      	ble.n	8006250 <_dtoa_r+0x9b8>
 8006244:	4639      	mov	r1, r7
 8006246:	462a      	mov	r2, r5
 8006248:	4620      	mov	r0, r4
 800624a:	f000 fb3d 	bl	80068c8 <__lshift>
 800624e:	4607      	mov	r7, r0
 8006250:	9b06      	ldr	r3, [sp, #24]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d05c      	beq.n	8006310 <_dtoa_r+0xa78>
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	4620      	mov	r0, r4
 800625a:	f000 f923 	bl	80064a4 <_Balloc>
 800625e:	4605      	mov	r5, r0
 8006260:	b928      	cbnz	r0, 800626e <_dtoa_r+0x9d6>
 8006262:	4b80      	ldr	r3, [pc, #512]	; (8006464 <_dtoa_r+0xbcc>)
 8006264:	4602      	mov	r2, r0
 8006266:	f240 21ea 	movw	r1, #746	; 0x2ea
 800626a:	f7ff bb2e 	b.w	80058ca <_dtoa_r+0x32>
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	3202      	adds	r2, #2
 8006272:	0092      	lsls	r2, r2, #2
 8006274:	f107 010c 	add.w	r1, r7, #12
 8006278:	300c      	adds	r0, #12
 800627a:	f000 f905 	bl	8006488 <memcpy>
 800627e:	2201      	movs	r2, #1
 8006280:	4629      	mov	r1, r5
 8006282:	4620      	mov	r0, r4
 8006284:	f000 fb20 	bl	80068c8 <__lshift>
 8006288:	9b00      	ldr	r3, [sp, #0]
 800628a:	3301      	adds	r3, #1
 800628c:	9301      	str	r3, [sp, #4]
 800628e:	9b00      	ldr	r3, [sp, #0]
 8006290:	444b      	add	r3, r9
 8006292:	9307      	str	r3, [sp, #28]
 8006294:	9b02      	ldr	r3, [sp, #8]
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	46b8      	mov	r8, r7
 800629c:	9306      	str	r3, [sp, #24]
 800629e:	4607      	mov	r7, r0
 80062a0:	9b01      	ldr	r3, [sp, #4]
 80062a2:	4631      	mov	r1, r6
 80062a4:	3b01      	subs	r3, #1
 80062a6:	4658      	mov	r0, fp
 80062a8:	9302      	str	r3, [sp, #8]
 80062aa:	f7ff fa69 	bl	8005780 <quorem>
 80062ae:	4603      	mov	r3, r0
 80062b0:	3330      	adds	r3, #48	; 0x30
 80062b2:	9004      	str	r0, [sp, #16]
 80062b4:	4641      	mov	r1, r8
 80062b6:	4658      	mov	r0, fp
 80062b8:	9308      	str	r3, [sp, #32]
 80062ba:	f000 fb71 	bl	80069a0 <__mcmp>
 80062be:	463a      	mov	r2, r7
 80062c0:	4681      	mov	r9, r0
 80062c2:	4631      	mov	r1, r6
 80062c4:	4620      	mov	r0, r4
 80062c6:	f000 fb87 	bl	80069d8 <__mdiff>
 80062ca:	68c2      	ldr	r2, [r0, #12]
 80062cc:	9b08      	ldr	r3, [sp, #32]
 80062ce:	4605      	mov	r5, r0
 80062d0:	bb02      	cbnz	r2, 8006314 <_dtoa_r+0xa7c>
 80062d2:	4601      	mov	r1, r0
 80062d4:	4658      	mov	r0, fp
 80062d6:	f000 fb63 	bl	80069a0 <__mcmp>
 80062da:	9b08      	ldr	r3, [sp, #32]
 80062dc:	4602      	mov	r2, r0
 80062de:	4629      	mov	r1, r5
 80062e0:	4620      	mov	r0, r4
 80062e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80062e6:	f000 f91d 	bl	8006524 <_Bfree>
 80062ea:	9b05      	ldr	r3, [sp, #20]
 80062ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062ee:	9d01      	ldr	r5, [sp, #4]
 80062f0:	ea43 0102 	orr.w	r1, r3, r2
 80062f4:	9b06      	ldr	r3, [sp, #24]
 80062f6:	430b      	orrs	r3, r1
 80062f8:	9b08      	ldr	r3, [sp, #32]
 80062fa:	d10d      	bne.n	8006318 <_dtoa_r+0xa80>
 80062fc:	2b39      	cmp	r3, #57	; 0x39
 80062fe:	d029      	beq.n	8006354 <_dtoa_r+0xabc>
 8006300:	f1b9 0f00 	cmp.w	r9, #0
 8006304:	dd01      	ble.n	800630a <_dtoa_r+0xa72>
 8006306:	9b04      	ldr	r3, [sp, #16]
 8006308:	3331      	adds	r3, #49	; 0x31
 800630a:	9a02      	ldr	r2, [sp, #8]
 800630c:	7013      	strb	r3, [r2, #0]
 800630e:	e774      	b.n	80061fa <_dtoa_r+0x962>
 8006310:	4638      	mov	r0, r7
 8006312:	e7b9      	b.n	8006288 <_dtoa_r+0x9f0>
 8006314:	2201      	movs	r2, #1
 8006316:	e7e2      	b.n	80062de <_dtoa_r+0xa46>
 8006318:	f1b9 0f00 	cmp.w	r9, #0
 800631c:	db06      	blt.n	800632c <_dtoa_r+0xa94>
 800631e:	9905      	ldr	r1, [sp, #20]
 8006320:	ea41 0909 	orr.w	r9, r1, r9
 8006324:	9906      	ldr	r1, [sp, #24]
 8006326:	ea59 0101 	orrs.w	r1, r9, r1
 800632a:	d120      	bne.n	800636e <_dtoa_r+0xad6>
 800632c:	2a00      	cmp	r2, #0
 800632e:	ddec      	ble.n	800630a <_dtoa_r+0xa72>
 8006330:	4659      	mov	r1, fp
 8006332:	2201      	movs	r2, #1
 8006334:	4620      	mov	r0, r4
 8006336:	9301      	str	r3, [sp, #4]
 8006338:	f000 fac6 	bl	80068c8 <__lshift>
 800633c:	4631      	mov	r1, r6
 800633e:	4683      	mov	fp, r0
 8006340:	f000 fb2e 	bl	80069a0 <__mcmp>
 8006344:	2800      	cmp	r0, #0
 8006346:	9b01      	ldr	r3, [sp, #4]
 8006348:	dc02      	bgt.n	8006350 <_dtoa_r+0xab8>
 800634a:	d1de      	bne.n	800630a <_dtoa_r+0xa72>
 800634c:	07da      	lsls	r2, r3, #31
 800634e:	d5dc      	bpl.n	800630a <_dtoa_r+0xa72>
 8006350:	2b39      	cmp	r3, #57	; 0x39
 8006352:	d1d8      	bne.n	8006306 <_dtoa_r+0xa6e>
 8006354:	9a02      	ldr	r2, [sp, #8]
 8006356:	2339      	movs	r3, #57	; 0x39
 8006358:	7013      	strb	r3, [r2, #0]
 800635a:	462b      	mov	r3, r5
 800635c:	461d      	mov	r5, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006364:	2a39      	cmp	r2, #57	; 0x39
 8006366:	d050      	beq.n	800640a <_dtoa_r+0xb72>
 8006368:	3201      	adds	r2, #1
 800636a:	701a      	strb	r2, [r3, #0]
 800636c:	e745      	b.n	80061fa <_dtoa_r+0x962>
 800636e:	2a00      	cmp	r2, #0
 8006370:	dd03      	ble.n	800637a <_dtoa_r+0xae2>
 8006372:	2b39      	cmp	r3, #57	; 0x39
 8006374:	d0ee      	beq.n	8006354 <_dtoa_r+0xabc>
 8006376:	3301      	adds	r3, #1
 8006378:	e7c7      	b.n	800630a <_dtoa_r+0xa72>
 800637a:	9a01      	ldr	r2, [sp, #4]
 800637c:	9907      	ldr	r1, [sp, #28]
 800637e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006382:	428a      	cmp	r2, r1
 8006384:	d02a      	beq.n	80063dc <_dtoa_r+0xb44>
 8006386:	4659      	mov	r1, fp
 8006388:	2300      	movs	r3, #0
 800638a:	220a      	movs	r2, #10
 800638c:	4620      	mov	r0, r4
 800638e:	f000 f8eb 	bl	8006568 <__multadd>
 8006392:	45b8      	cmp	r8, r7
 8006394:	4683      	mov	fp, r0
 8006396:	f04f 0300 	mov.w	r3, #0
 800639a:	f04f 020a 	mov.w	r2, #10
 800639e:	4641      	mov	r1, r8
 80063a0:	4620      	mov	r0, r4
 80063a2:	d107      	bne.n	80063b4 <_dtoa_r+0xb1c>
 80063a4:	f000 f8e0 	bl	8006568 <__multadd>
 80063a8:	4680      	mov	r8, r0
 80063aa:	4607      	mov	r7, r0
 80063ac:	9b01      	ldr	r3, [sp, #4]
 80063ae:	3301      	adds	r3, #1
 80063b0:	9301      	str	r3, [sp, #4]
 80063b2:	e775      	b.n	80062a0 <_dtoa_r+0xa08>
 80063b4:	f000 f8d8 	bl	8006568 <__multadd>
 80063b8:	4639      	mov	r1, r7
 80063ba:	4680      	mov	r8, r0
 80063bc:	2300      	movs	r3, #0
 80063be:	220a      	movs	r2, #10
 80063c0:	4620      	mov	r0, r4
 80063c2:	f000 f8d1 	bl	8006568 <__multadd>
 80063c6:	4607      	mov	r7, r0
 80063c8:	e7f0      	b.n	80063ac <_dtoa_r+0xb14>
 80063ca:	f1b9 0f00 	cmp.w	r9, #0
 80063ce:	9a00      	ldr	r2, [sp, #0]
 80063d0:	bfcc      	ite	gt
 80063d2:	464d      	movgt	r5, r9
 80063d4:	2501      	movle	r5, #1
 80063d6:	4415      	add	r5, r2
 80063d8:	f04f 0800 	mov.w	r8, #0
 80063dc:	4659      	mov	r1, fp
 80063de:	2201      	movs	r2, #1
 80063e0:	4620      	mov	r0, r4
 80063e2:	9301      	str	r3, [sp, #4]
 80063e4:	f000 fa70 	bl	80068c8 <__lshift>
 80063e8:	4631      	mov	r1, r6
 80063ea:	4683      	mov	fp, r0
 80063ec:	f000 fad8 	bl	80069a0 <__mcmp>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	dcb2      	bgt.n	800635a <_dtoa_r+0xac2>
 80063f4:	d102      	bne.n	80063fc <_dtoa_r+0xb64>
 80063f6:	9b01      	ldr	r3, [sp, #4]
 80063f8:	07db      	lsls	r3, r3, #31
 80063fa:	d4ae      	bmi.n	800635a <_dtoa_r+0xac2>
 80063fc:	462b      	mov	r3, r5
 80063fe:	461d      	mov	r5, r3
 8006400:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006404:	2a30      	cmp	r2, #48	; 0x30
 8006406:	d0fa      	beq.n	80063fe <_dtoa_r+0xb66>
 8006408:	e6f7      	b.n	80061fa <_dtoa_r+0x962>
 800640a:	9a00      	ldr	r2, [sp, #0]
 800640c:	429a      	cmp	r2, r3
 800640e:	d1a5      	bne.n	800635c <_dtoa_r+0xac4>
 8006410:	f10a 0a01 	add.w	sl, sl, #1
 8006414:	2331      	movs	r3, #49	; 0x31
 8006416:	e779      	b.n	800630c <_dtoa_r+0xa74>
 8006418:	4b13      	ldr	r3, [pc, #76]	; (8006468 <_dtoa_r+0xbd0>)
 800641a:	f7ff baaf 	b.w	800597c <_dtoa_r+0xe4>
 800641e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006420:	2b00      	cmp	r3, #0
 8006422:	f47f aa86 	bne.w	8005932 <_dtoa_r+0x9a>
 8006426:	4b11      	ldr	r3, [pc, #68]	; (800646c <_dtoa_r+0xbd4>)
 8006428:	f7ff baa8 	b.w	800597c <_dtoa_r+0xe4>
 800642c:	f1b9 0f00 	cmp.w	r9, #0
 8006430:	dc03      	bgt.n	800643a <_dtoa_r+0xba2>
 8006432:	9b05      	ldr	r3, [sp, #20]
 8006434:	2b02      	cmp	r3, #2
 8006436:	f73f aec9 	bgt.w	80061cc <_dtoa_r+0x934>
 800643a:	9d00      	ldr	r5, [sp, #0]
 800643c:	4631      	mov	r1, r6
 800643e:	4658      	mov	r0, fp
 8006440:	f7ff f99e 	bl	8005780 <quorem>
 8006444:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006448:	f805 3b01 	strb.w	r3, [r5], #1
 800644c:	9a00      	ldr	r2, [sp, #0]
 800644e:	1aaa      	subs	r2, r5, r2
 8006450:	4591      	cmp	r9, r2
 8006452:	ddba      	ble.n	80063ca <_dtoa_r+0xb32>
 8006454:	4659      	mov	r1, fp
 8006456:	2300      	movs	r3, #0
 8006458:	220a      	movs	r2, #10
 800645a:	4620      	mov	r0, r4
 800645c:	f000 f884 	bl	8006568 <__multadd>
 8006460:	4683      	mov	fp, r0
 8006462:	e7eb      	b.n	800643c <_dtoa_r+0xba4>
 8006464:	08007cb7 	.word	0x08007cb7
 8006468:	08007c10 	.word	0x08007c10
 800646c:	08007c34 	.word	0x08007c34

08006470 <_localeconv_r>:
 8006470:	4800      	ldr	r0, [pc, #0]	; (8006474 <_localeconv_r+0x4>)
 8006472:	4770      	bx	lr
 8006474:	20000160 	.word	0x20000160

08006478 <malloc>:
 8006478:	4b02      	ldr	r3, [pc, #8]	; (8006484 <malloc+0xc>)
 800647a:	4601      	mov	r1, r0
 800647c:	6818      	ldr	r0, [r3, #0]
 800647e:	f000 bbef 	b.w	8006c60 <_malloc_r>
 8006482:	bf00      	nop
 8006484:	2000000c 	.word	0x2000000c

08006488 <memcpy>:
 8006488:	440a      	add	r2, r1
 800648a:	4291      	cmp	r1, r2
 800648c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006490:	d100      	bne.n	8006494 <memcpy+0xc>
 8006492:	4770      	bx	lr
 8006494:	b510      	push	{r4, lr}
 8006496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800649a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800649e:	4291      	cmp	r1, r2
 80064a0:	d1f9      	bne.n	8006496 <memcpy+0xe>
 80064a2:	bd10      	pop	{r4, pc}

080064a4 <_Balloc>:
 80064a4:	b570      	push	{r4, r5, r6, lr}
 80064a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064a8:	4604      	mov	r4, r0
 80064aa:	460d      	mov	r5, r1
 80064ac:	b976      	cbnz	r6, 80064cc <_Balloc+0x28>
 80064ae:	2010      	movs	r0, #16
 80064b0:	f7ff ffe2 	bl	8006478 <malloc>
 80064b4:	4602      	mov	r2, r0
 80064b6:	6260      	str	r0, [r4, #36]	; 0x24
 80064b8:	b920      	cbnz	r0, 80064c4 <_Balloc+0x20>
 80064ba:	4b18      	ldr	r3, [pc, #96]	; (800651c <_Balloc+0x78>)
 80064bc:	4818      	ldr	r0, [pc, #96]	; (8006520 <_Balloc+0x7c>)
 80064be:	2166      	movs	r1, #102	; 0x66
 80064c0:	f000 fd94 	bl	8006fec <__assert_func>
 80064c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064c8:	6006      	str	r6, [r0, #0]
 80064ca:	60c6      	str	r6, [r0, #12]
 80064cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80064ce:	68f3      	ldr	r3, [r6, #12]
 80064d0:	b183      	cbz	r3, 80064f4 <_Balloc+0x50>
 80064d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064da:	b9b8      	cbnz	r0, 800650c <_Balloc+0x68>
 80064dc:	2101      	movs	r1, #1
 80064de:	fa01 f605 	lsl.w	r6, r1, r5
 80064e2:	1d72      	adds	r2, r6, #5
 80064e4:	0092      	lsls	r2, r2, #2
 80064e6:	4620      	mov	r0, r4
 80064e8:	f000 fb5a 	bl	8006ba0 <_calloc_r>
 80064ec:	b160      	cbz	r0, 8006508 <_Balloc+0x64>
 80064ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064f2:	e00e      	b.n	8006512 <_Balloc+0x6e>
 80064f4:	2221      	movs	r2, #33	; 0x21
 80064f6:	2104      	movs	r1, #4
 80064f8:	4620      	mov	r0, r4
 80064fa:	f000 fb51 	bl	8006ba0 <_calloc_r>
 80064fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006500:	60f0      	str	r0, [r6, #12]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e4      	bne.n	80064d2 <_Balloc+0x2e>
 8006508:	2000      	movs	r0, #0
 800650a:	bd70      	pop	{r4, r5, r6, pc}
 800650c:	6802      	ldr	r2, [r0, #0]
 800650e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006512:	2300      	movs	r3, #0
 8006514:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006518:	e7f7      	b.n	800650a <_Balloc+0x66>
 800651a:	bf00      	nop
 800651c:	08007c41 	.word	0x08007c41
 8006520:	08007cc8 	.word	0x08007cc8

08006524 <_Bfree>:
 8006524:	b570      	push	{r4, r5, r6, lr}
 8006526:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006528:	4605      	mov	r5, r0
 800652a:	460c      	mov	r4, r1
 800652c:	b976      	cbnz	r6, 800654c <_Bfree+0x28>
 800652e:	2010      	movs	r0, #16
 8006530:	f7ff ffa2 	bl	8006478 <malloc>
 8006534:	4602      	mov	r2, r0
 8006536:	6268      	str	r0, [r5, #36]	; 0x24
 8006538:	b920      	cbnz	r0, 8006544 <_Bfree+0x20>
 800653a:	4b09      	ldr	r3, [pc, #36]	; (8006560 <_Bfree+0x3c>)
 800653c:	4809      	ldr	r0, [pc, #36]	; (8006564 <_Bfree+0x40>)
 800653e:	218a      	movs	r1, #138	; 0x8a
 8006540:	f000 fd54 	bl	8006fec <__assert_func>
 8006544:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006548:	6006      	str	r6, [r0, #0]
 800654a:	60c6      	str	r6, [r0, #12]
 800654c:	b13c      	cbz	r4, 800655e <_Bfree+0x3a>
 800654e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006550:	6862      	ldr	r2, [r4, #4]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006558:	6021      	str	r1, [r4, #0]
 800655a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800655e:	bd70      	pop	{r4, r5, r6, pc}
 8006560:	08007c41 	.word	0x08007c41
 8006564:	08007cc8 	.word	0x08007cc8

08006568 <__multadd>:
 8006568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800656c:	690e      	ldr	r6, [r1, #16]
 800656e:	4607      	mov	r7, r0
 8006570:	4698      	mov	r8, r3
 8006572:	460c      	mov	r4, r1
 8006574:	f101 0014 	add.w	r0, r1, #20
 8006578:	2300      	movs	r3, #0
 800657a:	6805      	ldr	r5, [r0, #0]
 800657c:	b2a9      	uxth	r1, r5
 800657e:	fb02 8101 	mla	r1, r2, r1, r8
 8006582:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006586:	0c2d      	lsrs	r5, r5, #16
 8006588:	fb02 c505 	mla	r5, r2, r5, ip
 800658c:	b289      	uxth	r1, r1
 800658e:	3301      	adds	r3, #1
 8006590:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006594:	429e      	cmp	r6, r3
 8006596:	f840 1b04 	str.w	r1, [r0], #4
 800659a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800659e:	dcec      	bgt.n	800657a <__multadd+0x12>
 80065a0:	f1b8 0f00 	cmp.w	r8, #0
 80065a4:	d022      	beq.n	80065ec <__multadd+0x84>
 80065a6:	68a3      	ldr	r3, [r4, #8]
 80065a8:	42b3      	cmp	r3, r6
 80065aa:	dc19      	bgt.n	80065e0 <__multadd+0x78>
 80065ac:	6861      	ldr	r1, [r4, #4]
 80065ae:	4638      	mov	r0, r7
 80065b0:	3101      	adds	r1, #1
 80065b2:	f7ff ff77 	bl	80064a4 <_Balloc>
 80065b6:	4605      	mov	r5, r0
 80065b8:	b928      	cbnz	r0, 80065c6 <__multadd+0x5e>
 80065ba:	4602      	mov	r2, r0
 80065bc:	4b0d      	ldr	r3, [pc, #52]	; (80065f4 <__multadd+0x8c>)
 80065be:	480e      	ldr	r0, [pc, #56]	; (80065f8 <__multadd+0x90>)
 80065c0:	21b5      	movs	r1, #181	; 0xb5
 80065c2:	f000 fd13 	bl	8006fec <__assert_func>
 80065c6:	6922      	ldr	r2, [r4, #16]
 80065c8:	3202      	adds	r2, #2
 80065ca:	f104 010c 	add.w	r1, r4, #12
 80065ce:	0092      	lsls	r2, r2, #2
 80065d0:	300c      	adds	r0, #12
 80065d2:	f7ff ff59 	bl	8006488 <memcpy>
 80065d6:	4621      	mov	r1, r4
 80065d8:	4638      	mov	r0, r7
 80065da:	f7ff ffa3 	bl	8006524 <_Bfree>
 80065de:	462c      	mov	r4, r5
 80065e0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80065e4:	3601      	adds	r6, #1
 80065e6:	f8c3 8014 	str.w	r8, [r3, #20]
 80065ea:	6126      	str	r6, [r4, #16]
 80065ec:	4620      	mov	r0, r4
 80065ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f2:	bf00      	nop
 80065f4:	08007cb7 	.word	0x08007cb7
 80065f8:	08007cc8 	.word	0x08007cc8

080065fc <__hi0bits>:
 80065fc:	0c03      	lsrs	r3, r0, #16
 80065fe:	041b      	lsls	r3, r3, #16
 8006600:	b9d3      	cbnz	r3, 8006638 <__hi0bits+0x3c>
 8006602:	0400      	lsls	r0, r0, #16
 8006604:	2310      	movs	r3, #16
 8006606:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800660a:	bf04      	itt	eq
 800660c:	0200      	lsleq	r0, r0, #8
 800660e:	3308      	addeq	r3, #8
 8006610:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006614:	bf04      	itt	eq
 8006616:	0100      	lsleq	r0, r0, #4
 8006618:	3304      	addeq	r3, #4
 800661a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800661e:	bf04      	itt	eq
 8006620:	0080      	lsleq	r0, r0, #2
 8006622:	3302      	addeq	r3, #2
 8006624:	2800      	cmp	r0, #0
 8006626:	db05      	blt.n	8006634 <__hi0bits+0x38>
 8006628:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800662c:	f103 0301 	add.w	r3, r3, #1
 8006630:	bf08      	it	eq
 8006632:	2320      	moveq	r3, #32
 8006634:	4618      	mov	r0, r3
 8006636:	4770      	bx	lr
 8006638:	2300      	movs	r3, #0
 800663a:	e7e4      	b.n	8006606 <__hi0bits+0xa>

0800663c <__lo0bits>:
 800663c:	6803      	ldr	r3, [r0, #0]
 800663e:	f013 0207 	ands.w	r2, r3, #7
 8006642:	4601      	mov	r1, r0
 8006644:	d00b      	beq.n	800665e <__lo0bits+0x22>
 8006646:	07da      	lsls	r2, r3, #31
 8006648:	d424      	bmi.n	8006694 <__lo0bits+0x58>
 800664a:	0798      	lsls	r0, r3, #30
 800664c:	bf49      	itett	mi
 800664e:	085b      	lsrmi	r3, r3, #1
 8006650:	089b      	lsrpl	r3, r3, #2
 8006652:	2001      	movmi	r0, #1
 8006654:	600b      	strmi	r3, [r1, #0]
 8006656:	bf5c      	itt	pl
 8006658:	600b      	strpl	r3, [r1, #0]
 800665a:	2002      	movpl	r0, #2
 800665c:	4770      	bx	lr
 800665e:	b298      	uxth	r0, r3
 8006660:	b9b0      	cbnz	r0, 8006690 <__lo0bits+0x54>
 8006662:	0c1b      	lsrs	r3, r3, #16
 8006664:	2010      	movs	r0, #16
 8006666:	f013 0fff 	tst.w	r3, #255	; 0xff
 800666a:	bf04      	itt	eq
 800666c:	0a1b      	lsreq	r3, r3, #8
 800666e:	3008      	addeq	r0, #8
 8006670:	071a      	lsls	r2, r3, #28
 8006672:	bf04      	itt	eq
 8006674:	091b      	lsreq	r3, r3, #4
 8006676:	3004      	addeq	r0, #4
 8006678:	079a      	lsls	r2, r3, #30
 800667a:	bf04      	itt	eq
 800667c:	089b      	lsreq	r3, r3, #2
 800667e:	3002      	addeq	r0, #2
 8006680:	07da      	lsls	r2, r3, #31
 8006682:	d403      	bmi.n	800668c <__lo0bits+0x50>
 8006684:	085b      	lsrs	r3, r3, #1
 8006686:	f100 0001 	add.w	r0, r0, #1
 800668a:	d005      	beq.n	8006698 <__lo0bits+0x5c>
 800668c:	600b      	str	r3, [r1, #0]
 800668e:	4770      	bx	lr
 8006690:	4610      	mov	r0, r2
 8006692:	e7e8      	b.n	8006666 <__lo0bits+0x2a>
 8006694:	2000      	movs	r0, #0
 8006696:	4770      	bx	lr
 8006698:	2020      	movs	r0, #32
 800669a:	4770      	bx	lr

0800669c <__i2b>:
 800669c:	b510      	push	{r4, lr}
 800669e:	460c      	mov	r4, r1
 80066a0:	2101      	movs	r1, #1
 80066a2:	f7ff feff 	bl	80064a4 <_Balloc>
 80066a6:	4602      	mov	r2, r0
 80066a8:	b928      	cbnz	r0, 80066b6 <__i2b+0x1a>
 80066aa:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <__i2b+0x24>)
 80066ac:	4805      	ldr	r0, [pc, #20]	; (80066c4 <__i2b+0x28>)
 80066ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80066b2:	f000 fc9b 	bl	8006fec <__assert_func>
 80066b6:	2301      	movs	r3, #1
 80066b8:	6144      	str	r4, [r0, #20]
 80066ba:	6103      	str	r3, [r0, #16]
 80066bc:	bd10      	pop	{r4, pc}
 80066be:	bf00      	nop
 80066c0:	08007cb7 	.word	0x08007cb7
 80066c4:	08007cc8 	.word	0x08007cc8

080066c8 <__multiply>:
 80066c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066cc:	4614      	mov	r4, r2
 80066ce:	690a      	ldr	r2, [r1, #16]
 80066d0:	6923      	ldr	r3, [r4, #16]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	bfb8      	it	lt
 80066d6:	460b      	movlt	r3, r1
 80066d8:	460d      	mov	r5, r1
 80066da:	bfbc      	itt	lt
 80066dc:	4625      	movlt	r5, r4
 80066de:	461c      	movlt	r4, r3
 80066e0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80066e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80066e8:	68ab      	ldr	r3, [r5, #8]
 80066ea:	6869      	ldr	r1, [r5, #4]
 80066ec:	eb0a 0709 	add.w	r7, sl, r9
 80066f0:	42bb      	cmp	r3, r7
 80066f2:	b085      	sub	sp, #20
 80066f4:	bfb8      	it	lt
 80066f6:	3101      	addlt	r1, #1
 80066f8:	f7ff fed4 	bl	80064a4 <_Balloc>
 80066fc:	b930      	cbnz	r0, 800670c <__multiply+0x44>
 80066fe:	4602      	mov	r2, r0
 8006700:	4b42      	ldr	r3, [pc, #264]	; (800680c <__multiply+0x144>)
 8006702:	4843      	ldr	r0, [pc, #268]	; (8006810 <__multiply+0x148>)
 8006704:	f240 115d 	movw	r1, #349	; 0x15d
 8006708:	f000 fc70 	bl	8006fec <__assert_func>
 800670c:	f100 0614 	add.w	r6, r0, #20
 8006710:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006714:	4633      	mov	r3, r6
 8006716:	2200      	movs	r2, #0
 8006718:	4543      	cmp	r3, r8
 800671a:	d31e      	bcc.n	800675a <__multiply+0x92>
 800671c:	f105 0c14 	add.w	ip, r5, #20
 8006720:	f104 0314 	add.w	r3, r4, #20
 8006724:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006728:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800672c:	9202      	str	r2, [sp, #8]
 800672e:	ebac 0205 	sub.w	r2, ip, r5
 8006732:	3a15      	subs	r2, #21
 8006734:	f022 0203 	bic.w	r2, r2, #3
 8006738:	3204      	adds	r2, #4
 800673a:	f105 0115 	add.w	r1, r5, #21
 800673e:	458c      	cmp	ip, r1
 8006740:	bf38      	it	cc
 8006742:	2204      	movcc	r2, #4
 8006744:	9201      	str	r2, [sp, #4]
 8006746:	9a02      	ldr	r2, [sp, #8]
 8006748:	9303      	str	r3, [sp, #12]
 800674a:	429a      	cmp	r2, r3
 800674c:	d808      	bhi.n	8006760 <__multiply+0x98>
 800674e:	2f00      	cmp	r7, #0
 8006750:	dc55      	bgt.n	80067fe <__multiply+0x136>
 8006752:	6107      	str	r7, [r0, #16]
 8006754:	b005      	add	sp, #20
 8006756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800675a:	f843 2b04 	str.w	r2, [r3], #4
 800675e:	e7db      	b.n	8006718 <__multiply+0x50>
 8006760:	f8b3 a000 	ldrh.w	sl, [r3]
 8006764:	f1ba 0f00 	cmp.w	sl, #0
 8006768:	d020      	beq.n	80067ac <__multiply+0xe4>
 800676a:	f105 0e14 	add.w	lr, r5, #20
 800676e:	46b1      	mov	r9, r6
 8006770:	2200      	movs	r2, #0
 8006772:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006776:	f8d9 b000 	ldr.w	fp, [r9]
 800677a:	b2a1      	uxth	r1, r4
 800677c:	fa1f fb8b 	uxth.w	fp, fp
 8006780:	fb0a b101 	mla	r1, sl, r1, fp
 8006784:	4411      	add	r1, r2
 8006786:	f8d9 2000 	ldr.w	r2, [r9]
 800678a:	0c24      	lsrs	r4, r4, #16
 800678c:	0c12      	lsrs	r2, r2, #16
 800678e:	fb0a 2404 	mla	r4, sl, r4, r2
 8006792:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006796:	b289      	uxth	r1, r1
 8006798:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800679c:	45f4      	cmp	ip, lr
 800679e:	f849 1b04 	str.w	r1, [r9], #4
 80067a2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80067a6:	d8e4      	bhi.n	8006772 <__multiply+0xaa>
 80067a8:	9901      	ldr	r1, [sp, #4]
 80067aa:	5072      	str	r2, [r6, r1]
 80067ac:	9a03      	ldr	r2, [sp, #12]
 80067ae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80067b2:	3304      	adds	r3, #4
 80067b4:	f1b9 0f00 	cmp.w	r9, #0
 80067b8:	d01f      	beq.n	80067fa <__multiply+0x132>
 80067ba:	6834      	ldr	r4, [r6, #0]
 80067bc:	f105 0114 	add.w	r1, r5, #20
 80067c0:	46b6      	mov	lr, r6
 80067c2:	f04f 0a00 	mov.w	sl, #0
 80067c6:	880a      	ldrh	r2, [r1, #0]
 80067c8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80067cc:	fb09 b202 	mla	r2, r9, r2, fp
 80067d0:	4492      	add	sl, r2
 80067d2:	b2a4      	uxth	r4, r4
 80067d4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80067d8:	f84e 4b04 	str.w	r4, [lr], #4
 80067dc:	f851 4b04 	ldr.w	r4, [r1], #4
 80067e0:	f8be 2000 	ldrh.w	r2, [lr]
 80067e4:	0c24      	lsrs	r4, r4, #16
 80067e6:	fb09 2404 	mla	r4, r9, r4, r2
 80067ea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80067ee:	458c      	cmp	ip, r1
 80067f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80067f4:	d8e7      	bhi.n	80067c6 <__multiply+0xfe>
 80067f6:	9a01      	ldr	r2, [sp, #4]
 80067f8:	50b4      	str	r4, [r6, r2]
 80067fa:	3604      	adds	r6, #4
 80067fc:	e7a3      	b.n	8006746 <__multiply+0x7e>
 80067fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1a5      	bne.n	8006752 <__multiply+0x8a>
 8006806:	3f01      	subs	r7, #1
 8006808:	e7a1      	b.n	800674e <__multiply+0x86>
 800680a:	bf00      	nop
 800680c:	08007cb7 	.word	0x08007cb7
 8006810:	08007cc8 	.word	0x08007cc8

08006814 <__pow5mult>:
 8006814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006818:	4615      	mov	r5, r2
 800681a:	f012 0203 	ands.w	r2, r2, #3
 800681e:	4606      	mov	r6, r0
 8006820:	460f      	mov	r7, r1
 8006822:	d007      	beq.n	8006834 <__pow5mult+0x20>
 8006824:	4c25      	ldr	r4, [pc, #148]	; (80068bc <__pow5mult+0xa8>)
 8006826:	3a01      	subs	r2, #1
 8006828:	2300      	movs	r3, #0
 800682a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800682e:	f7ff fe9b 	bl	8006568 <__multadd>
 8006832:	4607      	mov	r7, r0
 8006834:	10ad      	asrs	r5, r5, #2
 8006836:	d03d      	beq.n	80068b4 <__pow5mult+0xa0>
 8006838:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800683a:	b97c      	cbnz	r4, 800685c <__pow5mult+0x48>
 800683c:	2010      	movs	r0, #16
 800683e:	f7ff fe1b 	bl	8006478 <malloc>
 8006842:	4602      	mov	r2, r0
 8006844:	6270      	str	r0, [r6, #36]	; 0x24
 8006846:	b928      	cbnz	r0, 8006854 <__pow5mult+0x40>
 8006848:	4b1d      	ldr	r3, [pc, #116]	; (80068c0 <__pow5mult+0xac>)
 800684a:	481e      	ldr	r0, [pc, #120]	; (80068c4 <__pow5mult+0xb0>)
 800684c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006850:	f000 fbcc 	bl	8006fec <__assert_func>
 8006854:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006858:	6004      	str	r4, [r0, #0]
 800685a:	60c4      	str	r4, [r0, #12]
 800685c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006860:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006864:	b94c      	cbnz	r4, 800687a <__pow5mult+0x66>
 8006866:	f240 2171 	movw	r1, #625	; 0x271
 800686a:	4630      	mov	r0, r6
 800686c:	f7ff ff16 	bl	800669c <__i2b>
 8006870:	2300      	movs	r3, #0
 8006872:	f8c8 0008 	str.w	r0, [r8, #8]
 8006876:	4604      	mov	r4, r0
 8006878:	6003      	str	r3, [r0, #0]
 800687a:	f04f 0900 	mov.w	r9, #0
 800687e:	07eb      	lsls	r3, r5, #31
 8006880:	d50a      	bpl.n	8006898 <__pow5mult+0x84>
 8006882:	4639      	mov	r1, r7
 8006884:	4622      	mov	r2, r4
 8006886:	4630      	mov	r0, r6
 8006888:	f7ff ff1e 	bl	80066c8 <__multiply>
 800688c:	4639      	mov	r1, r7
 800688e:	4680      	mov	r8, r0
 8006890:	4630      	mov	r0, r6
 8006892:	f7ff fe47 	bl	8006524 <_Bfree>
 8006896:	4647      	mov	r7, r8
 8006898:	106d      	asrs	r5, r5, #1
 800689a:	d00b      	beq.n	80068b4 <__pow5mult+0xa0>
 800689c:	6820      	ldr	r0, [r4, #0]
 800689e:	b938      	cbnz	r0, 80068b0 <__pow5mult+0x9c>
 80068a0:	4622      	mov	r2, r4
 80068a2:	4621      	mov	r1, r4
 80068a4:	4630      	mov	r0, r6
 80068a6:	f7ff ff0f 	bl	80066c8 <__multiply>
 80068aa:	6020      	str	r0, [r4, #0]
 80068ac:	f8c0 9000 	str.w	r9, [r0]
 80068b0:	4604      	mov	r4, r0
 80068b2:	e7e4      	b.n	800687e <__pow5mult+0x6a>
 80068b4:	4638      	mov	r0, r7
 80068b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ba:	bf00      	nop
 80068bc:	08007e18 	.word	0x08007e18
 80068c0:	08007c41 	.word	0x08007c41
 80068c4:	08007cc8 	.word	0x08007cc8

080068c8 <__lshift>:
 80068c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068cc:	460c      	mov	r4, r1
 80068ce:	6849      	ldr	r1, [r1, #4]
 80068d0:	6923      	ldr	r3, [r4, #16]
 80068d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068d6:	68a3      	ldr	r3, [r4, #8]
 80068d8:	4607      	mov	r7, r0
 80068da:	4691      	mov	r9, r2
 80068dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068e0:	f108 0601 	add.w	r6, r8, #1
 80068e4:	42b3      	cmp	r3, r6
 80068e6:	db0b      	blt.n	8006900 <__lshift+0x38>
 80068e8:	4638      	mov	r0, r7
 80068ea:	f7ff fddb 	bl	80064a4 <_Balloc>
 80068ee:	4605      	mov	r5, r0
 80068f0:	b948      	cbnz	r0, 8006906 <__lshift+0x3e>
 80068f2:	4602      	mov	r2, r0
 80068f4:	4b28      	ldr	r3, [pc, #160]	; (8006998 <__lshift+0xd0>)
 80068f6:	4829      	ldr	r0, [pc, #164]	; (800699c <__lshift+0xd4>)
 80068f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80068fc:	f000 fb76 	bl	8006fec <__assert_func>
 8006900:	3101      	adds	r1, #1
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	e7ee      	b.n	80068e4 <__lshift+0x1c>
 8006906:	2300      	movs	r3, #0
 8006908:	f100 0114 	add.w	r1, r0, #20
 800690c:	f100 0210 	add.w	r2, r0, #16
 8006910:	4618      	mov	r0, r3
 8006912:	4553      	cmp	r3, sl
 8006914:	db33      	blt.n	800697e <__lshift+0xb6>
 8006916:	6920      	ldr	r0, [r4, #16]
 8006918:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800691c:	f104 0314 	add.w	r3, r4, #20
 8006920:	f019 091f 	ands.w	r9, r9, #31
 8006924:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006928:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800692c:	d02b      	beq.n	8006986 <__lshift+0xbe>
 800692e:	f1c9 0e20 	rsb	lr, r9, #32
 8006932:	468a      	mov	sl, r1
 8006934:	2200      	movs	r2, #0
 8006936:	6818      	ldr	r0, [r3, #0]
 8006938:	fa00 f009 	lsl.w	r0, r0, r9
 800693c:	4302      	orrs	r2, r0
 800693e:	f84a 2b04 	str.w	r2, [sl], #4
 8006942:	f853 2b04 	ldr.w	r2, [r3], #4
 8006946:	459c      	cmp	ip, r3
 8006948:	fa22 f20e 	lsr.w	r2, r2, lr
 800694c:	d8f3      	bhi.n	8006936 <__lshift+0x6e>
 800694e:	ebac 0304 	sub.w	r3, ip, r4
 8006952:	3b15      	subs	r3, #21
 8006954:	f023 0303 	bic.w	r3, r3, #3
 8006958:	3304      	adds	r3, #4
 800695a:	f104 0015 	add.w	r0, r4, #21
 800695e:	4584      	cmp	ip, r0
 8006960:	bf38      	it	cc
 8006962:	2304      	movcc	r3, #4
 8006964:	50ca      	str	r2, [r1, r3]
 8006966:	b10a      	cbz	r2, 800696c <__lshift+0xa4>
 8006968:	f108 0602 	add.w	r6, r8, #2
 800696c:	3e01      	subs	r6, #1
 800696e:	4638      	mov	r0, r7
 8006970:	612e      	str	r6, [r5, #16]
 8006972:	4621      	mov	r1, r4
 8006974:	f7ff fdd6 	bl	8006524 <_Bfree>
 8006978:	4628      	mov	r0, r5
 800697a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800697e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006982:	3301      	adds	r3, #1
 8006984:	e7c5      	b.n	8006912 <__lshift+0x4a>
 8006986:	3904      	subs	r1, #4
 8006988:	f853 2b04 	ldr.w	r2, [r3], #4
 800698c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006990:	459c      	cmp	ip, r3
 8006992:	d8f9      	bhi.n	8006988 <__lshift+0xc0>
 8006994:	e7ea      	b.n	800696c <__lshift+0xa4>
 8006996:	bf00      	nop
 8006998:	08007cb7 	.word	0x08007cb7
 800699c:	08007cc8 	.word	0x08007cc8

080069a0 <__mcmp>:
 80069a0:	b530      	push	{r4, r5, lr}
 80069a2:	6902      	ldr	r2, [r0, #16]
 80069a4:	690c      	ldr	r4, [r1, #16]
 80069a6:	1b12      	subs	r2, r2, r4
 80069a8:	d10e      	bne.n	80069c8 <__mcmp+0x28>
 80069aa:	f100 0314 	add.w	r3, r0, #20
 80069ae:	3114      	adds	r1, #20
 80069b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80069b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80069b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80069bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80069c0:	42a5      	cmp	r5, r4
 80069c2:	d003      	beq.n	80069cc <__mcmp+0x2c>
 80069c4:	d305      	bcc.n	80069d2 <__mcmp+0x32>
 80069c6:	2201      	movs	r2, #1
 80069c8:	4610      	mov	r0, r2
 80069ca:	bd30      	pop	{r4, r5, pc}
 80069cc:	4283      	cmp	r3, r0
 80069ce:	d3f3      	bcc.n	80069b8 <__mcmp+0x18>
 80069d0:	e7fa      	b.n	80069c8 <__mcmp+0x28>
 80069d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069d6:	e7f7      	b.n	80069c8 <__mcmp+0x28>

080069d8 <__mdiff>:
 80069d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069dc:	460c      	mov	r4, r1
 80069de:	4606      	mov	r6, r0
 80069e0:	4611      	mov	r1, r2
 80069e2:	4620      	mov	r0, r4
 80069e4:	4617      	mov	r7, r2
 80069e6:	f7ff ffdb 	bl	80069a0 <__mcmp>
 80069ea:	1e05      	subs	r5, r0, #0
 80069ec:	d110      	bne.n	8006a10 <__mdiff+0x38>
 80069ee:	4629      	mov	r1, r5
 80069f0:	4630      	mov	r0, r6
 80069f2:	f7ff fd57 	bl	80064a4 <_Balloc>
 80069f6:	b930      	cbnz	r0, 8006a06 <__mdiff+0x2e>
 80069f8:	4b39      	ldr	r3, [pc, #228]	; (8006ae0 <__mdiff+0x108>)
 80069fa:	4602      	mov	r2, r0
 80069fc:	f240 2132 	movw	r1, #562	; 0x232
 8006a00:	4838      	ldr	r0, [pc, #224]	; (8006ae4 <__mdiff+0x10c>)
 8006a02:	f000 faf3 	bl	8006fec <__assert_func>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a10:	bfa4      	itt	ge
 8006a12:	463b      	movge	r3, r7
 8006a14:	4627      	movge	r7, r4
 8006a16:	4630      	mov	r0, r6
 8006a18:	6879      	ldr	r1, [r7, #4]
 8006a1a:	bfa6      	itte	ge
 8006a1c:	461c      	movge	r4, r3
 8006a1e:	2500      	movge	r5, #0
 8006a20:	2501      	movlt	r5, #1
 8006a22:	f7ff fd3f 	bl	80064a4 <_Balloc>
 8006a26:	b920      	cbnz	r0, 8006a32 <__mdiff+0x5a>
 8006a28:	4b2d      	ldr	r3, [pc, #180]	; (8006ae0 <__mdiff+0x108>)
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006a30:	e7e6      	b.n	8006a00 <__mdiff+0x28>
 8006a32:	693e      	ldr	r6, [r7, #16]
 8006a34:	60c5      	str	r5, [r0, #12]
 8006a36:	6925      	ldr	r5, [r4, #16]
 8006a38:	f107 0114 	add.w	r1, r7, #20
 8006a3c:	f104 0914 	add.w	r9, r4, #20
 8006a40:	f100 0e14 	add.w	lr, r0, #20
 8006a44:	f107 0210 	add.w	r2, r7, #16
 8006a48:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006a4c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006a50:	46f2      	mov	sl, lr
 8006a52:	2700      	movs	r7, #0
 8006a54:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a5c:	fa1f f883 	uxth.w	r8, r3
 8006a60:	fa17 f78b 	uxtah	r7, r7, fp
 8006a64:	0c1b      	lsrs	r3, r3, #16
 8006a66:	eba7 0808 	sub.w	r8, r7, r8
 8006a6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a6e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a72:	fa1f f888 	uxth.w	r8, r8
 8006a76:	141f      	asrs	r7, r3, #16
 8006a78:	454d      	cmp	r5, r9
 8006a7a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a7e:	f84a 3b04 	str.w	r3, [sl], #4
 8006a82:	d8e7      	bhi.n	8006a54 <__mdiff+0x7c>
 8006a84:	1b2b      	subs	r3, r5, r4
 8006a86:	3b15      	subs	r3, #21
 8006a88:	f023 0303 	bic.w	r3, r3, #3
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	3415      	adds	r4, #21
 8006a90:	42a5      	cmp	r5, r4
 8006a92:	bf38      	it	cc
 8006a94:	2304      	movcc	r3, #4
 8006a96:	4419      	add	r1, r3
 8006a98:	4473      	add	r3, lr
 8006a9a:	469e      	mov	lr, r3
 8006a9c:	460d      	mov	r5, r1
 8006a9e:	4565      	cmp	r5, ip
 8006aa0:	d30e      	bcc.n	8006ac0 <__mdiff+0xe8>
 8006aa2:	f10c 0203 	add.w	r2, ip, #3
 8006aa6:	1a52      	subs	r2, r2, r1
 8006aa8:	f022 0203 	bic.w	r2, r2, #3
 8006aac:	3903      	subs	r1, #3
 8006aae:	458c      	cmp	ip, r1
 8006ab0:	bf38      	it	cc
 8006ab2:	2200      	movcc	r2, #0
 8006ab4:	441a      	add	r2, r3
 8006ab6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006aba:	b17b      	cbz	r3, 8006adc <__mdiff+0x104>
 8006abc:	6106      	str	r6, [r0, #16]
 8006abe:	e7a5      	b.n	8006a0c <__mdiff+0x34>
 8006ac0:	f855 8b04 	ldr.w	r8, [r5], #4
 8006ac4:	fa17 f488 	uxtah	r4, r7, r8
 8006ac8:	1422      	asrs	r2, r4, #16
 8006aca:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006ace:	b2a4      	uxth	r4, r4
 8006ad0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006ad4:	f84e 4b04 	str.w	r4, [lr], #4
 8006ad8:	1417      	asrs	r7, r2, #16
 8006ada:	e7e0      	b.n	8006a9e <__mdiff+0xc6>
 8006adc:	3e01      	subs	r6, #1
 8006ade:	e7ea      	b.n	8006ab6 <__mdiff+0xde>
 8006ae0:	08007cb7 	.word	0x08007cb7
 8006ae4:	08007cc8 	.word	0x08007cc8

08006ae8 <__d2b>:
 8006ae8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006aec:	4689      	mov	r9, r1
 8006aee:	2101      	movs	r1, #1
 8006af0:	ec57 6b10 	vmov	r6, r7, d0
 8006af4:	4690      	mov	r8, r2
 8006af6:	f7ff fcd5 	bl	80064a4 <_Balloc>
 8006afa:	4604      	mov	r4, r0
 8006afc:	b930      	cbnz	r0, 8006b0c <__d2b+0x24>
 8006afe:	4602      	mov	r2, r0
 8006b00:	4b25      	ldr	r3, [pc, #148]	; (8006b98 <__d2b+0xb0>)
 8006b02:	4826      	ldr	r0, [pc, #152]	; (8006b9c <__d2b+0xb4>)
 8006b04:	f240 310a 	movw	r1, #778	; 0x30a
 8006b08:	f000 fa70 	bl	8006fec <__assert_func>
 8006b0c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006b10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b14:	bb35      	cbnz	r5, 8006b64 <__d2b+0x7c>
 8006b16:	2e00      	cmp	r6, #0
 8006b18:	9301      	str	r3, [sp, #4]
 8006b1a:	d028      	beq.n	8006b6e <__d2b+0x86>
 8006b1c:	4668      	mov	r0, sp
 8006b1e:	9600      	str	r6, [sp, #0]
 8006b20:	f7ff fd8c 	bl	800663c <__lo0bits>
 8006b24:	9900      	ldr	r1, [sp, #0]
 8006b26:	b300      	cbz	r0, 8006b6a <__d2b+0x82>
 8006b28:	9a01      	ldr	r2, [sp, #4]
 8006b2a:	f1c0 0320 	rsb	r3, r0, #32
 8006b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b32:	430b      	orrs	r3, r1
 8006b34:	40c2      	lsrs	r2, r0
 8006b36:	6163      	str	r3, [r4, #20]
 8006b38:	9201      	str	r2, [sp, #4]
 8006b3a:	9b01      	ldr	r3, [sp, #4]
 8006b3c:	61a3      	str	r3, [r4, #24]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	bf14      	ite	ne
 8006b42:	2202      	movne	r2, #2
 8006b44:	2201      	moveq	r2, #1
 8006b46:	6122      	str	r2, [r4, #16]
 8006b48:	b1d5      	cbz	r5, 8006b80 <__d2b+0x98>
 8006b4a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b4e:	4405      	add	r5, r0
 8006b50:	f8c9 5000 	str.w	r5, [r9]
 8006b54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b58:	f8c8 0000 	str.w	r0, [r8]
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	b003      	add	sp, #12
 8006b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b68:	e7d5      	b.n	8006b16 <__d2b+0x2e>
 8006b6a:	6161      	str	r1, [r4, #20]
 8006b6c:	e7e5      	b.n	8006b3a <__d2b+0x52>
 8006b6e:	a801      	add	r0, sp, #4
 8006b70:	f7ff fd64 	bl	800663c <__lo0bits>
 8006b74:	9b01      	ldr	r3, [sp, #4]
 8006b76:	6163      	str	r3, [r4, #20]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	6122      	str	r2, [r4, #16]
 8006b7c:	3020      	adds	r0, #32
 8006b7e:	e7e3      	b.n	8006b48 <__d2b+0x60>
 8006b80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b88:	f8c9 0000 	str.w	r0, [r9]
 8006b8c:	6918      	ldr	r0, [r3, #16]
 8006b8e:	f7ff fd35 	bl	80065fc <__hi0bits>
 8006b92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b96:	e7df      	b.n	8006b58 <__d2b+0x70>
 8006b98:	08007cb7 	.word	0x08007cb7
 8006b9c:	08007cc8 	.word	0x08007cc8

08006ba0 <_calloc_r>:
 8006ba0:	b513      	push	{r0, r1, r4, lr}
 8006ba2:	434a      	muls	r2, r1
 8006ba4:	4611      	mov	r1, r2
 8006ba6:	9201      	str	r2, [sp, #4]
 8006ba8:	f000 f85a 	bl	8006c60 <_malloc_r>
 8006bac:	4604      	mov	r4, r0
 8006bae:	b118      	cbz	r0, 8006bb8 <_calloc_r+0x18>
 8006bb0:	9a01      	ldr	r2, [sp, #4]
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	f7fe f93e 	bl	8004e34 <memset>
 8006bb8:	4620      	mov	r0, r4
 8006bba:	b002      	add	sp, #8
 8006bbc:	bd10      	pop	{r4, pc}
	...

08006bc0 <_free_r>:
 8006bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bc2:	2900      	cmp	r1, #0
 8006bc4:	d048      	beq.n	8006c58 <_free_r+0x98>
 8006bc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bca:	9001      	str	r0, [sp, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f1a1 0404 	sub.w	r4, r1, #4
 8006bd2:	bfb8      	it	lt
 8006bd4:	18e4      	addlt	r4, r4, r3
 8006bd6:	f000 fa65 	bl	80070a4 <__malloc_lock>
 8006bda:	4a20      	ldr	r2, [pc, #128]	; (8006c5c <_free_r+0x9c>)
 8006bdc:	9801      	ldr	r0, [sp, #4]
 8006bde:	6813      	ldr	r3, [r2, #0]
 8006be0:	4615      	mov	r5, r2
 8006be2:	b933      	cbnz	r3, 8006bf2 <_free_r+0x32>
 8006be4:	6063      	str	r3, [r4, #4]
 8006be6:	6014      	str	r4, [r2, #0]
 8006be8:	b003      	add	sp, #12
 8006bea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bee:	f000 ba5f 	b.w	80070b0 <__malloc_unlock>
 8006bf2:	42a3      	cmp	r3, r4
 8006bf4:	d90b      	bls.n	8006c0e <_free_r+0x4e>
 8006bf6:	6821      	ldr	r1, [r4, #0]
 8006bf8:	1862      	adds	r2, r4, r1
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	bf04      	itt	eq
 8006bfe:	681a      	ldreq	r2, [r3, #0]
 8006c00:	685b      	ldreq	r3, [r3, #4]
 8006c02:	6063      	str	r3, [r4, #4]
 8006c04:	bf04      	itt	eq
 8006c06:	1852      	addeq	r2, r2, r1
 8006c08:	6022      	streq	r2, [r4, #0]
 8006c0a:	602c      	str	r4, [r5, #0]
 8006c0c:	e7ec      	b.n	8006be8 <_free_r+0x28>
 8006c0e:	461a      	mov	r2, r3
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	b10b      	cbz	r3, 8006c18 <_free_r+0x58>
 8006c14:	42a3      	cmp	r3, r4
 8006c16:	d9fa      	bls.n	8006c0e <_free_r+0x4e>
 8006c18:	6811      	ldr	r1, [r2, #0]
 8006c1a:	1855      	adds	r5, r2, r1
 8006c1c:	42a5      	cmp	r5, r4
 8006c1e:	d10b      	bne.n	8006c38 <_free_r+0x78>
 8006c20:	6824      	ldr	r4, [r4, #0]
 8006c22:	4421      	add	r1, r4
 8006c24:	1854      	adds	r4, r2, r1
 8006c26:	42a3      	cmp	r3, r4
 8006c28:	6011      	str	r1, [r2, #0]
 8006c2a:	d1dd      	bne.n	8006be8 <_free_r+0x28>
 8006c2c:	681c      	ldr	r4, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	6053      	str	r3, [r2, #4]
 8006c32:	4421      	add	r1, r4
 8006c34:	6011      	str	r1, [r2, #0]
 8006c36:	e7d7      	b.n	8006be8 <_free_r+0x28>
 8006c38:	d902      	bls.n	8006c40 <_free_r+0x80>
 8006c3a:	230c      	movs	r3, #12
 8006c3c:	6003      	str	r3, [r0, #0]
 8006c3e:	e7d3      	b.n	8006be8 <_free_r+0x28>
 8006c40:	6825      	ldr	r5, [r4, #0]
 8006c42:	1961      	adds	r1, r4, r5
 8006c44:	428b      	cmp	r3, r1
 8006c46:	bf04      	itt	eq
 8006c48:	6819      	ldreq	r1, [r3, #0]
 8006c4a:	685b      	ldreq	r3, [r3, #4]
 8006c4c:	6063      	str	r3, [r4, #4]
 8006c4e:	bf04      	itt	eq
 8006c50:	1949      	addeq	r1, r1, r5
 8006c52:	6021      	streq	r1, [r4, #0]
 8006c54:	6054      	str	r4, [r2, #4]
 8006c56:	e7c7      	b.n	8006be8 <_free_r+0x28>
 8006c58:	b003      	add	sp, #12
 8006c5a:	bd30      	pop	{r4, r5, pc}
 8006c5c:	200001fc 	.word	0x200001fc

08006c60 <_malloc_r>:
 8006c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c62:	1ccd      	adds	r5, r1, #3
 8006c64:	f025 0503 	bic.w	r5, r5, #3
 8006c68:	3508      	adds	r5, #8
 8006c6a:	2d0c      	cmp	r5, #12
 8006c6c:	bf38      	it	cc
 8006c6e:	250c      	movcc	r5, #12
 8006c70:	2d00      	cmp	r5, #0
 8006c72:	4606      	mov	r6, r0
 8006c74:	db01      	blt.n	8006c7a <_malloc_r+0x1a>
 8006c76:	42a9      	cmp	r1, r5
 8006c78:	d903      	bls.n	8006c82 <_malloc_r+0x22>
 8006c7a:	230c      	movs	r3, #12
 8006c7c:	6033      	str	r3, [r6, #0]
 8006c7e:	2000      	movs	r0, #0
 8006c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c82:	f000 fa0f 	bl	80070a4 <__malloc_lock>
 8006c86:	4921      	ldr	r1, [pc, #132]	; (8006d0c <_malloc_r+0xac>)
 8006c88:	680a      	ldr	r2, [r1, #0]
 8006c8a:	4614      	mov	r4, r2
 8006c8c:	b99c      	cbnz	r4, 8006cb6 <_malloc_r+0x56>
 8006c8e:	4f20      	ldr	r7, [pc, #128]	; (8006d10 <_malloc_r+0xb0>)
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	b923      	cbnz	r3, 8006c9e <_malloc_r+0x3e>
 8006c94:	4621      	mov	r1, r4
 8006c96:	4630      	mov	r0, r6
 8006c98:	f000 f998 	bl	8006fcc <_sbrk_r>
 8006c9c:	6038      	str	r0, [r7, #0]
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	f000 f993 	bl	8006fcc <_sbrk_r>
 8006ca6:	1c43      	adds	r3, r0, #1
 8006ca8:	d123      	bne.n	8006cf2 <_malloc_r+0x92>
 8006caa:	230c      	movs	r3, #12
 8006cac:	6033      	str	r3, [r6, #0]
 8006cae:	4630      	mov	r0, r6
 8006cb0:	f000 f9fe 	bl	80070b0 <__malloc_unlock>
 8006cb4:	e7e3      	b.n	8006c7e <_malloc_r+0x1e>
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	1b5b      	subs	r3, r3, r5
 8006cba:	d417      	bmi.n	8006cec <_malloc_r+0x8c>
 8006cbc:	2b0b      	cmp	r3, #11
 8006cbe:	d903      	bls.n	8006cc8 <_malloc_r+0x68>
 8006cc0:	6023      	str	r3, [r4, #0]
 8006cc2:	441c      	add	r4, r3
 8006cc4:	6025      	str	r5, [r4, #0]
 8006cc6:	e004      	b.n	8006cd2 <_malloc_r+0x72>
 8006cc8:	6863      	ldr	r3, [r4, #4]
 8006cca:	42a2      	cmp	r2, r4
 8006ccc:	bf0c      	ite	eq
 8006cce:	600b      	streq	r3, [r1, #0]
 8006cd0:	6053      	strne	r3, [r2, #4]
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f000 f9ec 	bl	80070b0 <__malloc_unlock>
 8006cd8:	f104 000b 	add.w	r0, r4, #11
 8006cdc:	1d23      	adds	r3, r4, #4
 8006cde:	f020 0007 	bic.w	r0, r0, #7
 8006ce2:	1ac2      	subs	r2, r0, r3
 8006ce4:	d0cc      	beq.n	8006c80 <_malloc_r+0x20>
 8006ce6:	1a1b      	subs	r3, r3, r0
 8006ce8:	50a3      	str	r3, [r4, r2]
 8006cea:	e7c9      	b.n	8006c80 <_malloc_r+0x20>
 8006cec:	4622      	mov	r2, r4
 8006cee:	6864      	ldr	r4, [r4, #4]
 8006cf0:	e7cc      	b.n	8006c8c <_malloc_r+0x2c>
 8006cf2:	1cc4      	adds	r4, r0, #3
 8006cf4:	f024 0403 	bic.w	r4, r4, #3
 8006cf8:	42a0      	cmp	r0, r4
 8006cfa:	d0e3      	beq.n	8006cc4 <_malloc_r+0x64>
 8006cfc:	1a21      	subs	r1, r4, r0
 8006cfe:	4630      	mov	r0, r6
 8006d00:	f000 f964 	bl	8006fcc <_sbrk_r>
 8006d04:	3001      	adds	r0, #1
 8006d06:	d1dd      	bne.n	8006cc4 <_malloc_r+0x64>
 8006d08:	e7cf      	b.n	8006caa <_malloc_r+0x4a>
 8006d0a:	bf00      	nop
 8006d0c:	200001fc 	.word	0x200001fc
 8006d10:	20000200 	.word	0x20000200

08006d14 <__ssputs_r>:
 8006d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d18:	688e      	ldr	r6, [r1, #8]
 8006d1a:	429e      	cmp	r6, r3
 8006d1c:	4682      	mov	sl, r0
 8006d1e:	460c      	mov	r4, r1
 8006d20:	4690      	mov	r8, r2
 8006d22:	461f      	mov	r7, r3
 8006d24:	d838      	bhi.n	8006d98 <__ssputs_r+0x84>
 8006d26:	898a      	ldrh	r2, [r1, #12]
 8006d28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d2c:	d032      	beq.n	8006d94 <__ssputs_r+0x80>
 8006d2e:	6825      	ldr	r5, [r4, #0]
 8006d30:	6909      	ldr	r1, [r1, #16]
 8006d32:	eba5 0901 	sub.w	r9, r5, r1
 8006d36:	6965      	ldr	r5, [r4, #20]
 8006d38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d40:	3301      	adds	r3, #1
 8006d42:	444b      	add	r3, r9
 8006d44:	106d      	asrs	r5, r5, #1
 8006d46:	429d      	cmp	r5, r3
 8006d48:	bf38      	it	cc
 8006d4a:	461d      	movcc	r5, r3
 8006d4c:	0553      	lsls	r3, r2, #21
 8006d4e:	d531      	bpl.n	8006db4 <__ssputs_r+0xa0>
 8006d50:	4629      	mov	r1, r5
 8006d52:	f7ff ff85 	bl	8006c60 <_malloc_r>
 8006d56:	4606      	mov	r6, r0
 8006d58:	b950      	cbnz	r0, 8006d70 <__ssputs_r+0x5c>
 8006d5a:	230c      	movs	r3, #12
 8006d5c:	f8ca 3000 	str.w	r3, [sl]
 8006d60:	89a3      	ldrh	r3, [r4, #12]
 8006d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d66:	81a3      	strh	r3, [r4, #12]
 8006d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d70:	6921      	ldr	r1, [r4, #16]
 8006d72:	464a      	mov	r2, r9
 8006d74:	f7ff fb88 	bl	8006488 <memcpy>
 8006d78:	89a3      	ldrh	r3, [r4, #12]
 8006d7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d82:	81a3      	strh	r3, [r4, #12]
 8006d84:	6126      	str	r6, [r4, #16]
 8006d86:	6165      	str	r5, [r4, #20]
 8006d88:	444e      	add	r6, r9
 8006d8a:	eba5 0509 	sub.w	r5, r5, r9
 8006d8e:	6026      	str	r6, [r4, #0]
 8006d90:	60a5      	str	r5, [r4, #8]
 8006d92:	463e      	mov	r6, r7
 8006d94:	42be      	cmp	r6, r7
 8006d96:	d900      	bls.n	8006d9a <__ssputs_r+0x86>
 8006d98:	463e      	mov	r6, r7
 8006d9a:	4632      	mov	r2, r6
 8006d9c:	6820      	ldr	r0, [r4, #0]
 8006d9e:	4641      	mov	r1, r8
 8006da0:	f000 f966 	bl	8007070 <memmove>
 8006da4:	68a3      	ldr	r3, [r4, #8]
 8006da6:	6822      	ldr	r2, [r4, #0]
 8006da8:	1b9b      	subs	r3, r3, r6
 8006daa:	4432      	add	r2, r6
 8006dac:	60a3      	str	r3, [r4, #8]
 8006dae:	6022      	str	r2, [r4, #0]
 8006db0:	2000      	movs	r0, #0
 8006db2:	e7db      	b.n	8006d6c <__ssputs_r+0x58>
 8006db4:	462a      	mov	r2, r5
 8006db6:	f000 f981 	bl	80070bc <_realloc_r>
 8006dba:	4606      	mov	r6, r0
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d1e1      	bne.n	8006d84 <__ssputs_r+0x70>
 8006dc0:	6921      	ldr	r1, [r4, #16]
 8006dc2:	4650      	mov	r0, sl
 8006dc4:	f7ff fefc 	bl	8006bc0 <_free_r>
 8006dc8:	e7c7      	b.n	8006d5a <__ssputs_r+0x46>
	...

08006dcc <_svfiprintf_r>:
 8006dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd0:	4698      	mov	r8, r3
 8006dd2:	898b      	ldrh	r3, [r1, #12]
 8006dd4:	061b      	lsls	r3, r3, #24
 8006dd6:	b09d      	sub	sp, #116	; 0x74
 8006dd8:	4607      	mov	r7, r0
 8006dda:	460d      	mov	r5, r1
 8006ddc:	4614      	mov	r4, r2
 8006dde:	d50e      	bpl.n	8006dfe <_svfiprintf_r+0x32>
 8006de0:	690b      	ldr	r3, [r1, #16]
 8006de2:	b963      	cbnz	r3, 8006dfe <_svfiprintf_r+0x32>
 8006de4:	2140      	movs	r1, #64	; 0x40
 8006de6:	f7ff ff3b 	bl	8006c60 <_malloc_r>
 8006dea:	6028      	str	r0, [r5, #0]
 8006dec:	6128      	str	r0, [r5, #16]
 8006dee:	b920      	cbnz	r0, 8006dfa <_svfiprintf_r+0x2e>
 8006df0:	230c      	movs	r3, #12
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006df8:	e0d1      	b.n	8006f9e <_svfiprintf_r+0x1d2>
 8006dfa:	2340      	movs	r3, #64	; 0x40
 8006dfc:	616b      	str	r3, [r5, #20]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	9309      	str	r3, [sp, #36]	; 0x24
 8006e02:	2320      	movs	r3, #32
 8006e04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e08:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e0c:	2330      	movs	r3, #48	; 0x30
 8006e0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006fb8 <_svfiprintf_r+0x1ec>
 8006e12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e16:	f04f 0901 	mov.w	r9, #1
 8006e1a:	4623      	mov	r3, r4
 8006e1c:	469a      	mov	sl, r3
 8006e1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e22:	b10a      	cbz	r2, 8006e28 <_svfiprintf_r+0x5c>
 8006e24:	2a25      	cmp	r2, #37	; 0x25
 8006e26:	d1f9      	bne.n	8006e1c <_svfiprintf_r+0x50>
 8006e28:	ebba 0b04 	subs.w	fp, sl, r4
 8006e2c:	d00b      	beq.n	8006e46 <_svfiprintf_r+0x7a>
 8006e2e:	465b      	mov	r3, fp
 8006e30:	4622      	mov	r2, r4
 8006e32:	4629      	mov	r1, r5
 8006e34:	4638      	mov	r0, r7
 8006e36:	f7ff ff6d 	bl	8006d14 <__ssputs_r>
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	f000 80aa 	beq.w	8006f94 <_svfiprintf_r+0x1c8>
 8006e40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e42:	445a      	add	r2, fp
 8006e44:	9209      	str	r2, [sp, #36]	; 0x24
 8006e46:	f89a 3000 	ldrb.w	r3, [sl]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 80a2 	beq.w	8006f94 <_svfiprintf_r+0x1c8>
 8006e50:	2300      	movs	r3, #0
 8006e52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e5a:	f10a 0a01 	add.w	sl, sl, #1
 8006e5e:	9304      	str	r3, [sp, #16]
 8006e60:	9307      	str	r3, [sp, #28]
 8006e62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e66:	931a      	str	r3, [sp, #104]	; 0x68
 8006e68:	4654      	mov	r4, sl
 8006e6a:	2205      	movs	r2, #5
 8006e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e70:	4851      	ldr	r0, [pc, #324]	; (8006fb8 <_svfiprintf_r+0x1ec>)
 8006e72:	f7f9 f9bd 	bl	80001f0 <memchr>
 8006e76:	9a04      	ldr	r2, [sp, #16]
 8006e78:	b9d8      	cbnz	r0, 8006eb2 <_svfiprintf_r+0xe6>
 8006e7a:	06d0      	lsls	r0, r2, #27
 8006e7c:	bf44      	itt	mi
 8006e7e:	2320      	movmi	r3, #32
 8006e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e84:	0711      	lsls	r1, r2, #28
 8006e86:	bf44      	itt	mi
 8006e88:	232b      	movmi	r3, #43	; 0x2b
 8006e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8006e92:	2b2a      	cmp	r3, #42	; 0x2a
 8006e94:	d015      	beq.n	8006ec2 <_svfiprintf_r+0xf6>
 8006e96:	9a07      	ldr	r2, [sp, #28]
 8006e98:	4654      	mov	r4, sl
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	f04f 0c0a 	mov.w	ip, #10
 8006ea0:	4621      	mov	r1, r4
 8006ea2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ea6:	3b30      	subs	r3, #48	; 0x30
 8006ea8:	2b09      	cmp	r3, #9
 8006eaa:	d94e      	bls.n	8006f4a <_svfiprintf_r+0x17e>
 8006eac:	b1b0      	cbz	r0, 8006edc <_svfiprintf_r+0x110>
 8006eae:	9207      	str	r2, [sp, #28]
 8006eb0:	e014      	b.n	8006edc <_svfiprintf_r+0x110>
 8006eb2:	eba0 0308 	sub.w	r3, r0, r8
 8006eb6:	fa09 f303 	lsl.w	r3, r9, r3
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	9304      	str	r3, [sp, #16]
 8006ebe:	46a2      	mov	sl, r4
 8006ec0:	e7d2      	b.n	8006e68 <_svfiprintf_r+0x9c>
 8006ec2:	9b03      	ldr	r3, [sp, #12]
 8006ec4:	1d19      	adds	r1, r3, #4
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	9103      	str	r1, [sp, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	bfbb      	ittet	lt
 8006ece:	425b      	neglt	r3, r3
 8006ed0:	f042 0202 	orrlt.w	r2, r2, #2
 8006ed4:	9307      	strge	r3, [sp, #28]
 8006ed6:	9307      	strlt	r3, [sp, #28]
 8006ed8:	bfb8      	it	lt
 8006eda:	9204      	strlt	r2, [sp, #16]
 8006edc:	7823      	ldrb	r3, [r4, #0]
 8006ede:	2b2e      	cmp	r3, #46	; 0x2e
 8006ee0:	d10c      	bne.n	8006efc <_svfiprintf_r+0x130>
 8006ee2:	7863      	ldrb	r3, [r4, #1]
 8006ee4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ee6:	d135      	bne.n	8006f54 <_svfiprintf_r+0x188>
 8006ee8:	9b03      	ldr	r3, [sp, #12]
 8006eea:	1d1a      	adds	r2, r3, #4
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	9203      	str	r2, [sp, #12]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	bfb8      	it	lt
 8006ef4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ef8:	3402      	adds	r4, #2
 8006efa:	9305      	str	r3, [sp, #20]
 8006efc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006fc8 <_svfiprintf_r+0x1fc>
 8006f00:	7821      	ldrb	r1, [r4, #0]
 8006f02:	2203      	movs	r2, #3
 8006f04:	4650      	mov	r0, sl
 8006f06:	f7f9 f973 	bl	80001f0 <memchr>
 8006f0a:	b140      	cbz	r0, 8006f1e <_svfiprintf_r+0x152>
 8006f0c:	2340      	movs	r3, #64	; 0x40
 8006f0e:	eba0 000a 	sub.w	r0, r0, sl
 8006f12:	fa03 f000 	lsl.w	r0, r3, r0
 8006f16:	9b04      	ldr	r3, [sp, #16]
 8006f18:	4303      	orrs	r3, r0
 8006f1a:	3401      	adds	r4, #1
 8006f1c:	9304      	str	r3, [sp, #16]
 8006f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f22:	4826      	ldr	r0, [pc, #152]	; (8006fbc <_svfiprintf_r+0x1f0>)
 8006f24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f28:	2206      	movs	r2, #6
 8006f2a:	f7f9 f961 	bl	80001f0 <memchr>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	d038      	beq.n	8006fa4 <_svfiprintf_r+0x1d8>
 8006f32:	4b23      	ldr	r3, [pc, #140]	; (8006fc0 <_svfiprintf_r+0x1f4>)
 8006f34:	bb1b      	cbnz	r3, 8006f7e <_svfiprintf_r+0x1b2>
 8006f36:	9b03      	ldr	r3, [sp, #12]
 8006f38:	3307      	adds	r3, #7
 8006f3a:	f023 0307 	bic.w	r3, r3, #7
 8006f3e:	3308      	adds	r3, #8
 8006f40:	9303      	str	r3, [sp, #12]
 8006f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f44:	4433      	add	r3, r6
 8006f46:	9309      	str	r3, [sp, #36]	; 0x24
 8006f48:	e767      	b.n	8006e1a <_svfiprintf_r+0x4e>
 8006f4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f4e:	460c      	mov	r4, r1
 8006f50:	2001      	movs	r0, #1
 8006f52:	e7a5      	b.n	8006ea0 <_svfiprintf_r+0xd4>
 8006f54:	2300      	movs	r3, #0
 8006f56:	3401      	adds	r4, #1
 8006f58:	9305      	str	r3, [sp, #20]
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	f04f 0c0a 	mov.w	ip, #10
 8006f60:	4620      	mov	r0, r4
 8006f62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f66:	3a30      	subs	r2, #48	; 0x30
 8006f68:	2a09      	cmp	r2, #9
 8006f6a:	d903      	bls.n	8006f74 <_svfiprintf_r+0x1a8>
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d0c5      	beq.n	8006efc <_svfiprintf_r+0x130>
 8006f70:	9105      	str	r1, [sp, #20]
 8006f72:	e7c3      	b.n	8006efc <_svfiprintf_r+0x130>
 8006f74:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f78:	4604      	mov	r4, r0
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e7f0      	b.n	8006f60 <_svfiprintf_r+0x194>
 8006f7e:	ab03      	add	r3, sp, #12
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	462a      	mov	r2, r5
 8006f84:	4b0f      	ldr	r3, [pc, #60]	; (8006fc4 <_svfiprintf_r+0x1f8>)
 8006f86:	a904      	add	r1, sp, #16
 8006f88:	4638      	mov	r0, r7
 8006f8a:	f7fd fffb 	bl	8004f84 <_printf_float>
 8006f8e:	1c42      	adds	r2, r0, #1
 8006f90:	4606      	mov	r6, r0
 8006f92:	d1d6      	bne.n	8006f42 <_svfiprintf_r+0x176>
 8006f94:	89ab      	ldrh	r3, [r5, #12]
 8006f96:	065b      	lsls	r3, r3, #25
 8006f98:	f53f af2c 	bmi.w	8006df4 <_svfiprintf_r+0x28>
 8006f9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f9e:	b01d      	add	sp, #116	; 0x74
 8006fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa4:	ab03      	add	r3, sp, #12
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	462a      	mov	r2, r5
 8006faa:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <_svfiprintf_r+0x1f8>)
 8006fac:	a904      	add	r1, sp, #16
 8006fae:	4638      	mov	r0, r7
 8006fb0:	f7fe fa8c 	bl	80054cc <_printf_i>
 8006fb4:	e7eb      	b.n	8006f8e <_svfiprintf_r+0x1c2>
 8006fb6:	bf00      	nop
 8006fb8:	08007e24 	.word	0x08007e24
 8006fbc:	08007e2e 	.word	0x08007e2e
 8006fc0:	08004f85 	.word	0x08004f85
 8006fc4:	08006d15 	.word	0x08006d15
 8006fc8:	08007e2a 	.word	0x08007e2a

08006fcc <_sbrk_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4d06      	ldr	r5, [pc, #24]	; (8006fe8 <_sbrk_r+0x1c>)
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	4608      	mov	r0, r1
 8006fd6:	602b      	str	r3, [r5, #0]
 8006fd8:	f7fa fc9a 	bl	8001910 <_sbrk>
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	d102      	bne.n	8006fe6 <_sbrk_r+0x1a>
 8006fe0:	682b      	ldr	r3, [r5, #0]
 8006fe2:	b103      	cbz	r3, 8006fe6 <_sbrk_r+0x1a>
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	bd38      	pop	{r3, r4, r5, pc}
 8006fe8:	2000035c 	.word	0x2000035c

08006fec <__assert_func>:
 8006fec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fee:	4614      	mov	r4, r2
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	4b09      	ldr	r3, [pc, #36]	; (8007018 <__assert_func+0x2c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4605      	mov	r5, r0
 8006ff8:	68d8      	ldr	r0, [r3, #12]
 8006ffa:	b14c      	cbz	r4, 8007010 <__assert_func+0x24>
 8006ffc:	4b07      	ldr	r3, [pc, #28]	; (800701c <__assert_func+0x30>)
 8006ffe:	9100      	str	r1, [sp, #0]
 8007000:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007004:	4906      	ldr	r1, [pc, #24]	; (8007020 <__assert_func+0x34>)
 8007006:	462b      	mov	r3, r5
 8007008:	f000 f80e 	bl	8007028 <fiprintf>
 800700c:	f000 faa4 	bl	8007558 <abort>
 8007010:	4b04      	ldr	r3, [pc, #16]	; (8007024 <__assert_func+0x38>)
 8007012:	461c      	mov	r4, r3
 8007014:	e7f3      	b.n	8006ffe <__assert_func+0x12>
 8007016:	bf00      	nop
 8007018:	2000000c 	.word	0x2000000c
 800701c:	08007e35 	.word	0x08007e35
 8007020:	08007e42 	.word	0x08007e42
 8007024:	08007e70 	.word	0x08007e70

08007028 <fiprintf>:
 8007028:	b40e      	push	{r1, r2, r3}
 800702a:	b503      	push	{r0, r1, lr}
 800702c:	4601      	mov	r1, r0
 800702e:	ab03      	add	r3, sp, #12
 8007030:	4805      	ldr	r0, [pc, #20]	; (8007048 <fiprintf+0x20>)
 8007032:	f853 2b04 	ldr.w	r2, [r3], #4
 8007036:	6800      	ldr	r0, [r0, #0]
 8007038:	9301      	str	r3, [sp, #4]
 800703a:	f000 f88f 	bl	800715c <_vfiprintf_r>
 800703e:	b002      	add	sp, #8
 8007040:	f85d eb04 	ldr.w	lr, [sp], #4
 8007044:	b003      	add	sp, #12
 8007046:	4770      	bx	lr
 8007048:	2000000c 	.word	0x2000000c

0800704c <__ascii_mbtowc>:
 800704c:	b082      	sub	sp, #8
 800704e:	b901      	cbnz	r1, 8007052 <__ascii_mbtowc+0x6>
 8007050:	a901      	add	r1, sp, #4
 8007052:	b142      	cbz	r2, 8007066 <__ascii_mbtowc+0x1a>
 8007054:	b14b      	cbz	r3, 800706a <__ascii_mbtowc+0x1e>
 8007056:	7813      	ldrb	r3, [r2, #0]
 8007058:	600b      	str	r3, [r1, #0]
 800705a:	7812      	ldrb	r2, [r2, #0]
 800705c:	1e10      	subs	r0, r2, #0
 800705e:	bf18      	it	ne
 8007060:	2001      	movne	r0, #1
 8007062:	b002      	add	sp, #8
 8007064:	4770      	bx	lr
 8007066:	4610      	mov	r0, r2
 8007068:	e7fb      	b.n	8007062 <__ascii_mbtowc+0x16>
 800706a:	f06f 0001 	mvn.w	r0, #1
 800706e:	e7f8      	b.n	8007062 <__ascii_mbtowc+0x16>

08007070 <memmove>:
 8007070:	4288      	cmp	r0, r1
 8007072:	b510      	push	{r4, lr}
 8007074:	eb01 0402 	add.w	r4, r1, r2
 8007078:	d902      	bls.n	8007080 <memmove+0x10>
 800707a:	4284      	cmp	r4, r0
 800707c:	4623      	mov	r3, r4
 800707e:	d807      	bhi.n	8007090 <memmove+0x20>
 8007080:	1e43      	subs	r3, r0, #1
 8007082:	42a1      	cmp	r1, r4
 8007084:	d008      	beq.n	8007098 <memmove+0x28>
 8007086:	f811 2b01 	ldrb.w	r2, [r1], #1
 800708a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800708e:	e7f8      	b.n	8007082 <memmove+0x12>
 8007090:	4402      	add	r2, r0
 8007092:	4601      	mov	r1, r0
 8007094:	428a      	cmp	r2, r1
 8007096:	d100      	bne.n	800709a <memmove+0x2a>
 8007098:	bd10      	pop	{r4, pc}
 800709a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800709e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070a2:	e7f7      	b.n	8007094 <memmove+0x24>

080070a4 <__malloc_lock>:
 80070a4:	4801      	ldr	r0, [pc, #4]	; (80070ac <__malloc_lock+0x8>)
 80070a6:	f000 bc17 	b.w	80078d8 <__retarget_lock_acquire_recursive>
 80070aa:	bf00      	nop
 80070ac:	20000364 	.word	0x20000364

080070b0 <__malloc_unlock>:
 80070b0:	4801      	ldr	r0, [pc, #4]	; (80070b8 <__malloc_unlock+0x8>)
 80070b2:	f000 bc12 	b.w	80078da <__retarget_lock_release_recursive>
 80070b6:	bf00      	nop
 80070b8:	20000364 	.word	0x20000364

080070bc <_realloc_r>:
 80070bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070be:	4607      	mov	r7, r0
 80070c0:	4614      	mov	r4, r2
 80070c2:	460e      	mov	r6, r1
 80070c4:	b921      	cbnz	r1, 80070d0 <_realloc_r+0x14>
 80070c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80070ca:	4611      	mov	r1, r2
 80070cc:	f7ff bdc8 	b.w	8006c60 <_malloc_r>
 80070d0:	b922      	cbnz	r2, 80070dc <_realloc_r+0x20>
 80070d2:	f7ff fd75 	bl	8006bc0 <_free_r>
 80070d6:	4625      	mov	r5, r4
 80070d8:	4628      	mov	r0, r5
 80070da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070dc:	f000 fc62 	bl	80079a4 <_malloc_usable_size_r>
 80070e0:	42a0      	cmp	r0, r4
 80070e2:	d20f      	bcs.n	8007104 <_realloc_r+0x48>
 80070e4:	4621      	mov	r1, r4
 80070e6:	4638      	mov	r0, r7
 80070e8:	f7ff fdba 	bl	8006c60 <_malloc_r>
 80070ec:	4605      	mov	r5, r0
 80070ee:	2800      	cmp	r0, #0
 80070f0:	d0f2      	beq.n	80070d8 <_realloc_r+0x1c>
 80070f2:	4631      	mov	r1, r6
 80070f4:	4622      	mov	r2, r4
 80070f6:	f7ff f9c7 	bl	8006488 <memcpy>
 80070fa:	4631      	mov	r1, r6
 80070fc:	4638      	mov	r0, r7
 80070fe:	f7ff fd5f 	bl	8006bc0 <_free_r>
 8007102:	e7e9      	b.n	80070d8 <_realloc_r+0x1c>
 8007104:	4635      	mov	r5, r6
 8007106:	e7e7      	b.n	80070d8 <_realloc_r+0x1c>

08007108 <__sfputc_r>:
 8007108:	6893      	ldr	r3, [r2, #8]
 800710a:	3b01      	subs	r3, #1
 800710c:	2b00      	cmp	r3, #0
 800710e:	b410      	push	{r4}
 8007110:	6093      	str	r3, [r2, #8]
 8007112:	da08      	bge.n	8007126 <__sfputc_r+0x1e>
 8007114:	6994      	ldr	r4, [r2, #24]
 8007116:	42a3      	cmp	r3, r4
 8007118:	db01      	blt.n	800711e <__sfputc_r+0x16>
 800711a:	290a      	cmp	r1, #10
 800711c:	d103      	bne.n	8007126 <__sfputc_r+0x1e>
 800711e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007122:	f000 b94b 	b.w	80073bc <__swbuf_r>
 8007126:	6813      	ldr	r3, [r2, #0]
 8007128:	1c58      	adds	r0, r3, #1
 800712a:	6010      	str	r0, [r2, #0]
 800712c:	7019      	strb	r1, [r3, #0]
 800712e:	4608      	mov	r0, r1
 8007130:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007134:	4770      	bx	lr

08007136 <__sfputs_r>:
 8007136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007138:	4606      	mov	r6, r0
 800713a:	460f      	mov	r7, r1
 800713c:	4614      	mov	r4, r2
 800713e:	18d5      	adds	r5, r2, r3
 8007140:	42ac      	cmp	r4, r5
 8007142:	d101      	bne.n	8007148 <__sfputs_r+0x12>
 8007144:	2000      	movs	r0, #0
 8007146:	e007      	b.n	8007158 <__sfputs_r+0x22>
 8007148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800714c:	463a      	mov	r2, r7
 800714e:	4630      	mov	r0, r6
 8007150:	f7ff ffda 	bl	8007108 <__sfputc_r>
 8007154:	1c43      	adds	r3, r0, #1
 8007156:	d1f3      	bne.n	8007140 <__sfputs_r+0xa>
 8007158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800715c <_vfiprintf_r>:
 800715c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007160:	460d      	mov	r5, r1
 8007162:	b09d      	sub	sp, #116	; 0x74
 8007164:	4614      	mov	r4, r2
 8007166:	4698      	mov	r8, r3
 8007168:	4606      	mov	r6, r0
 800716a:	b118      	cbz	r0, 8007174 <_vfiprintf_r+0x18>
 800716c:	6983      	ldr	r3, [r0, #24]
 800716e:	b90b      	cbnz	r3, 8007174 <_vfiprintf_r+0x18>
 8007170:	f000 fb14 	bl	800779c <__sinit>
 8007174:	4b89      	ldr	r3, [pc, #548]	; (800739c <_vfiprintf_r+0x240>)
 8007176:	429d      	cmp	r5, r3
 8007178:	d11b      	bne.n	80071b2 <_vfiprintf_r+0x56>
 800717a:	6875      	ldr	r5, [r6, #4]
 800717c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800717e:	07d9      	lsls	r1, r3, #31
 8007180:	d405      	bmi.n	800718e <_vfiprintf_r+0x32>
 8007182:	89ab      	ldrh	r3, [r5, #12]
 8007184:	059a      	lsls	r2, r3, #22
 8007186:	d402      	bmi.n	800718e <_vfiprintf_r+0x32>
 8007188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800718a:	f000 fba5 	bl	80078d8 <__retarget_lock_acquire_recursive>
 800718e:	89ab      	ldrh	r3, [r5, #12]
 8007190:	071b      	lsls	r3, r3, #28
 8007192:	d501      	bpl.n	8007198 <_vfiprintf_r+0x3c>
 8007194:	692b      	ldr	r3, [r5, #16]
 8007196:	b9eb      	cbnz	r3, 80071d4 <_vfiprintf_r+0x78>
 8007198:	4629      	mov	r1, r5
 800719a:	4630      	mov	r0, r6
 800719c:	f000 f96e 	bl	800747c <__swsetup_r>
 80071a0:	b1c0      	cbz	r0, 80071d4 <_vfiprintf_r+0x78>
 80071a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071a4:	07dc      	lsls	r4, r3, #31
 80071a6:	d50e      	bpl.n	80071c6 <_vfiprintf_r+0x6a>
 80071a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071ac:	b01d      	add	sp, #116	; 0x74
 80071ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b2:	4b7b      	ldr	r3, [pc, #492]	; (80073a0 <_vfiprintf_r+0x244>)
 80071b4:	429d      	cmp	r5, r3
 80071b6:	d101      	bne.n	80071bc <_vfiprintf_r+0x60>
 80071b8:	68b5      	ldr	r5, [r6, #8]
 80071ba:	e7df      	b.n	800717c <_vfiprintf_r+0x20>
 80071bc:	4b79      	ldr	r3, [pc, #484]	; (80073a4 <_vfiprintf_r+0x248>)
 80071be:	429d      	cmp	r5, r3
 80071c0:	bf08      	it	eq
 80071c2:	68f5      	ldreq	r5, [r6, #12]
 80071c4:	e7da      	b.n	800717c <_vfiprintf_r+0x20>
 80071c6:	89ab      	ldrh	r3, [r5, #12]
 80071c8:	0598      	lsls	r0, r3, #22
 80071ca:	d4ed      	bmi.n	80071a8 <_vfiprintf_r+0x4c>
 80071cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071ce:	f000 fb84 	bl	80078da <__retarget_lock_release_recursive>
 80071d2:	e7e9      	b.n	80071a8 <_vfiprintf_r+0x4c>
 80071d4:	2300      	movs	r3, #0
 80071d6:	9309      	str	r3, [sp, #36]	; 0x24
 80071d8:	2320      	movs	r3, #32
 80071da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071de:	f8cd 800c 	str.w	r8, [sp, #12]
 80071e2:	2330      	movs	r3, #48	; 0x30
 80071e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80073a8 <_vfiprintf_r+0x24c>
 80071e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071ec:	f04f 0901 	mov.w	r9, #1
 80071f0:	4623      	mov	r3, r4
 80071f2:	469a      	mov	sl, r3
 80071f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071f8:	b10a      	cbz	r2, 80071fe <_vfiprintf_r+0xa2>
 80071fa:	2a25      	cmp	r2, #37	; 0x25
 80071fc:	d1f9      	bne.n	80071f2 <_vfiprintf_r+0x96>
 80071fe:	ebba 0b04 	subs.w	fp, sl, r4
 8007202:	d00b      	beq.n	800721c <_vfiprintf_r+0xc0>
 8007204:	465b      	mov	r3, fp
 8007206:	4622      	mov	r2, r4
 8007208:	4629      	mov	r1, r5
 800720a:	4630      	mov	r0, r6
 800720c:	f7ff ff93 	bl	8007136 <__sfputs_r>
 8007210:	3001      	adds	r0, #1
 8007212:	f000 80aa 	beq.w	800736a <_vfiprintf_r+0x20e>
 8007216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007218:	445a      	add	r2, fp
 800721a:	9209      	str	r2, [sp, #36]	; 0x24
 800721c:	f89a 3000 	ldrb.w	r3, [sl]
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 80a2 	beq.w	800736a <_vfiprintf_r+0x20e>
 8007226:	2300      	movs	r3, #0
 8007228:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800722c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007230:	f10a 0a01 	add.w	sl, sl, #1
 8007234:	9304      	str	r3, [sp, #16]
 8007236:	9307      	str	r3, [sp, #28]
 8007238:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800723c:	931a      	str	r3, [sp, #104]	; 0x68
 800723e:	4654      	mov	r4, sl
 8007240:	2205      	movs	r2, #5
 8007242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007246:	4858      	ldr	r0, [pc, #352]	; (80073a8 <_vfiprintf_r+0x24c>)
 8007248:	f7f8 ffd2 	bl	80001f0 <memchr>
 800724c:	9a04      	ldr	r2, [sp, #16]
 800724e:	b9d8      	cbnz	r0, 8007288 <_vfiprintf_r+0x12c>
 8007250:	06d1      	lsls	r1, r2, #27
 8007252:	bf44      	itt	mi
 8007254:	2320      	movmi	r3, #32
 8007256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800725a:	0713      	lsls	r3, r2, #28
 800725c:	bf44      	itt	mi
 800725e:	232b      	movmi	r3, #43	; 0x2b
 8007260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007264:	f89a 3000 	ldrb.w	r3, [sl]
 8007268:	2b2a      	cmp	r3, #42	; 0x2a
 800726a:	d015      	beq.n	8007298 <_vfiprintf_r+0x13c>
 800726c:	9a07      	ldr	r2, [sp, #28]
 800726e:	4654      	mov	r4, sl
 8007270:	2000      	movs	r0, #0
 8007272:	f04f 0c0a 	mov.w	ip, #10
 8007276:	4621      	mov	r1, r4
 8007278:	f811 3b01 	ldrb.w	r3, [r1], #1
 800727c:	3b30      	subs	r3, #48	; 0x30
 800727e:	2b09      	cmp	r3, #9
 8007280:	d94e      	bls.n	8007320 <_vfiprintf_r+0x1c4>
 8007282:	b1b0      	cbz	r0, 80072b2 <_vfiprintf_r+0x156>
 8007284:	9207      	str	r2, [sp, #28]
 8007286:	e014      	b.n	80072b2 <_vfiprintf_r+0x156>
 8007288:	eba0 0308 	sub.w	r3, r0, r8
 800728c:	fa09 f303 	lsl.w	r3, r9, r3
 8007290:	4313      	orrs	r3, r2
 8007292:	9304      	str	r3, [sp, #16]
 8007294:	46a2      	mov	sl, r4
 8007296:	e7d2      	b.n	800723e <_vfiprintf_r+0xe2>
 8007298:	9b03      	ldr	r3, [sp, #12]
 800729a:	1d19      	adds	r1, r3, #4
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	9103      	str	r1, [sp, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	bfbb      	ittet	lt
 80072a4:	425b      	neglt	r3, r3
 80072a6:	f042 0202 	orrlt.w	r2, r2, #2
 80072aa:	9307      	strge	r3, [sp, #28]
 80072ac:	9307      	strlt	r3, [sp, #28]
 80072ae:	bfb8      	it	lt
 80072b0:	9204      	strlt	r2, [sp, #16]
 80072b2:	7823      	ldrb	r3, [r4, #0]
 80072b4:	2b2e      	cmp	r3, #46	; 0x2e
 80072b6:	d10c      	bne.n	80072d2 <_vfiprintf_r+0x176>
 80072b8:	7863      	ldrb	r3, [r4, #1]
 80072ba:	2b2a      	cmp	r3, #42	; 0x2a
 80072bc:	d135      	bne.n	800732a <_vfiprintf_r+0x1ce>
 80072be:	9b03      	ldr	r3, [sp, #12]
 80072c0:	1d1a      	adds	r2, r3, #4
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	9203      	str	r2, [sp, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	bfb8      	it	lt
 80072ca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80072ce:	3402      	adds	r4, #2
 80072d0:	9305      	str	r3, [sp, #20]
 80072d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80073b8 <_vfiprintf_r+0x25c>
 80072d6:	7821      	ldrb	r1, [r4, #0]
 80072d8:	2203      	movs	r2, #3
 80072da:	4650      	mov	r0, sl
 80072dc:	f7f8 ff88 	bl	80001f0 <memchr>
 80072e0:	b140      	cbz	r0, 80072f4 <_vfiprintf_r+0x198>
 80072e2:	2340      	movs	r3, #64	; 0x40
 80072e4:	eba0 000a 	sub.w	r0, r0, sl
 80072e8:	fa03 f000 	lsl.w	r0, r3, r0
 80072ec:	9b04      	ldr	r3, [sp, #16]
 80072ee:	4303      	orrs	r3, r0
 80072f0:	3401      	adds	r4, #1
 80072f2:	9304      	str	r3, [sp, #16]
 80072f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072f8:	482c      	ldr	r0, [pc, #176]	; (80073ac <_vfiprintf_r+0x250>)
 80072fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072fe:	2206      	movs	r2, #6
 8007300:	f7f8 ff76 	bl	80001f0 <memchr>
 8007304:	2800      	cmp	r0, #0
 8007306:	d03f      	beq.n	8007388 <_vfiprintf_r+0x22c>
 8007308:	4b29      	ldr	r3, [pc, #164]	; (80073b0 <_vfiprintf_r+0x254>)
 800730a:	bb1b      	cbnz	r3, 8007354 <_vfiprintf_r+0x1f8>
 800730c:	9b03      	ldr	r3, [sp, #12]
 800730e:	3307      	adds	r3, #7
 8007310:	f023 0307 	bic.w	r3, r3, #7
 8007314:	3308      	adds	r3, #8
 8007316:	9303      	str	r3, [sp, #12]
 8007318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800731a:	443b      	add	r3, r7
 800731c:	9309      	str	r3, [sp, #36]	; 0x24
 800731e:	e767      	b.n	80071f0 <_vfiprintf_r+0x94>
 8007320:	fb0c 3202 	mla	r2, ip, r2, r3
 8007324:	460c      	mov	r4, r1
 8007326:	2001      	movs	r0, #1
 8007328:	e7a5      	b.n	8007276 <_vfiprintf_r+0x11a>
 800732a:	2300      	movs	r3, #0
 800732c:	3401      	adds	r4, #1
 800732e:	9305      	str	r3, [sp, #20]
 8007330:	4619      	mov	r1, r3
 8007332:	f04f 0c0a 	mov.w	ip, #10
 8007336:	4620      	mov	r0, r4
 8007338:	f810 2b01 	ldrb.w	r2, [r0], #1
 800733c:	3a30      	subs	r2, #48	; 0x30
 800733e:	2a09      	cmp	r2, #9
 8007340:	d903      	bls.n	800734a <_vfiprintf_r+0x1ee>
 8007342:	2b00      	cmp	r3, #0
 8007344:	d0c5      	beq.n	80072d2 <_vfiprintf_r+0x176>
 8007346:	9105      	str	r1, [sp, #20]
 8007348:	e7c3      	b.n	80072d2 <_vfiprintf_r+0x176>
 800734a:	fb0c 2101 	mla	r1, ip, r1, r2
 800734e:	4604      	mov	r4, r0
 8007350:	2301      	movs	r3, #1
 8007352:	e7f0      	b.n	8007336 <_vfiprintf_r+0x1da>
 8007354:	ab03      	add	r3, sp, #12
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	462a      	mov	r2, r5
 800735a:	4b16      	ldr	r3, [pc, #88]	; (80073b4 <_vfiprintf_r+0x258>)
 800735c:	a904      	add	r1, sp, #16
 800735e:	4630      	mov	r0, r6
 8007360:	f7fd fe10 	bl	8004f84 <_printf_float>
 8007364:	4607      	mov	r7, r0
 8007366:	1c78      	adds	r0, r7, #1
 8007368:	d1d6      	bne.n	8007318 <_vfiprintf_r+0x1bc>
 800736a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800736c:	07d9      	lsls	r1, r3, #31
 800736e:	d405      	bmi.n	800737c <_vfiprintf_r+0x220>
 8007370:	89ab      	ldrh	r3, [r5, #12]
 8007372:	059a      	lsls	r2, r3, #22
 8007374:	d402      	bmi.n	800737c <_vfiprintf_r+0x220>
 8007376:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007378:	f000 faaf 	bl	80078da <__retarget_lock_release_recursive>
 800737c:	89ab      	ldrh	r3, [r5, #12]
 800737e:	065b      	lsls	r3, r3, #25
 8007380:	f53f af12 	bmi.w	80071a8 <_vfiprintf_r+0x4c>
 8007384:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007386:	e711      	b.n	80071ac <_vfiprintf_r+0x50>
 8007388:	ab03      	add	r3, sp, #12
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	462a      	mov	r2, r5
 800738e:	4b09      	ldr	r3, [pc, #36]	; (80073b4 <_vfiprintf_r+0x258>)
 8007390:	a904      	add	r1, sp, #16
 8007392:	4630      	mov	r0, r6
 8007394:	f7fe f89a 	bl	80054cc <_printf_i>
 8007398:	e7e4      	b.n	8007364 <_vfiprintf_r+0x208>
 800739a:	bf00      	nop
 800739c:	08007f9c 	.word	0x08007f9c
 80073a0:	08007fbc 	.word	0x08007fbc
 80073a4:	08007f7c 	.word	0x08007f7c
 80073a8:	08007e24 	.word	0x08007e24
 80073ac:	08007e2e 	.word	0x08007e2e
 80073b0:	08004f85 	.word	0x08004f85
 80073b4:	08007137 	.word	0x08007137
 80073b8:	08007e2a 	.word	0x08007e2a

080073bc <__swbuf_r>:
 80073bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073be:	460e      	mov	r6, r1
 80073c0:	4614      	mov	r4, r2
 80073c2:	4605      	mov	r5, r0
 80073c4:	b118      	cbz	r0, 80073ce <__swbuf_r+0x12>
 80073c6:	6983      	ldr	r3, [r0, #24]
 80073c8:	b90b      	cbnz	r3, 80073ce <__swbuf_r+0x12>
 80073ca:	f000 f9e7 	bl	800779c <__sinit>
 80073ce:	4b21      	ldr	r3, [pc, #132]	; (8007454 <__swbuf_r+0x98>)
 80073d0:	429c      	cmp	r4, r3
 80073d2:	d12b      	bne.n	800742c <__swbuf_r+0x70>
 80073d4:	686c      	ldr	r4, [r5, #4]
 80073d6:	69a3      	ldr	r3, [r4, #24]
 80073d8:	60a3      	str	r3, [r4, #8]
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	071a      	lsls	r2, r3, #28
 80073de:	d52f      	bpl.n	8007440 <__swbuf_r+0x84>
 80073e0:	6923      	ldr	r3, [r4, #16]
 80073e2:	b36b      	cbz	r3, 8007440 <__swbuf_r+0x84>
 80073e4:	6923      	ldr	r3, [r4, #16]
 80073e6:	6820      	ldr	r0, [r4, #0]
 80073e8:	1ac0      	subs	r0, r0, r3
 80073ea:	6963      	ldr	r3, [r4, #20]
 80073ec:	b2f6      	uxtb	r6, r6
 80073ee:	4283      	cmp	r3, r0
 80073f0:	4637      	mov	r7, r6
 80073f2:	dc04      	bgt.n	80073fe <__swbuf_r+0x42>
 80073f4:	4621      	mov	r1, r4
 80073f6:	4628      	mov	r0, r5
 80073f8:	f000 f93c 	bl	8007674 <_fflush_r>
 80073fc:	bb30      	cbnz	r0, 800744c <__swbuf_r+0x90>
 80073fe:	68a3      	ldr	r3, [r4, #8]
 8007400:	3b01      	subs	r3, #1
 8007402:	60a3      	str	r3, [r4, #8]
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	6022      	str	r2, [r4, #0]
 800740a:	701e      	strb	r6, [r3, #0]
 800740c:	6963      	ldr	r3, [r4, #20]
 800740e:	3001      	adds	r0, #1
 8007410:	4283      	cmp	r3, r0
 8007412:	d004      	beq.n	800741e <__swbuf_r+0x62>
 8007414:	89a3      	ldrh	r3, [r4, #12]
 8007416:	07db      	lsls	r3, r3, #31
 8007418:	d506      	bpl.n	8007428 <__swbuf_r+0x6c>
 800741a:	2e0a      	cmp	r6, #10
 800741c:	d104      	bne.n	8007428 <__swbuf_r+0x6c>
 800741e:	4621      	mov	r1, r4
 8007420:	4628      	mov	r0, r5
 8007422:	f000 f927 	bl	8007674 <_fflush_r>
 8007426:	b988      	cbnz	r0, 800744c <__swbuf_r+0x90>
 8007428:	4638      	mov	r0, r7
 800742a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800742c:	4b0a      	ldr	r3, [pc, #40]	; (8007458 <__swbuf_r+0x9c>)
 800742e:	429c      	cmp	r4, r3
 8007430:	d101      	bne.n	8007436 <__swbuf_r+0x7a>
 8007432:	68ac      	ldr	r4, [r5, #8]
 8007434:	e7cf      	b.n	80073d6 <__swbuf_r+0x1a>
 8007436:	4b09      	ldr	r3, [pc, #36]	; (800745c <__swbuf_r+0xa0>)
 8007438:	429c      	cmp	r4, r3
 800743a:	bf08      	it	eq
 800743c:	68ec      	ldreq	r4, [r5, #12]
 800743e:	e7ca      	b.n	80073d6 <__swbuf_r+0x1a>
 8007440:	4621      	mov	r1, r4
 8007442:	4628      	mov	r0, r5
 8007444:	f000 f81a 	bl	800747c <__swsetup_r>
 8007448:	2800      	cmp	r0, #0
 800744a:	d0cb      	beq.n	80073e4 <__swbuf_r+0x28>
 800744c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007450:	e7ea      	b.n	8007428 <__swbuf_r+0x6c>
 8007452:	bf00      	nop
 8007454:	08007f9c 	.word	0x08007f9c
 8007458:	08007fbc 	.word	0x08007fbc
 800745c:	08007f7c 	.word	0x08007f7c

08007460 <__ascii_wctomb>:
 8007460:	b149      	cbz	r1, 8007476 <__ascii_wctomb+0x16>
 8007462:	2aff      	cmp	r2, #255	; 0xff
 8007464:	bf85      	ittet	hi
 8007466:	238a      	movhi	r3, #138	; 0x8a
 8007468:	6003      	strhi	r3, [r0, #0]
 800746a:	700a      	strbls	r2, [r1, #0]
 800746c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007470:	bf98      	it	ls
 8007472:	2001      	movls	r0, #1
 8007474:	4770      	bx	lr
 8007476:	4608      	mov	r0, r1
 8007478:	4770      	bx	lr
	...

0800747c <__swsetup_r>:
 800747c:	4b32      	ldr	r3, [pc, #200]	; (8007548 <__swsetup_r+0xcc>)
 800747e:	b570      	push	{r4, r5, r6, lr}
 8007480:	681d      	ldr	r5, [r3, #0]
 8007482:	4606      	mov	r6, r0
 8007484:	460c      	mov	r4, r1
 8007486:	b125      	cbz	r5, 8007492 <__swsetup_r+0x16>
 8007488:	69ab      	ldr	r3, [r5, #24]
 800748a:	b913      	cbnz	r3, 8007492 <__swsetup_r+0x16>
 800748c:	4628      	mov	r0, r5
 800748e:	f000 f985 	bl	800779c <__sinit>
 8007492:	4b2e      	ldr	r3, [pc, #184]	; (800754c <__swsetup_r+0xd0>)
 8007494:	429c      	cmp	r4, r3
 8007496:	d10f      	bne.n	80074b8 <__swsetup_r+0x3c>
 8007498:	686c      	ldr	r4, [r5, #4]
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074a0:	0719      	lsls	r1, r3, #28
 80074a2:	d42c      	bmi.n	80074fe <__swsetup_r+0x82>
 80074a4:	06dd      	lsls	r5, r3, #27
 80074a6:	d411      	bmi.n	80074cc <__swsetup_r+0x50>
 80074a8:	2309      	movs	r3, #9
 80074aa:	6033      	str	r3, [r6, #0]
 80074ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074b0:	81a3      	strh	r3, [r4, #12]
 80074b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074b6:	e03e      	b.n	8007536 <__swsetup_r+0xba>
 80074b8:	4b25      	ldr	r3, [pc, #148]	; (8007550 <__swsetup_r+0xd4>)
 80074ba:	429c      	cmp	r4, r3
 80074bc:	d101      	bne.n	80074c2 <__swsetup_r+0x46>
 80074be:	68ac      	ldr	r4, [r5, #8]
 80074c0:	e7eb      	b.n	800749a <__swsetup_r+0x1e>
 80074c2:	4b24      	ldr	r3, [pc, #144]	; (8007554 <__swsetup_r+0xd8>)
 80074c4:	429c      	cmp	r4, r3
 80074c6:	bf08      	it	eq
 80074c8:	68ec      	ldreq	r4, [r5, #12]
 80074ca:	e7e6      	b.n	800749a <__swsetup_r+0x1e>
 80074cc:	0758      	lsls	r0, r3, #29
 80074ce:	d512      	bpl.n	80074f6 <__swsetup_r+0x7a>
 80074d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074d2:	b141      	cbz	r1, 80074e6 <__swsetup_r+0x6a>
 80074d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074d8:	4299      	cmp	r1, r3
 80074da:	d002      	beq.n	80074e2 <__swsetup_r+0x66>
 80074dc:	4630      	mov	r0, r6
 80074de:	f7ff fb6f 	bl	8006bc0 <_free_r>
 80074e2:	2300      	movs	r3, #0
 80074e4:	6363      	str	r3, [r4, #52]	; 0x34
 80074e6:	89a3      	ldrh	r3, [r4, #12]
 80074e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074ec:	81a3      	strh	r3, [r4, #12]
 80074ee:	2300      	movs	r3, #0
 80074f0:	6063      	str	r3, [r4, #4]
 80074f2:	6923      	ldr	r3, [r4, #16]
 80074f4:	6023      	str	r3, [r4, #0]
 80074f6:	89a3      	ldrh	r3, [r4, #12]
 80074f8:	f043 0308 	orr.w	r3, r3, #8
 80074fc:	81a3      	strh	r3, [r4, #12]
 80074fe:	6923      	ldr	r3, [r4, #16]
 8007500:	b94b      	cbnz	r3, 8007516 <__swsetup_r+0x9a>
 8007502:	89a3      	ldrh	r3, [r4, #12]
 8007504:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800750c:	d003      	beq.n	8007516 <__swsetup_r+0x9a>
 800750e:	4621      	mov	r1, r4
 8007510:	4630      	mov	r0, r6
 8007512:	f000 fa07 	bl	8007924 <__smakebuf_r>
 8007516:	89a0      	ldrh	r0, [r4, #12]
 8007518:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800751c:	f010 0301 	ands.w	r3, r0, #1
 8007520:	d00a      	beq.n	8007538 <__swsetup_r+0xbc>
 8007522:	2300      	movs	r3, #0
 8007524:	60a3      	str	r3, [r4, #8]
 8007526:	6963      	ldr	r3, [r4, #20]
 8007528:	425b      	negs	r3, r3
 800752a:	61a3      	str	r3, [r4, #24]
 800752c:	6923      	ldr	r3, [r4, #16]
 800752e:	b943      	cbnz	r3, 8007542 <__swsetup_r+0xc6>
 8007530:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007534:	d1ba      	bne.n	80074ac <__swsetup_r+0x30>
 8007536:	bd70      	pop	{r4, r5, r6, pc}
 8007538:	0781      	lsls	r1, r0, #30
 800753a:	bf58      	it	pl
 800753c:	6963      	ldrpl	r3, [r4, #20]
 800753e:	60a3      	str	r3, [r4, #8]
 8007540:	e7f4      	b.n	800752c <__swsetup_r+0xb0>
 8007542:	2000      	movs	r0, #0
 8007544:	e7f7      	b.n	8007536 <__swsetup_r+0xba>
 8007546:	bf00      	nop
 8007548:	2000000c 	.word	0x2000000c
 800754c:	08007f9c 	.word	0x08007f9c
 8007550:	08007fbc 	.word	0x08007fbc
 8007554:	08007f7c 	.word	0x08007f7c

08007558 <abort>:
 8007558:	b508      	push	{r3, lr}
 800755a:	2006      	movs	r0, #6
 800755c:	f000 fa52 	bl	8007a04 <raise>
 8007560:	2001      	movs	r0, #1
 8007562:	f7fa f95d 	bl	8001820 <_exit>
	...

08007568 <__sflush_r>:
 8007568:	898a      	ldrh	r2, [r1, #12]
 800756a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800756e:	4605      	mov	r5, r0
 8007570:	0710      	lsls	r0, r2, #28
 8007572:	460c      	mov	r4, r1
 8007574:	d458      	bmi.n	8007628 <__sflush_r+0xc0>
 8007576:	684b      	ldr	r3, [r1, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	dc05      	bgt.n	8007588 <__sflush_r+0x20>
 800757c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800757e:	2b00      	cmp	r3, #0
 8007580:	dc02      	bgt.n	8007588 <__sflush_r+0x20>
 8007582:	2000      	movs	r0, #0
 8007584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007588:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800758a:	2e00      	cmp	r6, #0
 800758c:	d0f9      	beq.n	8007582 <__sflush_r+0x1a>
 800758e:	2300      	movs	r3, #0
 8007590:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007594:	682f      	ldr	r7, [r5, #0]
 8007596:	602b      	str	r3, [r5, #0]
 8007598:	d032      	beq.n	8007600 <__sflush_r+0x98>
 800759a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800759c:	89a3      	ldrh	r3, [r4, #12]
 800759e:	075a      	lsls	r2, r3, #29
 80075a0:	d505      	bpl.n	80075ae <__sflush_r+0x46>
 80075a2:	6863      	ldr	r3, [r4, #4]
 80075a4:	1ac0      	subs	r0, r0, r3
 80075a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075a8:	b10b      	cbz	r3, 80075ae <__sflush_r+0x46>
 80075aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075ac:	1ac0      	subs	r0, r0, r3
 80075ae:	2300      	movs	r3, #0
 80075b0:	4602      	mov	r2, r0
 80075b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075b4:	6a21      	ldr	r1, [r4, #32]
 80075b6:	4628      	mov	r0, r5
 80075b8:	47b0      	blx	r6
 80075ba:	1c43      	adds	r3, r0, #1
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	d106      	bne.n	80075ce <__sflush_r+0x66>
 80075c0:	6829      	ldr	r1, [r5, #0]
 80075c2:	291d      	cmp	r1, #29
 80075c4:	d82c      	bhi.n	8007620 <__sflush_r+0xb8>
 80075c6:	4a2a      	ldr	r2, [pc, #168]	; (8007670 <__sflush_r+0x108>)
 80075c8:	40ca      	lsrs	r2, r1
 80075ca:	07d6      	lsls	r6, r2, #31
 80075cc:	d528      	bpl.n	8007620 <__sflush_r+0xb8>
 80075ce:	2200      	movs	r2, #0
 80075d0:	6062      	str	r2, [r4, #4]
 80075d2:	04d9      	lsls	r1, r3, #19
 80075d4:	6922      	ldr	r2, [r4, #16]
 80075d6:	6022      	str	r2, [r4, #0]
 80075d8:	d504      	bpl.n	80075e4 <__sflush_r+0x7c>
 80075da:	1c42      	adds	r2, r0, #1
 80075dc:	d101      	bne.n	80075e2 <__sflush_r+0x7a>
 80075de:	682b      	ldr	r3, [r5, #0]
 80075e0:	b903      	cbnz	r3, 80075e4 <__sflush_r+0x7c>
 80075e2:	6560      	str	r0, [r4, #84]	; 0x54
 80075e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075e6:	602f      	str	r7, [r5, #0]
 80075e8:	2900      	cmp	r1, #0
 80075ea:	d0ca      	beq.n	8007582 <__sflush_r+0x1a>
 80075ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075f0:	4299      	cmp	r1, r3
 80075f2:	d002      	beq.n	80075fa <__sflush_r+0x92>
 80075f4:	4628      	mov	r0, r5
 80075f6:	f7ff fae3 	bl	8006bc0 <_free_r>
 80075fa:	2000      	movs	r0, #0
 80075fc:	6360      	str	r0, [r4, #52]	; 0x34
 80075fe:	e7c1      	b.n	8007584 <__sflush_r+0x1c>
 8007600:	6a21      	ldr	r1, [r4, #32]
 8007602:	2301      	movs	r3, #1
 8007604:	4628      	mov	r0, r5
 8007606:	47b0      	blx	r6
 8007608:	1c41      	adds	r1, r0, #1
 800760a:	d1c7      	bne.n	800759c <__sflush_r+0x34>
 800760c:	682b      	ldr	r3, [r5, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d0c4      	beq.n	800759c <__sflush_r+0x34>
 8007612:	2b1d      	cmp	r3, #29
 8007614:	d001      	beq.n	800761a <__sflush_r+0xb2>
 8007616:	2b16      	cmp	r3, #22
 8007618:	d101      	bne.n	800761e <__sflush_r+0xb6>
 800761a:	602f      	str	r7, [r5, #0]
 800761c:	e7b1      	b.n	8007582 <__sflush_r+0x1a>
 800761e:	89a3      	ldrh	r3, [r4, #12]
 8007620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007624:	81a3      	strh	r3, [r4, #12]
 8007626:	e7ad      	b.n	8007584 <__sflush_r+0x1c>
 8007628:	690f      	ldr	r7, [r1, #16]
 800762a:	2f00      	cmp	r7, #0
 800762c:	d0a9      	beq.n	8007582 <__sflush_r+0x1a>
 800762e:	0793      	lsls	r3, r2, #30
 8007630:	680e      	ldr	r6, [r1, #0]
 8007632:	bf08      	it	eq
 8007634:	694b      	ldreq	r3, [r1, #20]
 8007636:	600f      	str	r7, [r1, #0]
 8007638:	bf18      	it	ne
 800763a:	2300      	movne	r3, #0
 800763c:	eba6 0807 	sub.w	r8, r6, r7
 8007640:	608b      	str	r3, [r1, #8]
 8007642:	f1b8 0f00 	cmp.w	r8, #0
 8007646:	dd9c      	ble.n	8007582 <__sflush_r+0x1a>
 8007648:	6a21      	ldr	r1, [r4, #32]
 800764a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800764c:	4643      	mov	r3, r8
 800764e:	463a      	mov	r2, r7
 8007650:	4628      	mov	r0, r5
 8007652:	47b0      	blx	r6
 8007654:	2800      	cmp	r0, #0
 8007656:	dc06      	bgt.n	8007666 <__sflush_r+0xfe>
 8007658:	89a3      	ldrh	r3, [r4, #12]
 800765a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800765e:	81a3      	strh	r3, [r4, #12]
 8007660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007664:	e78e      	b.n	8007584 <__sflush_r+0x1c>
 8007666:	4407      	add	r7, r0
 8007668:	eba8 0800 	sub.w	r8, r8, r0
 800766c:	e7e9      	b.n	8007642 <__sflush_r+0xda>
 800766e:	bf00      	nop
 8007670:	20400001 	.word	0x20400001

08007674 <_fflush_r>:
 8007674:	b538      	push	{r3, r4, r5, lr}
 8007676:	690b      	ldr	r3, [r1, #16]
 8007678:	4605      	mov	r5, r0
 800767a:	460c      	mov	r4, r1
 800767c:	b913      	cbnz	r3, 8007684 <_fflush_r+0x10>
 800767e:	2500      	movs	r5, #0
 8007680:	4628      	mov	r0, r5
 8007682:	bd38      	pop	{r3, r4, r5, pc}
 8007684:	b118      	cbz	r0, 800768e <_fflush_r+0x1a>
 8007686:	6983      	ldr	r3, [r0, #24]
 8007688:	b90b      	cbnz	r3, 800768e <_fflush_r+0x1a>
 800768a:	f000 f887 	bl	800779c <__sinit>
 800768e:	4b14      	ldr	r3, [pc, #80]	; (80076e0 <_fflush_r+0x6c>)
 8007690:	429c      	cmp	r4, r3
 8007692:	d11b      	bne.n	80076cc <_fflush_r+0x58>
 8007694:	686c      	ldr	r4, [r5, #4]
 8007696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d0ef      	beq.n	800767e <_fflush_r+0xa>
 800769e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076a0:	07d0      	lsls	r0, r2, #31
 80076a2:	d404      	bmi.n	80076ae <_fflush_r+0x3a>
 80076a4:	0599      	lsls	r1, r3, #22
 80076a6:	d402      	bmi.n	80076ae <_fflush_r+0x3a>
 80076a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076aa:	f000 f915 	bl	80078d8 <__retarget_lock_acquire_recursive>
 80076ae:	4628      	mov	r0, r5
 80076b0:	4621      	mov	r1, r4
 80076b2:	f7ff ff59 	bl	8007568 <__sflush_r>
 80076b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076b8:	07da      	lsls	r2, r3, #31
 80076ba:	4605      	mov	r5, r0
 80076bc:	d4e0      	bmi.n	8007680 <_fflush_r+0xc>
 80076be:	89a3      	ldrh	r3, [r4, #12]
 80076c0:	059b      	lsls	r3, r3, #22
 80076c2:	d4dd      	bmi.n	8007680 <_fflush_r+0xc>
 80076c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076c6:	f000 f908 	bl	80078da <__retarget_lock_release_recursive>
 80076ca:	e7d9      	b.n	8007680 <_fflush_r+0xc>
 80076cc:	4b05      	ldr	r3, [pc, #20]	; (80076e4 <_fflush_r+0x70>)
 80076ce:	429c      	cmp	r4, r3
 80076d0:	d101      	bne.n	80076d6 <_fflush_r+0x62>
 80076d2:	68ac      	ldr	r4, [r5, #8]
 80076d4:	e7df      	b.n	8007696 <_fflush_r+0x22>
 80076d6:	4b04      	ldr	r3, [pc, #16]	; (80076e8 <_fflush_r+0x74>)
 80076d8:	429c      	cmp	r4, r3
 80076da:	bf08      	it	eq
 80076dc:	68ec      	ldreq	r4, [r5, #12]
 80076de:	e7da      	b.n	8007696 <_fflush_r+0x22>
 80076e0:	08007f9c 	.word	0x08007f9c
 80076e4:	08007fbc 	.word	0x08007fbc
 80076e8:	08007f7c 	.word	0x08007f7c

080076ec <std>:
 80076ec:	2300      	movs	r3, #0
 80076ee:	b510      	push	{r4, lr}
 80076f0:	4604      	mov	r4, r0
 80076f2:	e9c0 3300 	strd	r3, r3, [r0]
 80076f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076fa:	6083      	str	r3, [r0, #8]
 80076fc:	8181      	strh	r1, [r0, #12]
 80076fe:	6643      	str	r3, [r0, #100]	; 0x64
 8007700:	81c2      	strh	r2, [r0, #14]
 8007702:	6183      	str	r3, [r0, #24]
 8007704:	4619      	mov	r1, r3
 8007706:	2208      	movs	r2, #8
 8007708:	305c      	adds	r0, #92	; 0x5c
 800770a:	f7fd fb93 	bl	8004e34 <memset>
 800770e:	4b05      	ldr	r3, [pc, #20]	; (8007724 <std+0x38>)
 8007710:	6263      	str	r3, [r4, #36]	; 0x24
 8007712:	4b05      	ldr	r3, [pc, #20]	; (8007728 <std+0x3c>)
 8007714:	62a3      	str	r3, [r4, #40]	; 0x28
 8007716:	4b05      	ldr	r3, [pc, #20]	; (800772c <std+0x40>)
 8007718:	62e3      	str	r3, [r4, #44]	; 0x2c
 800771a:	4b05      	ldr	r3, [pc, #20]	; (8007730 <std+0x44>)
 800771c:	6224      	str	r4, [r4, #32]
 800771e:	6323      	str	r3, [r4, #48]	; 0x30
 8007720:	bd10      	pop	{r4, pc}
 8007722:	bf00      	nop
 8007724:	08007a3d 	.word	0x08007a3d
 8007728:	08007a5f 	.word	0x08007a5f
 800772c:	08007a97 	.word	0x08007a97
 8007730:	08007abb 	.word	0x08007abb

08007734 <_cleanup_r>:
 8007734:	4901      	ldr	r1, [pc, #4]	; (800773c <_cleanup_r+0x8>)
 8007736:	f000 b8af 	b.w	8007898 <_fwalk_reent>
 800773a:	bf00      	nop
 800773c:	08007675 	.word	0x08007675

08007740 <__sfmoreglue>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	1e4a      	subs	r2, r1, #1
 8007744:	2568      	movs	r5, #104	; 0x68
 8007746:	4355      	muls	r5, r2
 8007748:	460e      	mov	r6, r1
 800774a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800774e:	f7ff fa87 	bl	8006c60 <_malloc_r>
 8007752:	4604      	mov	r4, r0
 8007754:	b140      	cbz	r0, 8007768 <__sfmoreglue+0x28>
 8007756:	2100      	movs	r1, #0
 8007758:	e9c0 1600 	strd	r1, r6, [r0]
 800775c:	300c      	adds	r0, #12
 800775e:	60a0      	str	r0, [r4, #8]
 8007760:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007764:	f7fd fb66 	bl	8004e34 <memset>
 8007768:	4620      	mov	r0, r4
 800776a:	bd70      	pop	{r4, r5, r6, pc}

0800776c <__sfp_lock_acquire>:
 800776c:	4801      	ldr	r0, [pc, #4]	; (8007774 <__sfp_lock_acquire+0x8>)
 800776e:	f000 b8b3 	b.w	80078d8 <__retarget_lock_acquire_recursive>
 8007772:	bf00      	nop
 8007774:	20000368 	.word	0x20000368

08007778 <__sfp_lock_release>:
 8007778:	4801      	ldr	r0, [pc, #4]	; (8007780 <__sfp_lock_release+0x8>)
 800777a:	f000 b8ae 	b.w	80078da <__retarget_lock_release_recursive>
 800777e:	bf00      	nop
 8007780:	20000368 	.word	0x20000368

08007784 <__sinit_lock_acquire>:
 8007784:	4801      	ldr	r0, [pc, #4]	; (800778c <__sinit_lock_acquire+0x8>)
 8007786:	f000 b8a7 	b.w	80078d8 <__retarget_lock_acquire_recursive>
 800778a:	bf00      	nop
 800778c:	20000363 	.word	0x20000363

08007790 <__sinit_lock_release>:
 8007790:	4801      	ldr	r0, [pc, #4]	; (8007798 <__sinit_lock_release+0x8>)
 8007792:	f000 b8a2 	b.w	80078da <__retarget_lock_release_recursive>
 8007796:	bf00      	nop
 8007798:	20000363 	.word	0x20000363

0800779c <__sinit>:
 800779c:	b510      	push	{r4, lr}
 800779e:	4604      	mov	r4, r0
 80077a0:	f7ff fff0 	bl	8007784 <__sinit_lock_acquire>
 80077a4:	69a3      	ldr	r3, [r4, #24]
 80077a6:	b11b      	cbz	r3, 80077b0 <__sinit+0x14>
 80077a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ac:	f7ff bff0 	b.w	8007790 <__sinit_lock_release>
 80077b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80077b4:	6523      	str	r3, [r4, #80]	; 0x50
 80077b6:	4b13      	ldr	r3, [pc, #76]	; (8007804 <__sinit+0x68>)
 80077b8:	4a13      	ldr	r2, [pc, #76]	; (8007808 <__sinit+0x6c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80077be:	42a3      	cmp	r3, r4
 80077c0:	bf04      	itt	eq
 80077c2:	2301      	moveq	r3, #1
 80077c4:	61a3      	streq	r3, [r4, #24]
 80077c6:	4620      	mov	r0, r4
 80077c8:	f000 f820 	bl	800780c <__sfp>
 80077cc:	6060      	str	r0, [r4, #4]
 80077ce:	4620      	mov	r0, r4
 80077d0:	f000 f81c 	bl	800780c <__sfp>
 80077d4:	60a0      	str	r0, [r4, #8]
 80077d6:	4620      	mov	r0, r4
 80077d8:	f000 f818 	bl	800780c <__sfp>
 80077dc:	2200      	movs	r2, #0
 80077de:	60e0      	str	r0, [r4, #12]
 80077e0:	2104      	movs	r1, #4
 80077e2:	6860      	ldr	r0, [r4, #4]
 80077e4:	f7ff ff82 	bl	80076ec <std>
 80077e8:	68a0      	ldr	r0, [r4, #8]
 80077ea:	2201      	movs	r2, #1
 80077ec:	2109      	movs	r1, #9
 80077ee:	f7ff ff7d 	bl	80076ec <std>
 80077f2:	68e0      	ldr	r0, [r4, #12]
 80077f4:	2202      	movs	r2, #2
 80077f6:	2112      	movs	r1, #18
 80077f8:	f7ff ff78 	bl	80076ec <std>
 80077fc:	2301      	movs	r3, #1
 80077fe:	61a3      	str	r3, [r4, #24]
 8007800:	e7d2      	b.n	80077a8 <__sinit+0xc>
 8007802:	bf00      	nop
 8007804:	08007bfc 	.word	0x08007bfc
 8007808:	08007735 	.word	0x08007735

0800780c <__sfp>:
 800780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780e:	4607      	mov	r7, r0
 8007810:	f7ff ffac 	bl	800776c <__sfp_lock_acquire>
 8007814:	4b1e      	ldr	r3, [pc, #120]	; (8007890 <__sfp+0x84>)
 8007816:	681e      	ldr	r6, [r3, #0]
 8007818:	69b3      	ldr	r3, [r6, #24]
 800781a:	b913      	cbnz	r3, 8007822 <__sfp+0x16>
 800781c:	4630      	mov	r0, r6
 800781e:	f7ff ffbd 	bl	800779c <__sinit>
 8007822:	3648      	adds	r6, #72	; 0x48
 8007824:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007828:	3b01      	subs	r3, #1
 800782a:	d503      	bpl.n	8007834 <__sfp+0x28>
 800782c:	6833      	ldr	r3, [r6, #0]
 800782e:	b30b      	cbz	r3, 8007874 <__sfp+0x68>
 8007830:	6836      	ldr	r6, [r6, #0]
 8007832:	e7f7      	b.n	8007824 <__sfp+0x18>
 8007834:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007838:	b9d5      	cbnz	r5, 8007870 <__sfp+0x64>
 800783a:	4b16      	ldr	r3, [pc, #88]	; (8007894 <__sfp+0x88>)
 800783c:	60e3      	str	r3, [r4, #12]
 800783e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007842:	6665      	str	r5, [r4, #100]	; 0x64
 8007844:	f000 f847 	bl	80078d6 <__retarget_lock_init_recursive>
 8007848:	f7ff ff96 	bl	8007778 <__sfp_lock_release>
 800784c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007850:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007854:	6025      	str	r5, [r4, #0]
 8007856:	61a5      	str	r5, [r4, #24]
 8007858:	2208      	movs	r2, #8
 800785a:	4629      	mov	r1, r5
 800785c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007860:	f7fd fae8 	bl	8004e34 <memset>
 8007864:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007868:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800786c:	4620      	mov	r0, r4
 800786e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007870:	3468      	adds	r4, #104	; 0x68
 8007872:	e7d9      	b.n	8007828 <__sfp+0x1c>
 8007874:	2104      	movs	r1, #4
 8007876:	4638      	mov	r0, r7
 8007878:	f7ff ff62 	bl	8007740 <__sfmoreglue>
 800787c:	4604      	mov	r4, r0
 800787e:	6030      	str	r0, [r6, #0]
 8007880:	2800      	cmp	r0, #0
 8007882:	d1d5      	bne.n	8007830 <__sfp+0x24>
 8007884:	f7ff ff78 	bl	8007778 <__sfp_lock_release>
 8007888:	230c      	movs	r3, #12
 800788a:	603b      	str	r3, [r7, #0]
 800788c:	e7ee      	b.n	800786c <__sfp+0x60>
 800788e:	bf00      	nop
 8007890:	08007bfc 	.word	0x08007bfc
 8007894:	ffff0001 	.word	0xffff0001

08007898 <_fwalk_reent>:
 8007898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800789c:	4606      	mov	r6, r0
 800789e:	4688      	mov	r8, r1
 80078a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078a4:	2700      	movs	r7, #0
 80078a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078aa:	f1b9 0901 	subs.w	r9, r9, #1
 80078ae:	d505      	bpl.n	80078bc <_fwalk_reent+0x24>
 80078b0:	6824      	ldr	r4, [r4, #0]
 80078b2:	2c00      	cmp	r4, #0
 80078b4:	d1f7      	bne.n	80078a6 <_fwalk_reent+0xe>
 80078b6:	4638      	mov	r0, r7
 80078b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078bc:	89ab      	ldrh	r3, [r5, #12]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d907      	bls.n	80078d2 <_fwalk_reent+0x3a>
 80078c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078c6:	3301      	adds	r3, #1
 80078c8:	d003      	beq.n	80078d2 <_fwalk_reent+0x3a>
 80078ca:	4629      	mov	r1, r5
 80078cc:	4630      	mov	r0, r6
 80078ce:	47c0      	blx	r8
 80078d0:	4307      	orrs	r7, r0
 80078d2:	3568      	adds	r5, #104	; 0x68
 80078d4:	e7e9      	b.n	80078aa <_fwalk_reent+0x12>

080078d6 <__retarget_lock_init_recursive>:
 80078d6:	4770      	bx	lr

080078d8 <__retarget_lock_acquire_recursive>:
 80078d8:	4770      	bx	lr

080078da <__retarget_lock_release_recursive>:
 80078da:	4770      	bx	lr

080078dc <__swhatbuf_r>:
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	460e      	mov	r6, r1
 80078e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078e4:	2900      	cmp	r1, #0
 80078e6:	b096      	sub	sp, #88	; 0x58
 80078e8:	4614      	mov	r4, r2
 80078ea:	461d      	mov	r5, r3
 80078ec:	da07      	bge.n	80078fe <__swhatbuf_r+0x22>
 80078ee:	2300      	movs	r3, #0
 80078f0:	602b      	str	r3, [r5, #0]
 80078f2:	89b3      	ldrh	r3, [r6, #12]
 80078f4:	061a      	lsls	r2, r3, #24
 80078f6:	d410      	bmi.n	800791a <__swhatbuf_r+0x3e>
 80078f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078fc:	e00e      	b.n	800791c <__swhatbuf_r+0x40>
 80078fe:	466a      	mov	r2, sp
 8007900:	f000 f902 	bl	8007b08 <_fstat_r>
 8007904:	2800      	cmp	r0, #0
 8007906:	dbf2      	blt.n	80078ee <__swhatbuf_r+0x12>
 8007908:	9a01      	ldr	r2, [sp, #4]
 800790a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800790e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007912:	425a      	negs	r2, r3
 8007914:	415a      	adcs	r2, r3
 8007916:	602a      	str	r2, [r5, #0]
 8007918:	e7ee      	b.n	80078f8 <__swhatbuf_r+0x1c>
 800791a:	2340      	movs	r3, #64	; 0x40
 800791c:	2000      	movs	r0, #0
 800791e:	6023      	str	r3, [r4, #0]
 8007920:	b016      	add	sp, #88	; 0x58
 8007922:	bd70      	pop	{r4, r5, r6, pc}

08007924 <__smakebuf_r>:
 8007924:	898b      	ldrh	r3, [r1, #12]
 8007926:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007928:	079d      	lsls	r5, r3, #30
 800792a:	4606      	mov	r6, r0
 800792c:	460c      	mov	r4, r1
 800792e:	d507      	bpl.n	8007940 <__smakebuf_r+0x1c>
 8007930:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	6123      	str	r3, [r4, #16]
 8007938:	2301      	movs	r3, #1
 800793a:	6163      	str	r3, [r4, #20]
 800793c:	b002      	add	sp, #8
 800793e:	bd70      	pop	{r4, r5, r6, pc}
 8007940:	ab01      	add	r3, sp, #4
 8007942:	466a      	mov	r2, sp
 8007944:	f7ff ffca 	bl	80078dc <__swhatbuf_r>
 8007948:	9900      	ldr	r1, [sp, #0]
 800794a:	4605      	mov	r5, r0
 800794c:	4630      	mov	r0, r6
 800794e:	f7ff f987 	bl	8006c60 <_malloc_r>
 8007952:	b948      	cbnz	r0, 8007968 <__smakebuf_r+0x44>
 8007954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007958:	059a      	lsls	r2, r3, #22
 800795a:	d4ef      	bmi.n	800793c <__smakebuf_r+0x18>
 800795c:	f023 0303 	bic.w	r3, r3, #3
 8007960:	f043 0302 	orr.w	r3, r3, #2
 8007964:	81a3      	strh	r3, [r4, #12]
 8007966:	e7e3      	b.n	8007930 <__smakebuf_r+0xc>
 8007968:	4b0d      	ldr	r3, [pc, #52]	; (80079a0 <__smakebuf_r+0x7c>)
 800796a:	62b3      	str	r3, [r6, #40]	; 0x28
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	6020      	str	r0, [r4, #0]
 8007970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007974:	81a3      	strh	r3, [r4, #12]
 8007976:	9b00      	ldr	r3, [sp, #0]
 8007978:	6163      	str	r3, [r4, #20]
 800797a:	9b01      	ldr	r3, [sp, #4]
 800797c:	6120      	str	r0, [r4, #16]
 800797e:	b15b      	cbz	r3, 8007998 <__smakebuf_r+0x74>
 8007980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007984:	4630      	mov	r0, r6
 8007986:	f000 f8d1 	bl	8007b2c <_isatty_r>
 800798a:	b128      	cbz	r0, 8007998 <__smakebuf_r+0x74>
 800798c:	89a3      	ldrh	r3, [r4, #12]
 800798e:	f023 0303 	bic.w	r3, r3, #3
 8007992:	f043 0301 	orr.w	r3, r3, #1
 8007996:	81a3      	strh	r3, [r4, #12]
 8007998:	89a0      	ldrh	r0, [r4, #12]
 800799a:	4305      	orrs	r5, r0
 800799c:	81a5      	strh	r5, [r4, #12]
 800799e:	e7cd      	b.n	800793c <__smakebuf_r+0x18>
 80079a0:	08007735 	.word	0x08007735

080079a4 <_malloc_usable_size_r>:
 80079a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079a8:	1f18      	subs	r0, r3, #4
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	bfbc      	itt	lt
 80079ae:	580b      	ldrlt	r3, [r1, r0]
 80079b0:	18c0      	addlt	r0, r0, r3
 80079b2:	4770      	bx	lr

080079b4 <_raise_r>:
 80079b4:	291f      	cmp	r1, #31
 80079b6:	b538      	push	{r3, r4, r5, lr}
 80079b8:	4604      	mov	r4, r0
 80079ba:	460d      	mov	r5, r1
 80079bc:	d904      	bls.n	80079c8 <_raise_r+0x14>
 80079be:	2316      	movs	r3, #22
 80079c0:	6003      	str	r3, [r0, #0]
 80079c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079c6:	bd38      	pop	{r3, r4, r5, pc}
 80079c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80079ca:	b112      	cbz	r2, 80079d2 <_raise_r+0x1e>
 80079cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079d0:	b94b      	cbnz	r3, 80079e6 <_raise_r+0x32>
 80079d2:	4620      	mov	r0, r4
 80079d4:	f000 f830 	bl	8007a38 <_getpid_r>
 80079d8:	462a      	mov	r2, r5
 80079da:	4601      	mov	r1, r0
 80079dc:	4620      	mov	r0, r4
 80079de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079e2:	f000 b817 	b.w	8007a14 <_kill_r>
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d00a      	beq.n	8007a00 <_raise_r+0x4c>
 80079ea:	1c59      	adds	r1, r3, #1
 80079ec:	d103      	bne.n	80079f6 <_raise_r+0x42>
 80079ee:	2316      	movs	r3, #22
 80079f0:	6003      	str	r3, [r0, #0]
 80079f2:	2001      	movs	r0, #1
 80079f4:	e7e7      	b.n	80079c6 <_raise_r+0x12>
 80079f6:	2400      	movs	r4, #0
 80079f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80079fc:	4628      	mov	r0, r5
 80079fe:	4798      	blx	r3
 8007a00:	2000      	movs	r0, #0
 8007a02:	e7e0      	b.n	80079c6 <_raise_r+0x12>

08007a04 <raise>:
 8007a04:	4b02      	ldr	r3, [pc, #8]	; (8007a10 <raise+0xc>)
 8007a06:	4601      	mov	r1, r0
 8007a08:	6818      	ldr	r0, [r3, #0]
 8007a0a:	f7ff bfd3 	b.w	80079b4 <_raise_r>
 8007a0e:	bf00      	nop
 8007a10:	2000000c 	.word	0x2000000c

08007a14 <_kill_r>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	4d07      	ldr	r5, [pc, #28]	; (8007a34 <_kill_r+0x20>)
 8007a18:	2300      	movs	r3, #0
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	4608      	mov	r0, r1
 8007a1e:	4611      	mov	r1, r2
 8007a20:	602b      	str	r3, [r5, #0]
 8007a22:	f7f9 feed 	bl	8001800 <_kill>
 8007a26:	1c43      	adds	r3, r0, #1
 8007a28:	d102      	bne.n	8007a30 <_kill_r+0x1c>
 8007a2a:	682b      	ldr	r3, [r5, #0]
 8007a2c:	b103      	cbz	r3, 8007a30 <_kill_r+0x1c>
 8007a2e:	6023      	str	r3, [r4, #0]
 8007a30:	bd38      	pop	{r3, r4, r5, pc}
 8007a32:	bf00      	nop
 8007a34:	2000035c 	.word	0x2000035c

08007a38 <_getpid_r>:
 8007a38:	f7f9 beda 	b.w	80017f0 <_getpid>

08007a3c <__sread>:
 8007a3c:	b510      	push	{r4, lr}
 8007a3e:	460c      	mov	r4, r1
 8007a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a44:	f000 f894 	bl	8007b70 <_read_r>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	bfab      	itete	ge
 8007a4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a4e:	89a3      	ldrhlt	r3, [r4, #12]
 8007a50:	181b      	addge	r3, r3, r0
 8007a52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a56:	bfac      	ite	ge
 8007a58:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a5a:	81a3      	strhlt	r3, [r4, #12]
 8007a5c:	bd10      	pop	{r4, pc}

08007a5e <__swrite>:
 8007a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a62:	461f      	mov	r7, r3
 8007a64:	898b      	ldrh	r3, [r1, #12]
 8007a66:	05db      	lsls	r3, r3, #23
 8007a68:	4605      	mov	r5, r0
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	4616      	mov	r6, r2
 8007a6e:	d505      	bpl.n	8007a7c <__swrite+0x1e>
 8007a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a74:	2302      	movs	r3, #2
 8007a76:	2200      	movs	r2, #0
 8007a78:	f000 f868 	bl	8007b4c <_lseek_r>
 8007a7c:	89a3      	ldrh	r3, [r4, #12]
 8007a7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a86:	81a3      	strh	r3, [r4, #12]
 8007a88:	4632      	mov	r2, r6
 8007a8a:	463b      	mov	r3, r7
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a92:	f000 b817 	b.w	8007ac4 <_write_r>

08007a96 <__sseek>:
 8007a96:	b510      	push	{r4, lr}
 8007a98:	460c      	mov	r4, r1
 8007a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a9e:	f000 f855 	bl	8007b4c <_lseek_r>
 8007aa2:	1c43      	adds	r3, r0, #1
 8007aa4:	89a3      	ldrh	r3, [r4, #12]
 8007aa6:	bf15      	itete	ne
 8007aa8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007aaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007aae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ab2:	81a3      	strheq	r3, [r4, #12]
 8007ab4:	bf18      	it	ne
 8007ab6:	81a3      	strhne	r3, [r4, #12]
 8007ab8:	bd10      	pop	{r4, pc}

08007aba <__sclose>:
 8007aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007abe:	f000 b813 	b.w	8007ae8 <_close_r>
	...

08007ac4 <_write_r>:
 8007ac4:	b538      	push	{r3, r4, r5, lr}
 8007ac6:	4d07      	ldr	r5, [pc, #28]	; (8007ae4 <_write_r+0x20>)
 8007ac8:	4604      	mov	r4, r0
 8007aca:	4608      	mov	r0, r1
 8007acc:	4611      	mov	r1, r2
 8007ace:	2200      	movs	r2, #0
 8007ad0:	602a      	str	r2, [r5, #0]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	f7f9 fecb 	bl	800186e <_write>
 8007ad8:	1c43      	adds	r3, r0, #1
 8007ada:	d102      	bne.n	8007ae2 <_write_r+0x1e>
 8007adc:	682b      	ldr	r3, [r5, #0]
 8007ade:	b103      	cbz	r3, 8007ae2 <_write_r+0x1e>
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	bd38      	pop	{r3, r4, r5, pc}
 8007ae4:	2000035c 	.word	0x2000035c

08007ae8 <_close_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	4d06      	ldr	r5, [pc, #24]	; (8007b04 <_close_r+0x1c>)
 8007aec:	2300      	movs	r3, #0
 8007aee:	4604      	mov	r4, r0
 8007af0:	4608      	mov	r0, r1
 8007af2:	602b      	str	r3, [r5, #0]
 8007af4:	f7f9 fed7 	bl	80018a6 <_close>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	d102      	bne.n	8007b02 <_close_r+0x1a>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	b103      	cbz	r3, 8007b02 <_close_r+0x1a>
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	bd38      	pop	{r3, r4, r5, pc}
 8007b04:	2000035c 	.word	0x2000035c

08007b08 <_fstat_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4d07      	ldr	r5, [pc, #28]	; (8007b28 <_fstat_r+0x20>)
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	4604      	mov	r4, r0
 8007b10:	4608      	mov	r0, r1
 8007b12:	4611      	mov	r1, r2
 8007b14:	602b      	str	r3, [r5, #0]
 8007b16:	f7f9 fed2 	bl	80018be <_fstat>
 8007b1a:	1c43      	adds	r3, r0, #1
 8007b1c:	d102      	bne.n	8007b24 <_fstat_r+0x1c>
 8007b1e:	682b      	ldr	r3, [r5, #0]
 8007b20:	b103      	cbz	r3, 8007b24 <_fstat_r+0x1c>
 8007b22:	6023      	str	r3, [r4, #0]
 8007b24:	bd38      	pop	{r3, r4, r5, pc}
 8007b26:	bf00      	nop
 8007b28:	2000035c 	.word	0x2000035c

08007b2c <_isatty_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	4d06      	ldr	r5, [pc, #24]	; (8007b48 <_isatty_r+0x1c>)
 8007b30:	2300      	movs	r3, #0
 8007b32:	4604      	mov	r4, r0
 8007b34:	4608      	mov	r0, r1
 8007b36:	602b      	str	r3, [r5, #0]
 8007b38:	f7f9 fed1 	bl	80018de <_isatty>
 8007b3c:	1c43      	adds	r3, r0, #1
 8007b3e:	d102      	bne.n	8007b46 <_isatty_r+0x1a>
 8007b40:	682b      	ldr	r3, [r5, #0]
 8007b42:	b103      	cbz	r3, 8007b46 <_isatty_r+0x1a>
 8007b44:	6023      	str	r3, [r4, #0]
 8007b46:	bd38      	pop	{r3, r4, r5, pc}
 8007b48:	2000035c 	.word	0x2000035c

08007b4c <_lseek_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	4d07      	ldr	r5, [pc, #28]	; (8007b6c <_lseek_r+0x20>)
 8007b50:	4604      	mov	r4, r0
 8007b52:	4608      	mov	r0, r1
 8007b54:	4611      	mov	r1, r2
 8007b56:	2200      	movs	r2, #0
 8007b58:	602a      	str	r2, [r5, #0]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	f7f9 feca 	bl	80018f4 <_lseek>
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	d102      	bne.n	8007b6a <_lseek_r+0x1e>
 8007b64:	682b      	ldr	r3, [r5, #0]
 8007b66:	b103      	cbz	r3, 8007b6a <_lseek_r+0x1e>
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	2000035c 	.word	0x2000035c

08007b70 <_read_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	4d07      	ldr	r5, [pc, #28]	; (8007b90 <_read_r+0x20>)
 8007b74:	4604      	mov	r4, r0
 8007b76:	4608      	mov	r0, r1
 8007b78:	4611      	mov	r1, r2
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	602a      	str	r2, [r5, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	f7f9 fe58 	bl	8001834 <_read>
 8007b84:	1c43      	adds	r3, r0, #1
 8007b86:	d102      	bne.n	8007b8e <_read_r+0x1e>
 8007b88:	682b      	ldr	r3, [r5, #0]
 8007b8a:	b103      	cbz	r3, 8007b8e <_read_r+0x1e>
 8007b8c:	6023      	str	r3, [r4, #0]
 8007b8e:	bd38      	pop	{r3, r4, r5, pc}
 8007b90:	2000035c 	.word	0x2000035c

08007b94 <_init>:
 8007b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b96:	bf00      	nop
 8007b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b9a:	bc08      	pop	{r3}
 8007b9c:	469e      	mov	lr, r3
 8007b9e:	4770      	bx	lr

08007ba0 <_fini>:
 8007ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba2:	bf00      	nop
 8007ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ba6:	bc08      	pop	{r3}
 8007ba8:	469e      	mov	lr, r3
 8007baa:	4770      	bx	lr
