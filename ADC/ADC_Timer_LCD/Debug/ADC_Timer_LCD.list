
ADC_Timer_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08007998  08007998  00017998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dc4  08007dc4  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08007dc4  08007dc4  00017dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dcc  08007dcc  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dcc  08007dcc  00017dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007dd0  08007dd0  00017dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08007dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000204  08007fd8  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08007fd8  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e0a  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002601  00000000  00000000  0003303e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00035640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  00036540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e6b  00000000  00000000  00037358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001136b  00000000  00000000  000501c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aed5  00000000  00000000  0006152e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fc403  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005090  00000000  00000000  000fc458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800797c 	.word	0x0800797c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	0800797c 	.word	0x0800797c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <lcd_enable>:
#define LCD_D7 GPIOB,GPIO_PIN_15
#define LCD_BL_ON GPIOA,GPIO_PIN_4


//  LCD code
void lcd_enable(){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2102      	movs	r1, #2
 8000f58:	480b      	ldr	r0, [pc, #44]	; (8000f88 <lcd_enable+0x38>)
 8000f5a:	f001 fef7 	bl	8002d4c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f000 ff1c 	bl	8001d9c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_SET);  //pulse needs to be some clock cycles long, we are not in hurry right now
 8000f64:	2201      	movs	r2, #1
 8000f66:	2102      	movs	r1, #2
 8000f68:	4807      	ldr	r0, [pc, #28]	; (8000f88 <lcd_enable+0x38>)
 8000f6a:	f001 feef 	bl	8002d4c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f000 ff14 	bl	8001d9c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2102      	movs	r1, #2
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <lcd_enable+0x38>)
 8000f7a:	f001 fee7 	bl	8002d4c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f000 ff0c 	bl	8001d9c <HAL_Delay>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40020400 	.word	0x40020400

08000f8c <lcd_write4>:

//  write a nibble (4 bits)
void lcd_write4(uint8_t word){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(LCD_D4, (word & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET); //we AND the word and the mask. If it's true, we write GPIO_PIN_SET, else _RESET
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa4:	4816      	ldr	r0, [pc, #88]	; (8001000 <lcd_write4+0x74>)
 8000fa6:	f001 fed1 	bl	8002d4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D5, (word & 0x02)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	105b      	asrs	r3, r3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fbc:	4810      	ldr	r0, [pc, #64]	; (8001000 <lcd_write4+0x74>)
 8000fbe:	f001 fec5 	bl	8002d4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D6, (word & 0x04)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	109b      	asrs	r3, r3, #2
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	461a      	mov	r2, r3
 8000fd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fd4:	480a      	ldr	r0, [pc, #40]	; (8001000 <lcd_write4+0x74>)
 8000fd6:	f001 feb9 	bl	8002d4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D7, (word & 0x08)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	10db      	asrs	r3, r3, #3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fec:	4804      	ldr	r0, [pc, #16]	; (8001000 <lcd_write4+0x74>)
 8000fee:	f001 fead 	bl	8002d4c <HAL_GPIO_WritePin>
		lcd_enable();  //pulse the E line
 8000ff2:	f7ff ffad 	bl	8000f50 <lcd_enable>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40020400 	.word	0x40020400

08001004 <lcd_write>:

//  write a byte (8 bits)
void lcd_write(uint8_t word){	
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
		lcd_write4(word>>4); //we first write the upper nibble
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	091b      	lsrs	r3, r3, #4
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ffb9 	bl	8000f8c <lcd_write4>
		lcd_write4(word);    //and then the lower nibble
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ffb5 	bl	8000f8c <lcd_write4>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <lcd_command>:
#define DISPLAY_ON 0x04
#define LCD_SETDRAMADD 0x80
uint8_t _display_ctrl = 0;

//  send an instruction to the LCD
void lcd_command(uint8_t byte){
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET); //write an instruction -> RS must be low
 8001036:	2200      	movs	r2, #0
 8001038:	2104      	movs	r1, #4
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <lcd_command+0x24>)
 800103c:	f001 fe86 	bl	8002d4c <HAL_GPIO_WritePin>
	lcd_write(byte);
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ffde 	bl	8001004 <lcd_write>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40020400 	.word	0x40020400

08001054 <lcd_clear>:

void lcd_clear(){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	lcd_command(LCD_CLEAR_COMMAND);
 8001058:	2001      	movs	r0, #1
 800105a:	f7ff ffe7 	bl	800102c <lcd_command>
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <lcd_data>:

//  send data to the LCD
void lcd_data(uint8_t byte){
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET); //write data, not instruction -> RS must be high
 800106e:	2201      	movs	r2, #1
 8001070:	2104      	movs	r1, #4
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <lcd_data+0x24>)
 8001074:	f001 fe6a 	bl	8002d4c <HAL_GPIO_WritePin>
	lcd_write(byte);
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ffc2 	bl	8001004 <lcd_write>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40020400 	.word	0x40020400

0800108c <setCursor>:

//  set (x, y) position of the cursor
void setCursor(uint8_t col, uint8_t row){
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	460a      	mov	r2, r1
 8001096:	71fb      	strb	r3, [r7, #7]
 8001098:	4613      	mov	r3, r2
 800109a:	71bb      	strb	r3, [r7, #6]
	if ((col+1)*(row+1)<80){
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	3301      	adds	r3, #1
 80010a0:	79ba      	ldrb	r2, [r7, #6]
 80010a2:	3201      	adds	r2, #1
 80010a4:	fb02 f303 	mul.w	r3, r2, r3
 80010a8:	2b4f      	cmp	r3, #79	; 0x4f
 80010aa:	dc10      	bgt.n	80010ce <setCursor+0x42>
		lcd_command(LCD_SETDRAMADD|(col + 40*row)); //in the second row, address is offset by 40
 80010ac:	79bb      	ldrb	r3, [r7, #6]
 80010ae:	461a      	mov	r2, r3
 80010b0:	0092      	lsls	r2, r2, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	4413      	add	r3, r2
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	b25b      	sxtb	r3, r3
 80010c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ffaf 	bl	800102c <lcd_command>
	}
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <lcd_print>:

//  print a string on the display, starting from the cursor position
void lcd_print(char string[]){  //pointer to first char in the string
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b084      	sub	sp, #16
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
	
	int size = strlen(string);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff f87e 	bl	80001e0 <strlen>
 80010e4:	4603      	mov	r3, r0
 80010e6:	60fb      	str	r3, [r7, #12]
	
	while (size--){
 80010e8:	e006      	b.n	80010f8 <lcd_print+0x22>
		lcd_data(*string++);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ffb6 	bl	8001064 <lcd_data>
	while (size--){
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	1e5a      	subs	r2, r3, #1
 80010fc:	60fa      	str	r2, [r7, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f3      	bne.n	80010ea <lcd_print+0x14>
	}
}
 8001102:	bf00      	nop
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <lcd_println>:

void lcd_println(char string[], uint8_t row){
 800110c:	b5b0      	push	{r4, r5, r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
	
	char line[] = "                ";
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <lcd_println+0x6c>)
 800111a:	f107 0408 	add.w	r4, r7, #8
 800111e:	461d      	mov	r5, r3
 8001120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001124:	682b      	ldr	r3, [r5, #0]
 8001126:	7023      	strb	r3, [r4, #0]
	
	int size = strlen(string);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff f859 	bl	80001e0 <strlen>
 800112e:	4603      	mov	r3, r0
 8001130:	61fb      	str	r3, [r7, #28]
	
	if (size > 16)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	2b10      	cmp	r3, #16
 8001136:	dd0c      	ble.n	8001152 <lcd_println+0x46>
		size = 16;
 8001138:	2310      	movs	r3, #16
 800113a:	61fb      	str	r3, [r7, #28]

	while (size--){
 800113c:	e009      	b.n	8001152 <lcd_println+0x46>
		line[size] = string[size];
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	4413      	add	r3, r2
 8001144:	7819      	ldrb	r1, [r3, #0]
 8001146:	f107 0208 	add.w	r2, r7, #8
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	4413      	add	r3, r2
 800114e:	460a      	mov	r2, r1
 8001150:	701a      	strb	r2, [r3, #0]
	while (size--){
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	1e5a      	subs	r2, r3, #1
 8001156:	61fa      	str	r2, [r7, #28]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1f0      	bne.n	800113e <lcd_println+0x32>
	}
	setCursor(0, row);
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	4619      	mov	r1, r3
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff ff93 	bl	800108c <setCursor>
	lcd_print(line);
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ffb3 	bl	80010d6 <lcd_print>
}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bdb0      	pop	{r4, r5, r7, pc}
 8001178:	08007998 	.word	0x08007998

0800117c <writeCustomChar>:

void writeCustomChar(uint8_t address, uint8_t map[]){ //fill Character Generator RAM with custom symbols
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
	address &= 0x7; //address must be 0 to 7
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	71fb      	strb	r3, [r7, #7]
	lcd_command(0x40 | (address <<3)); //Set CGRAM address + address shifted left by 3 bits to start writing first byte
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	b25b      	sxtb	r3, r3
 8001196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800119a:	b25b      	sxtb	r3, r3
 800119c:	b2db      	uxtb	r3, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff44 	bl	800102c <lcd_command>
	for (int i = 0; i<8; i++){
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	e009      	b.n	80011be <writeCustomChar+0x42>
		lcd_data(map[i]);	
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff56 	bl	8001064 <lcd_data>
	for (int i = 0; i<8; i++){
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	3301      	adds	r3, #1
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2b07      	cmp	r3, #7
 80011c2:	ddf2      	ble.n	80011aa <writeCustomChar+0x2e>
	}
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <loadCustomChars>:

void loadCustomChars(){ //write all custom characters to the LCD module memory
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	writeCustomChar(CHAR_1_5, CUSTOM_1_5);
 80011d4:	490a      	ldr	r1, [pc, #40]	; (8001200 <loadCustomChars+0x30>)
 80011d6:	2001      	movs	r0, #1
 80011d8:	f7ff ffd0 	bl	800117c <writeCustomChar>
	writeCustomChar(CHAR_2_5, CUSTOM_2_5);
 80011dc:	4909      	ldr	r1, [pc, #36]	; (8001204 <loadCustomChars+0x34>)
 80011de:	2002      	movs	r0, #2
 80011e0:	f7ff ffcc 	bl	800117c <writeCustomChar>
	writeCustomChar(CHAR_3_5, CUSTOM_3_5);
 80011e4:	4908      	ldr	r1, [pc, #32]	; (8001208 <loadCustomChars+0x38>)
 80011e6:	2003      	movs	r0, #3
 80011e8:	f7ff ffc8 	bl	800117c <writeCustomChar>
	writeCustomChar(CHAR_4_5, CUSTOM_4_5);
 80011ec:	4907      	ldr	r1, [pc, #28]	; (800120c <loadCustomChars+0x3c>)
 80011ee:	2004      	movs	r0, #4
 80011f0:	f7ff ffc4 	bl	800117c <writeCustomChar>
	writeCustomChar(CHAR_5_5, CUSTOM_5_5);
 80011f4:	4906      	ldr	r1, [pc, #24]	; (8001210 <loadCustomChars+0x40>)
 80011f6:	2005      	movs	r0, #5
 80011f8:	f7ff ffc0 	bl	800117c <writeCustomChar>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000000 	.word	0x20000000
 8001204:	20000008 	.word	0x20000008
 8001208:	20000010 	.word	0x20000010
 800120c:	20000018 	.word	0x20000018
 8001210:	20000020 	.word	0x20000020

08001214 <lcd_drawBar>:

void lcd_drawBar(int value){ //draws a bar using custom characters and spaces
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	setCursor(0,1); //bar is placed in the bottom row
 800121c:	2101      	movs	r1, #1
 800121e:	2000      	movs	r0, #0
 8001220:	f7ff ff34 	bl	800108c <setCursor>

	if (value>80)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b50      	cmp	r3, #80	; 0x50
 8001228:	dd01      	ble.n	800122e <lcd_drawBar+0x1a>
		value = 80;
 800122a:	2350      	movs	r3, #80	; 0x50
 800122c:	607b      	str	r3, [r7, #4]
	int quotient = value / 5;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a23      	ldr	r2, [pc, #140]	; (80012c0 <lcd_drawBar+0xac>)
 8001232:	fb82 1203 	smull	r1, r2, r2, r3
 8001236:	1052      	asrs	r2, r2, #1
 8001238:	17db      	asrs	r3, r3, #31
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	613b      	str	r3, [r7, #16]
	int modulo = value % 5;
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <lcd_drawBar+0xac>)
 8001242:	fb83 1302 	smull	r1, r3, r3, r2
 8001246:	1059      	asrs	r1, r3, #1
 8001248:	17d3      	asrs	r3, r2, #31
 800124a:	1ac9      	subs	r1, r1, r3
 800124c:	460b      	mov	r3, r1
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	440b      	add	r3, r1
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	60fb      	str	r3, [r7, #12]
	
	int i = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
	
	while (i<quotient){ //we write the required number of CHAR_5_5
 800125a:	e007      	b.n	800126c <lcd_drawBar+0x58>
		bar[i] = CHAR_5_5;
 800125c:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <lcd_drawBar+0xb0>)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	4413      	add	r3, r2
 8001262:	2205      	movs	r2, #5
 8001264:	701a      	strb	r2, [r3, #0]
		i++;
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3301      	adds	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
	while (i<quotient){ //we write the required number of CHAR_5_5
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	429a      	cmp	r2, r3
 8001272:	dbf3      	blt.n	800125c <lcd_drawBar+0x48>
	}
	
	if (modulo == 0) bar[i] = ' '; //then we either place a space
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d105      	bne.n	8001286 <lcd_drawBar+0x72>
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <lcd_drawBar+0xb0>)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	4413      	add	r3, r2
 8001280:	2220      	movs	r2, #32
 8001282:	701a      	strb	r2, [r3, #0]
 8001284:	e006      	b.n	8001294 <lcd_drawBar+0x80>
	else {
		bar[i] = CHAR_1_5 + modulo -1; //or the correct partial block
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	b2d9      	uxtb	r1, r3
 800128a:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <lcd_drawBar+0xb0>)
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	4413      	add	r3, r2
 8001290:	460a      	mov	r2, r1
 8001292:	701a      	strb	r2, [r3, #0]
	}
	i++;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	3301      	adds	r3, #1
 8001298:	617b      	str	r3, [r7, #20]
	while (i<16){ //and we fill the remainder with spaces
 800129a:	e007      	b.n	80012ac <lcd_drawBar+0x98>
		bar[i] = ' ';
 800129c:	4a09      	ldr	r2, [pc, #36]	; (80012c4 <lcd_drawBar+0xb0>)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	4413      	add	r3, r2
 80012a2:	2220      	movs	r2, #32
 80012a4:	701a      	strb	r2, [r3, #0]
		i++;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	3301      	adds	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
	while (i<16){ //and we fill the remainder with spaces
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	2b0f      	cmp	r3, #15
 80012b0:	ddf4      	ble.n	800129c <lcd_drawBar+0x88>
	}
	lcd_print(bar); //finally we write to the LCD
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <lcd_drawBar+0xb0>)
 80012b4:	f7ff ff0f 	bl	80010d6 <lcd_print>
}
 80012b8:	bf00      	nop
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	66666667 	.word	0x66666667
 80012c4:	20000230 	.word	0x20000230

080012c8 <lcd_initialize>:

void lcd_initialize(){  //initialize WH1602C LCD module in 4 bit mode, page 25
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0

	HAL_Delay(50);  //wait >40 ms as per datasheet
 80012cc:	2032      	movs	r0, #50	; 0x32
 80012ce:	f000 fd65 	bl	8001d9c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2104      	movs	r1, #4
 80012d6:	481f      	ldr	r0, [pc, #124]	; (8001354 <lcd_initialize+0x8c>)
 80012d8:	f001 fd38 	bl	8002d4c <HAL_GPIO_WritePin>
	//LCD WritePIn is hard-wired low as per board schematic

	//Magic reset sequence
	lcd_write4(0x03);  //4-bit mode
 80012dc:	2003      	movs	r0, #3
 80012de:	f7ff fe55 	bl	8000f8c <lcd_write4>
	HAL_Delay(5);
 80012e2:	2005      	movs	r0, #5
 80012e4:	f000 fd5a 	bl	8001d9c <HAL_Delay>
	lcd_write4(0x03);
 80012e8:	2003      	movs	r0, #3
 80012ea:	f7ff fe4f 	bl	8000f8c <lcd_write4>
	HAL_Delay(5);
 80012ee:	2005      	movs	r0, #5
 80012f0:	f000 fd54 	bl	8001d9c <HAL_Delay>
	lcd_write4(0x03);
 80012f4:	2003      	movs	r0, #3
 80012f6:	f7ff fe49 	bl	8000f8c <lcd_write4>
	HAL_Delay(5);
 80012fa:	2005      	movs	r0, #5
 80012fc:	f000 fd4e 	bl	8001d9c <HAL_Delay>
	lcd_write4(0x02); //Set 4-bit mode
 8001300:	2002      	movs	r0, #2
 8001302:	f7ff fe43 	bl	8000f8c <lcd_write4>
	lcd_write(0x28); //4bit, 2 lines, 5x8 font
 8001306:	2028      	movs	r0, #40	; 0x28
 8001308:	f7ff fe7c 	bl	8001004 <lcd_write>
	HAL_Delay(5);
 800130c:	2005      	movs	r0, #5
 800130e:	f000 fd45 	bl	8001d9c <HAL_Delay>
	lcd_write(0x08); //display off;
 8001312:	2008      	movs	r0, #8
 8001314:	f7ff fe76 	bl	8001004 <lcd_write>
	lcd_write(LCD_CLEAR_COMMAND); 			 //display clear;
 8001318:	2001      	movs	r0, #1
 800131a:	f7ff fe73 	bl	8001004 <lcd_write>
	lcd_write(0x06); //entry mode set: increment
 800131e:	2006      	movs	r0, #6
 8001320:	f7ff fe70 	bl	8001004 <lcd_write>
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);  //enable backlight
 8001324:	2201      	movs	r2, #1
 8001326:	2110      	movs	r1, #16
 8001328:	480b      	ldr	r0, [pc, #44]	; (8001358 <lcd_initialize+0x90>)
 800132a:	f001 fd0f 	bl	8002d4c <HAL_GPIO_WritePin>
	//_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON|CURSOR_ON|BLINK_ON;
	_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <lcd_initialize+0x94>)
 8001330:	220c      	movs	r2, #12
 8001332:	701a      	strb	r2, [r3, #0]
	lcd_write(_display_ctrl); //set as above
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <lcd_initialize+0x94>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fe63 	bl	8001004 <lcd_write>
	lcd_write(0x02); //go home
 800133e:	2002      	movs	r0, #2
 8001340:	f7ff fe60 	bl	8001004 <lcd_write>
	HAL_Delay(2);
 8001344:	2002      	movs	r0, #2
 8001346:	f000 fd29 	bl	8001d9c <HAL_Delay>
	loadCustomChars();
 800134a:	f7ff ff41 	bl	80011d0 <loadCustomChars>

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40020400 	.word	0x40020400
 8001358:	40020000 	.word	0x40020000
 800135c:	20000220 	.word	0x20000220

08001360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800137c:	4013      	ands	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800138c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001392:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	60d3      	str	r3, [r2, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	if (htim == &htim2){
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d102      	bne.n	80013be <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_ADC_Start_IT(&hadc1);
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80013ba:	f000 fd57 	bl	8001e6c <HAL_ADC_Start_IT>
//		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
	}

}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000288 	.word	0x20000288
 80013cc:	20000240 	.word	0x20000240

080013d0 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08e      	sub	sp, #56	; 0x38
 80013d4:	af04      	add	r7, sp, #16
 80013d6:	6078      	str	r0, [r7, #4]
	char buffer[20];
	int value = HAL_ADC_GetValue(&hadc1);
 80013d8:	4827      	ldr	r0, [pc, #156]	; (8001478 <HAL_ADC_ConvCpltCallback+0xa8>)
 80013da:	f000 ff46 	bl	800226a <HAL_ADC_GetValue>
 80013de:	4603      	mov	r3, r0
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
	float voltage = value *3.3 / 4096.0; //make sure that it's a float with the division
 80013e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013e4:	f7ff f8a6 	bl	8000534 <__aeabi_i2d>
 80013e8:	a321      	add	r3, pc, #132	; (adr r3, 8001470 <HAL_ADC_ConvCpltCallback+0xa0>)
 80013ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ee:	f7ff f90b 	bl	8000608 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	4b1f      	ldr	r3, [pc, #124]	; (800147c <HAL_ADC_ConvCpltCallback+0xac>)
 8001400:	f7ff fa2c 	bl	800085c <__aeabi_ddiv>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	f7ff fbd4 	bl	8000bb8 <__aeabi_d2f>
 8001410:	4603      	mov	r3, r0
 8001412:	623b      	str	r3, [r7, #32]

	snprintf(buffer, sizeof(buffer), "%s%.3f%s%s", "Voltage: ", voltage, " V");
 8001414:	6a38      	ldr	r0, [r7, #32]
 8001416:	f7ff f89f 	bl	8000558 <__aeabi_f2d>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	f107 000c 	add.w	r0, r7, #12
 8001422:	4917      	ldr	r1, [pc, #92]	; (8001480 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001424:	9102      	str	r1, [sp, #8]
 8001426:	e9cd 2300 	strd	r2, r3, [sp]
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <HAL_ADC_ConvCpltCallback+0xb4>)
 800142c:	4a16      	ldr	r2, [pc, #88]	; (8001488 <HAL_ADC_ConvCpltCallback+0xb8>)
 800142e:	2114      	movs	r1, #20
 8001430:	f004 f864 	bl	80054fc <sniprintf>
	lcd_println(buffer, 0);
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fe66 	bl	800110c <lcd_println>
	lcd_drawBar(voltage * 5 * BAR - 3); // -3 is an empiric value so that the code doesn't crash
 8001440:	edd7 7a08 	vldr	s15, [r7, #32]
 8001444:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800144c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001454:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001458:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800145c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001460:	ee17 0a90 	vmov	r0, s15
 8001464:	f7ff fed6 	bl	8001214 <lcd_drawBar>


//	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
}
 8001468:	bf00      	nop
 800146a:	3728      	adds	r7, #40	; 0x28
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	66666666 	.word	0x66666666
 8001474:	400a6666 	.word	0x400a6666
 8001478:	20000240 	.word	0x20000240
 800147c:	40b00000 	.word	0x40b00000
 8001480:	080079c4 	.word	0x080079c4
 8001484:	080079ac 	.word	0x080079ac
 8001488:	080079b8 	.word	0x080079b8

0800148c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001490:	f000 fc12 	bl	8001cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001494:	f000 f81a 	bl	80014cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001498:	f000 f94e 	bl	8001738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800149c:	f000 f922 	bl	80016e4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80014a0:	f000 f880 	bl	80015a4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80014a4:	f000 f8d0 	bl	8001648 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_initialize();
 80014a8:	f7ff ff0e 	bl	80012c8 <lcd_initialize>
  lcd_clear();
 80014ac:	f7ff fdd2 	bl	8001054 <lcd_clear>

  HAL_TIM_Base_Start_IT(&htim2);
 80014b0:	4805      	ldr	r0, [pc, #20]	; (80014c8 <main+0x3c>)
 80014b2:	f002 f929 	bl	8003708 <HAL_TIM_Base_Start_IT>
//  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80014b6:	2006      	movs	r0, #6
 80014b8:	f7ff ff52 	bl	8001360 <__NVIC_SetPriorityGrouping>
  HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	2101      	movs	r1, #1
 80014c0:	2012      	movs	r0, #18
 80014c2:	f001 f9f6 	bl	80028b2 <HAL_NVIC_SetPriority>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <main+0x3a>
 80014c8:	20000288 	.word	0x20000288

080014cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b094      	sub	sp, #80	; 0x50
 80014d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d2:	f107 0320 	add.w	r3, r7, #32
 80014d6:	2230      	movs	r2, #48	; 0x30
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f003 fb9c 	bl	8004c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	4b29      	ldr	r3, [pc, #164]	; (800159c <SystemClock_Config+0xd0>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	4a28      	ldr	r2, [pc, #160]	; (800159c <SystemClock_Config+0xd0>)
 80014fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001500:	4b26      	ldr	r3, [pc, #152]	; (800159c <SystemClock_Config+0xd0>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800150c:	2300      	movs	r3, #0
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <SystemClock_Config+0xd4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001518:	4a21      	ldr	r2, [pc, #132]	; (80015a0 <SystemClock_Config+0xd4>)
 800151a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <SystemClock_Config+0xd4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800152c:	2302      	movs	r3, #2
 800152e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001530:	2301      	movs	r3, #1
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001534:	2310      	movs	r3, #16
 8001536:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001538:	2302      	movs	r3, #2
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800153c:	2300      	movs	r3, #0
 800153e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001540:	2310      	movs	r3, #16
 8001542:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001544:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001548:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800154a:	2304      	movs	r3, #4
 800154c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800154e:	2307      	movs	r3, #7
 8001550:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001552:	f107 0320 	add.w	r3, r7, #32
 8001556:	4618      	mov	r0, r3
 8001558:	f001 fc12 	bl	8002d80 <HAL_RCC_OscConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001562:	f000 f96f 	bl	8001844 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001566:	230f      	movs	r3, #15
 8001568:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156a:	2302      	movs	r3, #2
 800156c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001576:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	2102      	movs	r1, #2
 8001582:	4618      	mov	r0, r3
 8001584:	f001 fe74 	bl	8003270 <HAL_RCC_ClockConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800158e:	f000 f959 	bl	8001844 <Error_Handler>
  }
}
 8001592:	bf00      	nop
 8001594:	3750      	adds	r7, #80	; 0x50
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40007000 	.word	0x40007000

080015a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015aa:	463b      	mov	r3, r7
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015b6:	4b22      	ldr	r3, [pc, #136]	; (8001640 <MX_ADC1_Init+0x9c>)
 80015b8:	4a22      	ldr	r2, [pc, #136]	; (8001644 <MX_ADC1_Init+0xa0>)
 80015ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015bc:	4b20      	ldr	r3, [pc, #128]	; (8001640 <MX_ADC1_Init+0x9c>)
 80015be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015c4:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <MX_ADC1_Init+0x9c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015ca:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <MX_ADC1_Init+0x9c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <MX_ADC1_Init+0x9c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015d6:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <MX_ADC1_Init+0x9c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80015de:	4b18      	ldr	r3, [pc, #96]	; (8001640 <MX_ADC1_Init+0x9c>)
 80015e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <MX_ADC1_Init+0x9c>)
 80015e8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80015ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ee:	4b14      	ldr	r3, [pc, #80]	; (8001640 <MX_ADC1_Init+0x9c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <MX_ADC1_Init+0x9c>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_ADC1_Init+0x9c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_ADC1_Init+0x9c>)
 8001604:	2201      	movs	r2, #1
 8001606:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001608:	480d      	ldr	r0, [pc, #52]	; (8001640 <MX_ADC1_Init+0x9c>)
 800160a:	f000 fbeb 	bl	8001de4 <HAL_ADC_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001614:	f000 f916 	bl	8001844 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001618:	2301      	movs	r3, #1
 800161a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800161c:	2301      	movs	r3, #1
 800161e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001620:	2307      	movs	r3, #7
 8001622:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001624:	463b      	mov	r3, r7
 8001626:	4619      	mov	r1, r3
 8001628:	4805      	ldr	r0, [pc, #20]	; (8001640 <MX_ADC1_Init+0x9c>)
 800162a:	f000 fe3f 	bl	80022ac <HAL_ADC_ConfigChannel>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001634:	f000 f906 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000240 	.word	0x20000240
 8001644:	40012000 	.word	0x40012000

08001648 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	463b      	mov	r3, r7
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001664:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <MX_TIM2_Init+0x98>)
 8001666:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800166a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400 - 1;
 800166c:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <MX_TIM2_Init+0x98>)
 800166e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001672:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001674:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <MX_TIM2_Init+0x98>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000 - 1;
 800167a:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <MX_TIM2_Init+0x98>)
 800167c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001680:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <MX_TIM2_Init+0x98>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001688:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <MX_TIM2_Init+0x98>)
 800168a:	2200      	movs	r2, #0
 800168c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800168e:	4814      	ldr	r0, [pc, #80]	; (80016e0 <MX_TIM2_Init+0x98>)
 8001690:	f001 ffea 	bl	8003668 <HAL_TIM_Base_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800169a:	f000 f8d3 	bl	8001844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800169e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	4619      	mov	r1, r3
 80016aa:	480d      	ldr	r0, [pc, #52]	; (80016e0 <MX_TIM2_Init+0x98>)
 80016ac:	f002 f996 	bl	80039dc <HAL_TIM_ConfigClockSource>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016b6:	f000 f8c5 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016ba:	2320      	movs	r3, #32
 80016bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016c2:	463b      	mov	r3, r7
 80016c4:	4619      	mov	r1, r3
 80016c6:	4806      	ldr	r0, [pc, #24]	; (80016e0 <MX_TIM2_Init+0x98>)
 80016c8:	f002 fb92 	bl	8003df0 <HAL_TIMEx_MasterConfigSynchronization>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80016d2:	f000 f8b7 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000288 	.word	0x20000288

080016e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 80016ea:	4a12      	ldr	r2, [pc, #72]	; (8001734 <MX_USART2_UART_Init+0x50>)
 80016ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 80016f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 800170a:	220c      	movs	r2, #12
 800170c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 800171c:	f002 fbea 	bl	8003ef4 <HAL_UART_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001726:	f000 f88d 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200002d0 	.word	0x200002d0
 8001734:	40004400 	.word	0x40004400

08001738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	4b38      	ldr	r3, [pc, #224]	; (8001834 <MX_GPIO_Init+0xfc>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a37      	ldr	r2, [pc, #220]	; (8001834 <MX_GPIO_Init+0xfc>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b35      	ldr	r3, [pc, #212]	; (8001834 <MX_GPIO_Init+0xfc>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	4b31      	ldr	r3, [pc, #196]	; (8001834 <MX_GPIO_Init+0xfc>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a30      	ldr	r2, [pc, #192]	; (8001834 <MX_GPIO_Init+0xfc>)
 8001774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <MX_GPIO_Init+0xfc>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	4b2a      	ldr	r3, [pc, #168]	; (8001834 <MX_GPIO_Init+0xfc>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a29      	ldr	r2, [pc, #164]	; (8001834 <MX_GPIO_Init+0xfc>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b27      	ldr	r3, [pc, #156]	; (8001834 <MX_GPIO_Init+0xfc>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	4b23      	ldr	r3, [pc, #140]	; (8001834 <MX_GPIO_Init+0xfc>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a22      	ldr	r2, [pc, #136]	; (8001834 <MX_GPIO_Init+0xfc>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <MX_GPIO_Init+0xfc>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80017be:	2200      	movs	r2, #0
 80017c0:	2130      	movs	r1, #48	; 0x30
 80017c2:	481d      	ldr	r0, [pc, #116]	; (8001838 <MX_GPIO_Init+0x100>)
 80017c4:	f001 fac2 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80017c8:	2200      	movs	r2, #0
 80017ca:	f24f 0106 	movw	r1, #61446	; 0xf006
 80017ce:	481b      	ldr	r0, [pc, #108]	; (800183c <MX_GPIO_Init+0x104>)
 80017d0:	f001 fabc 	bl	8002d4c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	4815      	ldr	r0, [pc, #84]	; (8001840 <MX_GPIO_Init+0x108>)
 80017ec:	f001 f92a 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 80017f0:	2330      	movs	r3, #48	; 0x30
 80017f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	480c      	ldr	r0, [pc, #48]	; (8001838 <MX_GPIO_Init+0x100>)
 8001808:	f001 f91c 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 800180c:	f24f 0306 	movw	r3, #61446	; 0xf006
 8001810:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001812:	2301      	movs	r3, #1
 8001814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_GPIO_Init+0x104>)
 8001826:	f001 f90d 	bl	8002a44 <HAL_GPIO_Init>

}
 800182a:	bf00      	nop
 800182c:	3728      	adds	r7, #40	; 0x28
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	40020000 	.word	0x40020000
 800183c:	40020400 	.word	0x40020400
 8001840:	40020800 	.word	0x40020800

08001844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001848:	b672      	cpsid	i
}
 800184a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800184c:	e7fe      	b.n	800184c <Error_Handler+0x8>
	...

08001850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <HAL_MspInit+0x4c>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	4a0f      	ldr	r2, [pc, #60]	; (800189c <HAL_MspInit+0x4c>)
 8001860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001864:	6453      	str	r3, [r2, #68]	; 0x44
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <HAL_MspInit+0x4c>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_MspInit+0x4c>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	4a08      	ldr	r2, [pc, #32]	; (800189c <HAL_MspInit+0x4c>)
 800187c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001880:	6413      	str	r3, [r2, #64]	; 0x40
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_MspInit+0x4c>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800188e:	2007      	movs	r0, #7
 8001890:	f001 f804 	bl	800289c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40023800 	.word	0x40023800

080018a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a1b      	ldr	r2, [pc, #108]	; (800192c <HAL_ADC_MspInit+0x8c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d12f      	bne.n	8001922 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <HAL_ADC_MspInit+0x90>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	4a19      	ldr	r2, [pc, #100]	; (8001930 <HAL_ADC_MspInit+0x90>)
 80018cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d0:	6453      	str	r3, [r2, #68]	; 0x44
 80018d2:	4b17      	ldr	r3, [pc, #92]	; (8001930 <HAL_ADC_MspInit+0x90>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <HAL_ADC_MspInit+0x90>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <HAL_ADC_MspInit+0x90>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <HAL_ADC_MspInit+0x90>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018fa:	2302      	movs	r3, #2
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018fe:	2303      	movs	r3, #3
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4809      	ldr	r0, [pc, #36]	; (8001934 <HAL_ADC_MspInit+0x94>)
 800190e:	f001 f899 	bl	8002a44 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	2012      	movs	r0, #18
 8001918:	f000 ffcb 	bl	80028b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800191c:	2012      	movs	r0, #18
 800191e:	f000 ffe4 	bl	80028ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	; 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40012000 	.word	0x40012000
 8001930:	40023800 	.word	0x40023800
 8001934:	40020000 	.word	0x40020000

08001938 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001948:	d115      	bne.n	8001976 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <HAL_TIM_Base_MspInit+0x48>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <HAL_TIM_Base_MspInit+0x48>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6413      	str	r3, [r2, #64]	; 0x40
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_TIM_Base_MspInit+0x48>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	201c      	movs	r0, #28
 800196c:	f000 ffa1 	bl	80028b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001970:	201c      	movs	r0, #28
 8001972:	f000 ffba 	bl	80028ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800

08001984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a1d      	ldr	r2, [pc, #116]	; (8001a18 <HAL_UART_MspInit+0x94>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d133      	bne.n	8001a0e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <HAL_UART_MspInit+0x98>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	4a1b      	ldr	r2, [pc, #108]	; (8001a1c <HAL_UART_MspInit+0x98>)
 80019b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b4:	6413      	str	r3, [r2, #64]	; 0x40
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_UART_MspInit+0x98>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <HAL_UART_MspInit+0x98>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <HAL_UART_MspInit+0x98>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_UART_MspInit+0x98>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019de:	230c      	movs	r3, #12
 80019e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ee:	2307      	movs	r3, #7
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	4809      	ldr	r0, [pc, #36]	; (8001a20 <HAL_UART_MspInit+0x9c>)
 80019fa:	f001 f823 	bl	8002a44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	2026      	movs	r0, #38	; 0x26
 8001a04:	f000 ff55 	bl	80028b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a08:	2026      	movs	r0, #38	; 0x26
 8001a0a:	f000 ff6e 	bl	80028ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a0e:	bf00      	nop
 8001a10:	3728      	adds	r7, #40	; 0x28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40004400 	.word	0x40004400
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40020000 	.word	0x40020000

08001a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <NMI_Handler+0x4>

08001a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <HardFault_Handler+0x4>

08001a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <MemManage_Handler+0x4>

08001a36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <BusFault_Handler+0x4>

08001a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <UsageFault_Handler+0x4>

08001a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a70:	f000 f974 	bl	8001d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <ADC_IRQHandler+0x10>)
 8001a7e:	f000 fab3 	bl	8001fe8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000240 	.word	0x20000240

08001a8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <TIM2_IRQHandler+0x10>)
 8001a92:	f001 fe9b 	bl	80037cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000288 	.word	0x20000288

08001aa0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <USART2_IRQHandler+0x10>)
 8001aa6:	f002 fa73 	bl	8003f90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200002d0 	.word	0x200002d0

08001ab4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
	return 1;
 8001ab8:	2301      	movs	r3, #1
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_kill>:

int _kill(int pid, int sig)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ace:	f003 f879 	bl	8004bc4 <__errno>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2216      	movs	r2, #22
 8001ad6:	601a      	str	r2, [r3, #0]
	return -1;
 8001ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <_exit>:

void _exit (int status)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001aec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ffe7 	bl	8001ac4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001af6:	e7fe      	b.n	8001af6 <_exit+0x12>

08001af8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	e00a      	b.n	8001b20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b0a:	f3af 8000 	nop.w
 8001b0e:	4601      	mov	r1, r0
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	60ba      	str	r2, [r7, #8]
 8001b16:	b2ca      	uxtb	r2, r1
 8001b18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	dbf0      	blt.n	8001b0a <_read+0x12>
	}

return len;
 8001b28:	687b      	ldr	r3, [r7, #4]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	e009      	b.n	8001b58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	60ba      	str	r2, [r7, #8]
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3301      	adds	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	dbf1      	blt.n	8001b44 <_write+0x12>
	}
	return len;
 8001b60:	687b      	ldr	r3, [r7, #4]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <_close>:

int _close(int file)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
	return -1;
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b92:	605a      	str	r2, [r3, #4]
	return 0;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <_isatty>:

int _isatty(int file)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
	return 1;
 8001baa:	2301      	movs	r3, #1
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
	return 0;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <_sbrk+0x5c>)
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <_sbrk+0x60>)
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d102      	bne.n	8001bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <_sbrk+0x64>)
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <_sbrk+0x68>)
 8001bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <_sbrk+0x64>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d207      	bcs.n	8001c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c04:	f002 ffde 	bl	8004bc4 <__errno>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c12:	e009      	b.n	8001c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <_sbrk+0x64>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <_sbrk+0x64>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <_sbrk+0x64>)
 8001c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c26:	68fb      	ldr	r3, [r7, #12]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20018000 	.word	0x20018000
 8001c34:	00000400 	.word	0x00000400
 8001c38:	20000224 	.word	0x20000224
 8001c3c:	20000328 	.word	0x20000328

08001c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <SystemInit+0x20>)
 8001c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <SystemInit+0x20>)
 8001c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c68:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c6a:	490e      	ldr	r1, [pc, #56]	; (8001ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c70:	e002      	b.n	8001c78 <LoopCopyDataInit>

08001c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c76:	3304      	adds	r3, #4

08001c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c7c:	d3f9      	bcc.n	8001c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c7e:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c80:	4c0b      	ldr	r4, [pc, #44]	; (8001cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c84:	e001      	b.n	8001c8a <LoopFillZerobss>

08001c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c88:	3204      	adds	r2, #4

08001c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c8c:	d3fb      	bcc.n	8001c86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c8e:	f7ff ffd7 	bl	8001c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c92:	f002 ff9d 	bl	8004bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c96:	f7ff fbf9 	bl	800148c <main>
  bx  lr    
 8001c9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca4:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8001ca8:	08007dd4 	.word	0x08007dd4
  ldr r2, =_sbss
 8001cac:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8001cb0:	20000328 	.word	0x20000328

08001cb4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb4:	e7fe      	b.n	8001cb4 <DMA1_Stream0_IRQHandler>
	...

08001cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <HAL_Init+0x40>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	; (8001cf8 <HAL_Init+0x40>)
 8001cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_Init+0x40>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_Init+0x40>)
 8001cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <HAL_Init+0x40>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a07      	ldr	r2, [pc, #28]	; (8001cf8 <HAL_Init+0x40>)
 8001cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce0:	2003      	movs	r0, #3
 8001ce2:	f000 fddb 	bl	800289c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f000 f808 	bl	8001cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cec:	f7ff fdb0 	bl	8001850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023c00 	.word	0x40023c00

08001cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_InitTick+0x54>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_InitTick+0x58>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 fdf3 	bl	8002906 <HAL_SYSTICK_Config>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00e      	b.n	8001d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b0f      	cmp	r3, #15
 8001d2e:	d80a      	bhi.n	8001d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d30:	2200      	movs	r2, #0
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d38:	f000 fdbb 	bl	80028b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d3c:	4a06      	ldr	r2, [pc, #24]	; (8001d58 <HAL_InitTick+0x5c>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	e000      	b.n	8001d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000028 	.word	0x20000028
 8001d54:	20000030 	.word	0x20000030
 8001d58:	2000002c 	.word	0x2000002c

08001d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_IncTick+0x20>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_IncTick+0x24>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <HAL_IncTick+0x24>)
 8001d6e:	6013      	str	r3, [r2, #0]
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000030 	.word	0x20000030
 8001d80:	20000314 	.word	0x20000314

08001d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return uwTick;
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <HAL_GetTick+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000314 	.word	0x20000314

08001d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da4:	f7ff ffee 	bl	8001d84 <HAL_GetTick>
 8001da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001db4:	d005      	beq.n	8001dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_Delay+0x44>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dc2:	bf00      	nop
 8001dc4:	f7ff ffde 	bl	8001d84 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d8f7      	bhi.n	8001dc4 <HAL_Delay+0x28>
  {
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000030 	.word	0x20000030

08001de4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e033      	b.n	8001e62 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d109      	bne.n	8001e16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff fd4c 	bl	80018a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d118      	bne.n	8001e54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e2a:	f023 0302 	bic.w	r3, r3, #2
 8001e2e:	f043 0202 	orr.w	r2, r3, #2
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 fb5a 	bl	80024f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f023 0303 	bic.w	r3, r3, #3
 8001e4a:	f043 0201 	orr.w	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	641a      	str	r2, [r3, #64]	; 0x40
 8001e52:	e001      	b.n	8001e58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_ADC_Start_IT+0x1a>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e0a1      	b.n	8001fca <HAL_ADC_Start_IT+0x15e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d018      	beq.n	8001ece <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001eac:	4b4a      	ldr	r3, [pc, #296]	; (8001fd8 <HAL_ADC_Start_IT+0x16c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a4a      	ldr	r2, [pc, #296]	; (8001fdc <HAL_ADC_Start_IT+0x170>)
 8001eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb6:	0c9a      	lsrs	r2, r3, #18
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ec0:	e002      	b.n	8001ec8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f9      	bne.n	8001ec2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d169      	bne.n	8001fb0 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ee4:	f023 0301 	bic.w	r3, r3, #1
 8001ee8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d007      	beq.n	8001f0e <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f1a:	d106      	bne.n	8001f2a <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f20:	f023 0206 	bic.w	r2, r3, #6
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	645a      	str	r2, [r3, #68]	; 0x44
 8001f28:	e002      	b.n	8001f30 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f38:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <HAL_ADC_Start_IT+0x174>)
 8001f3a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f44:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f54:	f043 0320 	orr.w	r3, r3, #32
 8001f58:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 031f 	and.w	r3, r3, #31
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10f      	bne.n	8001f86 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d129      	bne.n	8001fc8 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	e020      	b.n	8001fc8 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a16      	ldr	r2, [pc, #88]	; (8001fe4 <HAL_ADC_Start_IT+0x178>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_ADC_Start_IT+0x15c>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d114      	bne.n	8001fc8 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	e00b      	b.n	8001fc8 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f043 0210 	orr.w	r2, r3, #16
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc0:	f043 0201 	orr.w	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000028 	.word	0x20000028
 8001fdc:	431bde83 	.word	0x431bde83
 8001fe0:	40012300 	.word	0x40012300
 8001fe4:	40012000 	.word	0x40012000

08001fe8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b02      	cmp	r3, #2
 8002004:	bf0c      	ite	eq
 8002006:	2301      	moveq	r3, #1
 8002008:	2300      	movne	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0320 	and.w	r3, r3, #32
 8002018:	2b20      	cmp	r3, #32
 800201a:	bf0c      	ite	eq
 800201c:	2301      	moveq	r3, #1
 800201e:	2300      	movne	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d049      	beq.n	80020be <HAL_ADC_IRQHandler+0xd6>
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d046      	beq.n	80020be <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	2b00      	cmp	r3, #0
 800203a:	d105      	bne.n	8002048 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d12b      	bne.n	80020ae <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800205a:	2b00      	cmp	r3, #0
 800205c:	d127      	bne.n	80020ae <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002068:	2b00      	cmp	r3, #0
 800206a:	d006      	beq.n	800207a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002076:	2b00      	cmp	r3, #0
 8002078:	d119      	bne.n	80020ae <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0220 	bic.w	r2, r2, #32
 8002088:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d105      	bne.n	80020ae <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f043 0201 	orr.w	r2, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff f98e 	bl	80013d0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0212 	mvn.w	r2, #18
 80020bc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	bf0c      	ite	eq
 80020cc:	2301      	moveq	r3, #1
 80020ce:	2300      	movne	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020de:	2b80      	cmp	r3, #128	; 0x80
 80020e0:	bf0c      	ite	eq
 80020e2:	2301      	moveq	r3, #1
 80020e4:	2300      	movne	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d057      	beq.n	80021a0 <HAL_ADC_IRQHandler+0x1b8>
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d054      	beq.n	80021a0 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f003 0310 	and.w	r3, r3, #16
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d105      	bne.n	800210e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d139      	bne.n	8002190 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002122:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002126:	2b00      	cmp	r3, #0
 8002128:	d006      	beq.n	8002138 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002134:	2b00      	cmp	r3, #0
 8002136:	d12b      	bne.n	8002190 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002142:	2b00      	cmp	r3, #0
 8002144:	d124      	bne.n	8002190 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002150:	2b00      	cmp	r3, #0
 8002152:	d11d      	bne.n	8002190 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002158:	2b00      	cmp	r3, #0
 800215a:	d119      	bne.n	8002190 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800216a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d105      	bne.n	8002190 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f043 0201 	orr.w	r2, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 faa9 	bl	80026e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f06f 020c 	mvn.w	r2, #12
 800219e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	bf0c      	ite	eq
 80021ae:	2301      	moveq	r3, #1
 80021b0:	2300      	movne	r3, #0
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c0:	2b40      	cmp	r3, #64	; 0x40
 80021c2:	bf0c      	ite	eq
 80021c4:	2301      	moveq	r3, #1
 80021c6:	2300      	movne	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d017      	beq.n	8002202 <HAL_ADC_IRQHandler+0x21a>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d014      	beq.n	8002202 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d10d      	bne.n	8002202 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f846 	bl	8002284 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0201 	mvn.w	r2, #1
 8002200:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0320 	and.w	r3, r3, #32
 800220c:	2b20      	cmp	r3, #32
 800220e:	bf0c      	ite	eq
 8002210:	2301      	moveq	r3, #1
 8002212:	2300      	movne	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002222:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002226:	bf0c      	ite	eq
 8002228:	2301      	moveq	r3, #1
 800222a:	2300      	movne	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d015      	beq.n	8002262 <HAL_ADC_IRQHandler+0x27a>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d012      	beq.n	8002262 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002240:	f043 0202 	orr.w	r2, r3, #2
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0220 	mvn.w	r2, #32
 8002250:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f820 	bl	8002298 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0220 	mvn.w	r2, #32
 8002260:	601a      	str	r2, [r3, #0]
  }
}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x1c>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e105      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x228>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b09      	cmp	r3, #9
 80022d6:	d925      	bls.n	8002324 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68d9      	ldr	r1, [r3, #12]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	3b1e      	subs	r3, #30
 80022ee:	2207      	movs	r2, #7
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43da      	mvns	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	400a      	ands	r2, r1
 80022fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68d9      	ldr	r1, [r3, #12]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b29b      	uxth	r3, r3
 800230e:	4618      	mov	r0, r3
 8002310:	4603      	mov	r3, r0
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4403      	add	r3, r0
 8002316:	3b1e      	subs	r3, #30
 8002318:	409a      	lsls	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	e022      	b.n	800236a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6919      	ldr	r1, [r3, #16]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	2207      	movs	r2, #7
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43da      	mvns	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	400a      	ands	r2, r1
 8002346:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6919      	ldr	r1, [r3, #16]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	4618      	mov	r0, r3
 800235a:	4603      	mov	r3, r0
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4403      	add	r3, r0
 8002360:	409a      	lsls	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b06      	cmp	r3, #6
 8002370:	d824      	bhi.n	80023bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	3b05      	subs	r3, #5
 8002384:	221f      	movs	r2, #31
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43da      	mvns	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	400a      	ands	r2, r1
 8002392:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	4618      	mov	r0, r3
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	3b05      	subs	r3, #5
 80023ae:	fa00 f203 	lsl.w	r2, r0, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	635a      	str	r2, [r3, #52]	; 0x34
 80023ba:	e04c      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b0c      	cmp	r3, #12
 80023c2:	d824      	bhi.n	800240e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	3b23      	subs	r3, #35	; 0x23
 80023d6:	221f      	movs	r2, #31
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43da      	mvns	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	400a      	ands	r2, r1
 80023e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	4618      	mov	r0, r3
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	3b23      	subs	r3, #35	; 0x23
 8002400:	fa00 f203 	lsl.w	r2, r0, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
 800240c:	e023      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	3b41      	subs	r3, #65	; 0x41
 8002420:	221f      	movs	r2, #31
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	400a      	ands	r2, r1
 800242e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	4618      	mov	r0, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	3b41      	subs	r3, #65	; 0x41
 800244a:	fa00 f203 	lsl.w	r2, r0, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002456:	4b22      	ldr	r3, [pc, #136]	; (80024e0 <HAL_ADC_ConfigChannel+0x234>)
 8002458:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a21      	ldr	r2, [pc, #132]	; (80024e4 <HAL_ADC_ConfigChannel+0x238>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d109      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1cc>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b12      	cmp	r3, #18
 800246a:	d105      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a19      	ldr	r2, [pc, #100]	; (80024e4 <HAL_ADC_ConfigChannel+0x238>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d123      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x21e>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b10      	cmp	r3, #16
 8002488:	d003      	beq.n	8002492 <HAL_ADC_ConfigChannel+0x1e6>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b11      	cmp	r3, #17
 8002490:	d11b      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b10      	cmp	r3, #16
 80024a4:	d111      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <HAL_ADC_ConfigChannel+0x23c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a10      	ldr	r2, [pc, #64]	; (80024ec <HAL_ADC_ConfigChannel+0x240>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	0c9a      	lsrs	r2, r3, #18
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024bc:	e002      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f9      	bne.n	80024be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	40012300 	.word	0x40012300
 80024e4:	40012000 	.word	0x40012000
 80024e8:	20000028 	.word	0x20000028
 80024ec:	431bde83 	.word	0x431bde83

080024f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024f8:	4b79      	ldr	r3, [pc, #484]	; (80026e0 <ADC_Init+0x1f0>)
 80024fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	431a      	orrs	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002524:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6859      	ldr	r1, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	021a      	lsls	r2, r3, #8
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002548:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6859      	ldr	r1, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800256a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6899      	ldr	r1, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002582:	4a58      	ldr	r2, [pc, #352]	; (80026e4 <ADC_Init+0x1f4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d022      	beq.n	80025ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002596:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6899      	ldr	r1, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6899      	ldr	r1, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	e00f      	b.n	80025ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0202 	bic.w	r2, r2, #2
 80025fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6899      	ldr	r1, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	7e1b      	ldrb	r3, [r3, #24]
 8002608:	005a      	lsls	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d01b      	beq.n	8002654 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800262a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800263a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6859      	ldr	r1, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	3b01      	subs	r3, #1
 8002648:	035a      	lsls	r2, r3, #13
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	e007      	b.n	8002664 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002662:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002672:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	3b01      	subs	r3, #1
 8002680:	051a      	lsls	r2, r3, #20
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002698:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6899      	ldr	r1, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026a6:	025a      	lsls	r2, r3, #9
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6899      	ldr	r1, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	029a      	lsls	r2, r3, #10
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	609a      	str	r2, [r3, #8]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	40012300 	.word	0x40012300
 80026e4:	0f000001 	.word	0x0f000001

080026e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <__NVIC_SetPriorityGrouping>:
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002718:	4013      	ands	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800272c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272e:	4a04      	ldr	r2, [pc, #16]	; (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	60d3      	str	r3, [r2, #12]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <__NVIC_GetPriorityGrouping+0x18>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	0a1b      	lsrs	r3, r3, #8
 800274e:	f003 0307 	and.w	r3, r3, #7
}
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	2b00      	cmp	r3, #0
 8002770:	db0b      	blt.n	800278a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	f003 021f 	and.w	r2, r3, #31
 8002778:	4907      	ldr	r1, [pc, #28]	; (8002798 <__NVIC_EnableIRQ+0x38>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	2001      	movs	r0, #1
 8002782:	fa00 f202 	lsl.w	r2, r0, r2
 8002786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000e100 	.word	0xe000e100

0800279c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	db0a      	blt.n	80027c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	490c      	ldr	r1, [pc, #48]	; (80027e8 <__NVIC_SetPriority+0x4c>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	0112      	lsls	r2, r2, #4
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	440b      	add	r3, r1
 80027c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c4:	e00a      	b.n	80027dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4908      	ldr	r1, [pc, #32]	; (80027ec <__NVIC_SetPriority+0x50>)
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	3b04      	subs	r3, #4
 80027d4:	0112      	lsls	r2, r2, #4
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	440b      	add	r3, r1
 80027da:	761a      	strb	r2, [r3, #24]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000e100 	.word	0xe000e100
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b089      	sub	sp, #36	; 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f1c3 0307 	rsb	r3, r3, #7
 800280a:	2b04      	cmp	r3, #4
 800280c:	bf28      	it	cs
 800280e:	2304      	movcs	r3, #4
 8002810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3304      	adds	r3, #4
 8002816:	2b06      	cmp	r3, #6
 8002818:	d902      	bls.n	8002820 <NVIC_EncodePriority+0x30>
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3b03      	subs	r3, #3
 800281e:	e000      	b.n	8002822 <NVIC_EncodePriority+0x32>
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43da      	mvns	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	401a      	ands	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002838:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fa01 f303 	lsl.w	r3, r1, r3
 8002842:	43d9      	mvns	r1, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002848:	4313      	orrs	r3, r2
         );
}
 800284a:	4618      	mov	r0, r3
 800284c:	3724      	adds	r7, #36	; 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002868:	d301      	bcc.n	800286e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800286a:	2301      	movs	r3, #1
 800286c:	e00f      	b.n	800288e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800286e:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <SysTick_Config+0x40>)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3b01      	subs	r3, #1
 8002874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002876:	210f      	movs	r1, #15
 8002878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800287c:	f7ff ff8e 	bl	800279c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <SysTick_Config+0x40>)
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002886:	4b04      	ldr	r3, [pc, #16]	; (8002898 <SysTick_Config+0x40>)
 8002888:	2207      	movs	r2, #7
 800288a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	e000e010 	.word	0xe000e010

0800289c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff ff29 	bl	80026fc <__NVIC_SetPriorityGrouping>
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b086      	sub	sp, #24
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	4603      	mov	r3, r0
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028c4:	f7ff ff3e 	bl	8002744 <__NVIC_GetPriorityGrouping>
 80028c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	6978      	ldr	r0, [r7, #20]
 80028d0:	f7ff ff8e 	bl	80027f0 <NVIC_EncodePriority>
 80028d4:	4602      	mov	r2, r0
 80028d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff5d 	bl	800279c <__NVIC_SetPriority>
}
 80028e2:	bf00      	nop
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	4603      	mov	r3, r0
 80028f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff31 	bl	8002760 <__NVIC_EnableIRQ>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff ffa2 	bl	8002858 <SysTick_Config>
 8002914:	4603      	mov	r3, r0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800292c:	f7ff fa2a 	bl	8001d84 <HAL_GetTick>
 8002930:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d008      	beq.n	8002950 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2280      	movs	r2, #128	; 0x80
 8002942:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e052      	b.n	80029f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0216 	bic.w	r2, r2, #22
 800295e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695a      	ldr	r2, [r3, #20]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800296e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	2b00      	cmp	r3, #0
 8002976:	d103      	bne.n	8002980 <HAL_DMA_Abort+0x62>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800297c:	2b00      	cmp	r3, #0
 800297e:	d007      	beq.n	8002990 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0208 	bic.w	r2, r2, #8
 800298e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029a0:	e013      	b.n	80029ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029a2:	f7ff f9ef 	bl	8001d84 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b05      	cmp	r3, #5
 80029ae:	d90c      	bls.n	80029ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2220      	movs	r2, #32
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2203      	movs	r2, #3
 80029ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e015      	b.n	80029f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1e4      	bne.n	80029a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029dc:	223f      	movs	r2, #63	; 0x3f
 80029de:	409a      	lsls	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d004      	beq.n	8002a1c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2280      	movs	r2, #128	; 0x80
 8002a16:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e00c      	b.n	8002a36 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2205      	movs	r2, #5
 8002a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0201 	bic.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	; 0x24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
 8002a5e:	e159      	b.n	8002d14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a60:	2201      	movs	r2, #1
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	f040 8148 	bne.w	8002d0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d005      	beq.n	8002a96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d130      	bne.n	8002af8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002acc:	2201      	movs	r2, #1
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f003 0201 	and.w	r2, r3, #1
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d017      	beq.n	8002b34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	2203      	movs	r2, #3
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d123      	bne.n	8002b88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	08da      	lsrs	r2, r3, #3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3208      	adds	r2, #8
 8002b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	220f      	movs	r2, #15
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	08da      	lsrs	r2, r3, #3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3208      	adds	r2, #8
 8002b82:	69b9      	ldr	r1, [r7, #24]
 8002b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	2203      	movs	r2, #3
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0203 	and.w	r2, r3, #3
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80a2 	beq.w	8002d0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	4b57      	ldr	r3, [pc, #348]	; (8002d2c <HAL_GPIO_Init+0x2e8>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	4a56      	ldr	r2, [pc, #344]	; (8002d2c <HAL_GPIO_Init+0x2e8>)
 8002bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bda:	4b54      	ldr	r3, [pc, #336]	; (8002d2c <HAL_GPIO_Init+0x2e8>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002be6:	4a52      	ldr	r2, [pc, #328]	; (8002d30 <HAL_GPIO_Init+0x2ec>)
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	089b      	lsrs	r3, r3, #2
 8002bec:	3302      	adds	r3, #2
 8002bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	220f      	movs	r2, #15
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4013      	ands	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a49      	ldr	r2, [pc, #292]	; (8002d34 <HAL_GPIO_Init+0x2f0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d019      	beq.n	8002c46 <HAL_GPIO_Init+0x202>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a48      	ldr	r2, [pc, #288]	; (8002d38 <HAL_GPIO_Init+0x2f4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d013      	beq.n	8002c42 <HAL_GPIO_Init+0x1fe>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a47      	ldr	r2, [pc, #284]	; (8002d3c <HAL_GPIO_Init+0x2f8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00d      	beq.n	8002c3e <HAL_GPIO_Init+0x1fa>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a46      	ldr	r2, [pc, #280]	; (8002d40 <HAL_GPIO_Init+0x2fc>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <HAL_GPIO_Init+0x1f6>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a45      	ldr	r2, [pc, #276]	; (8002d44 <HAL_GPIO_Init+0x300>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d101      	bne.n	8002c36 <HAL_GPIO_Init+0x1f2>
 8002c32:	2304      	movs	r3, #4
 8002c34:	e008      	b.n	8002c48 <HAL_GPIO_Init+0x204>
 8002c36:	2307      	movs	r3, #7
 8002c38:	e006      	b.n	8002c48 <HAL_GPIO_Init+0x204>
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e004      	b.n	8002c48 <HAL_GPIO_Init+0x204>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e002      	b.n	8002c48 <HAL_GPIO_Init+0x204>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <HAL_GPIO_Init+0x204>
 8002c46:	2300      	movs	r3, #0
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	f002 0203 	and.w	r2, r2, #3
 8002c4e:	0092      	lsls	r2, r2, #2
 8002c50:	4093      	lsls	r3, r2
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c58:	4935      	ldr	r1, [pc, #212]	; (8002d30 <HAL_GPIO_Init+0x2ec>)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	089b      	lsrs	r3, r3, #2
 8002c5e:	3302      	adds	r3, #2
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c66:	4b38      	ldr	r3, [pc, #224]	; (8002d48 <HAL_GPIO_Init+0x304>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c8a:	4a2f      	ldr	r2, [pc, #188]	; (8002d48 <HAL_GPIO_Init+0x304>)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c90:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <HAL_GPIO_Init+0x304>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cb4:	4a24      	ldr	r2, [pc, #144]	; (8002d48 <HAL_GPIO_Init+0x304>)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cba:	4b23      	ldr	r3, [pc, #140]	; (8002d48 <HAL_GPIO_Init+0x304>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cde:	4a1a      	ldr	r2, [pc, #104]	; (8002d48 <HAL_GPIO_Init+0x304>)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ce4:	4b18      	ldr	r3, [pc, #96]	; (8002d48 <HAL_GPIO_Init+0x304>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d08:	4a0f      	ldr	r2, [pc, #60]	; (8002d48 <HAL_GPIO_Init+0x304>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3301      	adds	r3, #1
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b0f      	cmp	r3, #15
 8002d18:	f67f aea2 	bls.w	8002a60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	bf00      	nop
 8002d20:	3724      	adds	r7, #36	; 0x24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40013800 	.word	0x40013800
 8002d34:	40020000 	.word	0x40020000
 8002d38:	40020400 	.word	0x40020400
 8002d3c:	40020800 	.word	0x40020800
 8002d40:	40020c00 	.word	0x40020c00
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40013c00 	.word	0x40013c00

08002d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	807b      	strh	r3, [r7, #2]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d5c:	787b      	ldrb	r3, [r7, #1]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d62:	887a      	ldrh	r2, [r7, #2]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d68:	e003      	b.n	8002d72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d6a:	887b      	ldrh	r3, [r7, #2]
 8002d6c:	041a      	lsls	r2, r3, #16
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	619a      	str	r2, [r3, #24]
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e264      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d075      	beq.n	8002e8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d9e:	4ba3      	ldr	r3, [pc, #652]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d00c      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002daa:	4ba0      	ldr	r3, [pc, #640]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d112      	bne.n	8002ddc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002db6:	4b9d      	ldr	r3, [pc, #628]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dc2:	d10b      	bne.n	8002ddc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc4:	4b99      	ldr	r3, [pc, #612]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d05b      	beq.n	8002e88 <HAL_RCC_OscConfig+0x108>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d157      	bne.n	8002e88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e23f      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de4:	d106      	bne.n	8002df4 <HAL_RCC_OscConfig+0x74>
 8002de6:	4b91      	ldr	r3, [pc, #580]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a90      	ldr	r2, [pc, #576]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e01d      	b.n	8002e30 <HAL_RCC_OscConfig+0xb0>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dfc:	d10c      	bne.n	8002e18 <HAL_RCC_OscConfig+0x98>
 8002dfe:	4b8b      	ldr	r3, [pc, #556]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a8a      	ldr	r2, [pc, #552]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	4b88      	ldr	r3, [pc, #544]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a87      	ldr	r2, [pc, #540]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e00b      	b.n	8002e30 <HAL_RCC_OscConfig+0xb0>
 8002e18:	4b84      	ldr	r3, [pc, #528]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a83      	ldr	r2, [pc, #524]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	4b81      	ldr	r3, [pc, #516]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a80      	ldr	r2, [pc, #512]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d013      	beq.n	8002e60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7fe ffa4 	bl	8001d84 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e40:	f7fe ffa0 	bl	8001d84 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	; 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e204      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e52:	4b76      	ldr	r3, [pc, #472]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0xc0>
 8002e5e:	e014      	b.n	8002e8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fe ff90 	bl	8001d84 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e68:	f7fe ff8c 	bl	8001d84 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b64      	cmp	r3, #100	; 0x64
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e1f0      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7a:	4b6c      	ldr	r3, [pc, #432]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0xe8>
 8002e86:	e000      	b.n	8002e8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d063      	beq.n	8002f5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e96:	4b65      	ldr	r3, [pc, #404]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00b      	beq.n	8002eba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea2:	4b62      	ldr	r3, [pc, #392]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d11c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eae:	4b5f      	ldr	r3, [pc, #380]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d116      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eba:	4b5c      	ldr	r3, [pc, #368]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x152>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d001      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e1c4      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed2:	4b56      	ldr	r3, [pc, #344]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4952      	ldr	r1, [pc, #328]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee6:	e03a      	b.n	8002f5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d020      	beq.n	8002f32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef0:	4b4f      	ldr	r3, [pc, #316]	; (8003030 <HAL_RCC_OscConfig+0x2b0>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef6:	f7fe ff45 	bl	8001d84 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002efe:	f7fe ff41 	bl	8001d84 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e1a5      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f10:	4b46      	ldr	r3, [pc, #280]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1c:	4b43      	ldr	r3, [pc, #268]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4940      	ldr	r1, [pc, #256]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	600b      	str	r3, [r1, #0]
 8002f30:	e015      	b.n	8002f5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f32:	4b3f      	ldr	r3, [pc, #252]	; (8003030 <HAL_RCC_OscConfig+0x2b0>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7fe ff24 	bl	8001d84 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f40:	f7fe ff20 	bl	8001d84 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e184      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f52:	4b36      	ldr	r3, [pc, #216]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d030      	beq.n	8002fcc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d016      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f72:	4b30      	ldr	r3, [pc, #192]	; (8003034 <HAL_RCC_OscConfig+0x2b4>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f78:	f7fe ff04 	bl	8001d84 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f80:	f7fe ff00 	bl	8001d84 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e164      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f92:	4b26      	ldr	r3, [pc, #152]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0x200>
 8002f9e:	e015      	b.n	8002fcc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa0:	4b24      	ldr	r3, [pc, #144]	; (8003034 <HAL_RCC_OscConfig+0x2b4>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa6:	f7fe feed 	bl	8001d84 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fae:	f7fe fee9 	bl	8001d84 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e14d      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f0      	bne.n	8002fae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80a0 	beq.w	800311a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fde:	4b13      	ldr	r3, [pc, #76]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10f      	bne.n	800300a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	4b0f      	ldr	r3, [pc, #60]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	4a0e      	ldr	r2, [pc, #56]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffa:	4b0c      	ldr	r3, [pc, #48]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003006:	2301      	movs	r3, #1
 8003008:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300a:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <HAL_RCC_OscConfig+0x2b8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003012:	2b00      	cmp	r3, #0
 8003014:	d121      	bne.n	800305a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003016:	4b08      	ldr	r3, [pc, #32]	; (8003038 <HAL_RCC_OscConfig+0x2b8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a07      	ldr	r2, [pc, #28]	; (8003038 <HAL_RCC_OscConfig+0x2b8>)
 800301c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003022:	f7fe feaf 	bl	8001d84 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003028:	e011      	b.n	800304e <HAL_RCC_OscConfig+0x2ce>
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800
 8003030:	42470000 	.word	0x42470000
 8003034:	42470e80 	.word	0x42470e80
 8003038:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303c:	f7fe fea2 	bl	8001d84 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e106      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304e:	4b85      	ldr	r3, [pc, #532]	; (8003264 <HAL_RCC_OscConfig+0x4e4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d106      	bne.n	8003070 <HAL_RCC_OscConfig+0x2f0>
 8003062:	4b81      	ldr	r3, [pc, #516]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	4a80      	ldr	r2, [pc, #512]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6713      	str	r3, [r2, #112]	; 0x70
 800306e:	e01c      	b.n	80030aa <HAL_RCC_OscConfig+0x32a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b05      	cmp	r3, #5
 8003076:	d10c      	bne.n	8003092 <HAL_RCC_OscConfig+0x312>
 8003078:	4b7b      	ldr	r3, [pc, #492]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307c:	4a7a      	ldr	r2, [pc, #488]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 800307e:	f043 0304 	orr.w	r3, r3, #4
 8003082:	6713      	str	r3, [r2, #112]	; 0x70
 8003084:	4b78      	ldr	r3, [pc, #480]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003088:	4a77      	ldr	r2, [pc, #476]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6713      	str	r3, [r2, #112]	; 0x70
 8003090:	e00b      	b.n	80030aa <HAL_RCC_OscConfig+0x32a>
 8003092:	4b75      	ldr	r3, [pc, #468]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003096:	4a74      	ldr	r2, [pc, #464]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 8003098:	f023 0301 	bic.w	r3, r3, #1
 800309c:	6713      	str	r3, [r2, #112]	; 0x70
 800309e:	4b72      	ldr	r3, [pc, #456]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 80030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a2:	4a71      	ldr	r2, [pc, #452]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 80030a4:	f023 0304 	bic.w	r3, r3, #4
 80030a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d015      	beq.n	80030de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b2:	f7fe fe67 	bl	8001d84 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b8:	e00a      	b.n	80030d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ba:	f7fe fe63 	bl	8001d84 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e0c5      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d0:	4b65      	ldr	r3, [pc, #404]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 80030d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0ee      	beq.n	80030ba <HAL_RCC_OscConfig+0x33a>
 80030dc:	e014      	b.n	8003108 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030de:	f7fe fe51 	bl	8001d84 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e4:	e00a      	b.n	80030fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e6:	f7fe fe4d 	bl	8001d84 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e0af      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fc:	4b5a      	ldr	r3, [pc, #360]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 80030fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1ee      	bne.n	80030e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003108:	7dfb      	ldrb	r3, [r7, #23]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d105      	bne.n	800311a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310e:	4b56      	ldr	r3, [pc, #344]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	4a55      	ldr	r2, [pc, #340]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 8003114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003118:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 809b 	beq.w	800325a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003124:	4b50      	ldr	r3, [pc, #320]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b08      	cmp	r3, #8
 800312e:	d05c      	beq.n	80031ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d141      	bne.n	80031bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003138:	4b4c      	ldr	r3, [pc, #304]	; (800326c <HAL_RCC_OscConfig+0x4ec>)
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313e:	f7fe fe21 	bl	8001d84 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003146:	f7fe fe1d 	bl	8001d84 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e081      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003158:	4b43      	ldr	r3, [pc, #268]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f0      	bne.n	8003146 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69da      	ldr	r2, [r3, #28]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	019b      	lsls	r3, r3, #6
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	3b01      	subs	r3, #1
 800317e:	041b      	lsls	r3, r3, #16
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	061b      	lsls	r3, r3, #24
 8003188:	4937      	ldr	r1, [pc, #220]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 800318a:	4313      	orrs	r3, r2
 800318c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800318e:	4b37      	ldr	r3, [pc, #220]	; (800326c <HAL_RCC_OscConfig+0x4ec>)
 8003190:	2201      	movs	r2, #1
 8003192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7fe fdf6 	bl	8001d84 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800319c:	f7fe fdf2 	bl	8001d84 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e056      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ae:	4b2e      	ldr	r3, [pc, #184]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x41c>
 80031ba:	e04e      	b.n	800325a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031bc:	4b2b      	ldr	r3, [pc, #172]	; (800326c <HAL_RCC_OscConfig+0x4ec>)
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c2:	f7fe fddf 	bl	8001d84 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ca:	f7fe fddb 	bl	8001d84 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e03f      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031dc:	4b22      	ldr	r3, [pc, #136]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f0      	bne.n	80031ca <HAL_RCC_OscConfig+0x44a>
 80031e8:	e037      	b.n	800325a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e032      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031f6:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d028      	beq.n	8003256 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d121      	bne.n	8003256 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d11a      	bne.n	8003256 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003226:	4013      	ands	r3, r2
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800322c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800322e:	4293      	cmp	r3, r2
 8003230:	d111      	bne.n	8003256 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323c:	085b      	lsrs	r3, r3, #1
 800323e:	3b01      	subs	r3, #1
 8003240:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d107      	bne.n	8003256 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d001      	beq.n	800325a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40007000 	.word	0x40007000
 8003268:	40023800 	.word	0x40023800
 800326c:	42470060 	.word	0x42470060

08003270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0cc      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003284:	4b68      	ldr	r3, [pc, #416]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d90c      	bls.n	80032ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003292:	4b65      	ldr	r3, [pc, #404]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800329a:	4b63      	ldr	r3, [pc, #396]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d001      	beq.n	80032ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e0b8      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d020      	beq.n	80032fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032c4:	4b59      	ldr	r3, [pc, #356]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	4a58      	ldr	r2, [pc, #352]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032dc:	4b53      	ldr	r3, [pc, #332]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	4a52      	ldr	r2, [pc, #328]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e8:	4b50      	ldr	r3, [pc, #320]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	494d      	ldr	r1, [pc, #308]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d044      	beq.n	8003390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d107      	bne.n	800331e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330e:	4b47      	ldr	r3, [pc, #284]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d119      	bne.n	800334e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e07f      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d003      	beq.n	800332e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800332a:	2b03      	cmp	r3, #3
 800332c:	d107      	bne.n	800333e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332e:	4b3f      	ldr	r3, [pc, #252]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d109      	bne.n	800334e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e06f      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333e:	4b3b      	ldr	r3, [pc, #236]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e067      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800334e:	4b37      	ldr	r3, [pc, #220]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f023 0203 	bic.w	r2, r3, #3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	4934      	ldr	r1, [pc, #208]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 800335c:	4313      	orrs	r3, r2
 800335e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003360:	f7fe fd10 	bl	8001d84 <HAL_GetTick>
 8003364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003366:	e00a      	b.n	800337e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003368:	f7fe fd0c 	bl	8001d84 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	; 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e04f      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337e:	4b2b      	ldr	r3, [pc, #172]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 020c 	and.w	r2, r3, #12
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	429a      	cmp	r2, r3
 800338e:	d1eb      	bne.n	8003368 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003390:	4b25      	ldr	r3, [pc, #148]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d20c      	bcs.n	80033b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339e:	4b22      	ldr	r3, [pc, #136]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b20      	ldr	r3, [pc, #128]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e032      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c4:	4b19      	ldr	r3, [pc, #100]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4916      	ldr	r1, [pc, #88]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d009      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033e2:	4b12      	ldr	r3, [pc, #72]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	490e      	ldr	r1, [pc, #56]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033f6:	f000 f821 	bl	800343c <HAL_RCC_GetSysClockFreq>
 80033fa:	4602      	mov	r2, r0
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	490a      	ldr	r1, [pc, #40]	; (8003430 <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	5ccb      	ldrb	r3, [r1, r3]
 800340a:	fa22 f303 	lsr.w	r3, r2, r3
 800340e:	4a09      	ldr	r2, [pc, #36]	; (8003434 <HAL_RCC_ClockConfig+0x1c4>)
 8003410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003412:	4b09      	ldr	r3, [pc, #36]	; (8003438 <HAL_RCC_ClockConfig+0x1c8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe fc70 	bl	8001cfc <HAL_InitTick>

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40023c00 	.word	0x40023c00
 800342c:	40023800 	.word	0x40023800
 8003430:	080079c8 	.word	0x080079c8
 8003434:	20000028 	.word	0x20000028
 8003438:	2000002c 	.word	0x2000002c

0800343c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800343c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	607b      	str	r3, [r7, #4]
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	2300      	movs	r3, #0
 800344e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003454:	4b67      	ldr	r3, [pc, #412]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 030c 	and.w	r3, r3, #12
 800345c:	2b08      	cmp	r3, #8
 800345e:	d00d      	beq.n	800347c <HAL_RCC_GetSysClockFreq+0x40>
 8003460:	2b08      	cmp	r3, #8
 8003462:	f200 80bd 	bhi.w	80035e0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <HAL_RCC_GetSysClockFreq+0x34>
 800346a:	2b04      	cmp	r3, #4
 800346c:	d003      	beq.n	8003476 <HAL_RCC_GetSysClockFreq+0x3a>
 800346e:	e0b7      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003470:	4b61      	ldr	r3, [pc, #388]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003472:	60bb      	str	r3, [r7, #8]
       break;
 8003474:	e0b7      	b.n	80035e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003476:	4b61      	ldr	r3, [pc, #388]	; (80035fc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003478:	60bb      	str	r3, [r7, #8]
      break;
 800347a:	e0b4      	b.n	80035e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800347c:	4b5d      	ldr	r3, [pc, #372]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003484:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003486:	4b5b      	ldr	r3, [pc, #364]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d04d      	beq.n	800352e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003492:	4b58      	ldr	r3, [pc, #352]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	099b      	lsrs	r3, r3, #6
 8003498:	461a      	mov	r2, r3
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034a2:	f04f 0100 	mov.w	r1, #0
 80034a6:	ea02 0800 	and.w	r8, r2, r0
 80034aa:	ea03 0901 	and.w	r9, r3, r1
 80034ae:	4640      	mov	r0, r8
 80034b0:	4649      	mov	r1, r9
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	014b      	lsls	r3, r1, #5
 80034bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034c0:	0142      	lsls	r2, r0, #5
 80034c2:	4610      	mov	r0, r2
 80034c4:	4619      	mov	r1, r3
 80034c6:	ebb0 0008 	subs.w	r0, r0, r8
 80034ca:	eb61 0109 	sbc.w	r1, r1, r9
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	018b      	lsls	r3, r1, #6
 80034d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034dc:	0182      	lsls	r2, r0, #6
 80034de:	1a12      	subs	r2, r2, r0
 80034e0:	eb63 0301 	sbc.w	r3, r3, r1
 80034e4:	f04f 0000 	mov.w	r0, #0
 80034e8:	f04f 0100 	mov.w	r1, #0
 80034ec:	00d9      	lsls	r1, r3, #3
 80034ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034f2:	00d0      	lsls	r0, r2, #3
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	eb12 0208 	adds.w	r2, r2, r8
 80034fc:	eb43 0309 	adc.w	r3, r3, r9
 8003500:	f04f 0000 	mov.w	r0, #0
 8003504:	f04f 0100 	mov.w	r1, #0
 8003508:	0259      	lsls	r1, r3, #9
 800350a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800350e:	0250      	lsls	r0, r2, #9
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4610      	mov	r0, r2
 8003516:	4619      	mov	r1, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	461a      	mov	r2, r3
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	f7fd fb9a 	bl	8000c58 <__aeabi_uldivmod>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4613      	mov	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	e04a      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800352e:	4b31      	ldr	r3, [pc, #196]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	099b      	lsrs	r3, r3, #6
 8003534:	461a      	mov	r2, r3
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800353e:	f04f 0100 	mov.w	r1, #0
 8003542:	ea02 0400 	and.w	r4, r2, r0
 8003546:	ea03 0501 	and.w	r5, r3, r1
 800354a:	4620      	mov	r0, r4
 800354c:	4629      	mov	r1, r5
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	014b      	lsls	r3, r1, #5
 8003558:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800355c:	0142      	lsls	r2, r0, #5
 800355e:	4610      	mov	r0, r2
 8003560:	4619      	mov	r1, r3
 8003562:	1b00      	subs	r0, r0, r4
 8003564:	eb61 0105 	sbc.w	r1, r1, r5
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	018b      	lsls	r3, r1, #6
 8003572:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003576:	0182      	lsls	r2, r0, #6
 8003578:	1a12      	subs	r2, r2, r0
 800357a:	eb63 0301 	sbc.w	r3, r3, r1
 800357e:	f04f 0000 	mov.w	r0, #0
 8003582:	f04f 0100 	mov.w	r1, #0
 8003586:	00d9      	lsls	r1, r3, #3
 8003588:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800358c:	00d0      	lsls	r0, r2, #3
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	1912      	adds	r2, r2, r4
 8003594:	eb45 0303 	adc.w	r3, r5, r3
 8003598:	f04f 0000 	mov.w	r0, #0
 800359c:	f04f 0100 	mov.w	r1, #0
 80035a0:	0299      	lsls	r1, r3, #10
 80035a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035a6:	0290      	lsls	r0, r2, #10
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4610      	mov	r0, r2
 80035ae:	4619      	mov	r1, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	461a      	mov	r2, r3
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	f7fd fb4e 	bl	8000c58 <__aeabi_uldivmod>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4613      	mov	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035c4:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	0c1b      	lsrs	r3, r3, #16
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	3301      	adds	r3, #1
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035dc:	60bb      	str	r3, [r7, #8]
      break;
 80035de:	e002      	b.n	80035e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035e0:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035e2:	60bb      	str	r3, [r7, #8]
      break;
 80035e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035e6:	68bb      	ldr	r3, [r7, #8]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
 80035f8:	00f42400 	.word	0x00f42400
 80035fc:	007a1200 	.word	0x007a1200

08003600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003604:	4b03      	ldr	r3, [pc, #12]	; (8003614 <HAL_RCC_GetHCLKFreq+0x14>)
 8003606:	681b      	ldr	r3, [r3, #0]
}
 8003608:	4618      	mov	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	20000028 	.word	0x20000028

08003618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800361c:	f7ff fff0 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 8003620:	4602      	mov	r2, r0
 8003622:	4b05      	ldr	r3, [pc, #20]	; (8003638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	0a9b      	lsrs	r3, r3, #10
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	4903      	ldr	r1, [pc, #12]	; (800363c <HAL_RCC_GetPCLK1Freq+0x24>)
 800362e:	5ccb      	ldrb	r3, [r1, r3]
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40023800 	.word	0x40023800
 800363c:	080079d8 	.word	0x080079d8

08003640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003644:	f7ff ffdc 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	0b5b      	lsrs	r3, r3, #13
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	4903      	ldr	r1, [pc, #12]	; (8003664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40023800 	.word	0x40023800
 8003664:	080079d8 	.word	0x080079d8

08003668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e041      	b.n	80036fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d106      	bne.n	8003694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7fe f952 	bl	8001938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3304      	adds	r3, #4
 80036a4:	4619      	mov	r1, r3
 80036a6:	4610      	mov	r0, r2
 80036a8:	f000 fa88 	bl	8003bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	d001      	beq.n	8003720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e044      	b.n	80037aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d018      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x6c>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374a:	d013      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x6c>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1a      	ldr	r2, [pc, #104]	; (80037bc <HAL_TIM_Base_Start_IT+0xb4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00e      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x6c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a19      	ldr	r2, [pc, #100]	; (80037c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d009      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x6c>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a17      	ldr	r2, [pc, #92]	; (80037c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d004      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x6c>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a16      	ldr	r2, [pc, #88]	; (80037c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d111      	bne.n	8003798 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b06      	cmp	r3, #6
 8003784:	d010      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0201 	orr.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003796:	e007      	b.n	80037a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40010000 	.word	0x40010000
 80037bc:	40000400 	.word	0x40000400
 80037c0:	40000800 	.word	0x40000800
 80037c4:	40000c00 	.word	0x40000c00
 80037c8:	40014000 	.word	0x40014000

080037cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d122      	bne.n	8003828 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d11b      	bne.n	8003828 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0202 	mvn.w	r2, #2
 80037f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f9b5 	bl	8003b7e <HAL_TIM_IC_CaptureCallback>
 8003814:	e005      	b.n	8003822 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f9a7 	bl	8003b6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f9b8 	bl	8003b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b04      	cmp	r3, #4
 8003834:	d122      	bne.n	800387c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b04      	cmp	r3, #4
 8003842:	d11b      	bne.n	800387c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0204 	mvn.w	r2, #4
 800384c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2202      	movs	r2, #2
 8003852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f98b 	bl	8003b7e <HAL_TIM_IC_CaptureCallback>
 8003868:	e005      	b.n	8003876 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f97d 	bl	8003b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f98e 	bl	8003b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b08      	cmp	r3, #8
 8003888:	d122      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b08      	cmp	r3, #8
 8003896:	d11b      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0208 	mvn.w	r2, #8
 80038a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2204      	movs	r2, #4
 80038a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f961 	bl	8003b7e <HAL_TIM_IC_CaptureCallback>
 80038bc:	e005      	b.n	80038ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f953 	bl	8003b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f964 	bl	8003b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0310 	and.w	r3, r3, #16
 80038da:	2b10      	cmp	r3, #16
 80038dc:	d122      	bne.n	8003924 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2b10      	cmp	r3, #16
 80038ea:	d11b      	bne.n	8003924 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0210 	mvn.w	r2, #16
 80038f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2208      	movs	r2, #8
 80038fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f937 	bl	8003b7e <HAL_TIM_IC_CaptureCallback>
 8003910:	e005      	b.n	800391e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f929 	bl	8003b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f93a 	bl	8003b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b01      	cmp	r3, #1
 8003930:	d10e      	bne.n	8003950 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b01      	cmp	r3, #1
 800393e:	d107      	bne.n	8003950 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0201 	mvn.w	r2, #1
 8003948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fd fd2c 	bl	80013a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395a:	2b80      	cmp	r3, #128	; 0x80
 800395c:	d10e      	bne.n	800397c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003968:	2b80      	cmp	r3, #128	; 0x80
 800396a:	d107      	bne.n	800397c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fab2 	bl	8003ee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003986:	2b40      	cmp	r3, #64	; 0x40
 8003988:	d10e      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003994:	2b40      	cmp	r3, #64	; 0x40
 8003996:	d107      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f8ff 	bl	8003ba6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	d10e      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b20      	cmp	r3, #32
 80039c2:	d107      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0220 	mvn.w	r2, #32
 80039cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fa7c 	bl	8003ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039d4:	bf00      	nop
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_TIM_ConfigClockSource+0x1c>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e0b4      	b.n	8003b62 <HAL_TIM_ConfigClockSource+0x186>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a30:	d03e      	beq.n	8003ab0 <HAL_TIM_ConfigClockSource+0xd4>
 8003a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a36:	f200 8087 	bhi.w	8003b48 <HAL_TIM_ConfigClockSource+0x16c>
 8003a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3e:	f000 8086 	beq.w	8003b4e <HAL_TIM_ConfigClockSource+0x172>
 8003a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a46:	d87f      	bhi.n	8003b48 <HAL_TIM_ConfigClockSource+0x16c>
 8003a48:	2b70      	cmp	r3, #112	; 0x70
 8003a4a:	d01a      	beq.n	8003a82 <HAL_TIM_ConfigClockSource+0xa6>
 8003a4c:	2b70      	cmp	r3, #112	; 0x70
 8003a4e:	d87b      	bhi.n	8003b48 <HAL_TIM_ConfigClockSource+0x16c>
 8003a50:	2b60      	cmp	r3, #96	; 0x60
 8003a52:	d050      	beq.n	8003af6 <HAL_TIM_ConfigClockSource+0x11a>
 8003a54:	2b60      	cmp	r3, #96	; 0x60
 8003a56:	d877      	bhi.n	8003b48 <HAL_TIM_ConfigClockSource+0x16c>
 8003a58:	2b50      	cmp	r3, #80	; 0x50
 8003a5a:	d03c      	beq.n	8003ad6 <HAL_TIM_ConfigClockSource+0xfa>
 8003a5c:	2b50      	cmp	r3, #80	; 0x50
 8003a5e:	d873      	bhi.n	8003b48 <HAL_TIM_ConfigClockSource+0x16c>
 8003a60:	2b40      	cmp	r3, #64	; 0x40
 8003a62:	d058      	beq.n	8003b16 <HAL_TIM_ConfigClockSource+0x13a>
 8003a64:	2b40      	cmp	r3, #64	; 0x40
 8003a66:	d86f      	bhi.n	8003b48 <HAL_TIM_ConfigClockSource+0x16c>
 8003a68:	2b30      	cmp	r3, #48	; 0x30
 8003a6a:	d064      	beq.n	8003b36 <HAL_TIM_ConfigClockSource+0x15a>
 8003a6c:	2b30      	cmp	r3, #48	; 0x30
 8003a6e:	d86b      	bhi.n	8003b48 <HAL_TIM_ConfigClockSource+0x16c>
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d060      	beq.n	8003b36 <HAL_TIM_ConfigClockSource+0x15a>
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d867      	bhi.n	8003b48 <HAL_TIM_ConfigClockSource+0x16c>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d05c      	beq.n	8003b36 <HAL_TIM_ConfigClockSource+0x15a>
 8003a7c:	2b10      	cmp	r3, #16
 8003a7e:	d05a      	beq.n	8003b36 <HAL_TIM_ConfigClockSource+0x15a>
 8003a80:	e062      	b.n	8003b48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6899      	ldr	r1, [r3, #8]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f000 f98d 	bl	8003db0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003aa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	609a      	str	r2, [r3, #8]
      break;
 8003aae:	e04f      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6818      	ldr	r0, [r3, #0]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	6899      	ldr	r1, [r3, #8]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f000 f976 	bl	8003db0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ad2:	609a      	str	r2, [r3, #8]
      break;
 8003ad4:	e03c      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6818      	ldr	r0, [r3, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	6859      	ldr	r1, [r3, #4]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f000 f8ea 	bl	8003cbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2150      	movs	r1, #80	; 0x50
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 f943 	bl	8003d7a <TIM_ITRx_SetConfig>
      break;
 8003af4:	e02c      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	6859      	ldr	r1, [r3, #4]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	461a      	mov	r2, r3
 8003b04:	f000 f909 	bl	8003d1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2160      	movs	r1, #96	; 0x60
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 f933 	bl	8003d7a <TIM_ITRx_SetConfig>
      break;
 8003b14:	e01c      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6818      	ldr	r0, [r3, #0]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6859      	ldr	r1, [r3, #4]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	461a      	mov	r2, r3
 8003b24:	f000 f8ca 	bl	8003cbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2140      	movs	r1, #64	; 0x40
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 f923 	bl	8003d7a <TIM_ITRx_SetConfig>
      break;
 8003b34:	e00c      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4610      	mov	r0, r2
 8003b42:	f000 f91a 	bl	8003d7a <TIM_ITRx_SetConfig>
      break;
 8003b46:	e003      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b4c:	e000      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
	...

08003bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a34      	ldr	r2, [pc, #208]	; (8003ca0 <TIM_Base_SetConfig+0xe4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00f      	beq.n	8003bf4 <TIM_Base_SetConfig+0x38>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bda:	d00b      	beq.n	8003bf4 <TIM_Base_SetConfig+0x38>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a31      	ldr	r2, [pc, #196]	; (8003ca4 <TIM_Base_SetConfig+0xe8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d007      	beq.n	8003bf4 <TIM_Base_SetConfig+0x38>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a30      	ldr	r2, [pc, #192]	; (8003ca8 <TIM_Base_SetConfig+0xec>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_Base_SetConfig+0x38>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a2f      	ldr	r2, [pc, #188]	; (8003cac <TIM_Base_SetConfig+0xf0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d108      	bne.n	8003c06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a25      	ldr	r2, [pc, #148]	; (8003ca0 <TIM_Base_SetConfig+0xe4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d01b      	beq.n	8003c46 <TIM_Base_SetConfig+0x8a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c14:	d017      	beq.n	8003c46 <TIM_Base_SetConfig+0x8a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a22      	ldr	r2, [pc, #136]	; (8003ca4 <TIM_Base_SetConfig+0xe8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d013      	beq.n	8003c46 <TIM_Base_SetConfig+0x8a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a21      	ldr	r2, [pc, #132]	; (8003ca8 <TIM_Base_SetConfig+0xec>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00f      	beq.n	8003c46 <TIM_Base_SetConfig+0x8a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a20      	ldr	r2, [pc, #128]	; (8003cac <TIM_Base_SetConfig+0xf0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00b      	beq.n	8003c46 <TIM_Base_SetConfig+0x8a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a1f      	ldr	r2, [pc, #124]	; (8003cb0 <TIM_Base_SetConfig+0xf4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d007      	beq.n	8003c46 <TIM_Base_SetConfig+0x8a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a1e      	ldr	r2, [pc, #120]	; (8003cb4 <TIM_Base_SetConfig+0xf8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d003      	beq.n	8003c46 <TIM_Base_SetConfig+0x8a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a1d      	ldr	r2, [pc, #116]	; (8003cb8 <TIM_Base_SetConfig+0xfc>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d108      	bne.n	8003c58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a08      	ldr	r2, [pc, #32]	; (8003ca0 <TIM_Base_SetConfig+0xe4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d103      	bne.n	8003c8c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	615a      	str	r2, [r3, #20]
}
 8003c92:	bf00      	nop
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40010000 	.word	0x40010000
 8003ca4:	40000400 	.word	0x40000400
 8003ca8:	40000800 	.word	0x40000800
 8003cac:	40000c00 	.word	0x40000c00
 8003cb0:	40014000 	.word	0x40014000
 8003cb4:	40014400 	.word	0x40014400
 8003cb8:	40014800 	.word	0x40014800

08003cbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f023 0201 	bic.w	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f023 030a 	bic.w	r3, r3, #10
 8003cf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	621a      	str	r2, [r3, #32]
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b087      	sub	sp, #28
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	f023 0210 	bic.w	r2, r3, #16
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	031b      	lsls	r3, r3, #12
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	621a      	str	r2, [r3, #32]
}
 8003d6e:	bf00      	nop
 8003d70:	371c      	adds	r7, #28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f043 0307 	orr.w	r3, r3, #7
 8003d9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	609a      	str	r2, [r3, #8]
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	021a      	lsls	r2, r3, #8
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	609a      	str	r2, [r3, #8]
}
 8003de4:	bf00      	nop
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e050      	b.n	8003eaa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a1c      	ldr	r2, [pc, #112]	; (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d018      	beq.n	8003e7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e54:	d013      	beq.n	8003e7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a18      	ldr	r2, [pc, #96]	; (8003ebc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00e      	beq.n	8003e7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a16      	ldr	r2, [pc, #88]	; (8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d009      	beq.n	8003e7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a15      	ldr	r2, [pc, #84]	; (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d004      	beq.n	8003e7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a13      	ldr	r2, [pc, #76]	; (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d10c      	bne.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40010000 	.word	0x40010000
 8003ebc:	40000400 	.word	0x40000400
 8003ec0:	40000800 	.word	0x40000800
 8003ec4:	40000c00 	.word	0x40000c00
 8003ec8:	40014000 	.word	0x40014000

08003ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e03f      	b.n	8003f86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fd fd32 	bl	8001984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2224      	movs	r2, #36	; 0x24
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 fc7b 	bl	8004834 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b0ba      	sub	sp, #232	; 0xe8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003fce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10f      	bne.n	8003ff6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x66>
 8003fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fb65 	bl	80046be <UART_Receive_IT>
      return;
 8003ff4:	e256      	b.n	80044a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 80de 	beq.w	80041bc <HAL_UART_IRQHandler+0x22c>
 8004000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d106      	bne.n	800401a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800400c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004010:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80d1 	beq.w	80041bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800401a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00b      	beq.n	800403e <HAL_UART_IRQHandler+0xae>
 8004026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f043 0201 	orr.w	r2, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800403e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00b      	beq.n	8004062 <HAL_UART_IRQHandler+0xd2>
 800404a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d005      	beq.n	8004062 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	f043 0202 	orr.w	r2, r3, #2
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00b      	beq.n	8004086 <HAL_UART_IRQHandler+0xf6>
 800406e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d005      	beq.n	8004086 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f043 0204 	orr.w	r2, r3, #4
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	2b00      	cmp	r3, #0
 8004090:	d011      	beq.n	80040b6 <HAL_UART_IRQHandler+0x126>
 8004092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b00      	cmp	r3, #0
 800409c:	d105      	bne.n	80040aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800409e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d005      	beq.n	80040b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	f043 0208 	orr.w	r2, r3, #8
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 81ed 	beq.w	800449a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c4:	f003 0320 	and.w	r3, r3, #32
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_UART_IRQHandler+0x14e>
 80040cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d0:	f003 0320 	and.w	r3, r3, #32
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 faf0 	bl	80046be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e8:	2b40      	cmp	r3, #64	; 0x40
 80040ea:	bf0c      	ite	eq
 80040ec:	2301      	moveq	r3, #1
 80040ee:	2300      	movne	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d103      	bne.n	800410a <HAL_UART_IRQHandler+0x17a>
 8004102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004106:	2b00      	cmp	r3, #0
 8004108:	d04f      	beq.n	80041aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f9f8 	bl	8004500 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411a:	2b40      	cmp	r3, #64	; 0x40
 800411c:	d141      	bne.n	80041a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3314      	adds	r3, #20
 8004124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800412c:	e853 3f00 	ldrex	r3, [r3]
 8004130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004134:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800413c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3314      	adds	r3, #20
 8004146:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800414a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800414e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004152:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004156:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800415a:	e841 2300 	strex	r3, r2, [r1]
 800415e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1d9      	bne.n	800411e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416e:	2b00      	cmp	r3, #0
 8004170:	d013      	beq.n	800419a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	4a7d      	ldr	r2, [pc, #500]	; (800436c <HAL_UART_IRQHandler+0x3dc>)
 8004178:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	4618      	mov	r0, r3
 8004180:	f7fe fc3d 	bl	80029fe <HAL_DMA_Abort_IT>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d016      	beq.n	80041b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004194:	4610      	mov	r0, r2
 8004196:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004198:	e00e      	b.n	80041b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f99a 	bl	80044d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a0:	e00a      	b.n	80041b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f996 	bl	80044d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a8:	e006      	b.n	80041b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f992 	bl	80044d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80041b6:	e170      	b.n	800449a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b8:	bf00      	nop
    return;
 80041ba:	e16e      	b.n	800449a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	f040 814a 	bne.w	800445a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 8143 	beq.w	800445a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 813c 	beq.w	800445a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041e2:	2300      	movs	r3, #0
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	60bb      	str	r3, [r7, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004202:	2b40      	cmp	r3, #64	; 0x40
 8004204:	f040 80b4 	bne.w	8004370 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004214:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 8140 	beq.w	800449e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004226:	429a      	cmp	r2, r3
 8004228:	f080 8139 	bcs.w	800449e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004232:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800423e:	f000 8088 	beq.w	8004352 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	330c      	adds	r3, #12
 8004248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004258:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800425c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004260:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	330c      	adds	r3, #12
 800426a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800426e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004272:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800427a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800427e:	e841 2300 	strex	r3, r2, [r1]
 8004282:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004286:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1d9      	bne.n	8004242 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3314      	adds	r3, #20
 8004294:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800429e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042a0:	f023 0301 	bic.w	r3, r3, #1
 80042a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3314      	adds	r3, #20
 80042ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80042b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80042ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80042c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e1      	bne.n	800428e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3314      	adds	r3, #20
 80042d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042d4:	e853 3f00 	ldrex	r3, [r3]
 80042d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80042da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3314      	adds	r3, #20
 80042ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042f6:	e841 2300 	strex	r3, r2, [r1]
 80042fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1e3      	bne.n	80042ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	330c      	adds	r3, #12
 8004316:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004322:	f023 0310 	bic.w	r3, r3, #16
 8004326:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	330c      	adds	r3, #12
 8004330:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004334:	65ba      	str	r2, [r7, #88]	; 0x58
 8004336:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800433a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800433c:	e841 2300 	strex	r3, r2, [r1]
 8004340:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e3      	bne.n	8004310 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434c:	4618      	mov	r0, r3
 800434e:	f7fe fae6 	bl	800291e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800435a:	b29b      	uxth	r3, r3
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	b29b      	uxth	r3, r3
 8004360:	4619      	mov	r1, r3
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f8c0 	bl	80044e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004368:	e099      	b.n	800449e <HAL_UART_IRQHandler+0x50e>
 800436a:	bf00      	nop
 800436c:	080045c7 	.word	0x080045c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004378:	b29b      	uxth	r3, r3
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 808b 	beq.w	80044a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800438c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 8086 	beq.w	80044a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	330c      	adds	r3, #12
 800439c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	330c      	adds	r3, #12
 80043b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80043ba:	647a      	str	r2, [r7, #68]	; 0x44
 80043bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e3      	bne.n	8004396 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3314      	adds	r3, #20
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	623b      	str	r3, [r7, #32]
   return(result);
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	f023 0301 	bic.w	r3, r3, #1
 80043e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3314      	adds	r3, #20
 80043ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043f2:	633a      	str	r2, [r7, #48]	; 0x30
 80043f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e3      	bne.n	80043ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	330c      	adds	r3, #12
 800441a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	e853 3f00 	ldrex	r3, [r3]
 8004422:	60fb      	str	r3, [r7, #12]
   return(result);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0310 	bic.w	r3, r3, #16
 800442a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	330c      	adds	r3, #12
 8004434:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004438:	61fa      	str	r2, [r7, #28]
 800443a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443c:	69b9      	ldr	r1, [r7, #24]
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	e841 2300 	strex	r3, r2, [r1]
 8004444:	617b      	str	r3, [r7, #20]
   return(result);
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1e3      	bne.n	8004414 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800444c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004450:	4619      	mov	r1, r3
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f848 	bl	80044e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004458:	e023      	b.n	80044a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800445a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800445e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <HAL_UART_IRQHandler+0x4ea>
 8004466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800446a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f8bb 	bl	80045ee <UART_Transmit_IT>
    return;
 8004478:	e014      	b.n	80044a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800447a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800447e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00e      	beq.n	80044a4 <HAL_UART_IRQHandler+0x514>
 8004486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800448a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448e:	2b00      	cmp	r3, #0
 8004490:	d008      	beq.n	80044a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f8fb 	bl	800468e <UART_EndTransmit_IT>
    return;
 8004498:	e004      	b.n	80044a4 <HAL_UART_IRQHandler+0x514>
    return;
 800449a:	bf00      	nop
 800449c:	e002      	b.n	80044a4 <HAL_UART_IRQHandler+0x514>
      return;
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <HAL_UART_IRQHandler+0x514>
      return;
 80044a2:	bf00      	nop
  }
}
 80044a4:	37e8      	adds	r7, #232	; 0xe8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop

080044ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004500:	b480      	push	{r7}
 8004502:	b095      	sub	sp, #84	; 0x54
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	330c      	adds	r3, #12
 800450e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004512:	e853 3f00 	ldrex	r3, [r3]
 8004516:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800451e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	330c      	adds	r3, #12
 8004526:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004528:	643a      	str	r2, [r7, #64]	; 0x40
 800452a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800452e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e5      	bne.n	8004508 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3314      	adds	r3, #20
 8004542:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	e853 3f00 	ldrex	r3, [r3]
 800454a:	61fb      	str	r3, [r7, #28]
   return(result);
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f023 0301 	bic.w	r3, r3, #1
 8004552:	64bb      	str	r3, [r7, #72]	; 0x48
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3314      	adds	r3, #20
 800455a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800455c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800455e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004564:	e841 2300 	strex	r3, r2, [r1]
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e5      	bne.n	800453c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	2b01      	cmp	r3, #1
 8004576:	d119      	bne.n	80045ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	60bb      	str	r3, [r7, #8]
   return(result);
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f023 0310 	bic.w	r3, r3, #16
 800458e:	647b      	str	r3, [r7, #68]	; 0x44
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004598:	61ba      	str	r2, [r7, #24]
 800459a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	6979      	ldr	r1, [r7, #20]
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	613b      	str	r3, [r7, #16]
   return(result);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e5      	bne.n	8004578 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045ba:	bf00      	nop
 80045bc:	3754      	adds	r7, #84	; 0x54
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f7ff ff77 	bl	80044d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045e6:	bf00      	nop
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b085      	sub	sp, #20
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b21      	cmp	r3, #33	; 0x21
 8004600:	d13e      	bne.n	8004680 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800460a:	d114      	bne.n	8004636 <UART_Transmit_IT+0x48>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d110      	bne.n	8004636 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004628:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	1c9a      	adds	r2, r3, #2
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	621a      	str	r2, [r3, #32]
 8004634:	e008      	b.n	8004648 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	1c59      	adds	r1, r3, #1
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6211      	str	r1, [r2, #32]
 8004640:	781a      	ldrb	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800464c:	b29b      	uxth	r3, r3
 800464e:	3b01      	subs	r3, #1
 8004650:	b29b      	uxth	r3, r3
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	4619      	mov	r1, r3
 8004656:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10f      	bne.n	800467c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800466a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800467a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	e000      	b.n	8004682 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004680:	2302      	movs	r3, #2
  }
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff fefc 	bl	80044ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b08c      	sub	sp, #48	; 0x30
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b22      	cmp	r3, #34	; 0x22
 80046d0:	f040 80ab 	bne.w	800482a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046dc:	d117      	bne.n	800470e <UART_Receive_IT+0x50>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d113      	bne.n	800470e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004700:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	1c9a      	adds	r2, r3, #2
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	629a      	str	r2, [r3, #40]	; 0x28
 800470c:	e026      	b.n	800475c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004714:	2300      	movs	r3, #0
 8004716:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004720:	d007      	beq.n	8004732 <UART_Receive_IT+0x74>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10a      	bne.n	8004740 <UART_Receive_IT+0x82>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	b2da      	uxtb	r2, r3
 800473a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473c:	701a      	strb	r2, [r3, #0]
 800473e:	e008      	b.n	8004752 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800474c:	b2da      	uxtb	r2, r3
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29b      	uxth	r3, r3
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	4619      	mov	r1, r3
 800476a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800476c:	2b00      	cmp	r3, #0
 800476e:	d15a      	bne.n	8004826 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0220 	bic.w	r2, r2, #32
 800477e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800478e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695a      	ldr	r2, [r3, #20]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0201 	bic.w	r2, r2, #1
 800479e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d135      	bne.n	800481c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	330c      	adds	r3, #12
 80047bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	e853 3f00 	ldrex	r3, [r3]
 80047c4:	613b      	str	r3, [r7, #16]
   return(result);
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f023 0310 	bic.w	r3, r3, #16
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	330c      	adds	r3, #12
 80047d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d6:	623a      	str	r2, [r7, #32]
 80047d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047da:	69f9      	ldr	r1, [r7, #28]
 80047dc:	6a3a      	ldr	r2, [r7, #32]
 80047de:	e841 2300 	strex	r3, r2, [r1]
 80047e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1e5      	bne.n	80047b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	2b10      	cmp	r3, #16
 80047f6:	d10a      	bne.n	800480e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004812:	4619      	mov	r1, r3
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7ff fe67 	bl	80044e8 <HAL_UARTEx_RxEventCallback>
 800481a:	e002      	b.n	8004822 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7ff fe4f 	bl	80044c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	e002      	b.n	800482c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	e000      	b.n	800482c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800482a:	2302      	movs	r3, #2
  }
}
 800482c:	4618      	mov	r0, r3
 800482e:	3730      	adds	r7, #48	; 0x30
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004838:	b09f      	sub	sp, #124	; 0x7c
 800483a:	af00      	add	r7, sp, #0
 800483c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800483e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800484a:	68d9      	ldr	r1, [r3, #12]
 800484c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	ea40 0301 	orr.w	r3, r0, r1
 8004854:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	431a      	orrs	r2, r3
 8004860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	431a      	orrs	r2, r3
 8004866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	4313      	orrs	r3, r2
 800486c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800486e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004878:	f021 010c 	bic.w	r1, r1, #12
 800487c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004882:	430b      	orrs	r3, r1
 8004884:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004892:	6999      	ldr	r1, [r3, #24]
 8004894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	ea40 0301 	orr.w	r3, r0, r1
 800489c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800489e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	4bc5      	ldr	r3, [pc, #788]	; (8004bb8 <UART_SetConfig+0x384>)
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d004      	beq.n	80048b2 <UART_SetConfig+0x7e>
 80048a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	4bc3      	ldr	r3, [pc, #780]	; (8004bbc <UART_SetConfig+0x388>)
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d103      	bne.n	80048ba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048b2:	f7fe fec5 	bl	8003640 <HAL_RCC_GetPCLK2Freq>
 80048b6:	6778      	str	r0, [r7, #116]	; 0x74
 80048b8:	e002      	b.n	80048c0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ba:	f7fe fead 	bl	8003618 <HAL_RCC_GetPCLK1Freq>
 80048be:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048c8:	f040 80b6 	bne.w	8004a38 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048ce:	461c      	mov	r4, r3
 80048d0:	f04f 0500 	mov.w	r5, #0
 80048d4:	4622      	mov	r2, r4
 80048d6:	462b      	mov	r3, r5
 80048d8:	1891      	adds	r1, r2, r2
 80048da:	6439      	str	r1, [r7, #64]	; 0x40
 80048dc:	415b      	adcs	r3, r3
 80048de:	647b      	str	r3, [r7, #68]	; 0x44
 80048e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048e4:	1912      	adds	r2, r2, r4
 80048e6:	eb45 0303 	adc.w	r3, r5, r3
 80048ea:	f04f 0000 	mov.w	r0, #0
 80048ee:	f04f 0100 	mov.w	r1, #0
 80048f2:	00d9      	lsls	r1, r3, #3
 80048f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048f8:	00d0      	lsls	r0, r2, #3
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	1911      	adds	r1, r2, r4
 8004900:	6639      	str	r1, [r7, #96]	; 0x60
 8004902:	416b      	adcs	r3, r5
 8004904:	667b      	str	r3, [r7, #100]	; 0x64
 8004906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	461a      	mov	r2, r3
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	1891      	adds	r1, r2, r2
 8004912:	63b9      	str	r1, [r7, #56]	; 0x38
 8004914:	415b      	adcs	r3, r3
 8004916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004918:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800491c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004920:	f7fc f99a 	bl	8000c58 <__aeabi_uldivmod>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4ba5      	ldr	r3, [pc, #660]	; (8004bc0 <UART_SetConfig+0x38c>)
 800492a:	fba3 2302 	umull	r2, r3, r3, r2
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	011e      	lsls	r6, r3, #4
 8004932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004934:	461c      	mov	r4, r3
 8004936:	f04f 0500 	mov.w	r5, #0
 800493a:	4622      	mov	r2, r4
 800493c:	462b      	mov	r3, r5
 800493e:	1891      	adds	r1, r2, r2
 8004940:	6339      	str	r1, [r7, #48]	; 0x30
 8004942:	415b      	adcs	r3, r3
 8004944:	637b      	str	r3, [r7, #52]	; 0x34
 8004946:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800494a:	1912      	adds	r2, r2, r4
 800494c:	eb45 0303 	adc.w	r3, r5, r3
 8004950:	f04f 0000 	mov.w	r0, #0
 8004954:	f04f 0100 	mov.w	r1, #0
 8004958:	00d9      	lsls	r1, r3, #3
 800495a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800495e:	00d0      	lsls	r0, r2, #3
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	1911      	adds	r1, r2, r4
 8004966:	65b9      	str	r1, [r7, #88]	; 0x58
 8004968:	416b      	adcs	r3, r5
 800496a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800496c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	461a      	mov	r2, r3
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	1891      	adds	r1, r2, r2
 8004978:	62b9      	str	r1, [r7, #40]	; 0x28
 800497a:	415b      	adcs	r3, r3
 800497c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800497e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004982:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004986:	f7fc f967 	bl	8000c58 <__aeabi_uldivmod>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4b8c      	ldr	r3, [pc, #560]	; (8004bc0 <UART_SetConfig+0x38c>)
 8004990:	fba3 1302 	umull	r1, r3, r3, r2
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	2164      	movs	r1, #100	; 0x64
 8004998:	fb01 f303 	mul.w	r3, r1, r3
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	3332      	adds	r3, #50	; 0x32
 80049a2:	4a87      	ldr	r2, [pc, #540]	; (8004bc0 <UART_SetConfig+0x38c>)
 80049a4:	fba2 2303 	umull	r2, r3, r2, r3
 80049a8:	095b      	lsrs	r3, r3, #5
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049b0:	441e      	add	r6, r3
 80049b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049b4:	4618      	mov	r0, r3
 80049b6:	f04f 0100 	mov.w	r1, #0
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	1894      	adds	r4, r2, r2
 80049c0:	623c      	str	r4, [r7, #32]
 80049c2:	415b      	adcs	r3, r3
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
 80049c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049ca:	1812      	adds	r2, r2, r0
 80049cc:	eb41 0303 	adc.w	r3, r1, r3
 80049d0:	f04f 0400 	mov.w	r4, #0
 80049d4:	f04f 0500 	mov.w	r5, #0
 80049d8:	00dd      	lsls	r5, r3, #3
 80049da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049de:	00d4      	lsls	r4, r2, #3
 80049e0:	4622      	mov	r2, r4
 80049e2:	462b      	mov	r3, r5
 80049e4:	1814      	adds	r4, r2, r0
 80049e6:	653c      	str	r4, [r7, #80]	; 0x50
 80049e8:	414b      	adcs	r3, r1
 80049ea:	657b      	str	r3, [r7, #84]	; 0x54
 80049ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	461a      	mov	r2, r3
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	1891      	adds	r1, r2, r2
 80049f8:	61b9      	str	r1, [r7, #24]
 80049fa:	415b      	adcs	r3, r3
 80049fc:	61fb      	str	r3, [r7, #28]
 80049fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a02:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004a06:	f7fc f927 	bl	8000c58 <__aeabi_uldivmod>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4b6c      	ldr	r3, [pc, #432]	; (8004bc0 <UART_SetConfig+0x38c>)
 8004a10:	fba3 1302 	umull	r1, r3, r3, r2
 8004a14:	095b      	lsrs	r3, r3, #5
 8004a16:	2164      	movs	r1, #100	; 0x64
 8004a18:	fb01 f303 	mul.w	r3, r1, r3
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	3332      	adds	r3, #50	; 0x32
 8004a22:	4a67      	ldr	r2, [pc, #412]	; (8004bc0 <UART_SetConfig+0x38c>)
 8004a24:	fba2 2303 	umull	r2, r3, r2, r3
 8004a28:	095b      	lsrs	r3, r3, #5
 8004a2a:	f003 0207 	and.w	r2, r3, #7
 8004a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4432      	add	r2, r6
 8004a34:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a36:	e0b9      	b.n	8004bac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a3a:	461c      	mov	r4, r3
 8004a3c:	f04f 0500 	mov.w	r5, #0
 8004a40:	4622      	mov	r2, r4
 8004a42:	462b      	mov	r3, r5
 8004a44:	1891      	adds	r1, r2, r2
 8004a46:	6139      	str	r1, [r7, #16]
 8004a48:	415b      	adcs	r3, r3
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a50:	1912      	adds	r2, r2, r4
 8004a52:	eb45 0303 	adc.w	r3, r5, r3
 8004a56:	f04f 0000 	mov.w	r0, #0
 8004a5a:	f04f 0100 	mov.w	r1, #0
 8004a5e:	00d9      	lsls	r1, r3, #3
 8004a60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a64:	00d0      	lsls	r0, r2, #3
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	eb12 0804 	adds.w	r8, r2, r4
 8004a6e:	eb43 0905 	adc.w	r9, r3, r5
 8004a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f04f 0100 	mov.w	r1, #0
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	008b      	lsls	r3, r1, #2
 8004a86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a8a:	0082      	lsls	r2, r0, #2
 8004a8c:	4640      	mov	r0, r8
 8004a8e:	4649      	mov	r1, r9
 8004a90:	f7fc f8e2 	bl	8000c58 <__aeabi_uldivmod>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	4b49      	ldr	r3, [pc, #292]	; (8004bc0 <UART_SetConfig+0x38c>)
 8004a9a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	011e      	lsls	r6, r3, #4
 8004aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f04f 0100 	mov.w	r1, #0
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	1894      	adds	r4, r2, r2
 8004ab0:	60bc      	str	r4, [r7, #8]
 8004ab2:	415b      	adcs	r3, r3
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004aba:	1812      	adds	r2, r2, r0
 8004abc:	eb41 0303 	adc.w	r3, r1, r3
 8004ac0:	f04f 0400 	mov.w	r4, #0
 8004ac4:	f04f 0500 	mov.w	r5, #0
 8004ac8:	00dd      	lsls	r5, r3, #3
 8004aca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ace:	00d4      	lsls	r4, r2, #3
 8004ad0:	4622      	mov	r2, r4
 8004ad2:	462b      	mov	r3, r5
 8004ad4:	1814      	adds	r4, r2, r0
 8004ad6:	64bc      	str	r4, [r7, #72]	; 0x48
 8004ad8:	414b      	adcs	r3, r1
 8004ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f04f 0100 	mov.w	r1, #0
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	008b      	lsls	r3, r1, #2
 8004af0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004af4:	0082      	lsls	r2, r0, #2
 8004af6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004afa:	f7fc f8ad 	bl	8000c58 <__aeabi_uldivmod>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	4b2f      	ldr	r3, [pc, #188]	; (8004bc0 <UART_SetConfig+0x38c>)
 8004b04:	fba3 1302 	umull	r1, r3, r3, r2
 8004b08:	095b      	lsrs	r3, r3, #5
 8004b0a:	2164      	movs	r1, #100	; 0x64
 8004b0c:	fb01 f303 	mul.w	r3, r1, r3
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	3332      	adds	r3, #50	; 0x32
 8004b16:	4a2a      	ldr	r2, [pc, #168]	; (8004bc0 <UART_SetConfig+0x38c>)
 8004b18:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1c:	095b      	lsrs	r3, r3, #5
 8004b1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b22:	441e      	add	r6, r3
 8004b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b26:	4618      	mov	r0, r3
 8004b28:	f04f 0100 	mov.w	r1, #0
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	1894      	adds	r4, r2, r2
 8004b32:	603c      	str	r4, [r7, #0]
 8004b34:	415b      	adcs	r3, r3
 8004b36:	607b      	str	r3, [r7, #4]
 8004b38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b3c:	1812      	adds	r2, r2, r0
 8004b3e:	eb41 0303 	adc.w	r3, r1, r3
 8004b42:	f04f 0400 	mov.w	r4, #0
 8004b46:	f04f 0500 	mov.w	r5, #0
 8004b4a:	00dd      	lsls	r5, r3, #3
 8004b4c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b50:	00d4      	lsls	r4, r2, #3
 8004b52:	4622      	mov	r2, r4
 8004b54:	462b      	mov	r3, r5
 8004b56:	eb12 0a00 	adds.w	sl, r2, r0
 8004b5a:	eb43 0b01 	adc.w	fp, r3, r1
 8004b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f04f 0100 	mov.w	r1, #0
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	008b      	lsls	r3, r1, #2
 8004b72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b76:	0082      	lsls	r2, r0, #2
 8004b78:	4650      	mov	r0, sl
 8004b7a:	4659      	mov	r1, fp
 8004b7c:	f7fc f86c 	bl	8000c58 <__aeabi_uldivmod>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <UART_SetConfig+0x38c>)
 8004b86:	fba3 1302 	umull	r1, r3, r3, r2
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	2164      	movs	r1, #100	; 0x64
 8004b8e:	fb01 f303 	mul.w	r3, r1, r3
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	3332      	adds	r3, #50	; 0x32
 8004b98:	4a09      	ldr	r2, [pc, #36]	; (8004bc0 <UART_SetConfig+0x38c>)
 8004b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	f003 020f 	and.w	r2, r3, #15
 8004ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4432      	add	r2, r6
 8004baa:	609a      	str	r2, [r3, #8]
}
 8004bac:	bf00      	nop
 8004bae:	377c      	adds	r7, #124	; 0x7c
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40011000 	.word	0x40011000
 8004bbc:	40011400 	.word	0x40011400
 8004bc0:	51eb851f 	.word	0x51eb851f

08004bc4 <__errno>:
 8004bc4:	4b01      	ldr	r3, [pc, #4]	; (8004bcc <__errno+0x8>)
 8004bc6:	6818      	ldr	r0, [r3, #0]
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	20000034 	.word	0x20000034

08004bd0 <__libc_init_array>:
 8004bd0:	b570      	push	{r4, r5, r6, lr}
 8004bd2:	4d0d      	ldr	r5, [pc, #52]	; (8004c08 <__libc_init_array+0x38>)
 8004bd4:	4c0d      	ldr	r4, [pc, #52]	; (8004c0c <__libc_init_array+0x3c>)
 8004bd6:	1b64      	subs	r4, r4, r5
 8004bd8:	10a4      	asrs	r4, r4, #2
 8004bda:	2600      	movs	r6, #0
 8004bdc:	42a6      	cmp	r6, r4
 8004bde:	d109      	bne.n	8004bf4 <__libc_init_array+0x24>
 8004be0:	4d0b      	ldr	r5, [pc, #44]	; (8004c10 <__libc_init_array+0x40>)
 8004be2:	4c0c      	ldr	r4, [pc, #48]	; (8004c14 <__libc_init_array+0x44>)
 8004be4:	f002 feca 	bl	800797c <_init>
 8004be8:	1b64      	subs	r4, r4, r5
 8004bea:	10a4      	asrs	r4, r4, #2
 8004bec:	2600      	movs	r6, #0
 8004bee:	42a6      	cmp	r6, r4
 8004bf0:	d105      	bne.n	8004bfe <__libc_init_array+0x2e>
 8004bf2:	bd70      	pop	{r4, r5, r6, pc}
 8004bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bf8:	4798      	blx	r3
 8004bfa:	3601      	adds	r6, #1
 8004bfc:	e7ee      	b.n	8004bdc <__libc_init_array+0xc>
 8004bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c02:	4798      	blx	r3
 8004c04:	3601      	adds	r6, #1
 8004c06:	e7f2      	b.n	8004bee <__libc_init_array+0x1e>
 8004c08:	08007dcc 	.word	0x08007dcc
 8004c0c:	08007dcc 	.word	0x08007dcc
 8004c10:	08007dcc 	.word	0x08007dcc
 8004c14:	08007dd0 	.word	0x08007dd0

08004c18 <memset>:
 8004c18:	4402      	add	r2, r0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d100      	bne.n	8004c22 <memset+0xa>
 8004c20:	4770      	bx	lr
 8004c22:	f803 1b01 	strb.w	r1, [r3], #1
 8004c26:	e7f9      	b.n	8004c1c <memset+0x4>

08004c28 <__cvt>:
 8004c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c2c:	ec55 4b10 	vmov	r4, r5, d0
 8004c30:	2d00      	cmp	r5, #0
 8004c32:	460e      	mov	r6, r1
 8004c34:	4619      	mov	r1, r3
 8004c36:	462b      	mov	r3, r5
 8004c38:	bfbb      	ittet	lt
 8004c3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004c3e:	461d      	movlt	r5, r3
 8004c40:	2300      	movge	r3, #0
 8004c42:	232d      	movlt	r3, #45	; 0x2d
 8004c44:	700b      	strb	r3, [r1, #0]
 8004c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004c4c:	4691      	mov	r9, r2
 8004c4e:	f023 0820 	bic.w	r8, r3, #32
 8004c52:	bfbc      	itt	lt
 8004c54:	4622      	movlt	r2, r4
 8004c56:	4614      	movlt	r4, r2
 8004c58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c5c:	d005      	beq.n	8004c6a <__cvt+0x42>
 8004c5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c62:	d100      	bne.n	8004c66 <__cvt+0x3e>
 8004c64:	3601      	adds	r6, #1
 8004c66:	2102      	movs	r1, #2
 8004c68:	e000      	b.n	8004c6c <__cvt+0x44>
 8004c6a:	2103      	movs	r1, #3
 8004c6c:	ab03      	add	r3, sp, #12
 8004c6e:	9301      	str	r3, [sp, #4]
 8004c70:	ab02      	add	r3, sp, #8
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	ec45 4b10 	vmov	d0, r4, r5
 8004c78:	4653      	mov	r3, sl
 8004c7a:	4632      	mov	r2, r6
 8004c7c:	f000 fd00 	bl	8005680 <_dtoa_r>
 8004c80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c84:	4607      	mov	r7, r0
 8004c86:	d102      	bne.n	8004c8e <__cvt+0x66>
 8004c88:	f019 0f01 	tst.w	r9, #1
 8004c8c:	d022      	beq.n	8004cd4 <__cvt+0xac>
 8004c8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c92:	eb07 0906 	add.w	r9, r7, r6
 8004c96:	d110      	bne.n	8004cba <__cvt+0x92>
 8004c98:	783b      	ldrb	r3, [r7, #0]
 8004c9a:	2b30      	cmp	r3, #48	; 0x30
 8004c9c:	d10a      	bne.n	8004cb4 <__cvt+0x8c>
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	f7fb ff17 	bl	8000ad8 <__aeabi_dcmpeq>
 8004caa:	b918      	cbnz	r0, 8004cb4 <__cvt+0x8c>
 8004cac:	f1c6 0601 	rsb	r6, r6, #1
 8004cb0:	f8ca 6000 	str.w	r6, [sl]
 8004cb4:	f8da 3000 	ldr.w	r3, [sl]
 8004cb8:	4499      	add	r9, r3
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	f7fb ff09 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cc6:	b108      	cbz	r0, 8004ccc <__cvt+0xa4>
 8004cc8:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ccc:	2230      	movs	r2, #48	; 0x30
 8004cce:	9b03      	ldr	r3, [sp, #12]
 8004cd0:	454b      	cmp	r3, r9
 8004cd2:	d307      	bcc.n	8004ce4 <__cvt+0xbc>
 8004cd4:	9b03      	ldr	r3, [sp, #12]
 8004cd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cd8:	1bdb      	subs	r3, r3, r7
 8004cda:	4638      	mov	r0, r7
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	b004      	add	sp, #16
 8004ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce4:	1c59      	adds	r1, r3, #1
 8004ce6:	9103      	str	r1, [sp, #12]
 8004ce8:	701a      	strb	r2, [r3, #0]
 8004cea:	e7f0      	b.n	8004cce <__cvt+0xa6>

08004cec <__exponent>:
 8004cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2900      	cmp	r1, #0
 8004cf2:	bfb8      	it	lt
 8004cf4:	4249      	neglt	r1, r1
 8004cf6:	f803 2b02 	strb.w	r2, [r3], #2
 8004cfa:	bfb4      	ite	lt
 8004cfc:	222d      	movlt	r2, #45	; 0x2d
 8004cfe:	222b      	movge	r2, #43	; 0x2b
 8004d00:	2909      	cmp	r1, #9
 8004d02:	7042      	strb	r2, [r0, #1]
 8004d04:	dd2a      	ble.n	8004d5c <__exponent+0x70>
 8004d06:	f10d 0407 	add.w	r4, sp, #7
 8004d0a:	46a4      	mov	ip, r4
 8004d0c:	270a      	movs	r7, #10
 8004d0e:	46a6      	mov	lr, r4
 8004d10:	460a      	mov	r2, r1
 8004d12:	fb91 f6f7 	sdiv	r6, r1, r7
 8004d16:	fb07 1516 	mls	r5, r7, r6, r1
 8004d1a:	3530      	adds	r5, #48	; 0x30
 8004d1c:	2a63      	cmp	r2, #99	; 0x63
 8004d1e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004d22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004d26:	4631      	mov	r1, r6
 8004d28:	dcf1      	bgt.n	8004d0e <__exponent+0x22>
 8004d2a:	3130      	adds	r1, #48	; 0x30
 8004d2c:	f1ae 0502 	sub.w	r5, lr, #2
 8004d30:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004d34:	1c44      	adds	r4, r0, #1
 8004d36:	4629      	mov	r1, r5
 8004d38:	4561      	cmp	r1, ip
 8004d3a:	d30a      	bcc.n	8004d52 <__exponent+0x66>
 8004d3c:	f10d 0209 	add.w	r2, sp, #9
 8004d40:	eba2 020e 	sub.w	r2, r2, lr
 8004d44:	4565      	cmp	r5, ip
 8004d46:	bf88      	it	hi
 8004d48:	2200      	movhi	r2, #0
 8004d4a:	4413      	add	r3, r2
 8004d4c:	1a18      	subs	r0, r3, r0
 8004d4e:	b003      	add	sp, #12
 8004d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d56:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004d5a:	e7ed      	b.n	8004d38 <__exponent+0x4c>
 8004d5c:	2330      	movs	r3, #48	; 0x30
 8004d5e:	3130      	adds	r1, #48	; 0x30
 8004d60:	7083      	strb	r3, [r0, #2]
 8004d62:	70c1      	strb	r1, [r0, #3]
 8004d64:	1d03      	adds	r3, r0, #4
 8004d66:	e7f1      	b.n	8004d4c <__exponent+0x60>

08004d68 <_printf_float>:
 8004d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6c:	ed2d 8b02 	vpush	{d8}
 8004d70:	b08d      	sub	sp, #52	; 0x34
 8004d72:	460c      	mov	r4, r1
 8004d74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004d78:	4616      	mov	r6, r2
 8004d7a:	461f      	mov	r7, r3
 8004d7c:	4605      	mov	r5, r0
 8004d7e:	f001 fa6b 	bl	8006258 <_localeconv_r>
 8004d82:	f8d0 a000 	ldr.w	sl, [r0]
 8004d86:	4650      	mov	r0, sl
 8004d88:	f7fb fa2a 	bl	80001e0 <strlen>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	9305      	str	r3, [sp, #20]
 8004d94:	f8d8 3000 	ldr.w	r3, [r8]
 8004d98:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004d9c:	3307      	adds	r3, #7
 8004d9e:	f023 0307 	bic.w	r3, r3, #7
 8004da2:	f103 0208 	add.w	r2, r3, #8
 8004da6:	f8c8 2000 	str.w	r2, [r8]
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004db2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004db6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004dba:	9307      	str	r3, [sp, #28]
 8004dbc:	f8cd 8018 	str.w	r8, [sp, #24]
 8004dc0:	ee08 0a10 	vmov	s16, r0
 8004dc4:	4b9f      	ldr	r3, [pc, #636]	; (8005044 <_printf_float+0x2dc>)
 8004dc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dce:	f7fb feb5 	bl	8000b3c <__aeabi_dcmpun>
 8004dd2:	bb88      	cbnz	r0, 8004e38 <_printf_float+0xd0>
 8004dd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dd8:	4b9a      	ldr	r3, [pc, #616]	; (8005044 <_printf_float+0x2dc>)
 8004dda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dde:	f7fb fe8f 	bl	8000b00 <__aeabi_dcmple>
 8004de2:	bb48      	cbnz	r0, 8004e38 <_printf_float+0xd0>
 8004de4:	2200      	movs	r2, #0
 8004de6:	2300      	movs	r3, #0
 8004de8:	4640      	mov	r0, r8
 8004dea:	4649      	mov	r1, r9
 8004dec:	f7fb fe7e 	bl	8000aec <__aeabi_dcmplt>
 8004df0:	b110      	cbz	r0, 8004df8 <_printf_float+0x90>
 8004df2:	232d      	movs	r3, #45	; 0x2d
 8004df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004df8:	4b93      	ldr	r3, [pc, #588]	; (8005048 <_printf_float+0x2e0>)
 8004dfa:	4894      	ldr	r0, [pc, #592]	; (800504c <_printf_float+0x2e4>)
 8004dfc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004e00:	bf94      	ite	ls
 8004e02:	4698      	movls	r8, r3
 8004e04:	4680      	movhi	r8, r0
 8004e06:	2303      	movs	r3, #3
 8004e08:	6123      	str	r3, [r4, #16]
 8004e0a:	9b05      	ldr	r3, [sp, #20]
 8004e0c:	f023 0204 	bic.w	r2, r3, #4
 8004e10:	6022      	str	r2, [r4, #0]
 8004e12:	f04f 0900 	mov.w	r9, #0
 8004e16:	9700      	str	r7, [sp, #0]
 8004e18:	4633      	mov	r3, r6
 8004e1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	4628      	mov	r0, r5
 8004e20:	f000 f9d8 	bl	80051d4 <_printf_common>
 8004e24:	3001      	adds	r0, #1
 8004e26:	f040 8090 	bne.w	8004f4a <_printf_float+0x1e2>
 8004e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e2e:	b00d      	add	sp, #52	; 0x34
 8004e30:	ecbd 8b02 	vpop	{d8}
 8004e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e38:	4642      	mov	r2, r8
 8004e3a:	464b      	mov	r3, r9
 8004e3c:	4640      	mov	r0, r8
 8004e3e:	4649      	mov	r1, r9
 8004e40:	f7fb fe7c 	bl	8000b3c <__aeabi_dcmpun>
 8004e44:	b140      	cbz	r0, 8004e58 <_printf_float+0xf0>
 8004e46:	464b      	mov	r3, r9
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	bfbc      	itt	lt
 8004e4c:	232d      	movlt	r3, #45	; 0x2d
 8004e4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004e52:	487f      	ldr	r0, [pc, #508]	; (8005050 <_printf_float+0x2e8>)
 8004e54:	4b7f      	ldr	r3, [pc, #508]	; (8005054 <_printf_float+0x2ec>)
 8004e56:	e7d1      	b.n	8004dfc <_printf_float+0x94>
 8004e58:	6863      	ldr	r3, [r4, #4]
 8004e5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004e5e:	9206      	str	r2, [sp, #24]
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	d13f      	bne.n	8004ee4 <_printf_float+0x17c>
 8004e64:	2306      	movs	r3, #6
 8004e66:	6063      	str	r3, [r4, #4]
 8004e68:	9b05      	ldr	r3, [sp, #20]
 8004e6a:	6861      	ldr	r1, [r4, #4]
 8004e6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004e70:	2300      	movs	r3, #0
 8004e72:	9303      	str	r3, [sp, #12]
 8004e74:	ab0a      	add	r3, sp, #40	; 0x28
 8004e76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004e7a:	ab09      	add	r3, sp, #36	; 0x24
 8004e7c:	ec49 8b10 	vmov	d0, r8, r9
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	6022      	str	r2, [r4, #0]
 8004e84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e88:	4628      	mov	r0, r5
 8004e8a:	f7ff fecd 	bl	8004c28 <__cvt>
 8004e8e:	9b06      	ldr	r3, [sp, #24]
 8004e90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e92:	2b47      	cmp	r3, #71	; 0x47
 8004e94:	4680      	mov	r8, r0
 8004e96:	d108      	bne.n	8004eaa <_printf_float+0x142>
 8004e98:	1cc8      	adds	r0, r1, #3
 8004e9a:	db02      	blt.n	8004ea2 <_printf_float+0x13a>
 8004e9c:	6863      	ldr	r3, [r4, #4]
 8004e9e:	4299      	cmp	r1, r3
 8004ea0:	dd41      	ble.n	8004f26 <_printf_float+0x1be>
 8004ea2:	f1ab 0b02 	sub.w	fp, fp, #2
 8004ea6:	fa5f fb8b 	uxtb.w	fp, fp
 8004eaa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004eae:	d820      	bhi.n	8004ef2 <_printf_float+0x18a>
 8004eb0:	3901      	subs	r1, #1
 8004eb2:	465a      	mov	r2, fp
 8004eb4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004eb8:	9109      	str	r1, [sp, #36]	; 0x24
 8004eba:	f7ff ff17 	bl	8004cec <__exponent>
 8004ebe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ec0:	1813      	adds	r3, r2, r0
 8004ec2:	2a01      	cmp	r2, #1
 8004ec4:	4681      	mov	r9, r0
 8004ec6:	6123      	str	r3, [r4, #16]
 8004ec8:	dc02      	bgt.n	8004ed0 <_printf_float+0x168>
 8004eca:	6822      	ldr	r2, [r4, #0]
 8004ecc:	07d2      	lsls	r2, r2, #31
 8004ece:	d501      	bpl.n	8004ed4 <_printf_float+0x16c>
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	6123      	str	r3, [r4, #16]
 8004ed4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d09c      	beq.n	8004e16 <_printf_float+0xae>
 8004edc:	232d      	movs	r3, #45	; 0x2d
 8004ede:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ee2:	e798      	b.n	8004e16 <_printf_float+0xae>
 8004ee4:	9a06      	ldr	r2, [sp, #24]
 8004ee6:	2a47      	cmp	r2, #71	; 0x47
 8004ee8:	d1be      	bne.n	8004e68 <_printf_float+0x100>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1bc      	bne.n	8004e68 <_printf_float+0x100>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e7b9      	b.n	8004e66 <_printf_float+0xfe>
 8004ef2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004ef6:	d118      	bne.n	8004f2a <_printf_float+0x1c2>
 8004ef8:	2900      	cmp	r1, #0
 8004efa:	6863      	ldr	r3, [r4, #4]
 8004efc:	dd0b      	ble.n	8004f16 <_printf_float+0x1ae>
 8004efe:	6121      	str	r1, [r4, #16]
 8004f00:	b913      	cbnz	r3, 8004f08 <_printf_float+0x1a0>
 8004f02:	6822      	ldr	r2, [r4, #0]
 8004f04:	07d0      	lsls	r0, r2, #31
 8004f06:	d502      	bpl.n	8004f0e <_printf_float+0x1a6>
 8004f08:	3301      	adds	r3, #1
 8004f0a:	440b      	add	r3, r1
 8004f0c:	6123      	str	r3, [r4, #16]
 8004f0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f10:	f04f 0900 	mov.w	r9, #0
 8004f14:	e7de      	b.n	8004ed4 <_printf_float+0x16c>
 8004f16:	b913      	cbnz	r3, 8004f1e <_printf_float+0x1b6>
 8004f18:	6822      	ldr	r2, [r4, #0]
 8004f1a:	07d2      	lsls	r2, r2, #31
 8004f1c:	d501      	bpl.n	8004f22 <_printf_float+0x1ba>
 8004f1e:	3302      	adds	r3, #2
 8004f20:	e7f4      	b.n	8004f0c <_printf_float+0x1a4>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e7f2      	b.n	8004f0c <_printf_float+0x1a4>
 8004f26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f2c:	4299      	cmp	r1, r3
 8004f2e:	db05      	blt.n	8004f3c <_printf_float+0x1d4>
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	6121      	str	r1, [r4, #16]
 8004f34:	07d8      	lsls	r0, r3, #31
 8004f36:	d5ea      	bpl.n	8004f0e <_printf_float+0x1a6>
 8004f38:	1c4b      	adds	r3, r1, #1
 8004f3a:	e7e7      	b.n	8004f0c <_printf_float+0x1a4>
 8004f3c:	2900      	cmp	r1, #0
 8004f3e:	bfd4      	ite	le
 8004f40:	f1c1 0202 	rsble	r2, r1, #2
 8004f44:	2201      	movgt	r2, #1
 8004f46:	4413      	add	r3, r2
 8004f48:	e7e0      	b.n	8004f0c <_printf_float+0x1a4>
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	055a      	lsls	r2, r3, #21
 8004f4e:	d407      	bmi.n	8004f60 <_printf_float+0x1f8>
 8004f50:	6923      	ldr	r3, [r4, #16]
 8004f52:	4642      	mov	r2, r8
 8004f54:	4631      	mov	r1, r6
 8004f56:	4628      	mov	r0, r5
 8004f58:	47b8      	blx	r7
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	d12c      	bne.n	8004fb8 <_printf_float+0x250>
 8004f5e:	e764      	b.n	8004e2a <_printf_float+0xc2>
 8004f60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f64:	f240 80e0 	bls.w	8005128 <_printf_float+0x3c0>
 8004f68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f7fb fdb2 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d034      	beq.n	8004fe2 <_printf_float+0x27a>
 8004f78:	4a37      	ldr	r2, [pc, #220]	; (8005058 <_printf_float+0x2f0>)
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	4631      	mov	r1, r6
 8004f7e:	4628      	mov	r0, r5
 8004f80:	47b8      	blx	r7
 8004f82:	3001      	adds	r0, #1
 8004f84:	f43f af51 	beq.w	8004e2a <_printf_float+0xc2>
 8004f88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	db02      	blt.n	8004f96 <_printf_float+0x22e>
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	07d8      	lsls	r0, r3, #31
 8004f94:	d510      	bpl.n	8004fb8 <_printf_float+0x250>
 8004f96:	ee18 3a10 	vmov	r3, s16
 8004f9a:	4652      	mov	r2, sl
 8004f9c:	4631      	mov	r1, r6
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	47b8      	blx	r7
 8004fa2:	3001      	adds	r0, #1
 8004fa4:	f43f af41 	beq.w	8004e2a <_printf_float+0xc2>
 8004fa8:	f04f 0800 	mov.w	r8, #0
 8004fac:	f104 091a 	add.w	r9, r4, #26
 8004fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	4543      	cmp	r3, r8
 8004fb6:	dc09      	bgt.n	8004fcc <_printf_float+0x264>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	079b      	lsls	r3, r3, #30
 8004fbc:	f100 8105 	bmi.w	80051ca <_printf_float+0x462>
 8004fc0:	68e0      	ldr	r0, [r4, #12]
 8004fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fc4:	4298      	cmp	r0, r3
 8004fc6:	bfb8      	it	lt
 8004fc8:	4618      	movlt	r0, r3
 8004fca:	e730      	b.n	8004e2e <_printf_float+0xc6>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	464a      	mov	r2, r9
 8004fd0:	4631      	mov	r1, r6
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	47b8      	blx	r7
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	f43f af27 	beq.w	8004e2a <_printf_float+0xc2>
 8004fdc:	f108 0801 	add.w	r8, r8, #1
 8004fe0:	e7e6      	b.n	8004fb0 <_printf_float+0x248>
 8004fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	dc39      	bgt.n	800505c <_printf_float+0x2f4>
 8004fe8:	4a1b      	ldr	r2, [pc, #108]	; (8005058 <_printf_float+0x2f0>)
 8004fea:	2301      	movs	r3, #1
 8004fec:	4631      	mov	r1, r6
 8004fee:	4628      	mov	r0, r5
 8004ff0:	47b8      	blx	r7
 8004ff2:	3001      	adds	r0, #1
 8004ff4:	f43f af19 	beq.w	8004e2a <_printf_float+0xc2>
 8004ff8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	d102      	bne.n	8005006 <_printf_float+0x29e>
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	07d9      	lsls	r1, r3, #31
 8005004:	d5d8      	bpl.n	8004fb8 <_printf_float+0x250>
 8005006:	ee18 3a10 	vmov	r3, s16
 800500a:	4652      	mov	r2, sl
 800500c:	4631      	mov	r1, r6
 800500e:	4628      	mov	r0, r5
 8005010:	47b8      	blx	r7
 8005012:	3001      	adds	r0, #1
 8005014:	f43f af09 	beq.w	8004e2a <_printf_float+0xc2>
 8005018:	f04f 0900 	mov.w	r9, #0
 800501c:	f104 0a1a 	add.w	sl, r4, #26
 8005020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005022:	425b      	negs	r3, r3
 8005024:	454b      	cmp	r3, r9
 8005026:	dc01      	bgt.n	800502c <_printf_float+0x2c4>
 8005028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800502a:	e792      	b.n	8004f52 <_printf_float+0x1ea>
 800502c:	2301      	movs	r3, #1
 800502e:	4652      	mov	r2, sl
 8005030:	4631      	mov	r1, r6
 8005032:	4628      	mov	r0, r5
 8005034:	47b8      	blx	r7
 8005036:	3001      	adds	r0, #1
 8005038:	f43f aef7 	beq.w	8004e2a <_printf_float+0xc2>
 800503c:	f109 0901 	add.w	r9, r9, #1
 8005040:	e7ee      	b.n	8005020 <_printf_float+0x2b8>
 8005042:	bf00      	nop
 8005044:	7fefffff 	.word	0x7fefffff
 8005048:	080079e4 	.word	0x080079e4
 800504c:	080079e8 	.word	0x080079e8
 8005050:	080079f0 	.word	0x080079f0
 8005054:	080079ec 	.word	0x080079ec
 8005058:	080079f4 	.word	0x080079f4
 800505c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800505e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005060:	429a      	cmp	r2, r3
 8005062:	bfa8      	it	ge
 8005064:	461a      	movge	r2, r3
 8005066:	2a00      	cmp	r2, #0
 8005068:	4691      	mov	r9, r2
 800506a:	dc37      	bgt.n	80050dc <_printf_float+0x374>
 800506c:	f04f 0b00 	mov.w	fp, #0
 8005070:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005074:	f104 021a 	add.w	r2, r4, #26
 8005078:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800507a:	9305      	str	r3, [sp, #20]
 800507c:	eba3 0309 	sub.w	r3, r3, r9
 8005080:	455b      	cmp	r3, fp
 8005082:	dc33      	bgt.n	80050ec <_printf_float+0x384>
 8005084:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005088:	429a      	cmp	r2, r3
 800508a:	db3b      	blt.n	8005104 <_printf_float+0x39c>
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	07da      	lsls	r2, r3, #31
 8005090:	d438      	bmi.n	8005104 <_printf_float+0x39c>
 8005092:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005094:	9b05      	ldr	r3, [sp, #20]
 8005096:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	eba2 0901 	sub.w	r9, r2, r1
 800509e:	4599      	cmp	r9, r3
 80050a0:	bfa8      	it	ge
 80050a2:	4699      	movge	r9, r3
 80050a4:	f1b9 0f00 	cmp.w	r9, #0
 80050a8:	dc35      	bgt.n	8005116 <_printf_float+0x3ae>
 80050aa:	f04f 0800 	mov.w	r8, #0
 80050ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050b2:	f104 0a1a 	add.w	sl, r4, #26
 80050b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050ba:	1a9b      	subs	r3, r3, r2
 80050bc:	eba3 0309 	sub.w	r3, r3, r9
 80050c0:	4543      	cmp	r3, r8
 80050c2:	f77f af79 	ble.w	8004fb8 <_printf_float+0x250>
 80050c6:	2301      	movs	r3, #1
 80050c8:	4652      	mov	r2, sl
 80050ca:	4631      	mov	r1, r6
 80050cc:	4628      	mov	r0, r5
 80050ce:	47b8      	blx	r7
 80050d0:	3001      	adds	r0, #1
 80050d2:	f43f aeaa 	beq.w	8004e2a <_printf_float+0xc2>
 80050d6:	f108 0801 	add.w	r8, r8, #1
 80050da:	e7ec      	b.n	80050b6 <_printf_float+0x34e>
 80050dc:	4613      	mov	r3, r2
 80050de:	4631      	mov	r1, r6
 80050e0:	4642      	mov	r2, r8
 80050e2:	4628      	mov	r0, r5
 80050e4:	47b8      	blx	r7
 80050e6:	3001      	adds	r0, #1
 80050e8:	d1c0      	bne.n	800506c <_printf_float+0x304>
 80050ea:	e69e      	b.n	8004e2a <_printf_float+0xc2>
 80050ec:	2301      	movs	r3, #1
 80050ee:	4631      	mov	r1, r6
 80050f0:	4628      	mov	r0, r5
 80050f2:	9205      	str	r2, [sp, #20]
 80050f4:	47b8      	blx	r7
 80050f6:	3001      	adds	r0, #1
 80050f8:	f43f ae97 	beq.w	8004e2a <_printf_float+0xc2>
 80050fc:	9a05      	ldr	r2, [sp, #20]
 80050fe:	f10b 0b01 	add.w	fp, fp, #1
 8005102:	e7b9      	b.n	8005078 <_printf_float+0x310>
 8005104:	ee18 3a10 	vmov	r3, s16
 8005108:	4652      	mov	r2, sl
 800510a:	4631      	mov	r1, r6
 800510c:	4628      	mov	r0, r5
 800510e:	47b8      	blx	r7
 8005110:	3001      	adds	r0, #1
 8005112:	d1be      	bne.n	8005092 <_printf_float+0x32a>
 8005114:	e689      	b.n	8004e2a <_printf_float+0xc2>
 8005116:	9a05      	ldr	r2, [sp, #20]
 8005118:	464b      	mov	r3, r9
 800511a:	4442      	add	r2, r8
 800511c:	4631      	mov	r1, r6
 800511e:	4628      	mov	r0, r5
 8005120:	47b8      	blx	r7
 8005122:	3001      	adds	r0, #1
 8005124:	d1c1      	bne.n	80050aa <_printf_float+0x342>
 8005126:	e680      	b.n	8004e2a <_printf_float+0xc2>
 8005128:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800512a:	2a01      	cmp	r2, #1
 800512c:	dc01      	bgt.n	8005132 <_printf_float+0x3ca>
 800512e:	07db      	lsls	r3, r3, #31
 8005130:	d538      	bpl.n	80051a4 <_printf_float+0x43c>
 8005132:	2301      	movs	r3, #1
 8005134:	4642      	mov	r2, r8
 8005136:	4631      	mov	r1, r6
 8005138:	4628      	mov	r0, r5
 800513a:	47b8      	blx	r7
 800513c:	3001      	adds	r0, #1
 800513e:	f43f ae74 	beq.w	8004e2a <_printf_float+0xc2>
 8005142:	ee18 3a10 	vmov	r3, s16
 8005146:	4652      	mov	r2, sl
 8005148:	4631      	mov	r1, r6
 800514a:	4628      	mov	r0, r5
 800514c:	47b8      	blx	r7
 800514e:	3001      	adds	r0, #1
 8005150:	f43f ae6b 	beq.w	8004e2a <_printf_float+0xc2>
 8005154:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005158:	2200      	movs	r2, #0
 800515a:	2300      	movs	r3, #0
 800515c:	f7fb fcbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8005160:	b9d8      	cbnz	r0, 800519a <_printf_float+0x432>
 8005162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005164:	f108 0201 	add.w	r2, r8, #1
 8005168:	3b01      	subs	r3, #1
 800516a:	4631      	mov	r1, r6
 800516c:	4628      	mov	r0, r5
 800516e:	47b8      	blx	r7
 8005170:	3001      	adds	r0, #1
 8005172:	d10e      	bne.n	8005192 <_printf_float+0x42a>
 8005174:	e659      	b.n	8004e2a <_printf_float+0xc2>
 8005176:	2301      	movs	r3, #1
 8005178:	4652      	mov	r2, sl
 800517a:	4631      	mov	r1, r6
 800517c:	4628      	mov	r0, r5
 800517e:	47b8      	blx	r7
 8005180:	3001      	adds	r0, #1
 8005182:	f43f ae52 	beq.w	8004e2a <_printf_float+0xc2>
 8005186:	f108 0801 	add.w	r8, r8, #1
 800518a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800518c:	3b01      	subs	r3, #1
 800518e:	4543      	cmp	r3, r8
 8005190:	dcf1      	bgt.n	8005176 <_printf_float+0x40e>
 8005192:	464b      	mov	r3, r9
 8005194:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005198:	e6dc      	b.n	8004f54 <_printf_float+0x1ec>
 800519a:	f04f 0800 	mov.w	r8, #0
 800519e:	f104 0a1a 	add.w	sl, r4, #26
 80051a2:	e7f2      	b.n	800518a <_printf_float+0x422>
 80051a4:	2301      	movs	r3, #1
 80051a6:	4642      	mov	r2, r8
 80051a8:	e7df      	b.n	800516a <_printf_float+0x402>
 80051aa:	2301      	movs	r3, #1
 80051ac:	464a      	mov	r2, r9
 80051ae:	4631      	mov	r1, r6
 80051b0:	4628      	mov	r0, r5
 80051b2:	47b8      	blx	r7
 80051b4:	3001      	adds	r0, #1
 80051b6:	f43f ae38 	beq.w	8004e2a <_printf_float+0xc2>
 80051ba:	f108 0801 	add.w	r8, r8, #1
 80051be:	68e3      	ldr	r3, [r4, #12]
 80051c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051c2:	1a5b      	subs	r3, r3, r1
 80051c4:	4543      	cmp	r3, r8
 80051c6:	dcf0      	bgt.n	80051aa <_printf_float+0x442>
 80051c8:	e6fa      	b.n	8004fc0 <_printf_float+0x258>
 80051ca:	f04f 0800 	mov.w	r8, #0
 80051ce:	f104 0919 	add.w	r9, r4, #25
 80051d2:	e7f4      	b.n	80051be <_printf_float+0x456>

080051d4 <_printf_common>:
 80051d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051d8:	4616      	mov	r6, r2
 80051da:	4699      	mov	r9, r3
 80051dc:	688a      	ldr	r2, [r1, #8]
 80051de:	690b      	ldr	r3, [r1, #16]
 80051e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051e4:	4293      	cmp	r3, r2
 80051e6:	bfb8      	it	lt
 80051e8:	4613      	movlt	r3, r2
 80051ea:	6033      	str	r3, [r6, #0]
 80051ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051f0:	4607      	mov	r7, r0
 80051f2:	460c      	mov	r4, r1
 80051f4:	b10a      	cbz	r2, 80051fa <_printf_common+0x26>
 80051f6:	3301      	adds	r3, #1
 80051f8:	6033      	str	r3, [r6, #0]
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	0699      	lsls	r1, r3, #26
 80051fe:	bf42      	ittt	mi
 8005200:	6833      	ldrmi	r3, [r6, #0]
 8005202:	3302      	addmi	r3, #2
 8005204:	6033      	strmi	r3, [r6, #0]
 8005206:	6825      	ldr	r5, [r4, #0]
 8005208:	f015 0506 	ands.w	r5, r5, #6
 800520c:	d106      	bne.n	800521c <_printf_common+0x48>
 800520e:	f104 0a19 	add.w	sl, r4, #25
 8005212:	68e3      	ldr	r3, [r4, #12]
 8005214:	6832      	ldr	r2, [r6, #0]
 8005216:	1a9b      	subs	r3, r3, r2
 8005218:	42ab      	cmp	r3, r5
 800521a:	dc26      	bgt.n	800526a <_printf_common+0x96>
 800521c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005220:	1e13      	subs	r3, r2, #0
 8005222:	6822      	ldr	r2, [r4, #0]
 8005224:	bf18      	it	ne
 8005226:	2301      	movne	r3, #1
 8005228:	0692      	lsls	r2, r2, #26
 800522a:	d42b      	bmi.n	8005284 <_printf_common+0xb0>
 800522c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005230:	4649      	mov	r1, r9
 8005232:	4638      	mov	r0, r7
 8005234:	47c0      	blx	r8
 8005236:	3001      	adds	r0, #1
 8005238:	d01e      	beq.n	8005278 <_printf_common+0xa4>
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	68e5      	ldr	r5, [r4, #12]
 800523e:	6832      	ldr	r2, [r6, #0]
 8005240:	f003 0306 	and.w	r3, r3, #6
 8005244:	2b04      	cmp	r3, #4
 8005246:	bf08      	it	eq
 8005248:	1aad      	subeq	r5, r5, r2
 800524a:	68a3      	ldr	r3, [r4, #8]
 800524c:	6922      	ldr	r2, [r4, #16]
 800524e:	bf0c      	ite	eq
 8005250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005254:	2500      	movne	r5, #0
 8005256:	4293      	cmp	r3, r2
 8005258:	bfc4      	itt	gt
 800525a:	1a9b      	subgt	r3, r3, r2
 800525c:	18ed      	addgt	r5, r5, r3
 800525e:	2600      	movs	r6, #0
 8005260:	341a      	adds	r4, #26
 8005262:	42b5      	cmp	r5, r6
 8005264:	d11a      	bne.n	800529c <_printf_common+0xc8>
 8005266:	2000      	movs	r0, #0
 8005268:	e008      	b.n	800527c <_printf_common+0xa8>
 800526a:	2301      	movs	r3, #1
 800526c:	4652      	mov	r2, sl
 800526e:	4649      	mov	r1, r9
 8005270:	4638      	mov	r0, r7
 8005272:	47c0      	blx	r8
 8005274:	3001      	adds	r0, #1
 8005276:	d103      	bne.n	8005280 <_printf_common+0xac>
 8005278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800527c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005280:	3501      	adds	r5, #1
 8005282:	e7c6      	b.n	8005212 <_printf_common+0x3e>
 8005284:	18e1      	adds	r1, r4, r3
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	2030      	movs	r0, #48	; 0x30
 800528a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800528e:	4422      	add	r2, r4
 8005290:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005294:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005298:	3302      	adds	r3, #2
 800529a:	e7c7      	b.n	800522c <_printf_common+0x58>
 800529c:	2301      	movs	r3, #1
 800529e:	4622      	mov	r2, r4
 80052a0:	4649      	mov	r1, r9
 80052a2:	4638      	mov	r0, r7
 80052a4:	47c0      	blx	r8
 80052a6:	3001      	adds	r0, #1
 80052a8:	d0e6      	beq.n	8005278 <_printf_common+0xa4>
 80052aa:	3601      	adds	r6, #1
 80052ac:	e7d9      	b.n	8005262 <_printf_common+0x8e>
	...

080052b0 <_printf_i>:
 80052b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052b4:	460c      	mov	r4, r1
 80052b6:	4691      	mov	r9, r2
 80052b8:	7e27      	ldrb	r7, [r4, #24]
 80052ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80052bc:	2f78      	cmp	r7, #120	; 0x78
 80052be:	4680      	mov	r8, r0
 80052c0:	469a      	mov	sl, r3
 80052c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052c6:	d807      	bhi.n	80052d8 <_printf_i+0x28>
 80052c8:	2f62      	cmp	r7, #98	; 0x62
 80052ca:	d80a      	bhi.n	80052e2 <_printf_i+0x32>
 80052cc:	2f00      	cmp	r7, #0
 80052ce:	f000 80d8 	beq.w	8005482 <_printf_i+0x1d2>
 80052d2:	2f58      	cmp	r7, #88	; 0x58
 80052d4:	f000 80a3 	beq.w	800541e <_printf_i+0x16e>
 80052d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052e0:	e03a      	b.n	8005358 <_printf_i+0xa8>
 80052e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052e6:	2b15      	cmp	r3, #21
 80052e8:	d8f6      	bhi.n	80052d8 <_printf_i+0x28>
 80052ea:	a001      	add	r0, pc, #4	; (adr r0, 80052f0 <_printf_i+0x40>)
 80052ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80052f0:	08005349 	.word	0x08005349
 80052f4:	0800535d 	.word	0x0800535d
 80052f8:	080052d9 	.word	0x080052d9
 80052fc:	080052d9 	.word	0x080052d9
 8005300:	080052d9 	.word	0x080052d9
 8005304:	080052d9 	.word	0x080052d9
 8005308:	0800535d 	.word	0x0800535d
 800530c:	080052d9 	.word	0x080052d9
 8005310:	080052d9 	.word	0x080052d9
 8005314:	080052d9 	.word	0x080052d9
 8005318:	080052d9 	.word	0x080052d9
 800531c:	08005469 	.word	0x08005469
 8005320:	0800538d 	.word	0x0800538d
 8005324:	0800544b 	.word	0x0800544b
 8005328:	080052d9 	.word	0x080052d9
 800532c:	080052d9 	.word	0x080052d9
 8005330:	0800548b 	.word	0x0800548b
 8005334:	080052d9 	.word	0x080052d9
 8005338:	0800538d 	.word	0x0800538d
 800533c:	080052d9 	.word	0x080052d9
 8005340:	080052d9 	.word	0x080052d9
 8005344:	08005453 	.word	0x08005453
 8005348:	680b      	ldr	r3, [r1, #0]
 800534a:	1d1a      	adds	r2, r3, #4
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	600a      	str	r2, [r1, #0]
 8005350:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005354:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005358:	2301      	movs	r3, #1
 800535a:	e0a3      	b.n	80054a4 <_printf_i+0x1f4>
 800535c:	6825      	ldr	r5, [r4, #0]
 800535e:	6808      	ldr	r0, [r1, #0]
 8005360:	062e      	lsls	r6, r5, #24
 8005362:	f100 0304 	add.w	r3, r0, #4
 8005366:	d50a      	bpl.n	800537e <_printf_i+0xce>
 8005368:	6805      	ldr	r5, [r0, #0]
 800536a:	600b      	str	r3, [r1, #0]
 800536c:	2d00      	cmp	r5, #0
 800536e:	da03      	bge.n	8005378 <_printf_i+0xc8>
 8005370:	232d      	movs	r3, #45	; 0x2d
 8005372:	426d      	negs	r5, r5
 8005374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005378:	485e      	ldr	r0, [pc, #376]	; (80054f4 <_printf_i+0x244>)
 800537a:	230a      	movs	r3, #10
 800537c:	e019      	b.n	80053b2 <_printf_i+0x102>
 800537e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005382:	6805      	ldr	r5, [r0, #0]
 8005384:	600b      	str	r3, [r1, #0]
 8005386:	bf18      	it	ne
 8005388:	b22d      	sxthne	r5, r5
 800538a:	e7ef      	b.n	800536c <_printf_i+0xbc>
 800538c:	680b      	ldr	r3, [r1, #0]
 800538e:	6825      	ldr	r5, [r4, #0]
 8005390:	1d18      	adds	r0, r3, #4
 8005392:	6008      	str	r0, [r1, #0]
 8005394:	0628      	lsls	r0, r5, #24
 8005396:	d501      	bpl.n	800539c <_printf_i+0xec>
 8005398:	681d      	ldr	r5, [r3, #0]
 800539a:	e002      	b.n	80053a2 <_printf_i+0xf2>
 800539c:	0669      	lsls	r1, r5, #25
 800539e:	d5fb      	bpl.n	8005398 <_printf_i+0xe8>
 80053a0:	881d      	ldrh	r5, [r3, #0]
 80053a2:	4854      	ldr	r0, [pc, #336]	; (80054f4 <_printf_i+0x244>)
 80053a4:	2f6f      	cmp	r7, #111	; 0x6f
 80053a6:	bf0c      	ite	eq
 80053a8:	2308      	moveq	r3, #8
 80053aa:	230a      	movne	r3, #10
 80053ac:	2100      	movs	r1, #0
 80053ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053b2:	6866      	ldr	r6, [r4, #4]
 80053b4:	60a6      	str	r6, [r4, #8]
 80053b6:	2e00      	cmp	r6, #0
 80053b8:	bfa2      	ittt	ge
 80053ba:	6821      	ldrge	r1, [r4, #0]
 80053bc:	f021 0104 	bicge.w	r1, r1, #4
 80053c0:	6021      	strge	r1, [r4, #0]
 80053c2:	b90d      	cbnz	r5, 80053c8 <_printf_i+0x118>
 80053c4:	2e00      	cmp	r6, #0
 80053c6:	d04d      	beq.n	8005464 <_printf_i+0x1b4>
 80053c8:	4616      	mov	r6, r2
 80053ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80053ce:	fb03 5711 	mls	r7, r3, r1, r5
 80053d2:	5dc7      	ldrb	r7, [r0, r7]
 80053d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053d8:	462f      	mov	r7, r5
 80053da:	42bb      	cmp	r3, r7
 80053dc:	460d      	mov	r5, r1
 80053de:	d9f4      	bls.n	80053ca <_printf_i+0x11a>
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d10b      	bne.n	80053fc <_printf_i+0x14c>
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	07df      	lsls	r7, r3, #31
 80053e8:	d508      	bpl.n	80053fc <_printf_i+0x14c>
 80053ea:	6923      	ldr	r3, [r4, #16]
 80053ec:	6861      	ldr	r1, [r4, #4]
 80053ee:	4299      	cmp	r1, r3
 80053f0:	bfde      	ittt	le
 80053f2:	2330      	movle	r3, #48	; 0x30
 80053f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053f8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80053fc:	1b92      	subs	r2, r2, r6
 80053fe:	6122      	str	r2, [r4, #16]
 8005400:	f8cd a000 	str.w	sl, [sp]
 8005404:	464b      	mov	r3, r9
 8005406:	aa03      	add	r2, sp, #12
 8005408:	4621      	mov	r1, r4
 800540a:	4640      	mov	r0, r8
 800540c:	f7ff fee2 	bl	80051d4 <_printf_common>
 8005410:	3001      	adds	r0, #1
 8005412:	d14c      	bne.n	80054ae <_printf_i+0x1fe>
 8005414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005418:	b004      	add	sp, #16
 800541a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800541e:	4835      	ldr	r0, [pc, #212]	; (80054f4 <_printf_i+0x244>)
 8005420:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	680e      	ldr	r6, [r1, #0]
 8005428:	061f      	lsls	r7, r3, #24
 800542a:	f856 5b04 	ldr.w	r5, [r6], #4
 800542e:	600e      	str	r6, [r1, #0]
 8005430:	d514      	bpl.n	800545c <_printf_i+0x1ac>
 8005432:	07d9      	lsls	r1, r3, #31
 8005434:	bf44      	itt	mi
 8005436:	f043 0320 	orrmi.w	r3, r3, #32
 800543a:	6023      	strmi	r3, [r4, #0]
 800543c:	b91d      	cbnz	r5, 8005446 <_printf_i+0x196>
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	f023 0320 	bic.w	r3, r3, #32
 8005444:	6023      	str	r3, [r4, #0]
 8005446:	2310      	movs	r3, #16
 8005448:	e7b0      	b.n	80053ac <_printf_i+0xfc>
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	f043 0320 	orr.w	r3, r3, #32
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	2378      	movs	r3, #120	; 0x78
 8005454:	4828      	ldr	r0, [pc, #160]	; (80054f8 <_printf_i+0x248>)
 8005456:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800545a:	e7e3      	b.n	8005424 <_printf_i+0x174>
 800545c:	065e      	lsls	r6, r3, #25
 800545e:	bf48      	it	mi
 8005460:	b2ad      	uxthmi	r5, r5
 8005462:	e7e6      	b.n	8005432 <_printf_i+0x182>
 8005464:	4616      	mov	r6, r2
 8005466:	e7bb      	b.n	80053e0 <_printf_i+0x130>
 8005468:	680b      	ldr	r3, [r1, #0]
 800546a:	6826      	ldr	r6, [r4, #0]
 800546c:	6960      	ldr	r0, [r4, #20]
 800546e:	1d1d      	adds	r5, r3, #4
 8005470:	600d      	str	r5, [r1, #0]
 8005472:	0635      	lsls	r5, r6, #24
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	d501      	bpl.n	800547c <_printf_i+0x1cc>
 8005478:	6018      	str	r0, [r3, #0]
 800547a:	e002      	b.n	8005482 <_printf_i+0x1d2>
 800547c:	0671      	lsls	r1, r6, #25
 800547e:	d5fb      	bpl.n	8005478 <_printf_i+0x1c8>
 8005480:	8018      	strh	r0, [r3, #0]
 8005482:	2300      	movs	r3, #0
 8005484:	6123      	str	r3, [r4, #16]
 8005486:	4616      	mov	r6, r2
 8005488:	e7ba      	b.n	8005400 <_printf_i+0x150>
 800548a:	680b      	ldr	r3, [r1, #0]
 800548c:	1d1a      	adds	r2, r3, #4
 800548e:	600a      	str	r2, [r1, #0]
 8005490:	681e      	ldr	r6, [r3, #0]
 8005492:	6862      	ldr	r2, [r4, #4]
 8005494:	2100      	movs	r1, #0
 8005496:	4630      	mov	r0, r6
 8005498:	f7fa feaa 	bl	80001f0 <memchr>
 800549c:	b108      	cbz	r0, 80054a2 <_printf_i+0x1f2>
 800549e:	1b80      	subs	r0, r0, r6
 80054a0:	6060      	str	r0, [r4, #4]
 80054a2:	6863      	ldr	r3, [r4, #4]
 80054a4:	6123      	str	r3, [r4, #16]
 80054a6:	2300      	movs	r3, #0
 80054a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ac:	e7a8      	b.n	8005400 <_printf_i+0x150>
 80054ae:	6923      	ldr	r3, [r4, #16]
 80054b0:	4632      	mov	r2, r6
 80054b2:	4649      	mov	r1, r9
 80054b4:	4640      	mov	r0, r8
 80054b6:	47d0      	blx	sl
 80054b8:	3001      	adds	r0, #1
 80054ba:	d0ab      	beq.n	8005414 <_printf_i+0x164>
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	079b      	lsls	r3, r3, #30
 80054c0:	d413      	bmi.n	80054ea <_printf_i+0x23a>
 80054c2:	68e0      	ldr	r0, [r4, #12]
 80054c4:	9b03      	ldr	r3, [sp, #12]
 80054c6:	4298      	cmp	r0, r3
 80054c8:	bfb8      	it	lt
 80054ca:	4618      	movlt	r0, r3
 80054cc:	e7a4      	b.n	8005418 <_printf_i+0x168>
 80054ce:	2301      	movs	r3, #1
 80054d0:	4632      	mov	r2, r6
 80054d2:	4649      	mov	r1, r9
 80054d4:	4640      	mov	r0, r8
 80054d6:	47d0      	blx	sl
 80054d8:	3001      	adds	r0, #1
 80054da:	d09b      	beq.n	8005414 <_printf_i+0x164>
 80054dc:	3501      	adds	r5, #1
 80054de:	68e3      	ldr	r3, [r4, #12]
 80054e0:	9903      	ldr	r1, [sp, #12]
 80054e2:	1a5b      	subs	r3, r3, r1
 80054e4:	42ab      	cmp	r3, r5
 80054e6:	dcf2      	bgt.n	80054ce <_printf_i+0x21e>
 80054e8:	e7eb      	b.n	80054c2 <_printf_i+0x212>
 80054ea:	2500      	movs	r5, #0
 80054ec:	f104 0619 	add.w	r6, r4, #25
 80054f0:	e7f5      	b.n	80054de <_printf_i+0x22e>
 80054f2:	bf00      	nop
 80054f4:	080079f6 	.word	0x080079f6
 80054f8:	08007a07 	.word	0x08007a07

080054fc <sniprintf>:
 80054fc:	b40c      	push	{r2, r3}
 80054fe:	b530      	push	{r4, r5, lr}
 8005500:	4b17      	ldr	r3, [pc, #92]	; (8005560 <sniprintf+0x64>)
 8005502:	1e0c      	subs	r4, r1, #0
 8005504:	681d      	ldr	r5, [r3, #0]
 8005506:	b09d      	sub	sp, #116	; 0x74
 8005508:	da08      	bge.n	800551c <sniprintf+0x20>
 800550a:	238b      	movs	r3, #139	; 0x8b
 800550c:	602b      	str	r3, [r5, #0]
 800550e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005512:	b01d      	add	sp, #116	; 0x74
 8005514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005518:	b002      	add	sp, #8
 800551a:	4770      	bx	lr
 800551c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005520:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005524:	bf14      	ite	ne
 8005526:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800552a:	4623      	moveq	r3, r4
 800552c:	9304      	str	r3, [sp, #16]
 800552e:	9307      	str	r3, [sp, #28]
 8005530:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005534:	9002      	str	r0, [sp, #8]
 8005536:	9006      	str	r0, [sp, #24]
 8005538:	f8ad 3016 	strh.w	r3, [sp, #22]
 800553c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800553e:	ab21      	add	r3, sp, #132	; 0x84
 8005540:	a902      	add	r1, sp, #8
 8005542:	4628      	mov	r0, r5
 8005544:	9301      	str	r3, [sp, #4]
 8005546:	f001 fb35 	bl	8006bb4 <_svfiprintf_r>
 800554a:	1c43      	adds	r3, r0, #1
 800554c:	bfbc      	itt	lt
 800554e:	238b      	movlt	r3, #139	; 0x8b
 8005550:	602b      	strlt	r3, [r5, #0]
 8005552:	2c00      	cmp	r4, #0
 8005554:	d0dd      	beq.n	8005512 <sniprintf+0x16>
 8005556:	9b02      	ldr	r3, [sp, #8]
 8005558:	2200      	movs	r2, #0
 800555a:	701a      	strb	r2, [r3, #0]
 800555c:	e7d9      	b.n	8005512 <sniprintf+0x16>
 800555e:	bf00      	nop
 8005560:	20000034 	.word	0x20000034

08005564 <quorem>:
 8005564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005568:	6903      	ldr	r3, [r0, #16]
 800556a:	690c      	ldr	r4, [r1, #16]
 800556c:	42a3      	cmp	r3, r4
 800556e:	4607      	mov	r7, r0
 8005570:	f2c0 8081 	blt.w	8005676 <quorem+0x112>
 8005574:	3c01      	subs	r4, #1
 8005576:	f101 0814 	add.w	r8, r1, #20
 800557a:	f100 0514 	add.w	r5, r0, #20
 800557e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005582:	9301      	str	r3, [sp, #4]
 8005584:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005588:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800558c:	3301      	adds	r3, #1
 800558e:	429a      	cmp	r2, r3
 8005590:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005594:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005598:	fbb2 f6f3 	udiv	r6, r2, r3
 800559c:	d331      	bcc.n	8005602 <quorem+0x9e>
 800559e:	f04f 0e00 	mov.w	lr, #0
 80055a2:	4640      	mov	r0, r8
 80055a4:	46ac      	mov	ip, r5
 80055a6:	46f2      	mov	sl, lr
 80055a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80055ac:	b293      	uxth	r3, r2
 80055ae:	fb06 e303 	mla	r3, r6, r3, lr
 80055b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	ebaa 0303 	sub.w	r3, sl, r3
 80055bc:	0c12      	lsrs	r2, r2, #16
 80055be:	f8dc a000 	ldr.w	sl, [ip]
 80055c2:	fb06 e202 	mla	r2, r6, r2, lr
 80055c6:	fa13 f38a 	uxtah	r3, r3, sl
 80055ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055ce:	fa1f fa82 	uxth.w	sl, r2
 80055d2:	f8dc 2000 	ldr.w	r2, [ip]
 80055d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80055da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055de:	b29b      	uxth	r3, r3
 80055e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055e4:	4581      	cmp	r9, r0
 80055e6:	f84c 3b04 	str.w	r3, [ip], #4
 80055ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80055ee:	d2db      	bcs.n	80055a8 <quorem+0x44>
 80055f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80055f4:	b92b      	cbnz	r3, 8005602 <quorem+0x9e>
 80055f6:	9b01      	ldr	r3, [sp, #4]
 80055f8:	3b04      	subs	r3, #4
 80055fa:	429d      	cmp	r5, r3
 80055fc:	461a      	mov	r2, r3
 80055fe:	d32e      	bcc.n	800565e <quorem+0xfa>
 8005600:	613c      	str	r4, [r7, #16]
 8005602:	4638      	mov	r0, r7
 8005604:	f001 f8c0 	bl	8006788 <__mcmp>
 8005608:	2800      	cmp	r0, #0
 800560a:	db24      	blt.n	8005656 <quorem+0xf2>
 800560c:	3601      	adds	r6, #1
 800560e:	4628      	mov	r0, r5
 8005610:	f04f 0c00 	mov.w	ip, #0
 8005614:	f858 2b04 	ldr.w	r2, [r8], #4
 8005618:	f8d0 e000 	ldr.w	lr, [r0]
 800561c:	b293      	uxth	r3, r2
 800561e:	ebac 0303 	sub.w	r3, ip, r3
 8005622:	0c12      	lsrs	r2, r2, #16
 8005624:	fa13 f38e 	uxtah	r3, r3, lr
 8005628:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800562c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005630:	b29b      	uxth	r3, r3
 8005632:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005636:	45c1      	cmp	r9, r8
 8005638:	f840 3b04 	str.w	r3, [r0], #4
 800563c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005640:	d2e8      	bcs.n	8005614 <quorem+0xb0>
 8005642:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005646:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800564a:	b922      	cbnz	r2, 8005656 <quorem+0xf2>
 800564c:	3b04      	subs	r3, #4
 800564e:	429d      	cmp	r5, r3
 8005650:	461a      	mov	r2, r3
 8005652:	d30a      	bcc.n	800566a <quorem+0x106>
 8005654:	613c      	str	r4, [r7, #16]
 8005656:	4630      	mov	r0, r6
 8005658:	b003      	add	sp, #12
 800565a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800565e:	6812      	ldr	r2, [r2, #0]
 8005660:	3b04      	subs	r3, #4
 8005662:	2a00      	cmp	r2, #0
 8005664:	d1cc      	bne.n	8005600 <quorem+0x9c>
 8005666:	3c01      	subs	r4, #1
 8005668:	e7c7      	b.n	80055fa <quorem+0x96>
 800566a:	6812      	ldr	r2, [r2, #0]
 800566c:	3b04      	subs	r3, #4
 800566e:	2a00      	cmp	r2, #0
 8005670:	d1f0      	bne.n	8005654 <quorem+0xf0>
 8005672:	3c01      	subs	r4, #1
 8005674:	e7eb      	b.n	800564e <quorem+0xea>
 8005676:	2000      	movs	r0, #0
 8005678:	e7ee      	b.n	8005658 <quorem+0xf4>
 800567a:	0000      	movs	r0, r0
 800567c:	0000      	movs	r0, r0
	...

08005680 <_dtoa_r>:
 8005680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005684:	ed2d 8b02 	vpush	{d8}
 8005688:	ec57 6b10 	vmov	r6, r7, d0
 800568c:	b095      	sub	sp, #84	; 0x54
 800568e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005690:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005694:	9105      	str	r1, [sp, #20]
 8005696:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800569a:	4604      	mov	r4, r0
 800569c:	9209      	str	r2, [sp, #36]	; 0x24
 800569e:	930f      	str	r3, [sp, #60]	; 0x3c
 80056a0:	b975      	cbnz	r5, 80056c0 <_dtoa_r+0x40>
 80056a2:	2010      	movs	r0, #16
 80056a4:	f000 fddc 	bl	8006260 <malloc>
 80056a8:	4602      	mov	r2, r0
 80056aa:	6260      	str	r0, [r4, #36]	; 0x24
 80056ac:	b920      	cbnz	r0, 80056b8 <_dtoa_r+0x38>
 80056ae:	4bb2      	ldr	r3, [pc, #712]	; (8005978 <_dtoa_r+0x2f8>)
 80056b0:	21ea      	movs	r1, #234	; 0xea
 80056b2:	48b2      	ldr	r0, [pc, #712]	; (800597c <_dtoa_r+0x2fc>)
 80056b4:	f001 fb8e 	bl	8006dd4 <__assert_func>
 80056b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80056bc:	6005      	str	r5, [r0, #0]
 80056be:	60c5      	str	r5, [r0, #12]
 80056c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056c2:	6819      	ldr	r1, [r3, #0]
 80056c4:	b151      	cbz	r1, 80056dc <_dtoa_r+0x5c>
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	604a      	str	r2, [r1, #4]
 80056ca:	2301      	movs	r3, #1
 80056cc:	4093      	lsls	r3, r2
 80056ce:	608b      	str	r3, [r1, #8]
 80056d0:	4620      	mov	r0, r4
 80056d2:	f000 fe1b 	bl	800630c <_Bfree>
 80056d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	1e3b      	subs	r3, r7, #0
 80056de:	bfb9      	ittee	lt
 80056e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80056e4:	9303      	strlt	r3, [sp, #12]
 80056e6:	2300      	movge	r3, #0
 80056e8:	f8c8 3000 	strge.w	r3, [r8]
 80056ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80056f0:	4ba3      	ldr	r3, [pc, #652]	; (8005980 <_dtoa_r+0x300>)
 80056f2:	bfbc      	itt	lt
 80056f4:	2201      	movlt	r2, #1
 80056f6:	f8c8 2000 	strlt.w	r2, [r8]
 80056fa:	ea33 0309 	bics.w	r3, r3, r9
 80056fe:	d11b      	bne.n	8005738 <_dtoa_r+0xb8>
 8005700:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005702:	f242 730f 	movw	r3, #9999	; 0x270f
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800570c:	4333      	orrs	r3, r6
 800570e:	f000 857a 	beq.w	8006206 <_dtoa_r+0xb86>
 8005712:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005714:	b963      	cbnz	r3, 8005730 <_dtoa_r+0xb0>
 8005716:	4b9b      	ldr	r3, [pc, #620]	; (8005984 <_dtoa_r+0x304>)
 8005718:	e024      	b.n	8005764 <_dtoa_r+0xe4>
 800571a:	4b9b      	ldr	r3, [pc, #620]	; (8005988 <_dtoa_r+0x308>)
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	3308      	adds	r3, #8
 8005720:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005722:	6013      	str	r3, [r2, #0]
 8005724:	9800      	ldr	r0, [sp, #0]
 8005726:	b015      	add	sp, #84	; 0x54
 8005728:	ecbd 8b02 	vpop	{d8}
 800572c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005730:	4b94      	ldr	r3, [pc, #592]	; (8005984 <_dtoa_r+0x304>)
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	3303      	adds	r3, #3
 8005736:	e7f3      	b.n	8005720 <_dtoa_r+0xa0>
 8005738:	ed9d 7b02 	vldr	d7, [sp, #8]
 800573c:	2200      	movs	r2, #0
 800573e:	ec51 0b17 	vmov	r0, r1, d7
 8005742:	2300      	movs	r3, #0
 8005744:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005748:	f7fb f9c6 	bl	8000ad8 <__aeabi_dcmpeq>
 800574c:	4680      	mov	r8, r0
 800574e:	b158      	cbz	r0, 8005768 <_dtoa_r+0xe8>
 8005750:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005752:	2301      	movs	r3, #1
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 8551 	beq.w	8006200 <_dtoa_r+0xb80>
 800575e:	488b      	ldr	r0, [pc, #556]	; (800598c <_dtoa_r+0x30c>)
 8005760:	6018      	str	r0, [r3, #0]
 8005762:	1e43      	subs	r3, r0, #1
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	e7dd      	b.n	8005724 <_dtoa_r+0xa4>
 8005768:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800576c:	aa12      	add	r2, sp, #72	; 0x48
 800576e:	a913      	add	r1, sp, #76	; 0x4c
 8005770:	4620      	mov	r0, r4
 8005772:	f001 f8ad 	bl	80068d0 <__d2b>
 8005776:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800577a:	4683      	mov	fp, r0
 800577c:	2d00      	cmp	r5, #0
 800577e:	d07c      	beq.n	800587a <_dtoa_r+0x1fa>
 8005780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005782:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005786:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800578a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800578e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005792:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005796:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800579a:	4b7d      	ldr	r3, [pc, #500]	; (8005990 <_dtoa_r+0x310>)
 800579c:	2200      	movs	r2, #0
 800579e:	4630      	mov	r0, r6
 80057a0:	4639      	mov	r1, r7
 80057a2:	f7fa fd79 	bl	8000298 <__aeabi_dsub>
 80057a6:	a36e      	add	r3, pc, #440	; (adr r3, 8005960 <_dtoa_r+0x2e0>)
 80057a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ac:	f7fa ff2c 	bl	8000608 <__aeabi_dmul>
 80057b0:	a36d      	add	r3, pc, #436	; (adr r3, 8005968 <_dtoa_r+0x2e8>)
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	f7fa fd71 	bl	800029c <__adddf3>
 80057ba:	4606      	mov	r6, r0
 80057bc:	4628      	mov	r0, r5
 80057be:	460f      	mov	r7, r1
 80057c0:	f7fa feb8 	bl	8000534 <__aeabi_i2d>
 80057c4:	a36a      	add	r3, pc, #424	; (adr r3, 8005970 <_dtoa_r+0x2f0>)
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	f7fa ff1d 	bl	8000608 <__aeabi_dmul>
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	4630      	mov	r0, r6
 80057d4:	4639      	mov	r1, r7
 80057d6:	f7fa fd61 	bl	800029c <__adddf3>
 80057da:	4606      	mov	r6, r0
 80057dc:	460f      	mov	r7, r1
 80057de:	f7fb f9c3 	bl	8000b68 <__aeabi_d2iz>
 80057e2:	2200      	movs	r2, #0
 80057e4:	4682      	mov	sl, r0
 80057e6:	2300      	movs	r3, #0
 80057e8:	4630      	mov	r0, r6
 80057ea:	4639      	mov	r1, r7
 80057ec:	f7fb f97e 	bl	8000aec <__aeabi_dcmplt>
 80057f0:	b148      	cbz	r0, 8005806 <_dtoa_r+0x186>
 80057f2:	4650      	mov	r0, sl
 80057f4:	f7fa fe9e 	bl	8000534 <__aeabi_i2d>
 80057f8:	4632      	mov	r2, r6
 80057fa:	463b      	mov	r3, r7
 80057fc:	f7fb f96c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005800:	b908      	cbnz	r0, 8005806 <_dtoa_r+0x186>
 8005802:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005806:	f1ba 0f16 	cmp.w	sl, #22
 800580a:	d854      	bhi.n	80058b6 <_dtoa_r+0x236>
 800580c:	4b61      	ldr	r3, [pc, #388]	; (8005994 <_dtoa_r+0x314>)
 800580e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005816:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800581a:	f7fb f967 	bl	8000aec <__aeabi_dcmplt>
 800581e:	2800      	cmp	r0, #0
 8005820:	d04b      	beq.n	80058ba <_dtoa_r+0x23a>
 8005822:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005826:	2300      	movs	r3, #0
 8005828:	930e      	str	r3, [sp, #56]	; 0x38
 800582a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800582c:	1b5d      	subs	r5, r3, r5
 800582e:	1e6b      	subs	r3, r5, #1
 8005830:	9304      	str	r3, [sp, #16]
 8005832:	bf43      	ittte	mi
 8005834:	2300      	movmi	r3, #0
 8005836:	f1c5 0801 	rsbmi	r8, r5, #1
 800583a:	9304      	strmi	r3, [sp, #16]
 800583c:	f04f 0800 	movpl.w	r8, #0
 8005840:	f1ba 0f00 	cmp.w	sl, #0
 8005844:	db3b      	blt.n	80058be <_dtoa_r+0x23e>
 8005846:	9b04      	ldr	r3, [sp, #16]
 8005848:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800584c:	4453      	add	r3, sl
 800584e:	9304      	str	r3, [sp, #16]
 8005850:	2300      	movs	r3, #0
 8005852:	9306      	str	r3, [sp, #24]
 8005854:	9b05      	ldr	r3, [sp, #20]
 8005856:	2b09      	cmp	r3, #9
 8005858:	d869      	bhi.n	800592e <_dtoa_r+0x2ae>
 800585a:	2b05      	cmp	r3, #5
 800585c:	bfc4      	itt	gt
 800585e:	3b04      	subgt	r3, #4
 8005860:	9305      	strgt	r3, [sp, #20]
 8005862:	9b05      	ldr	r3, [sp, #20]
 8005864:	f1a3 0302 	sub.w	r3, r3, #2
 8005868:	bfcc      	ite	gt
 800586a:	2500      	movgt	r5, #0
 800586c:	2501      	movle	r5, #1
 800586e:	2b03      	cmp	r3, #3
 8005870:	d869      	bhi.n	8005946 <_dtoa_r+0x2c6>
 8005872:	e8df f003 	tbb	[pc, r3]
 8005876:	4e2c      	.short	0x4e2c
 8005878:	5a4c      	.short	0x5a4c
 800587a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800587e:	441d      	add	r5, r3
 8005880:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005884:	2b20      	cmp	r3, #32
 8005886:	bfc1      	itttt	gt
 8005888:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800588c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005890:	fa09 f303 	lslgt.w	r3, r9, r3
 8005894:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005898:	bfda      	itte	le
 800589a:	f1c3 0320 	rsble	r3, r3, #32
 800589e:	fa06 f003 	lslle.w	r0, r6, r3
 80058a2:	4318      	orrgt	r0, r3
 80058a4:	f7fa fe36 	bl	8000514 <__aeabi_ui2d>
 80058a8:	2301      	movs	r3, #1
 80058aa:	4606      	mov	r6, r0
 80058ac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80058b0:	3d01      	subs	r5, #1
 80058b2:	9310      	str	r3, [sp, #64]	; 0x40
 80058b4:	e771      	b.n	800579a <_dtoa_r+0x11a>
 80058b6:	2301      	movs	r3, #1
 80058b8:	e7b6      	b.n	8005828 <_dtoa_r+0x1a8>
 80058ba:	900e      	str	r0, [sp, #56]	; 0x38
 80058bc:	e7b5      	b.n	800582a <_dtoa_r+0x1aa>
 80058be:	f1ca 0300 	rsb	r3, sl, #0
 80058c2:	9306      	str	r3, [sp, #24]
 80058c4:	2300      	movs	r3, #0
 80058c6:	eba8 080a 	sub.w	r8, r8, sl
 80058ca:	930d      	str	r3, [sp, #52]	; 0x34
 80058cc:	e7c2      	b.n	8005854 <_dtoa_r+0x1d4>
 80058ce:	2300      	movs	r3, #0
 80058d0:	9308      	str	r3, [sp, #32]
 80058d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	dc39      	bgt.n	800594c <_dtoa_r+0x2cc>
 80058d8:	f04f 0901 	mov.w	r9, #1
 80058dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80058e0:	464b      	mov	r3, r9
 80058e2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80058e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80058e8:	2200      	movs	r2, #0
 80058ea:	6042      	str	r2, [r0, #4]
 80058ec:	2204      	movs	r2, #4
 80058ee:	f102 0614 	add.w	r6, r2, #20
 80058f2:	429e      	cmp	r6, r3
 80058f4:	6841      	ldr	r1, [r0, #4]
 80058f6:	d92f      	bls.n	8005958 <_dtoa_r+0x2d8>
 80058f8:	4620      	mov	r0, r4
 80058fa:	f000 fcc7 	bl	800628c <_Balloc>
 80058fe:	9000      	str	r0, [sp, #0]
 8005900:	2800      	cmp	r0, #0
 8005902:	d14b      	bne.n	800599c <_dtoa_r+0x31c>
 8005904:	4b24      	ldr	r3, [pc, #144]	; (8005998 <_dtoa_r+0x318>)
 8005906:	4602      	mov	r2, r0
 8005908:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800590c:	e6d1      	b.n	80056b2 <_dtoa_r+0x32>
 800590e:	2301      	movs	r3, #1
 8005910:	e7de      	b.n	80058d0 <_dtoa_r+0x250>
 8005912:	2300      	movs	r3, #0
 8005914:	9308      	str	r3, [sp, #32]
 8005916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005918:	eb0a 0903 	add.w	r9, sl, r3
 800591c:	f109 0301 	add.w	r3, r9, #1
 8005920:	2b01      	cmp	r3, #1
 8005922:	9301      	str	r3, [sp, #4]
 8005924:	bfb8      	it	lt
 8005926:	2301      	movlt	r3, #1
 8005928:	e7dd      	b.n	80058e6 <_dtoa_r+0x266>
 800592a:	2301      	movs	r3, #1
 800592c:	e7f2      	b.n	8005914 <_dtoa_r+0x294>
 800592e:	2501      	movs	r5, #1
 8005930:	2300      	movs	r3, #0
 8005932:	9305      	str	r3, [sp, #20]
 8005934:	9508      	str	r5, [sp, #32]
 8005936:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800593a:	2200      	movs	r2, #0
 800593c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005940:	2312      	movs	r3, #18
 8005942:	9209      	str	r2, [sp, #36]	; 0x24
 8005944:	e7cf      	b.n	80058e6 <_dtoa_r+0x266>
 8005946:	2301      	movs	r3, #1
 8005948:	9308      	str	r3, [sp, #32]
 800594a:	e7f4      	b.n	8005936 <_dtoa_r+0x2b6>
 800594c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005950:	f8cd 9004 	str.w	r9, [sp, #4]
 8005954:	464b      	mov	r3, r9
 8005956:	e7c6      	b.n	80058e6 <_dtoa_r+0x266>
 8005958:	3101      	adds	r1, #1
 800595a:	6041      	str	r1, [r0, #4]
 800595c:	0052      	lsls	r2, r2, #1
 800595e:	e7c6      	b.n	80058ee <_dtoa_r+0x26e>
 8005960:	636f4361 	.word	0x636f4361
 8005964:	3fd287a7 	.word	0x3fd287a7
 8005968:	8b60c8b3 	.word	0x8b60c8b3
 800596c:	3fc68a28 	.word	0x3fc68a28
 8005970:	509f79fb 	.word	0x509f79fb
 8005974:	3fd34413 	.word	0x3fd34413
 8005978:	08007a25 	.word	0x08007a25
 800597c:	08007a3c 	.word	0x08007a3c
 8005980:	7ff00000 	.word	0x7ff00000
 8005984:	08007a21 	.word	0x08007a21
 8005988:	08007a18 	.word	0x08007a18
 800598c:	080079f5 	.word	0x080079f5
 8005990:	3ff80000 	.word	0x3ff80000
 8005994:	08007b38 	.word	0x08007b38
 8005998:	08007a9b 	.word	0x08007a9b
 800599c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800599e:	9a00      	ldr	r2, [sp, #0]
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	9b01      	ldr	r3, [sp, #4]
 80059a4:	2b0e      	cmp	r3, #14
 80059a6:	f200 80ad 	bhi.w	8005b04 <_dtoa_r+0x484>
 80059aa:	2d00      	cmp	r5, #0
 80059ac:	f000 80aa 	beq.w	8005b04 <_dtoa_r+0x484>
 80059b0:	f1ba 0f00 	cmp.w	sl, #0
 80059b4:	dd36      	ble.n	8005a24 <_dtoa_r+0x3a4>
 80059b6:	4ac3      	ldr	r2, [pc, #780]	; (8005cc4 <_dtoa_r+0x644>)
 80059b8:	f00a 030f 	and.w	r3, sl, #15
 80059bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80059c0:	ed93 7b00 	vldr	d7, [r3]
 80059c4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80059c8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80059cc:	eeb0 8a47 	vmov.f32	s16, s14
 80059d0:	eef0 8a67 	vmov.f32	s17, s15
 80059d4:	d016      	beq.n	8005a04 <_dtoa_r+0x384>
 80059d6:	4bbc      	ldr	r3, [pc, #752]	; (8005cc8 <_dtoa_r+0x648>)
 80059d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80059dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059e0:	f7fa ff3c 	bl	800085c <__aeabi_ddiv>
 80059e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059e8:	f007 070f 	and.w	r7, r7, #15
 80059ec:	2503      	movs	r5, #3
 80059ee:	4eb6      	ldr	r6, [pc, #728]	; (8005cc8 <_dtoa_r+0x648>)
 80059f0:	b957      	cbnz	r7, 8005a08 <_dtoa_r+0x388>
 80059f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059f6:	ec53 2b18 	vmov	r2, r3, d8
 80059fa:	f7fa ff2f 	bl	800085c <__aeabi_ddiv>
 80059fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a02:	e029      	b.n	8005a58 <_dtoa_r+0x3d8>
 8005a04:	2502      	movs	r5, #2
 8005a06:	e7f2      	b.n	80059ee <_dtoa_r+0x36e>
 8005a08:	07f9      	lsls	r1, r7, #31
 8005a0a:	d508      	bpl.n	8005a1e <_dtoa_r+0x39e>
 8005a0c:	ec51 0b18 	vmov	r0, r1, d8
 8005a10:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a14:	f7fa fdf8 	bl	8000608 <__aeabi_dmul>
 8005a18:	ec41 0b18 	vmov	d8, r0, r1
 8005a1c:	3501      	adds	r5, #1
 8005a1e:	107f      	asrs	r7, r7, #1
 8005a20:	3608      	adds	r6, #8
 8005a22:	e7e5      	b.n	80059f0 <_dtoa_r+0x370>
 8005a24:	f000 80a6 	beq.w	8005b74 <_dtoa_r+0x4f4>
 8005a28:	f1ca 0600 	rsb	r6, sl, #0
 8005a2c:	4ba5      	ldr	r3, [pc, #660]	; (8005cc4 <_dtoa_r+0x644>)
 8005a2e:	4fa6      	ldr	r7, [pc, #664]	; (8005cc8 <_dtoa_r+0x648>)
 8005a30:	f006 020f 	and.w	r2, r6, #15
 8005a34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a40:	f7fa fde2 	bl	8000608 <__aeabi_dmul>
 8005a44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a48:	1136      	asrs	r6, r6, #4
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	2502      	movs	r5, #2
 8005a4e:	2e00      	cmp	r6, #0
 8005a50:	f040 8085 	bne.w	8005b5e <_dtoa_r+0x4de>
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1d2      	bne.n	80059fe <_dtoa_r+0x37e>
 8005a58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 808c 	beq.w	8005b78 <_dtoa_r+0x4f8>
 8005a60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a64:	4b99      	ldr	r3, [pc, #612]	; (8005ccc <_dtoa_r+0x64c>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	4630      	mov	r0, r6
 8005a6a:	4639      	mov	r1, r7
 8005a6c:	f7fb f83e 	bl	8000aec <__aeabi_dcmplt>
 8005a70:	2800      	cmp	r0, #0
 8005a72:	f000 8081 	beq.w	8005b78 <_dtoa_r+0x4f8>
 8005a76:	9b01      	ldr	r3, [sp, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d07d      	beq.n	8005b78 <_dtoa_r+0x4f8>
 8005a7c:	f1b9 0f00 	cmp.w	r9, #0
 8005a80:	dd3c      	ble.n	8005afc <_dtoa_r+0x47c>
 8005a82:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005a86:	9307      	str	r3, [sp, #28]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	4b91      	ldr	r3, [pc, #580]	; (8005cd0 <_dtoa_r+0x650>)
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	4639      	mov	r1, r7
 8005a90:	f7fa fdba 	bl	8000608 <__aeabi_dmul>
 8005a94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a98:	3501      	adds	r5, #1
 8005a9a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005a9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	f7fa fd46 	bl	8000534 <__aeabi_i2d>
 8005aa8:	4632      	mov	r2, r6
 8005aaa:	463b      	mov	r3, r7
 8005aac:	f7fa fdac 	bl	8000608 <__aeabi_dmul>
 8005ab0:	4b88      	ldr	r3, [pc, #544]	; (8005cd4 <_dtoa_r+0x654>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f7fa fbf2 	bl	800029c <__adddf3>
 8005ab8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005abc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ac0:	9303      	str	r3, [sp, #12]
 8005ac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d15c      	bne.n	8005b82 <_dtoa_r+0x502>
 8005ac8:	4b83      	ldr	r3, [pc, #524]	; (8005cd8 <_dtoa_r+0x658>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	4630      	mov	r0, r6
 8005ace:	4639      	mov	r1, r7
 8005ad0:	f7fa fbe2 	bl	8000298 <__aeabi_dsub>
 8005ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ad8:	4606      	mov	r6, r0
 8005ada:	460f      	mov	r7, r1
 8005adc:	f7fb f824 	bl	8000b28 <__aeabi_dcmpgt>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	f040 8296 	bne.w	8006012 <_dtoa_r+0x992>
 8005ae6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005aea:	4630      	mov	r0, r6
 8005aec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005af0:	4639      	mov	r1, r7
 8005af2:	f7fa fffb 	bl	8000aec <__aeabi_dcmplt>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	f040 8288 	bne.w	800600c <_dtoa_r+0x98c>
 8005afc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005b00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f2c0 8158 	blt.w	8005dbc <_dtoa_r+0x73c>
 8005b0c:	f1ba 0f0e 	cmp.w	sl, #14
 8005b10:	f300 8154 	bgt.w	8005dbc <_dtoa_r+0x73c>
 8005b14:	4b6b      	ldr	r3, [pc, #428]	; (8005cc4 <_dtoa_r+0x644>)
 8005b16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f280 80e3 	bge.w	8005cec <_dtoa_r+0x66c>
 8005b26:	9b01      	ldr	r3, [sp, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f300 80df 	bgt.w	8005cec <_dtoa_r+0x66c>
 8005b2e:	f040 826d 	bne.w	800600c <_dtoa_r+0x98c>
 8005b32:	4b69      	ldr	r3, [pc, #420]	; (8005cd8 <_dtoa_r+0x658>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	4640      	mov	r0, r8
 8005b38:	4649      	mov	r1, r9
 8005b3a:	f7fa fd65 	bl	8000608 <__aeabi_dmul>
 8005b3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b42:	f7fa ffe7 	bl	8000b14 <__aeabi_dcmpge>
 8005b46:	9e01      	ldr	r6, [sp, #4]
 8005b48:	4637      	mov	r7, r6
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	f040 8243 	bne.w	8005fd6 <_dtoa_r+0x956>
 8005b50:	9d00      	ldr	r5, [sp, #0]
 8005b52:	2331      	movs	r3, #49	; 0x31
 8005b54:	f805 3b01 	strb.w	r3, [r5], #1
 8005b58:	f10a 0a01 	add.w	sl, sl, #1
 8005b5c:	e23f      	b.n	8005fde <_dtoa_r+0x95e>
 8005b5e:	07f2      	lsls	r2, r6, #31
 8005b60:	d505      	bpl.n	8005b6e <_dtoa_r+0x4ee>
 8005b62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b66:	f7fa fd4f 	bl	8000608 <__aeabi_dmul>
 8005b6a:	3501      	adds	r5, #1
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	1076      	asrs	r6, r6, #1
 8005b70:	3708      	adds	r7, #8
 8005b72:	e76c      	b.n	8005a4e <_dtoa_r+0x3ce>
 8005b74:	2502      	movs	r5, #2
 8005b76:	e76f      	b.n	8005a58 <_dtoa_r+0x3d8>
 8005b78:	9b01      	ldr	r3, [sp, #4]
 8005b7a:	f8cd a01c 	str.w	sl, [sp, #28]
 8005b7e:	930c      	str	r3, [sp, #48]	; 0x30
 8005b80:	e78d      	b.n	8005a9e <_dtoa_r+0x41e>
 8005b82:	9900      	ldr	r1, [sp, #0]
 8005b84:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005b86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b88:	4b4e      	ldr	r3, [pc, #312]	; (8005cc4 <_dtoa_r+0x644>)
 8005b8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b8e:	4401      	add	r1, r0
 8005b90:	9102      	str	r1, [sp, #8]
 8005b92:	9908      	ldr	r1, [sp, #32]
 8005b94:	eeb0 8a47 	vmov.f32	s16, s14
 8005b98:	eef0 8a67 	vmov.f32	s17, s15
 8005b9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ba0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ba4:	2900      	cmp	r1, #0
 8005ba6:	d045      	beq.n	8005c34 <_dtoa_r+0x5b4>
 8005ba8:	494c      	ldr	r1, [pc, #304]	; (8005cdc <_dtoa_r+0x65c>)
 8005baa:	2000      	movs	r0, #0
 8005bac:	f7fa fe56 	bl	800085c <__aeabi_ddiv>
 8005bb0:	ec53 2b18 	vmov	r2, r3, d8
 8005bb4:	f7fa fb70 	bl	8000298 <__aeabi_dsub>
 8005bb8:	9d00      	ldr	r5, [sp, #0]
 8005bba:	ec41 0b18 	vmov	d8, r0, r1
 8005bbe:	4639      	mov	r1, r7
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	f7fa ffd1 	bl	8000b68 <__aeabi_d2iz>
 8005bc6:	900c      	str	r0, [sp, #48]	; 0x30
 8005bc8:	f7fa fcb4 	bl	8000534 <__aeabi_i2d>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	4639      	mov	r1, r7
 8005bd4:	f7fa fb60 	bl	8000298 <__aeabi_dsub>
 8005bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bda:	3330      	adds	r3, #48	; 0x30
 8005bdc:	f805 3b01 	strb.w	r3, [r5], #1
 8005be0:	ec53 2b18 	vmov	r2, r3, d8
 8005be4:	4606      	mov	r6, r0
 8005be6:	460f      	mov	r7, r1
 8005be8:	f7fa ff80 	bl	8000aec <__aeabi_dcmplt>
 8005bec:	2800      	cmp	r0, #0
 8005bee:	d165      	bne.n	8005cbc <_dtoa_r+0x63c>
 8005bf0:	4632      	mov	r2, r6
 8005bf2:	463b      	mov	r3, r7
 8005bf4:	4935      	ldr	r1, [pc, #212]	; (8005ccc <_dtoa_r+0x64c>)
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	f7fa fb4e 	bl	8000298 <__aeabi_dsub>
 8005bfc:	ec53 2b18 	vmov	r2, r3, d8
 8005c00:	f7fa ff74 	bl	8000aec <__aeabi_dcmplt>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	f040 80b9 	bne.w	8005d7c <_dtoa_r+0x6fc>
 8005c0a:	9b02      	ldr	r3, [sp, #8]
 8005c0c:	429d      	cmp	r5, r3
 8005c0e:	f43f af75 	beq.w	8005afc <_dtoa_r+0x47c>
 8005c12:	4b2f      	ldr	r3, [pc, #188]	; (8005cd0 <_dtoa_r+0x650>)
 8005c14:	ec51 0b18 	vmov	r0, r1, d8
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f7fa fcf5 	bl	8000608 <__aeabi_dmul>
 8005c1e:	4b2c      	ldr	r3, [pc, #176]	; (8005cd0 <_dtoa_r+0x650>)
 8005c20:	ec41 0b18 	vmov	d8, r0, r1
 8005c24:	2200      	movs	r2, #0
 8005c26:	4630      	mov	r0, r6
 8005c28:	4639      	mov	r1, r7
 8005c2a:	f7fa fced 	bl	8000608 <__aeabi_dmul>
 8005c2e:	4606      	mov	r6, r0
 8005c30:	460f      	mov	r7, r1
 8005c32:	e7c4      	b.n	8005bbe <_dtoa_r+0x53e>
 8005c34:	ec51 0b17 	vmov	r0, r1, d7
 8005c38:	f7fa fce6 	bl	8000608 <__aeabi_dmul>
 8005c3c:	9b02      	ldr	r3, [sp, #8]
 8005c3e:	9d00      	ldr	r5, [sp, #0]
 8005c40:	930c      	str	r3, [sp, #48]	; 0x30
 8005c42:	ec41 0b18 	vmov	d8, r0, r1
 8005c46:	4639      	mov	r1, r7
 8005c48:	4630      	mov	r0, r6
 8005c4a:	f7fa ff8d 	bl	8000b68 <__aeabi_d2iz>
 8005c4e:	9011      	str	r0, [sp, #68]	; 0x44
 8005c50:	f7fa fc70 	bl	8000534 <__aeabi_i2d>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4630      	mov	r0, r6
 8005c5a:	4639      	mov	r1, r7
 8005c5c:	f7fa fb1c 	bl	8000298 <__aeabi_dsub>
 8005c60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c62:	3330      	adds	r3, #48	; 0x30
 8005c64:	f805 3b01 	strb.w	r3, [r5], #1
 8005c68:	9b02      	ldr	r3, [sp, #8]
 8005c6a:	429d      	cmp	r5, r3
 8005c6c:	4606      	mov	r6, r0
 8005c6e:	460f      	mov	r7, r1
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	d134      	bne.n	8005ce0 <_dtoa_r+0x660>
 8005c76:	4b19      	ldr	r3, [pc, #100]	; (8005cdc <_dtoa_r+0x65c>)
 8005c78:	ec51 0b18 	vmov	r0, r1, d8
 8005c7c:	f7fa fb0e 	bl	800029c <__adddf3>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	4630      	mov	r0, r6
 8005c86:	4639      	mov	r1, r7
 8005c88:	f7fa ff4e 	bl	8000b28 <__aeabi_dcmpgt>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	d175      	bne.n	8005d7c <_dtoa_r+0x6fc>
 8005c90:	ec53 2b18 	vmov	r2, r3, d8
 8005c94:	4911      	ldr	r1, [pc, #68]	; (8005cdc <_dtoa_r+0x65c>)
 8005c96:	2000      	movs	r0, #0
 8005c98:	f7fa fafe 	bl	8000298 <__aeabi_dsub>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	4639      	mov	r1, r7
 8005ca4:	f7fa ff22 	bl	8000aec <__aeabi_dcmplt>
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	f43f af27 	beq.w	8005afc <_dtoa_r+0x47c>
 8005cae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cb0:	1e6b      	subs	r3, r5, #1
 8005cb2:	930c      	str	r3, [sp, #48]	; 0x30
 8005cb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005cb8:	2b30      	cmp	r3, #48	; 0x30
 8005cba:	d0f8      	beq.n	8005cae <_dtoa_r+0x62e>
 8005cbc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005cc0:	e04a      	b.n	8005d58 <_dtoa_r+0x6d8>
 8005cc2:	bf00      	nop
 8005cc4:	08007b38 	.word	0x08007b38
 8005cc8:	08007b10 	.word	0x08007b10
 8005ccc:	3ff00000 	.word	0x3ff00000
 8005cd0:	40240000 	.word	0x40240000
 8005cd4:	401c0000 	.word	0x401c0000
 8005cd8:	40140000 	.word	0x40140000
 8005cdc:	3fe00000 	.word	0x3fe00000
 8005ce0:	4baf      	ldr	r3, [pc, #700]	; (8005fa0 <_dtoa_r+0x920>)
 8005ce2:	f7fa fc91 	bl	8000608 <__aeabi_dmul>
 8005ce6:	4606      	mov	r6, r0
 8005ce8:	460f      	mov	r7, r1
 8005cea:	e7ac      	b.n	8005c46 <_dtoa_r+0x5c6>
 8005cec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005cf0:	9d00      	ldr	r5, [sp, #0]
 8005cf2:	4642      	mov	r2, r8
 8005cf4:	464b      	mov	r3, r9
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	4639      	mov	r1, r7
 8005cfa:	f7fa fdaf 	bl	800085c <__aeabi_ddiv>
 8005cfe:	f7fa ff33 	bl	8000b68 <__aeabi_d2iz>
 8005d02:	9002      	str	r0, [sp, #8]
 8005d04:	f7fa fc16 	bl	8000534 <__aeabi_i2d>
 8005d08:	4642      	mov	r2, r8
 8005d0a:	464b      	mov	r3, r9
 8005d0c:	f7fa fc7c 	bl	8000608 <__aeabi_dmul>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4630      	mov	r0, r6
 8005d16:	4639      	mov	r1, r7
 8005d18:	f7fa fabe 	bl	8000298 <__aeabi_dsub>
 8005d1c:	9e02      	ldr	r6, [sp, #8]
 8005d1e:	9f01      	ldr	r7, [sp, #4]
 8005d20:	3630      	adds	r6, #48	; 0x30
 8005d22:	f805 6b01 	strb.w	r6, [r5], #1
 8005d26:	9e00      	ldr	r6, [sp, #0]
 8005d28:	1bae      	subs	r6, r5, r6
 8005d2a:	42b7      	cmp	r7, r6
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	d137      	bne.n	8005da2 <_dtoa_r+0x722>
 8005d32:	f7fa fab3 	bl	800029c <__adddf3>
 8005d36:	4642      	mov	r2, r8
 8005d38:	464b      	mov	r3, r9
 8005d3a:	4606      	mov	r6, r0
 8005d3c:	460f      	mov	r7, r1
 8005d3e:	f7fa fef3 	bl	8000b28 <__aeabi_dcmpgt>
 8005d42:	b9c8      	cbnz	r0, 8005d78 <_dtoa_r+0x6f8>
 8005d44:	4642      	mov	r2, r8
 8005d46:	464b      	mov	r3, r9
 8005d48:	4630      	mov	r0, r6
 8005d4a:	4639      	mov	r1, r7
 8005d4c:	f7fa fec4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d50:	b110      	cbz	r0, 8005d58 <_dtoa_r+0x6d8>
 8005d52:	9b02      	ldr	r3, [sp, #8]
 8005d54:	07d9      	lsls	r1, r3, #31
 8005d56:	d40f      	bmi.n	8005d78 <_dtoa_r+0x6f8>
 8005d58:	4620      	mov	r0, r4
 8005d5a:	4659      	mov	r1, fp
 8005d5c:	f000 fad6 	bl	800630c <_Bfree>
 8005d60:	2300      	movs	r3, #0
 8005d62:	702b      	strb	r3, [r5, #0]
 8005d64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d66:	f10a 0001 	add.w	r0, sl, #1
 8005d6a:	6018      	str	r0, [r3, #0]
 8005d6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f43f acd8 	beq.w	8005724 <_dtoa_r+0xa4>
 8005d74:	601d      	str	r5, [r3, #0]
 8005d76:	e4d5      	b.n	8005724 <_dtoa_r+0xa4>
 8005d78:	f8cd a01c 	str.w	sl, [sp, #28]
 8005d7c:	462b      	mov	r3, r5
 8005d7e:	461d      	mov	r5, r3
 8005d80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d84:	2a39      	cmp	r2, #57	; 0x39
 8005d86:	d108      	bne.n	8005d9a <_dtoa_r+0x71a>
 8005d88:	9a00      	ldr	r2, [sp, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d1f7      	bne.n	8005d7e <_dtoa_r+0x6fe>
 8005d8e:	9a07      	ldr	r2, [sp, #28]
 8005d90:	9900      	ldr	r1, [sp, #0]
 8005d92:	3201      	adds	r2, #1
 8005d94:	9207      	str	r2, [sp, #28]
 8005d96:	2230      	movs	r2, #48	; 0x30
 8005d98:	700a      	strb	r2, [r1, #0]
 8005d9a:	781a      	ldrb	r2, [r3, #0]
 8005d9c:	3201      	adds	r2, #1
 8005d9e:	701a      	strb	r2, [r3, #0]
 8005da0:	e78c      	b.n	8005cbc <_dtoa_r+0x63c>
 8005da2:	4b7f      	ldr	r3, [pc, #508]	; (8005fa0 <_dtoa_r+0x920>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	f7fa fc2f 	bl	8000608 <__aeabi_dmul>
 8005daa:	2200      	movs	r2, #0
 8005dac:	2300      	movs	r3, #0
 8005dae:	4606      	mov	r6, r0
 8005db0:	460f      	mov	r7, r1
 8005db2:	f7fa fe91 	bl	8000ad8 <__aeabi_dcmpeq>
 8005db6:	2800      	cmp	r0, #0
 8005db8:	d09b      	beq.n	8005cf2 <_dtoa_r+0x672>
 8005dba:	e7cd      	b.n	8005d58 <_dtoa_r+0x6d8>
 8005dbc:	9a08      	ldr	r2, [sp, #32]
 8005dbe:	2a00      	cmp	r2, #0
 8005dc0:	f000 80c4 	beq.w	8005f4c <_dtoa_r+0x8cc>
 8005dc4:	9a05      	ldr	r2, [sp, #20]
 8005dc6:	2a01      	cmp	r2, #1
 8005dc8:	f300 80a8 	bgt.w	8005f1c <_dtoa_r+0x89c>
 8005dcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005dce:	2a00      	cmp	r2, #0
 8005dd0:	f000 80a0 	beq.w	8005f14 <_dtoa_r+0x894>
 8005dd4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005dd8:	9e06      	ldr	r6, [sp, #24]
 8005dda:	4645      	mov	r5, r8
 8005ddc:	9a04      	ldr	r2, [sp, #16]
 8005dde:	2101      	movs	r1, #1
 8005de0:	441a      	add	r2, r3
 8005de2:	4620      	mov	r0, r4
 8005de4:	4498      	add	r8, r3
 8005de6:	9204      	str	r2, [sp, #16]
 8005de8:	f000 fb4c 	bl	8006484 <__i2b>
 8005dec:	4607      	mov	r7, r0
 8005dee:	2d00      	cmp	r5, #0
 8005df0:	dd0b      	ble.n	8005e0a <_dtoa_r+0x78a>
 8005df2:	9b04      	ldr	r3, [sp, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	dd08      	ble.n	8005e0a <_dtoa_r+0x78a>
 8005df8:	42ab      	cmp	r3, r5
 8005dfa:	9a04      	ldr	r2, [sp, #16]
 8005dfc:	bfa8      	it	ge
 8005dfe:	462b      	movge	r3, r5
 8005e00:	eba8 0803 	sub.w	r8, r8, r3
 8005e04:	1aed      	subs	r5, r5, r3
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	9304      	str	r3, [sp, #16]
 8005e0a:	9b06      	ldr	r3, [sp, #24]
 8005e0c:	b1fb      	cbz	r3, 8005e4e <_dtoa_r+0x7ce>
 8005e0e:	9b08      	ldr	r3, [sp, #32]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 809f 	beq.w	8005f54 <_dtoa_r+0x8d4>
 8005e16:	2e00      	cmp	r6, #0
 8005e18:	dd11      	ble.n	8005e3e <_dtoa_r+0x7be>
 8005e1a:	4639      	mov	r1, r7
 8005e1c:	4632      	mov	r2, r6
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f000 fbec 	bl	80065fc <__pow5mult>
 8005e24:	465a      	mov	r2, fp
 8005e26:	4601      	mov	r1, r0
 8005e28:	4607      	mov	r7, r0
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f000 fb40 	bl	80064b0 <__multiply>
 8005e30:	4659      	mov	r1, fp
 8005e32:	9007      	str	r0, [sp, #28]
 8005e34:	4620      	mov	r0, r4
 8005e36:	f000 fa69 	bl	800630c <_Bfree>
 8005e3a:	9b07      	ldr	r3, [sp, #28]
 8005e3c:	469b      	mov	fp, r3
 8005e3e:	9b06      	ldr	r3, [sp, #24]
 8005e40:	1b9a      	subs	r2, r3, r6
 8005e42:	d004      	beq.n	8005e4e <_dtoa_r+0x7ce>
 8005e44:	4659      	mov	r1, fp
 8005e46:	4620      	mov	r0, r4
 8005e48:	f000 fbd8 	bl	80065fc <__pow5mult>
 8005e4c:	4683      	mov	fp, r0
 8005e4e:	2101      	movs	r1, #1
 8005e50:	4620      	mov	r0, r4
 8005e52:	f000 fb17 	bl	8006484 <__i2b>
 8005e56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	4606      	mov	r6, r0
 8005e5c:	dd7c      	ble.n	8005f58 <_dtoa_r+0x8d8>
 8005e5e:	461a      	mov	r2, r3
 8005e60:	4601      	mov	r1, r0
 8005e62:	4620      	mov	r0, r4
 8005e64:	f000 fbca 	bl	80065fc <__pow5mult>
 8005e68:	9b05      	ldr	r3, [sp, #20]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	4606      	mov	r6, r0
 8005e6e:	dd76      	ble.n	8005f5e <_dtoa_r+0x8de>
 8005e70:	2300      	movs	r3, #0
 8005e72:	9306      	str	r3, [sp, #24]
 8005e74:	6933      	ldr	r3, [r6, #16]
 8005e76:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005e7a:	6918      	ldr	r0, [r3, #16]
 8005e7c:	f000 fab2 	bl	80063e4 <__hi0bits>
 8005e80:	f1c0 0020 	rsb	r0, r0, #32
 8005e84:	9b04      	ldr	r3, [sp, #16]
 8005e86:	4418      	add	r0, r3
 8005e88:	f010 001f 	ands.w	r0, r0, #31
 8005e8c:	f000 8086 	beq.w	8005f9c <_dtoa_r+0x91c>
 8005e90:	f1c0 0320 	rsb	r3, r0, #32
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	dd7f      	ble.n	8005f98 <_dtoa_r+0x918>
 8005e98:	f1c0 001c 	rsb	r0, r0, #28
 8005e9c:	9b04      	ldr	r3, [sp, #16]
 8005e9e:	4403      	add	r3, r0
 8005ea0:	4480      	add	r8, r0
 8005ea2:	4405      	add	r5, r0
 8005ea4:	9304      	str	r3, [sp, #16]
 8005ea6:	f1b8 0f00 	cmp.w	r8, #0
 8005eaa:	dd05      	ble.n	8005eb8 <_dtoa_r+0x838>
 8005eac:	4659      	mov	r1, fp
 8005eae:	4642      	mov	r2, r8
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f000 fbfd 	bl	80066b0 <__lshift>
 8005eb6:	4683      	mov	fp, r0
 8005eb8:	9b04      	ldr	r3, [sp, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	dd05      	ble.n	8005eca <_dtoa_r+0x84a>
 8005ebe:	4631      	mov	r1, r6
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	f000 fbf4 	bl	80066b0 <__lshift>
 8005ec8:	4606      	mov	r6, r0
 8005eca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d069      	beq.n	8005fa4 <_dtoa_r+0x924>
 8005ed0:	4631      	mov	r1, r6
 8005ed2:	4658      	mov	r0, fp
 8005ed4:	f000 fc58 	bl	8006788 <__mcmp>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	da63      	bge.n	8005fa4 <_dtoa_r+0x924>
 8005edc:	2300      	movs	r3, #0
 8005ede:	4659      	mov	r1, fp
 8005ee0:	220a      	movs	r2, #10
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 fa34 	bl	8006350 <__multadd>
 8005ee8:	9b08      	ldr	r3, [sp, #32]
 8005eea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005eee:	4683      	mov	fp, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 818f 	beq.w	8006214 <_dtoa_r+0xb94>
 8005ef6:	4639      	mov	r1, r7
 8005ef8:	2300      	movs	r3, #0
 8005efa:	220a      	movs	r2, #10
 8005efc:	4620      	mov	r0, r4
 8005efe:	f000 fa27 	bl	8006350 <__multadd>
 8005f02:	f1b9 0f00 	cmp.w	r9, #0
 8005f06:	4607      	mov	r7, r0
 8005f08:	f300 808e 	bgt.w	8006028 <_dtoa_r+0x9a8>
 8005f0c:	9b05      	ldr	r3, [sp, #20]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	dc50      	bgt.n	8005fb4 <_dtoa_r+0x934>
 8005f12:	e089      	b.n	8006028 <_dtoa_r+0x9a8>
 8005f14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f1a:	e75d      	b.n	8005dd8 <_dtoa_r+0x758>
 8005f1c:	9b01      	ldr	r3, [sp, #4]
 8005f1e:	1e5e      	subs	r6, r3, #1
 8005f20:	9b06      	ldr	r3, [sp, #24]
 8005f22:	42b3      	cmp	r3, r6
 8005f24:	bfbf      	itttt	lt
 8005f26:	9b06      	ldrlt	r3, [sp, #24]
 8005f28:	9606      	strlt	r6, [sp, #24]
 8005f2a:	1af2      	sublt	r2, r6, r3
 8005f2c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005f2e:	bfb6      	itet	lt
 8005f30:	189b      	addlt	r3, r3, r2
 8005f32:	1b9e      	subge	r6, r3, r6
 8005f34:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005f36:	9b01      	ldr	r3, [sp, #4]
 8005f38:	bfb8      	it	lt
 8005f3a:	2600      	movlt	r6, #0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bfb5      	itete	lt
 8005f40:	eba8 0503 	sublt.w	r5, r8, r3
 8005f44:	9b01      	ldrge	r3, [sp, #4]
 8005f46:	2300      	movlt	r3, #0
 8005f48:	4645      	movge	r5, r8
 8005f4a:	e747      	b.n	8005ddc <_dtoa_r+0x75c>
 8005f4c:	9e06      	ldr	r6, [sp, #24]
 8005f4e:	9f08      	ldr	r7, [sp, #32]
 8005f50:	4645      	mov	r5, r8
 8005f52:	e74c      	b.n	8005dee <_dtoa_r+0x76e>
 8005f54:	9a06      	ldr	r2, [sp, #24]
 8005f56:	e775      	b.n	8005e44 <_dtoa_r+0x7c4>
 8005f58:	9b05      	ldr	r3, [sp, #20]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	dc18      	bgt.n	8005f90 <_dtoa_r+0x910>
 8005f5e:	9b02      	ldr	r3, [sp, #8]
 8005f60:	b9b3      	cbnz	r3, 8005f90 <_dtoa_r+0x910>
 8005f62:	9b03      	ldr	r3, [sp, #12]
 8005f64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f68:	b9a3      	cbnz	r3, 8005f94 <_dtoa_r+0x914>
 8005f6a:	9b03      	ldr	r3, [sp, #12]
 8005f6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f70:	0d1b      	lsrs	r3, r3, #20
 8005f72:	051b      	lsls	r3, r3, #20
 8005f74:	b12b      	cbz	r3, 8005f82 <_dtoa_r+0x902>
 8005f76:	9b04      	ldr	r3, [sp, #16]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	9304      	str	r3, [sp, #16]
 8005f7c:	f108 0801 	add.w	r8, r8, #1
 8005f80:	2301      	movs	r3, #1
 8005f82:	9306      	str	r3, [sp, #24]
 8005f84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f47f af74 	bne.w	8005e74 <_dtoa_r+0x7f4>
 8005f8c:	2001      	movs	r0, #1
 8005f8e:	e779      	b.n	8005e84 <_dtoa_r+0x804>
 8005f90:	2300      	movs	r3, #0
 8005f92:	e7f6      	b.n	8005f82 <_dtoa_r+0x902>
 8005f94:	9b02      	ldr	r3, [sp, #8]
 8005f96:	e7f4      	b.n	8005f82 <_dtoa_r+0x902>
 8005f98:	d085      	beq.n	8005ea6 <_dtoa_r+0x826>
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	301c      	adds	r0, #28
 8005f9e:	e77d      	b.n	8005e9c <_dtoa_r+0x81c>
 8005fa0:	40240000 	.word	0x40240000
 8005fa4:	9b01      	ldr	r3, [sp, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	dc38      	bgt.n	800601c <_dtoa_r+0x99c>
 8005faa:	9b05      	ldr	r3, [sp, #20]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	dd35      	ble.n	800601c <_dtoa_r+0x99c>
 8005fb0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005fb4:	f1b9 0f00 	cmp.w	r9, #0
 8005fb8:	d10d      	bne.n	8005fd6 <_dtoa_r+0x956>
 8005fba:	4631      	mov	r1, r6
 8005fbc:	464b      	mov	r3, r9
 8005fbe:	2205      	movs	r2, #5
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f000 f9c5 	bl	8006350 <__multadd>
 8005fc6:	4601      	mov	r1, r0
 8005fc8:	4606      	mov	r6, r0
 8005fca:	4658      	mov	r0, fp
 8005fcc:	f000 fbdc 	bl	8006788 <__mcmp>
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	f73f adbd 	bgt.w	8005b50 <_dtoa_r+0x4d0>
 8005fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fd8:	9d00      	ldr	r5, [sp, #0]
 8005fda:	ea6f 0a03 	mvn.w	sl, r3
 8005fde:	f04f 0800 	mov.w	r8, #0
 8005fe2:	4631      	mov	r1, r6
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	f000 f991 	bl	800630c <_Bfree>
 8005fea:	2f00      	cmp	r7, #0
 8005fec:	f43f aeb4 	beq.w	8005d58 <_dtoa_r+0x6d8>
 8005ff0:	f1b8 0f00 	cmp.w	r8, #0
 8005ff4:	d005      	beq.n	8006002 <_dtoa_r+0x982>
 8005ff6:	45b8      	cmp	r8, r7
 8005ff8:	d003      	beq.n	8006002 <_dtoa_r+0x982>
 8005ffa:	4641      	mov	r1, r8
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f000 f985 	bl	800630c <_Bfree>
 8006002:	4639      	mov	r1, r7
 8006004:	4620      	mov	r0, r4
 8006006:	f000 f981 	bl	800630c <_Bfree>
 800600a:	e6a5      	b.n	8005d58 <_dtoa_r+0x6d8>
 800600c:	2600      	movs	r6, #0
 800600e:	4637      	mov	r7, r6
 8006010:	e7e1      	b.n	8005fd6 <_dtoa_r+0x956>
 8006012:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006014:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006018:	4637      	mov	r7, r6
 800601a:	e599      	b.n	8005b50 <_dtoa_r+0x4d0>
 800601c:	9b08      	ldr	r3, [sp, #32]
 800601e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 80fd 	beq.w	8006222 <_dtoa_r+0xba2>
 8006028:	2d00      	cmp	r5, #0
 800602a:	dd05      	ble.n	8006038 <_dtoa_r+0x9b8>
 800602c:	4639      	mov	r1, r7
 800602e:	462a      	mov	r2, r5
 8006030:	4620      	mov	r0, r4
 8006032:	f000 fb3d 	bl	80066b0 <__lshift>
 8006036:	4607      	mov	r7, r0
 8006038:	9b06      	ldr	r3, [sp, #24]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d05c      	beq.n	80060f8 <_dtoa_r+0xa78>
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	4620      	mov	r0, r4
 8006042:	f000 f923 	bl	800628c <_Balloc>
 8006046:	4605      	mov	r5, r0
 8006048:	b928      	cbnz	r0, 8006056 <_dtoa_r+0x9d6>
 800604a:	4b80      	ldr	r3, [pc, #512]	; (800624c <_dtoa_r+0xbcc>)
 800604c:	4602      	mov	r2, r0
 800604e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006052:	f7ff bb2e 	b.w	80056b2 <_dtoa_r+0x32>
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	3202      	adds	r2, #2
 800605a:	0092      	lsls	r2, r2, #2
 800605c:	f107 010c 	add.w	r1, r7, #12
 8006060:	300c      	adds	r0, #12
 8006062:	f000 f905 	bl	8006270 <memcpy>
 8006066:	2201      	movs	r2, #1
 8006068:	4629      	mov	r1, r5
 800606a:	4620      	mov	r0, r4
 800606c:	f000 fb20 	bl	80066b0 <__lshift>
 8006070:	9b00      	ldr	r3, [sp, #0]
 8006072:	3301      	adds	r3, #1
 8006074:	9301      	str	r3, [sp, #4]
 8006076:	9b00      	ldr	r3, [sp, #0]
 8006078:	444b      	add	r3, r9
 800607a:	9307      	str	r3, [sp, #28]
 800607c:	9b02      	ldr	r3, [sp, #8]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	46b8      	mov	r8, r7
 8006084:	9306      	str	r3, [sp, #24]
 8006086:	4607      	mov	r7, r0
 8006088:	9b01      	ldr	r3, [sp, #4]
 800608a:	4631      	mov	r1, r6
 800608c:	3b01      	subs	r3, #1
 800608e:	4658      	mov	r0, fp
 8006090:	9302      	str	r3, [sp, #8]
 8006092:	f7ff fa67 	bl	8005564 <quorem>
 8006096:	4603      	mov	r3, r0
 8006098:	3330      	adds	r3, #48	; 0x30
 800609a:	9004      	str	r0, [sp, #16]
 800609c:	4641      	mov	r1, r8
 800609e:	4658      	mov	r0, fp
 80060a0:	9308      	str	r3, [sp, #32]
 80060a2:	f000 fb71 	bl	8006788 <__mcmp>
 80060a6:	463a      	mov	r2, r7
 80060a8:	4681      	mov	r9, r0
 80060aa:	4631      	mov	r1, r6
 80060ac:	4620      	mov	r0, r4
 80060ae:	f000 fb87 	bl	80067c0 <__mdiff>
 80060b2:	68c2      	ldr	r2, [r0, #12]
 80060b4:	9b08      	ldr	r3, [sp, #32]
 80060b6:	4605      	mov	r5, r0
 80060b8:	bb02      	cbnz	r2, 80060fc <_dtoa_r+0xa7c>
 80060ba:	4601      	mov	r1, r0
 80060bc:	4658      	mov	r0, fp
 80060be:	f000 fb63 	bl	8006788 <__mcmp>
 80060c2:	9b08      	ldr	r3, [sp, #32]
 80060c4:	4602      	mov	r2, r0
 80060c6:	4629      	mov	r1, r5
 80060c8:	4620      	mov	r0, r4
 80060ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80060ce:	f000 f91d 	bl	800630c <_Bfree>
 80060d2:	9b05      	ldr	r3, [sp, #20]
 80060d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060d6:	9d01      	ldr	r5, [sp, #4]
 80060d8:	ea43 0102 	orr.w	r1, r3, r2
 80060dc:	9b06      	ldr	r3, [sp, #24]
 80060de:	430b      	orrs	r3, r1
 80060e0:	9b08      	ldr	r3, [sp, #32]
 80060e2:	d10d      	bne.n	8006100 <_dtoa_r+0xa80>
 80060e4:	2b39      	cmp	r3, #57	; 0x39
 80060e6:	d029      	beq.n	800613c <_dtoa_r+0xabc>
 80060e8:	f1b9 0f00 	cmp.w	r9, #0
 80060ec:	dd01      	ble.n	80060f2 <_dtoa_r+0xa72>
 80060ee:	9b04      	ldr	r3, [sp, #16]
 80060f0:	3331      	adds	r3, #49	; 0x31
 80060f2:	9a02      	ldr	r2, [sp, #8]
 80060f4:	7013      	strb	r3, [r2, #0]
 80060f6:	e774      	b.n	8005fe2 <_dtoa_r+0x962>
 80060f8:	4638      	mov	r0, r7
 80060fa:	e7b9      	b.n	8006070 <_dtoa_r+0x9f0>
 80060fc:	2201      	movs	r2, #1
 80060fe:	e7e2      	b.n	80060c6 <_dtoa_r+0xa46>
 8006100:	f1b9 0f00 	cmp.w	r9, #0
 8006104:	db06      	blt.n	8006114 <_dtoa_r+0xa94>
 8006106:	9905      	ldr	r1, [sp, #20]
 8006108:	ea41 0909 	orr.w	r9, r1, r9
 800610c:	9906      	ldr	r1, [sp, #24]
 800610e:	ea59 0101 	orrs.w	r1, r9, r1
 8006112:	d120      	bne.n	8006156 <_dtoa_r+0xad6>
 8006114:	2a00      	cmp	r2, #0
 8006116:	ddec      	ble.n	80060f2 <_dtoa_r+0xa72>
 8006118:	4659      	mov	r1, fp
 800611a:	2201      	movs	r2, #1
 800611c:	4620      	mov	r0, r4
 800611e:	9301      	str	r3, [sp, #4]
 8006120:	f000 fac6 	bl	80066b0 <__lshift>
 8006124:	4631      	mov	r1, r6
 8006126:	4683      	mov	fp, r0
 8006128:	f000 fb2e 	bl	8006788 <__mcmp>
 800612c:	2800      	cmp	r0, #0
 800612e:	9b01      	ldr	r3, [sp, #4]
 8006130:	dc02      	bgt.n	8006138 <_dtoa_r+0xab8>
 8006132:	d1de      	bne.n	80060f2 <_dtoa_r+0xa72>
 8006134:	07da      	lsls	r2, r3, #31
 8006136:	d5dc      	bpl.n	80060f2 <_dtoa_r+0xa72>
 8006138:	2b39      	cmp	r3, #57	; 0x39
 800613a:	d1d8      	bne.n	80060ee <_dtoa_r+0xa6e>
 800613c:	9a02      	ldr	r2, [sp, #8]
 800613e:	2339      	movs	r3, #57	; 0x39
 8006140:	7013      	strb	r3, [r2, #0]
 8006142:	462b      	mov	r3, r5
 8006144:	461d      	mov	r5, r3
 8006146:	3b01      	subs	r3, #1
 8006148:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800614c:	2a39      	cmp	r2, #57	; 0x39
 800614e:	d050      	beq.n	80061f2 <_dtoa_r+0xb72>
 8006150:	3201      	adds	r2, #1
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	e745      	b.n	8005fe2 <_dtoa_r+0x962>
 8006156:	2a00      	cmp	r2, #0
 8006158:	dd03      	ble.n	8006162 <_dtoa_r+0xae2>
 800615a:	2b39      	cmp	r3, #57	; 0x39
 800615c:	d0ee      	beq.n	800613c <_dtoa_r+0xabc>
 800615e:	3301      	adds	r3, #1
 8006160:	e7c7      	b.n	80060f2 <_dtoa_r+0xa72>
 8006162:	9a01      	ldr	r2, [sp, #4]
 8006164:	9907      	ldr	r1, [sp, #28]
 8006166:	f802 3c01 	strb.w	r3, [r2, #-1]
 800616a:	428a      	cmp	r2, r1
 800616c:	d02a      	beq.n	80061c4 <_dtoa_r+0xb44>
 800616e:	4659      	mov	r1, fp
 8006170:	2300      	movs	r3, #0
 8006172:	220a      	movs	r2, #10
 8006174:	4620      	mov	r0, r4
 8006176:	f000 f8eb 	bl	8006350 <__multadd>
 800617a:	45b8      	cmp	r8, r7
 800617c:	4683      	mov	fp, r0
 800617e:	f04f 0300 	mov.w	r3, #0
 8006182:	f04f 020a 	mov.w	r2, #10
 8006186:	4641      	mov	r1, r8
 8006188:	4620      	mov	r0, r4
 800618a:	d107      	bne.n	800619c <_dtoa_r+0xb1c>
 800618c:	f000 f8e0 	bl	8006350 <__multadd>
 8006190:	4680      	mov	r8, r0
 8006192:	4607      	mov	r7, r0
 8006194:	9b01      	ldr	r3, [sp, #4]
 8006196:	3301      	adds	r3, #1
 8006198:	9301      	str	r3, [sp, #4]
 800619a:	e775      	b.n	8006088 <_dtoa_r+0xa08>
 800619c:	f000 f8d8 	bl	8006350 <__multadd>
 80061a0:	4639      	mov	r1, r7
 80061a2:	4680      	mov	r8, r0
 80061a4:	2300      	movs	r3, #0
 80061a6:	220a      	movs	r2, #10
 80061a8:	4620      	mov	r0, r4
 80061aa:	f000 f8d1 	bl	8006350 <__multadd>
 80061ae:	4607      	mov	r7, r0
 80061b0:	e7f0      	b.n	8006194 <_dtoa_r+0xb14>
 80061b2:	f1b9 0f00 	cmp.w	r9, #0
 80061b6:	9a00      	ldr	r2, [sp, #0]
 80061b8:	bfcc      	ite	gt
 80061ba:	464d      	movgt	r5, r9
 80061bc:	2501      	movle	r5, #1
 80061be:	4415      	add	r5, r2
 80061c0:	f04f 0800 	mov.w	r8, #0
 80061c4:	4659      	mov	r1, fp
 80061c6:	2201      	movs	r2, #1
 80061c8:	4620      	mov	r0, r4
 80061ca:	9301      	str	r3, [sp, #4]
 80061cc:	f000 fa70 	bl	80066b0 <__lshift>
 80061d0:	4631      	mov	r1, r6
 80061d2:	4683      	mov	fp, r0
 80061d4:	f000 fad8 	bl	8006788 <__mcmp>
 80061d8:	2800      	cmp	r0, #0
 80061da:	dcb2      	bgt.n	8006142 <_dtoa_r+0xac2>
 80061dc:	d102      	bne.n	80061e4 <_dtoa_r+0xb64>
 80061de:	9b01      	ldr	r3, [sp, #4]
 80061e0:	07db      	lsls	r3, r3, #31
 80061e2:	d4ae      	bmi.n	8006142 <_dtoa_r+0xac2>
 80061e4:	462b      	mov	r3, r5
 80061e6:	461d      	mov	r5, r3
 80061e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061ec:	2a30      	cmp	r2, #48	; 0x30
 80061ee:	d0fa      	beq.n	80061e6 <_dtoa_r+0xb66>
 80061f0:	e6f7      	b.n	8005fe2 <_dtoa_r+0x962>
 80061f2:	9a00      	ldr	r2, [sp, #0]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d1a5      	bne.n	8006144 <_dtoa_r+0xac4>
 80061f8:	f10a 0a01 	add.w	sl, sl, #1
 80061fc:	2331      	movs	r3, #49	; 0x31
 80061fe:	e779      	b.n	80060f4 <_dtoa_r+0xa74>
 8006200:	4b13      	ldr	r3, [pc, #76]	; (8006250 <_dtoa_r+0xbd0>)
 8006202:	f7ff baaf 	b.w	8005764 <_dtoa_r+0xe4>
 8006206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006208:	2b00      	cmp	r3, #0
 800620a:	f47f aa86 	bne.w	800571a <_dtoa_r+0x9a>
 800620e:	4b11      	ldr	r3, [pc, #68]	; (8006254 <_dtoa_r+0xbd4>)
 8006210:	f7ff baa8 	b.w	8005764 <_dtoa_r+0xe4>
 8006214:	f1b9 0f00 	cmp.w	r9, #0
 8006218:	dc03      	bgt.n	8006222 <_dtoa_r+0xba2>
 800621a:	9b05      	ldr	r3, [sp, #20]
 800621c:	2b02      	cmp	r3, #2
 800621e:	f73f aec9 	bgt.w	8005fb4 <_dtoa_r+0x934>
 8006222:	9d00      	ldr	r5, [sp, #0]
 8006224:	4631      	mov	r1, r6
 8006226:	4658      	mov	r0, fp
 8006228:	f7ff f99c 	bl	8005564 <quorem>
 800622c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006230:	f805 3b01 	strb.w	r3, [r5], #1
 8006234:	9a00      	ldr	r2, [sp, #0]
 8006236:	1aaa      	subs	r2, r5, r2
 8006238:	4591      	cmp	r9, r2
 800623a:	ddba      	ble.n	80061b2 <_dtoa_r+0xb32>
 800623c:	4659      	mov	r1, fp
 800623e:	2300      	movs	r3, #0
 8006240:	220a      	movs	r2, #10
 8006242:	4620      	mov	r0, r4
 8006244:	f000 f884 	bl	8006350 <__multadd>
 8006248:	4683      	mov	fp, r0
 800624a:	e7eb      	b.n	8006224 <_dtoa_r+0xba4>
 800624c:	08007a9b 	.word	0x08007a9b
 8006250:	080079f4 	.word	0x080079f4
 8006254:	08007a18 	.word	0x08007a18

08006258 <_localeconv_r>:
 8006258:	4800      	ldr	r0, [pc, #0]	; (800625c <_localeconv_r+0x4>)
 800625a:	4770      	bx	lr
 800625c:	20000188 	.word	0x20000188

08006260 <malloc>:
 8006260:	4b02      	ldr	r3, [pc, #8]	; (800626c <malloc+0xc>)
 8006262:	4601      	mov	r1, r0
 8006264:	6818      	ldr	r0, [r3, #0]
 8006266:	f000 bbef 	b.w	8006a48 <_malloc_r>
 800626a:	bf00      	nop
 800626c:	20000034 	.word	0x20000034

08006270 <memcpy>:
 8006270:	440a      	add	r2, r1
 8006272:	4291      	cmp	r1, r2
 8006274:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006278:	d100      	bne.n	800627c <memcpy+0xc>
 800627a:	4770      	bx	lr
 800627c:	b510      	push	{r4, lr}
 800627e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006286:	4291      	cmp	r1, r2
 8006288:	d1f9      	bne.n	800627e <memcpy+0xe>
 800628a:	bd10      	pop	{r4, pc}

0800628c <_Balloc>:
 800628c:	b570      	push	{r4, r5, r6, lr}
 800628e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006290:	4604      	mov	r4, r0
 8006292:	460d      	mov	r5, r1
 8006294:	b976      	cbnz	r6, 80062b4 <_Balloc+0x28>
 8006296:	2010      	movs	r0, #16
 8006298:	f7ff ffe2 	bl	8006260 <malloc>
 800629c:	4602      	mov	r2, r0
 800629e:	6260      	str	r0, [r4, #36]	; 0x24
 80062a0:	b920      	cbnz	r0, 80062ac <_Balloc+0x20>
 80062a2:	4b18      	ldr	r3, [pc, #96]	; (8006304 <_Balloc+0x78>)
 80062a4:	4818      	ldr	r0, [pc, #96]	; (8006308 <_Balloc+0x7c>)
 80062a6:	2166      	movs	r1, #102	; 0x66
 80062a8:	f000 fd94 	bl	8006dd4 <__assert_func>
 80062ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062b0:	6006      	str	r6, [r0, #0]
 80062b2:	60c6      	str	r6, [r0, #12]
 80062b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80062b6:	68f3      	ldr	r3, [r6, #12]
 80062b8:	b183      	cbz	r3, 80062dc <_Balloc+0x50>
 80062ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80062c2:	b9b8      	cbnz	r0, 80062f4 <_Balloc+0x68>
 80062c4:	2101      	movs	r1, #1
 80062c6:	fa01 f605 	lsl.w	r6, r1, r5
 80062ca:	1d72      	adds	r2, r6, #5
 80062cc:	0092      	lsls	r2, r2, #2
 80062ce:	4620      	mov	r0, r4
 80062d0:	f000 fb5a 	bl	8006988 <_calloc_r>
 80062d4:	b160      	cbz	r0, 80062f0 <_Balloc+0x64>
 80062d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80062da:	e00e      	b.n	80062fa <_Balloc+0x6e>
 80062dc:	2221      	movs	r2, #33	; 0x21
 80062de:	2104      	movs	r1, #4
 80062e0:	4620      	mov	r0, r4
 80062e2:	f000 fb51 	bl	8006988 <_calloc_r>
 80062e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062e8:	60f0      	str	r0, [r6, #12]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1e4      	bne.n	80062ba <_Balloc+0x2e>
 80062f0:	2000      	movs	r0, #0
 80062f2:	bd70      	pop	{r4, r5, r6, pc}
 80062f4:	6802      	ldr	r2, [r0, #0]
 80062f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062fa:	2300      	movs	r3, #0
 80062fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006300:	e7f7      	b.n	80062f2 <_Balloc+0x66>
 8006302:	bf00      	nop
 8006304:	08007a25 	.word	0x08007a25
 8006308:	08007aac 	.word	0x08007aac

0800630c <_Bfree>:
 800630c:	b570      	push	{r4, r5, r6, lr}
 800630e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006310:	4605      	mov	r5, r0
 8006312:	460c      	mov	r4, r1
 8006314:	b976      	cbnz	r6, 8006334 <_Bfree+0x28>
 8006316:	2010      	movs	r0, #16
 8006318:	f7ff ffa2 	bl	8006260 <malloc>
 800631c:	4602      	mov	r2, r0
 800631e:	6268      	str	r0, [r5, #36]	; 0x24
 8006320:	b920      	cbnz	r0, 800632c <_Bfree+0x20>
 8006322:	4b09      	ldr	r3, [pc, #36]	; (8006348 <_Bfree+0x3c>)
 8006324:	4809      	ldr	r0, [pc, #36]	; (800634c <_Bfree+0x40>)
 8006326:	218a      	movs	r1, #138	; 0x8a
 8006328:	f000 fd54 	bl	8006dd4 <__assert_func>
 800632c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006330:	6006      	str	r6, [r0, #0]
 8006332:	60c6      	str	r6, [r0, #12]
 8006334:	b13c      	cbz	r4, 8006346 <_Bfree+0x3a>
 8006336:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006338:	6862      	ldr	r2, [r4, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006340:	6021      	str	r1, [r4, #0]
 8006342:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006346:	bd70      	pop	{r4, r5, r6, pc}
 8006348:	08007a25 	.word	0x08007a25
 800634c:	08007aac 	.word	0x08007aac

08006350 <__multadd>:
 8006350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006354:	690e      	ldr	r6, [r1, #16]
 8006356:	4607      	mov	r7, r0
 8006358:	4698      	mov	r8, r3
 800635a:	460c      	mov	r4, r1
 800635c:	f101 0014 	add.w	r0, r1, #20
 8006360:	2300      	movs	r3, #0
 8006362:	6805      	ldr	r5, [r0, #0]
 8006364:	b2a9      	uxth	r1, r5
 8006366:	fb02 8101 	mla	r1, r2, r1, r8
 800636a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800636e:	0c2d      	lsrs	r5, r5, #16
 8006370:	fb02 c505 	mla	r5, r2, r5, ip
 8006374:	b289      	uxth	r1, r1
 8006376:	3301      	adds	r3, #1
 8006378:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800637c:	429e      	cmp	r6, r3
 800637e:	f840 1b04 	str.w	r1, [r0], #4
 8006382:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006386:	dcec      	bgt.n	8006362 <__multadd+0x12>
 8006388:	f1b8 0f00 	cmp.w	r8, #0
 800638c:	d022      	beq.n	80063d4 <__multadd+0x84>
 800638e:	68a3      	ldr	r3, [r4, #8]
 8006390:	42b3      	cmp	r3, r6
 8006392:	dc19      	bgt.n	80063c8 <__multadd+0x78>
 8006394:	6861      	ldr	r1, [r4, #4]
 8006396:	4638      	mov	r0, r7
 8006398:	3101      	adds	r1, #1
 800639a:	f7ff ff77 	bl	800628c <_Balloc>
 800639e:	4605      	mov	r5, r0
 80063a0:	b928      	cbnz	r0, 80063ae <__multadd+0x5e>
 80063a2:	4602      	mov	r2, r0
 80063a4:	4b0d      	ldr	r3, [pc, #52]	; (80063dc <__multadd+0x8c>)
 80063a6:	480e      	ldr	r0, [pc, #56]	; (80063e0 <__multadd+0x90>)
 80063a8:	21b5      	movs	r1, #181	; 0xb5
 80063aa:	f000 fd13 	bl	8006dd4 <__assert_func>
 80063ae:	6922      	ldr	r2, [r4, #16]
 80063b0:	3202      	adds	r2, #2
 80063b2:	f104 010c 	add.w	r1, r4, #12
 80063b6:	0092      	lsls	r2, r2, #2
 80063b8:	300c      	adds	r0, #12
 80063ba:	f7ff ff59 	bl	8006270 <memcpy>
 80063be:	4621      	mov	r1, r4
 80063c0:	4638      	mov	r0, r7
 80063c2:	f7ff ffa3 	bl	800630c <_Bfree>
 80063c6:	462c      	mov	r4, r5
 80063c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80063cc:	3601      	adds	r6, #1
 80063ce:	f8c3 8014 	str.w	r8, [r3, #20]
 80063d2:	6126      	str	r6, [r4, #16]
 80063d4:	4620      	mov	r0, r4
 80063d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063da:	bf00      	nop
 80063dc:	08007a9b 	.word	0x08007a9b
 80063e0:	08007aac 	.word	0x08007aac

080063e4 <__hi0bits>:
 80063e4:	0c03      	lsrs	r3, r0, #16
 80063e6:	041b      	lsls	r3, r3, #16
 80063e8:	b9d3      	cbnz	r3, 8006420 <__hi0bits+0x3c>
 80063ea:	0400      	lsls	r0, r0, #16
 80063ec:	2310      	movs	r3, #16
 80063ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80063f2:	bf04      	itt	eq
 80063f4:	0200      	lsleq	r0, r0, #8
 80063f6:	3308      	addeq	r3, #8
 80063f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80063fc:	bf04      	itt	eq
 80063fe:	0100      	lsleq	r0, r0, #4
 8006400:	3304      	addeq	r3, #4
 8006402:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006406:	bf04      	itt	eq
 8006408:	0080      	lsleq	r0, r0, #2
 800640a:	3302      	addeq	r3, #2
 800640c:	2800      	cmp	r0, #0
 800640e:	db05      	blt.n	800641c <__hi0bits+0x38>
 8006410:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006414:	f103 0301 	add.w	r3, r3, #1
 8006418:	bf08      	it	eq
 800641a:	2320      	moveq	r3, #32
 800641c:	4618      	mov	r0, r3
 800641e:	4770      	bx	lr
 8006420:	2300      	movs	r3, #0
 8006422:	e7e4      	b.n	80063ee <__hi0bits+0xa>

08006424 <__lo0bits>:
 8006424:	6803      	ldr	r3, [r0, #0]
 8006426:	f013 0207 	ands.w	r2, r3, #7
 800642a:	4601      	mov	r1, r0
 800642c:	d00b      	beq.n	8006446 <__lo0bits+0x22>
 800642e:	07da      	lsls	r2, r3, #31
 8006430:	d424      	bmi.n	800647c <__lo0bits+0x58>
 8006432:	0798      	lsls	r0, r3, #30
 8006434:	bf49      	itett	mi
 8006436:	085b      	lsrmi	r3, r3, #1
 8006438:	089b      	lsrpl	r3, r3, #2
 800643a:	2001      	movmi	r0, #1
 800643c:	600b      	strmi	r3, [r1, #0]
 800643e:	bf5c      	itt	pl
 8006440:	600b      	strpl	r3, [r1, #0]
 8006442:	2002      	movpl	r0, #2
 8006444:	4770      	bx	lr
 8006446:	b298      	uxth	r0, r3
 8006448:	b9b0      	cbnz	r0, 8006478 <__lo0bits+0x54>
 800644a:	0c1b      	lsrs	r3, r3, #16
 800644c:	2010      	movs	r0, #16
 800644e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006452:	bf04      	itt	eq
 8006454:	0a1b      	lsreq	r3, r3, #8
 8006456:	3008      	addeq	r0, #8
 8006458:	071a      	lsls	r2, r3, #28
 800645a:	bf04      	itt	eq
 800645c:	091b      	lsreq	r3, r3, #4
 800645e:	3004      	addeq	r0, #4
 8006460:	079a      	lsls	r2, r3, #30
 8006462:	bf04      	itt	eq
 8006464:	089b      	lsreq	r3, r3, #2
 8006466:	3002      	addeq	r0, #2
 8006468:	07da      	lsls	r2, r3, #31
 800646a:	d403      	bmi.n	8006474 <__lo0bits+0x50>
 800646c:	085b      	lsrs	r3, r3, #1
 800646e:	f100 0001 	add.w	r0, r0, #1
 8006472:	d005      	beq.n	8006480 <__lo0bits+0x5c>
 8006474:	600b      	str	r3, [r1, #0]
 8006476:	4770      	bx	lr
 8006478:	4610      	mov	r0, r2
 800647a:	e7e8      	b.n	800644e <__lo0bits+0x2a>
 800647c:	2000      	movs	r0, #0
 800647e:	4770      	bx	lr
 8006480:	2020      	movs	r0, #32
 8006482:	4770      	bx	lr

08006484 <__i2b>:
 8006484:	b510      	push	{r4, lr}
 8006486:	460c      	mov	r4, r1
 8006488:	2101      	movs	r1, #1
 800648a:	f7ff feff 	bl	800628c <_Balloc>
 800648e:	4602      	mov	r2, r0
 8006490:	b928      	cbnz	r0, 800649e <__i2b+0x1a>
 8006492:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <__i2b+0x24>)
 8006494:	4805      	ldr	r0, [pc, #20]	; (80064ac <__i2b+0x28>)
 8006496:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800649a:	f000 fc9b 	bl	8006dd4 <__assert_func>
 800649e:	2301      	movs	r3, #1
 80064a0:	6144      	str	r4, [r0, #20]
 80064a2:	6103      	str	r3, [r0, #16]
 80064a4:	bd10      	pop	{r4, pc}
 80064a6:	bf00      	nop
 80064a8:	08007a9b 	.word	0x08007a9b
 80064ac:	08007aac 	.word	0x08007aac

080064b0 <__multiply>:
 80064b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b4:	4614      	mov	r4, r2
 80064b6:	690a      	ldr	r2, [r1, #16]
 80064b8:	6923      	ldr	r3, [r4, #16]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	bfb8      	it	lt
 80064be:	460b      	movlt	r3, r1
 80064c0:	460d      	mov	r5, r1
 80064c2:	bfbc      	itt	lt
 80064c4:	4625      	movlt	r5, r4
 80064c6:	461c      	movlt	r4, r3
 80064c8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80064cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80064d0:	68ab      	ldr	r3, [r5, #8]
 80064d2:	6869      	ldr	r1, [r5, #4]
 80064d4:	eb0a 0709 	add.w	r7, sl, r9
 80064d8:	42bb      	cmp	r3, r7
 80064da:	b085      	sub	sp, #20
 80064dc:	bfb8      	it	lt
 80064de:	3101      	addlt	r1, #1
 80064e0:	f7ff fed4 	bl	800628c <_Balloc>
 80064e4:	b930      	cbnz	r0, 80064f4 <__multiply+0x44>
 80064e6:	4602      	mov	r2, r0
 80064e8:	4b42      	ldr	r3, [pc, #264]	; (80065f4 <__multiply+0x144>)
 80064ea:	4843      	ldr	r0, [pc, #268]	; (80065f8 <__multiply+0x148>)
 80064ec:	f240 115d 	movw	r1, #349	; 0x15d
 80064f0:	f000 fc70 	bl	8006dd4 <__assert_func>
 80064f4:	f100 0614 	add.w	r6, r0, #20
 80064f8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80064fc:	4633      	mov	r3, r6
 80064fe:	2200      	movs	r2, #0
 8006500:	4543      	cmp	r3, r8
 8006502:	d31e      	bcc.n	8006542 <__multiply+0x92>
 8006504:	f105 0c14 	add.w	ip, r5, #20
 8006508:	f104 0314 	add.w	r3, r4, #20
 800650c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006510:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006514:	9202      	str	r2, [sp, #8]
 8006516:	ebac 0205 	sub.w	r2, ip, r5
 800651a:	3a15      	subs	r2, #21
 800651c:	f022 0203 	bic.w	r2, r2, #3
 8006520:	3204      	adds	r2, #4
 8006522:	f105 0115 	add.w	r1, r5, #21
 8006526:	458c      	cmp	ip, r1
 8006528:	bf38      	it	cc
 800652a:	2204      	movcc	r2, #4
 800652c:	9201      	str	r2, [sp, #4]
 800652e:	9a02      	ldr	r2, [sp, #8]
 8006530:	9303      	str	r3, [sp, #12]
 8006532:	429a      	cmp	r2, r3
 8006534:	d808      	bhi.n	8006548 <__multiply+0x98>
 8006536:	2f00      	cmp	r7, #0
 8006538:	dc55      	bgt.n	80065e6 <__multiply+0x136>
 800653a:	6107      	str	r7, [r0, #16]
 800653c:	b005      	add	sp, #20
 800653e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006542:	f843 2b04 	str.w	r2, [r3], #4
 8006546:	e7db      	b.n	8006500 <__multiply+0x50>
 8006548:	f8b3 a000 	ldrh.w	sl, [r3]
 800654c:	f1ba 0f00 	cmp.w	sl, #0
 8006550:	d020      	beq.n	8006594 <__multiply+0xe4>
 8006552:	f105 0e14 	add.w	lr, r5, #20
 8006556:	46b1      	mov	r9, r6
 8006558:	2200      	movs	r2, #0
 800655a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800655e:	f8d9 b000 	ldr.w	fp, [r9]
 8006562:	b2a1      	uxth	r1, r4
 8006564:	fa1f fb8b 	uxth.w	fp, fp
 8006568:	fb0a b101 	mla	r1, sl, r1, fp
 800656c:	4411      	add	r1, r2
 800656e:	f8d9 2000 	ldr.w	r2, [r9]
 8006572:	0c24      	lsrs	r4, r4, #16
 8006574:	0c12      	lsrs	r2, r2, #16
 8006576:	fb0a 2404 	mla	r4, sl, r4, r2
 800657a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800657e:	b289      	uxth	r1, r1
 8006580:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006584:	45f4      	cmp	ip, lr
 8006586:	f849 1b04 	str.w	r1, [r9], #4
 800658a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800658e:	d8e4      	bhi.n	800655a <__multiply+0xaa>
 8006590:	9901      	ldr	r1, [sp, #4]
 8006592:	5072      	str	r2, [r6, r1]
 8006594:	9a03      	ldr	r2, [sp, #12]
 8006596:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800659a:	3304      	adds	r3, #4
 800659c:	f1b9 0f00 	cmp.w	r9, #0
 80065a0:	d01f      	beq.n	80065e2 <__multiply+0x132>
 80065a2:	6834      	ldr	r4, [r6, #0]
 80065a4:	f105 0114 	add.w	r1, r5, #20
 80065a8:	46b6      	mov	lr, r6
 80065aa:	f04f 0a00 	mov.w	sl, #0
 80065ae:	880a      	ldrh	r2, [r1, #0]
 80065b0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80065b4:	fb09 b202 	mla	r2, r9, r2, fp
 80065b8:	4492      	add	sl, r2
 80065ba:	b2a4      	uxth	r4, r4
 80065bc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80065c0:	f84e 4b04 	str.w	r4, [lr], #4
 80065c4:	f851 4b04 	ldr.w	r4, [r1], #4
 80065c8:	f8be 2000 	ldrh.w	r2, [lr]
 80065cc:	0c24      	lsrs	r4, r4, #16
 80065ce:	fb09 2404 	mla	r4, r9, r4, r2
 80065d2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80065d6:	458c      	cmp	ip, r1
 80065d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80065dc:	d8e7      	bhi.n	80065ae <__multiply+0xfe>
 80065de:	9a01      	ldr	r2, [sp, #4]
 80065e0:	50b4      	str	r4, [r6, r2]
 80065e2:	3604      	adds	r6, #4
 80065e4:	e7a3      	b.n	800652e <__multiply+0x7e>
 80065e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1a5      	bne.n	800653a <__multiply+0x8a>
 80065ee:	3f01      	subs	r7, #1
 80065f0:	e7a1      	b.n	8006536 <__multiply+0x86>
 80065f2:	bf00      	nop
 80065f4:	08007a9b 	.word	0x08007a9b
 80065f8:	08007aac 	.word	0x08007aac

080065fc <__pow5mult>:
 80065fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006600:	4615      	mov	r5, r2
 8006602:	f012 0203 	ands.w	r2, r2, #3
 8006606:	4606      	mov	r6, r0
 8006608:	460f      	mov	r7, r1
 800660a:	d007      	beq.n	800661c <__pow5mult+0x20>
 800660c:	4c25      	ldr	r4, [pc, #148]	; (80066a4 <__pow5mult+0xa8>)
 800660e:	3a01      	subs	r2, #1
 8006610:	2300      	movs	r3, #0
 8006612:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006616:	f7ff fe9b 	bl	8006350 <__multadd>
 800661a:	4607      	mov	r7, r0
 800661c:	10ad      	asrs	r5, r5, #2
 800661e:	d03d      	beq.n	800669c <__pow5mult+0xa0>
 8006620:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006622:	b97c      	cbnz	r4, 8006644 <__pow5mult+0x48>
 8006624:	2010      	movs	r0, #16
 8006626:	f7ff fe1b 	bl	8006260 <malloc>
 800662a:	4602      	mov	r2, r0
 800662c:	6270      	str	r0, [r6, #36]	; 0x24
 800662e:	b928      	cbnz	r0, 800663c <__pow5mult+0x40>
 8006630:	4b1d      	ldr	r3, [pc, #116]	; (80066a8 <__pow5mult+0xac>)
 8006632:	481e      	ldr	r0, [pc, #120]	; (80066ac <__pow5mult+0xb0>)
 8006634:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006638:	f000 fbcc 	bl	8006dd4 <__assert_func>
 800663c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006640:	6004      	str	r4, [r0, #0]
 8006642:	60c4      	str	r4, [r0, #12]
 8006644:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006648:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800664c:	b94c      	cbnz	r4, 8006662 <__pow5mult+0x66>
 800664e:	f240 2171 	movw	r1, #625	; 0x271
 8006652:	4630      	mov	r0, r6
 8006654:	f7ff ff16 	bl	8006484 <__i2b>
 8006658:	2300      	movs	r3, #0
 800665a:	f8c8 0008 	str.w	r0, [r8, #8]
 800665e:	4604      	mov	r4, r0
 8006660:	6003      	str	r3, [r0, #0]
 8006662:	f04f 0900 	mov.w	r9, #0
 8006666:	07eb      	lsls	r3, r5, #31
 8006668:	d50a      	bpl.n	8006680 <__pow5mult+0x84>
 800666a:	4639      	mov	r1, r7
 800666c:	4622      	mov	r2, r4
 800666e:	4630      	mov	r0, r6
 8006670:	f7ff ff1e 	bl	80064b0 <__multiply>
 8006674:	4639      	mov	r1, r7
 8006676:	4680      	mov	r8, r0
 8006678:	4630      	mov	r0, r6
 800667a:	f7ff fe47 	bl	800630c <_Bfree>
 800667e:	4647      	mov	r7, r8
 8006680:	106d      	asrs	r5, r5, #1
 8006682:	d00b      	beq.n	800669c <__pow5mult+0xa0>
 8006684:	6820      	ldr	r0, [r4, #0]
 8006686:	b938      	cbnz	r0, 8006698 <__pow5mult+0x9c>
 8006688:	4622      	mov	r2, r4
 800668a:	4621      	mov	r1, r4
 800668c:	4630      	mov	r0, r6
 800668e:	f7ff ff0f 	bl	80064b0 <__multiply>
 8006692:	6020      	str	r0, [r4, #0]
 8006694:	f8c0 9000 	str.w	r9, [r0]
 8006698:	4604      	mov	r4, r0
 800669a:	e7e4      	b.n	8006666 <__pow5mult+0x6a>
 800669c:	4638      	mov	r0, r7
 800669e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066a2:	bf00      	nop
 80066a4:	08007c00 	.word	0x08007c00
 80066a8:	08007a25 	.word	0x08007a25
 80066ac:	08007aac 	.word	0x08007aac

080066b0 <__lshift>:
 80066b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066b4:	460c      	mov	r4, r1
 80066b6:	6849      	ldr	r1, [r1, #4]
 80066b8:	6923      	ldr	r3, [r4, #16]
 80066ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80066be:	68a3      	ldr	r3, [r4, #8]
 80066c0:	4607      	mov	r7, r0
 80066c2:	4691      	mov	r9, r2
 80066c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066c8:	f108 0601 	add.w	r6, r8, #1
 80066cc:	42b3      	cmp	r3, r6
 80066ce:	db0b      	blt.n	80066e8 <__lshift+0x38>
 80066d0:	4638      	mov	r0, r7
 80066d2:	f7ff fddb 	bl	800628c <_Balloc>
 80066d6:	4605      	mov	r5, r0
 80066d8:	b948      	cbnz	r0, 80066ee <__lshift+0x3e>
 80066da:	4602      	mov	r2, r0
 80066dc:	4b28      	ldr	r3, [pc, #160]	; (8006780 <__lshift+0xd0>)
 80066de:	4829      	ldr	r0, [pc, #164]	; (8006784 <__lshift+0xd4>)
 80066e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80066e4:	f000 fb76 	bl	8006dd4 <__assert_func>
 80066e8:	3101      	adds	r1, #1
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	e7ee      	b.n	80066cc <__lshift+0x1c>
 80066ee:	2300      	movs	r3, #0
 80066f0:	f100 0114 	add.w	r1, r0, #20
 80066f4:	f100 0210 	add.w	r2, r0, #16
 80066f8:	4618      	mov	r0, r3
 80066fa:	4553      	cmp	r3, sl
 80066fc:	db33      	blt.n	8006766 <__lshift+0xb6>
 80066fe:	6920      	ldr	r0, [r4, #16]
 8006700:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006704:	f104 0314 	add.w	r3, r4, #20
 8006708:	f019 091f 	ands.w	r9, r9, #31
 800670c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006710:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006714:	d02b      	beq.n	800676e <__lshift+0xbe>
 8006716:	f1c9 0e20 	rsb	lr, r9, #32
 800671a:	468a      	mov	sl, r1
 800671c:	2200      	movs	r2, #0
 800671e:	6818      	ldr	r0, [r3, #0]
 8006720:	fa00 f009 	lsl.w	r0, r0, r9
 8006724:	4302      	orrs	r2, r0
 8006726:	f84a 2b04 	str.w	r2, [sl], #4
 800672a:	f853 2b04 	ldr.w	r2, [r3], #4
 800672e:	459c      	cmp	ip, r3
 8006730:	fa22 f20e 	lsr.w	r2, r2, lr
 8006734:	d8f3      	bhi.n	800671e <__lshift+0x6e>
 8006736:	ebac 0304 	sub.w	r3, ip, r4
 800673a:	3b15      	subs	r3, #21
 800673c:	f023 0303 	bic.w	r3, r3, #3
 8006740:	3304      	adds	r3, #4
 8006742:	f104 0015 	add.w	r0, r4, #21
 8006746:	4584      	cmp	ip, r0
 8006748:	bf38      	it	cc
 800674a:	2304      	movcc	r3, #4
 800674c:	50ca      	str	r2, [r1, r3]
 800674e:	b10a      	cbz	r2, 8006754 <__lshift+0xa4>
 8006750:	f108 0602 	add.w	r6, r8, #2
 8006754:	3e01      	subs	r6, #1
 8006756:	4638      	mov	r0, r7
 8006758:	612e      	str	r6, [r5, #16]
 800675a:	4621      	mov	r1, r4
 800675c:	f7ff fdd6 	bl	800630c <_Bfree>
 8006760:	4628      	mov	r0, r5
 8006762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006766:	f842 0f04 	str.w	r0, [r2, #4]!
 800676a:	3301      	adds	r3, #1
 800676c:	e7c5      	b.n	80066fa <__lshift+0x4a>
 800676e:	3904      	subs	r1, #4
 8006770:	f853 2b04 	ldr.w	r2, [r3], #4
 8006774:	f841 2f04 	str.w	r2, [r1, #4]!
 8006778:	459c      	cmp	ip, r3
 800677a:	d8f9      	bhi.n	8006770 <__lshift+0xc0>
 800677c:	e7ea      	b.n	8006754 <__lshift+0xa4>
 800677e:	bf00      	nop
 8006780:	08007a9b 	.word	0x08007a9b
 8006784:	08007aac 	.word	0x08007aac

08006788 <__mcmp>:
 8006788:	b530      	push	{r4, r5, lr}
 800678a:	6902      	ldr	r2, [r0, #16]
 800678c:	690c      	ldr	r4, [r1, #16]
 800678e:	1b12      	subs	r2, r2, r4
 8006790:	d10e      	bne.n	80067b0 <__mcmp+0x28>
 8006792:	f100 0314 	add.w	r3, r0, #20
 8006796:	3114      	adds	r1, #20
 8006798:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800679c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80067a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80067a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80067a8:	42a5      	cmp	r5, r4
 80067aa:	d003      	beq.n	80067b4 <__mcmp+0x2c>
 80067ac:	d305      	bcc.n	80067ba <__mcmp+0x32>
 80067ae:	2201      	movs	r2, #1
 80067b0:	4610      	mov	r0, r2
 80067b2:	bd30      	pop	{r4, r5, pc}
 80067b4:	4283      	cmp	r3, r0
 80067b6:	d3f3      	bcc.n	80067a0 <__mcmp+0x18>
 80067b8:	e7fa      	b.n	80067b0 <__mcmp+0x28>
 80067ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067be:	e7f7      	b.n	80067b0 <__mcmp+0x28>

080067c0 <__mdiff>:
 80067c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c4:	460c      	mov	r4, r1
 80067c6:	4606      	mov	r6, r0
 80067c8:	4611      	mov	r1, r2
 80067ca:	4620      	mov	r0, r4
 80067cc:	4617      	mov	r7, r2
 80067ce:	f7ff ffdb 	bl	8006788 <__mcmp>
 80067d2:	1e05      	subs	r5, r0, #0
 80067d4:	d110      	bne.n	80067f8 <__mdiff+0x38>
 80067d6:	4629      	mov	r1, r5
 80067d8:	4630      	mov	r0, r6
 80067da:	f7ff fd57 	bl	800628c <_Balloc>
 80067de:	b930      	cbnz	r0, 80067ee <__mdiff+0x2e>
 80067e0:	4b39      	ldr	r3, [pc, #228]	; (80068c8 <__mdiff+0x108>)
 80067e2:	4602      	mov	r2, r0
 80067e4:	f240 2132 	movw	r1, #562	; 0x232
 80067e8:	4838      	ldr	r0, [pc, #224]	; (80068cc <__mdiff+0x10c>)
 80067ea:	f000 faf3 	bl	8006dd4 <__assert_func>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80067f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f8:	bfa4      	itt	ge
 80067fa:	463b      	movge	r3, r7
 80067fc:	4627      	movge	r7, r4
 80067fe:	4630      	mov	r0, r6
 8006800:	6879      	ldr	r1, [r7, #4]
 8006802:	bfa6      	itte	ge
 8006804:	461c      	movge	r4, r3
 8006806:	2500      	movge	r5, #0
 8006808:	2501      	movlt	r5, #1
 800680a:	f7ff fd3f 	bl	800628c <_Balloc>
 800680e:	b920      	cbnz	r0, 800681a <__mdiff+0x5a>
 8006810:	4b2d      	ldr	r3, [pc, #180]	; (80068c8 <__mdiff+0x108>)
 8006812:	4602      	mov	r2, r0
 8006814:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006818:	e7e6      	b.n	80067e8 <__mdiff+0x28>
 800681a:	693e      	ldr	r6, [r7, #16]
 800681c:	60c5      	str	r5, [r0, #12]
 800681e:	6925      	ldr	r5, [r4, #16]
 8006820:	f107 0114 	add.w	r1, r7, #20
 8006824:	f104 0914 	add.w	r9, r4, #20
 8006828:	f100 0e14 	add.w	lr, r0, #20
 800682c:	f107 0210 	add.w	r2, r7, #16
 8006830:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006834:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006838:	46f2      	mov	sl, lr
 800683a:	2700      	movs	r7, #0
 800683c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006840:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006844:	fa1f f883 	uxth.w	r8, r3
 8006848:	fa17 f78b 	uxtah	r7, r7, fp
 800684c:	0c1b      	lsrs	r3, r3, #16
 800684e:	eba7 0808 	sub.w	r8, r7, r8
 8006852:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006856:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800685a:	fa1f f888 	uxth.w	r8, r8
 800685e:	141f      	asrs	r7, r3, #16
 8006860:	454d      	cmp	r5, r9
 8006862:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006866:	f84a 3b04 	str.w	r3, [sl], #4
 800686a:	d8e7      	bhi.n	800683c <__mdiff+0x7c>
 800686c:	1b2b      	subs	r3, r5, r4
 800686e:	3b15      	subs	r3, #21
 8006870:	f023 0303 	bic.w	r3, r3, #3
 8006874:	3304      	adds	r3, #4
 8006876:	3415      	adds	r4, #21
 8006878:	42a5      	cmp	r5, r4
 800687a:	bf38      	it	cc
 800687c:	2304      	movcc	r3, #4
 800687e:	4419      	add	r1, r3
 8006880:	4473      	add	r3, lr
 8006882:	469e      	mov	lr, r3
 8006884:	460d      	mov	r5, r1
 8006886:	4565      	cmp	r5, ip
 8006888:	d30e      	bcc.n	80068a8 <__mdiff+0xe8>
 800688a:	f10c 0203 	add.w	r2, ip, #3
 800688e:	1a52      	subs	r2, r2, r1
 8006890:	f022 0203 	bic.w	r2, r2, #3
 8006894:	3903      	subs	r1, #3
 8006896:	458c      	cmp	ip, r1
 8006898:	bf38      	it	cc
 800689a:	2200      	movcc	r2, #0
 800689c:	441a      	add	r2, r3
 800689e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80068a2:	b17b      	cbz	r3, 80068c4 <__mdiff+0x104>
 80068a4:	6106      	str	r6, [r0, #16]
 80068a6:	e7a5      	b.n	80067f4 <__mdiff+0x34>
 80068a8:	f855 8b04 	ldr.w	r8, [r5], #4
 80068ac:	fa17 f488 	uxtah	r4, r7, r8
 80068b0:	1422      	asrs	r2, r4, #16
 80068b2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80068b6:	b2a4      	uxth	r4, r4
 80068b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80068bc:	f84e 4b04 	str.w	r4, [lr], #4
 80068c0:	1417      	asrs	r7, r2, #16
 80068c2:	e7e0      	b.n	8006886 <__mdiff+0xc6>
 80068c4:	3e01      	subs	r6, #1
 80068c6:	e7ea      	b.n	800689e <__mdiff+0xde>
 80068c8:	08007a9b 	.word	0x08007a9b
 80068cc:	08007aac 	.word	0x08007aac

080068d0 <__d2b>:
 80068d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068d4:	4689      	mov	r9, r1
 80068d6:	2101      	movs	r1, #1
 80068d8:	ec57 6b10 	vmov	r6, r7, d0
 80068dc:	4690      	mov	r8, r2
 80068de:	f7ff fcd5 	bl	800628c <_Balloc>
 80068e2:	4604      	mov	r4, r0
 80068e4:	b930      	cbnz	r0, 80068f4 <__d2b+0x24>
 80068e6:	4602      	mov	r2, r0
 80068e8:	4b25      	ldr	r3, [pc, #148]	; (8006980 <__d2b+0xb0>)
 80068ea:	4826      	ldr	r0, [pc, #152]	; (8006984 <__d2b+0xb4>)
 80068ec:	f240 310a 	movw	r1, #778	; 0x30a
 80068f0:	f000 fa70 	bl	8006dd4 <__assert_func>
 80068f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80068f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80068fc:	bb35      	cbnz	r5, 800694c <__d2b+0x7c>
 80068fe:	2e00      	cmp	r6, #0
 8006900:	9301      	str	r3, [sp, #4]
 8006902:	d028      	beq.n	8006956 <__d2b+0x86>
 8006904:	4668      	mov	r0, sp
 8006906:	9600      	str	r6, [sp, #0]
 8006908:	f7ff fd8c 	bl	8006424 <__lo0bits>
 800690c:	9900      	ldr	r1, [sp, #0]
 800690e:	b300      	cbz	r0, 8006952 <__d2b+0x82>
 8006910:	9a01      	ldr	r2, [sp, #4]
 8006912:	f1c0 0320 	rsb	r3, r0, #32
 8006916:	fa02 f303 	lsl.w	r3, r2, r3
 800691a:	430b      	orrs	r3, r1
 800691c:	40c2      	lsrs	r2, r0
 800691e:	6163      	str	r3, [r4, #20]
 8006920:	9201      	str	r2, [sp, #4]
 8006922:	9b01      	ldr	r3, [sp, #4]
 8006924:	61a3      	str	r3, [r4, #24]
 8006926:	2b00      	cmp	r3, #0
 8006928:	bf14      	ite	ne
 800692a:	2202      	movne	r2, #2
 800692c:	2201      	moveq	r2, #1
 800692e:	6122      	str	r2, [r4, #16]
 8006930:	b1d5      	cbz	r5, 8006968 <__d2b+0x98>
 8006932:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006936:	4405      	add	r5, r0
 8006938:	f8c9 5000 	str.w	r5, [r9]
 800693c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006940:	f8c8 0000 	str.w	r0, [r8]
 8006944:	4620      	mov	r0, r4
 8006946:	b003      	add	sp, #12
 8006948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800694c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006950:	e7d5      	b.n	80068fe <__d2b+0x2e>
 8006952:	6161      	str	r1, [r4, #20]
 8006954:	e7e5      	b.n	8006922 <__d2b+0x52>
 8006956:	a801      	add	r0, sp, #4
 8006958:	f7ff fd64 	bl	8006424 <__lo0bits>
 800695c:	9b01      	ldr	r3, [sp, #4]
 800695e:	6163      	str	r3, [r4, #20]
 8006960:	2201      	movs	r2, #1
 8006962:	6122      	str	r2, [r4, #16]
 8006964:	3020      	adds	r0, #32
 8006966:	e7e3      	b.n	8006930 <__d2b+0x60>
 8006968:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800696c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006970:	f8c9 0000 	str.w	r0, [r9]
 8006974:	6918      	ldr	r0, [r3, #16]
 8006976:	f7ff fd35 	bl	80063e4 <__hi0bits>
 800697a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800697e:	e7df      	b.n	8006940 <__d2b+0x70>
 8006980:	08007a9b 	.word	0x08007a9b
 8006984:	08007aac 	.word	0x08007aac

08006988 <_calloc_r>:
 8006988:	b513      	push	{r0, r1, r4, lr}
 800698a:	434a      	muls	r2, r1
 800698c:	4611      	mov	r1, r2
 800698e:	9201      	str	r2, [sp, #4]
 8006990:	f000 f85a 	bl	8006a48 <_malloc_r>
 8006994:	4604      	mov	r4, r0
 8006996:	b118      	cbz	r0, 80069a0 <_calloc_r+0x18>
 8006998:	9a01      	ldr	r2, [sp, #4]
 800699a:	2100      	movs	r1, #0
 800699c:	f7fe f93c 	bl	8004c18 <memset>
 80069a0:	4620      	mov	r0, r4
 80069a2:	b002      	add	sp, #8
 80069a4:	bd10      	pop	{r4, pc}
	...

080069a8 <_free_r>:
 80069a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069aa:	2900      	cmp	r1, #0
 80069ac:	d048      	beq.n	8006a40 <_free_r+0x98>
 80069ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069b2:	9001      	str	r0, [sp, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f1a1 0404 	sub.w	r4, r1, #4
 80069ba:	bfb8      	it	lt
 80069bc:	18e4      	addlt	r4, r4, r3
 80069be:	f000 fa65 	bl	8006e8c <__malloc_lock>
 80069c2:	4a20      	ldr	r2, [pc, #128]	; (8006a44 <_free_r+0x9c>)
 80069c4:	9801      	ldr	r0, [sp, #4]
 80069c6:	6813      	ldr	r3, [r2, #0]
 80069c8:	4615      	mov	r5, r2
 80069ca:	b933      	cbnz	r3, 80069da <_free_r+0x32>
 80069cc:	6063      	str	r3, [r4, #4]
 80069ce:	6014      	str	r4, [r2, #0]
 80069d0:	b003      	add	sp, #12
 80069d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069d6:	f000 ba5f 	b.w	8006e98 <__malloc_unlock>
 80069da:	42a3      	cmp	r3, r4
 80069dc:	d90b      	bls.n	80069f6 <_free_r+0x4e>
 80069de:	6821      	ldr	r1, [r4, #0]
 80069e0:	1862      	adds	r2, r4, r1
 80069e2:	4293      	cmp	r3, r2
 80069e4:	bf04      	itt	eq
 80069e6:	681a      	ldreq	r2, [r3, #0]
 80069e8:	685b      	ldreq	r3, [r3, #4]
 80069ea:	6063      	str	r3, [r4, #4]
 80069ec:	bf04      	itt	eq
 80069ee:	1852      	addeq	r2, r2, r1
 80069f0:	6022      	streq	r2, [r4, #0]
 80069f2:	602c      	str	r4, [r5, #0]
 80069f4:	e7ec      	b.n	80069d0 <_free_r+0x28>
 80069f6:	461a      	mov	r2, r3
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	b10b      	cbz	r3, 8006a00 <_free_r+0x58>
 80069fc:	42a3      	cmp	r3, r4
 80069fe:	d9fa      	bls.n	80069f6 <_free_r+0x4e>
 8006a00:	6811      	ldr	r1, [r2, #0]
 8006a02:	1855      	adds	r5, r2, r1
 8006a04:	42a5      	cmp	r5, r4
 8006a06:	d10b      	bne.n	8006a20 <_free_r+0x78>
 8006a08:	6824      	ldr	r4, [r4, #0]
 8006a0a:	4421      	add	r1, r4
 8006a0c:	1854      	adds	r4, r2, r1
 8006a0e:	42a3      	cmp	r3, r4
 8006a10:	6011      	str	r1, [r2, #0]
 8006a12:	d1dd      	bne.n	80069d0 <_free_r+0x28>
 8006a14:	681c      	ldr	r4, [r3, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	6053      	str	r3, [r2, #4]
 8006a1a:	4421      	add	r1, r4
 8006a1c:	6011      	str	r1, [r2, #0]
 8006a1e:	e7d7      	b.n	80069d0 <_free_r+0x28>
 8006a20:	d902      	bls.n	8006a28 <_free_r+0x80>
 8006a22:	230c      	movs	r3, #12
 8006a24:	6003      	str	r3, [r0, #0]
 8006a26:	e7d3      	b.n	80069d0 <_free_r+0x28>
 8006a28:	6825      	ldr	r5, [r4, #0]
 8006a2a:	1961      	adds	r1, r4, r5
 8006a2c:	428b      	cmp	r3, r1
 8006a2e:	bf04      	itt	eq
 8006a30:	6819      	ldreq	r1, [r3, #0]
 8006a32:	685b      	ldreq	r3, [r3, #4]
 8006a34:	6063      	str	r3, [r4, #4]
 8006a36:	bf04      	itt	eq
 8006a38:	1949      	addeq	r1, r1, r5
 8006a3a:	6021      	streq	r1, [r4, #0]
 8006a3c:	6054      	str	r4, [r2, #4]
 8006a3e:	e7c7      	b.n	80069d0 <_free_r+0x28>
 8006a40:	b003      	add	sp, #12
 8006a42:	bd30      	pop	{r4, r5, pc}
 8006a44:	20000228 	.word	0x20000228

08006a48 <_malloc_r>:
 8006a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4a:	1ccd      	adds	r5, r1, #3
 8006a4c:	f025 0503 	bic.w	r5, r5, #3
 8006a50:	3508      	adds	r5, #8
 8006a52:	2d0c      	cmp	r5, #12
 8006a54:	bf38      	it	cc
 8006a56:	250c      	movcc	r5, #12
 8006a58:	2d00      	cmp	r5, #0
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	db01      	blt.n	8006a62 <_malloc_r+0x1a>
 8006a5e:	42a9      	cmp	r1, r5
 8006a60:	d903      	bls.n	8006a6a <_malloc_r+0x22>
 8006a62:	230c      	movs	r3, #12
 8006a64:	6033      	str	r3, [r6, #0]
 8006a66:	2000      	movs	r0, #0
 8006a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a6a:	f000 fa0f 	bl	8006e8c <__malloc_lock>
 8006a6e:	4921      	ldr	r1, [pc, #132]	; (8006af4 <_malloc_r+0xac>)
 8006a70:	680a      	ldr	r2, [r1, #0]
 8006a72:	4614      	mov	r4, r2
 8006a74:	b99c      	cbnz	r4, 8006a9e <_malloc_r+0x56>
 8006a76:	4f20      	ldr	r7, [pc, #128]	; (8006af8 <_malloc_r+0xb0>)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	b923      	cbnz	r3, 8006a86 <_malloc_r+0x3e>
 8006a7c:	4621      	mov	r1, r4
 8006a7e:	4630      	mov	r0, r6
 8006a80:	f000 f998 	bl	8006db4 <_sbrk_r>
 8006a84:	6038      	str	r0, [r7, #0]
 8006a86:	4629      	mov	r1, r5
 8006a88:	4630      	mov	r0, r6
 8006a8a:	f000 f993 	bl	8006db4 <_sbrk_r>
 8006a8e:	1c43      	adds	r3, r0, #1
 8006a90:	d123      	bne.n	8006ada <_malloc_r+0x92>
 8006a92:	230c      	movs	r3, #12
 8006a94:	6033      	str	r3, [r6, #0]
 8006a96:	4630      	mov	r0, r6
 8006a98:	f000 f9fe 	bl	8006e98 <__malloc_unlock>
 8006a9c:	e7e3      	b.n	8006a66 <_malloc_r+0x1e>
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	1b5b      	subs	r3, r3, r5
 8006aa2:	d417      	bmi.n	8006ad4 <_malloc_r+0x8c>
 8006aa4:	2b0b      	cmp	r3, #11
 8006aa6:	d903      	bls.n	8006ab0 <_malloc_r+0x68>
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	441c      	add	r4, r3
 8006aac:	6025      	str	r5, [r4, #0]
 8006aae:	e004      	b.n	8006aba <_malloc_r+0x72>
 8006ab0:	6863      	ldr	r3, [r4, #4]
 8006ab2:	42a2      	cmp	r2, r4
 8006ab4:	bf0c      	ite	eq
 8006ab6:	600b      	streq	r3, [r1, #0]
 8006ab8:	6053      	strne	r3, [r2, #4]
 8006aba:	4630      	mov	r0, r6
 8006abc:	f000 f9ec 	bl	8006e98 <__malloc_unlock>
 8006ac0:	f104 000b 	add.w	r0, r4, #11
 8006ac4:	1d23      	adds	r3, r4, #4
 8006ac6:	f020 0007 	bic.w	r0, r0, #7
 8006aca:	1ac2      	subs	r2, r0, r3
 8006acc:	d0cc      	beq.n	8006a68 <_malloc_r+0x20>
 8006ace:	1a1b      	subs	r3, r3, r0
 8006ad0:	50a3      	str	r3, [r4, r2]
 8006ad2:	e7c9      	b.n	8006a68 <_malloc_r+0x20>
 8006ad4:	4622      	mov	r2, r4
 8006ad6:	6864      	ldr	r4, [r4, #4]
 8006ad8:	e7cc      	b.n	8006a74 <_malloc_r+0x2c>
 8006ada:	1cc4      	adds	r4, r0, #3
 8006adc:	f024 0403 	bic.w	r4, r4, #3
 8006ae0:	42a0      	cmp	r0, r4
 8006ae2:	d0e3      	beq.n	8006aac <_malloc_r+0x64>
 8006ae4:	1a21      	subs	r1, r4, r0
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f000 f964 	bl	8006db4 <_sbrk_r>
 8006aec:	3001      	adds	r0, #1
 8006aee:	d1dd      	bne.n	8006aac <_malloc_r+0x64>
 8006af0:	e7cf      	b.n	8006a92 <_malloc_r+0x4a>
 8006af2:	bf00      	nop
 8006af4:	20000228 	.word	0x20000228
 8006af8:	2000022c 	.word	0x2000022c

08006afc <__ssputs_r>:
 8006afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b00:	688e      	ldr	r6, [r1, #8]
 8006b02:	429e      	cmp	r6, r3
 8006b04:	4682      	mov	sl, r0
 8006b06:	460c      	mov	r4, r1
 8006b08:	4690      	mov	r8, r2
 8006b0a:	461f      	mov	r7, r3
 8006b0c:	d838      	bhi.n	8006b80 <__ssputs_r+0x84>
 8006b0e:	898a      	ldrh	r2, [r1, #12]
 8006b10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b14:	d032      	beq.n	8006b7c <__ssputs_r+0x80>
 8006b16:	6825      	ldr	r5, [r4, #0]
 8006b18:	6909      	ldr	r1, [r1, #16]
 8006b1a:	eba5 0901 	sub.w	r9, r5, r1
 8006b1e:	6965      	ldr	r5, [r4, #20]
 8006b20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b28:	3301      	adds	r3, #1
 8006b2a:	444b      	add	r3, r9
 8006b2c:	106d      	asrs	r5, r5, #1
 8006b2e:	429d      	cmp	r5, r3
 8006b30:	bf38      	it	cc
 8006b32:	461d      	movcc	r5, r3
 8006b34:	0553      	lsls	r3, r2, #21
 8006b36:	d531      	bpl.n	8006b9c <__ssputs_r+0xa0>
 8006b38:	4629      	mov	r1, r5
 8006b3a:	f7ff ff85 	bl	8006a48 <_malloc_r>
 8006b3e:	4606      	mov	r6, r0
 8006b40:	b950      	cbnz	r0, 8006b58 <__ssputs_r+0x5c>
 8006b42:	230c      	movs	r3, #12
 8006b44:	f8ca 3000 	str.w	r3, [sl]
 8006b48:	89a3      	ldrh	r3, [r4, #12]
 8006b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b4e:	81a3      	strh	r3, [r4, #12]
 8006b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b58:	6921      	ldr	r1, [r4, #16]
 8006b5a:	464a      	mov	r2, r9
 8006b5c:	f7ff fb88 	bl	8006270 <memcpy>
 8006b60:	89a3      	ldrh	r3, [r4, #12]
 8006b62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b6a:	81a3      	strh	r3, [r4, #12]
 8006b6c:	6126      	str	r6, [r4, #16]
 8006b6e:	6165      	str	r5, [r4, #20]
 8006b70:	444e      	add	r6, r9
 8006b72:	eba5 0509 	sub.w	r5, r5, r9
 8006b76:	6026      	str	r6, [r4, #0]
 8006b78:	60a5      	str	r5, [r4, #8]
 8006b7a:	463e      	mov	r6, r7
 8006b7c:	42be      	cmp	r6, r7
 8006b7e:	d900      	bls.n	8006b82 <__ssputs_r+0x86>
 8006b80:	463e      	mov	r6, r7
 8006b82:	4632      	mov	r2, r6
 8006b84:	6820      	ldr	r0, [r4, #0]
 8006b86:	4641      	mov	r1, r8
 8006b88:	f000 f966 	bl	8006e58 <memmove>
 8006b8c:	68a3      	ldr	r3, [r4, #8]
 8006b8e:	6822      	ldr	r2, [r4, #0]
 8006b90:	1b9b      	subs	r3, r3, r6
 8006b92:	4432      	add	r2, r6
 8006b94:	60a3      	str	r3, [r4, #8]
 8006b96:	6022      	str	r2, [r4, #0]
 8006b98:	2000      	movs	r0, #0
 8006b9a:	e7db      	b.n	8006b54 <__ssputs_r+0x58>
 8006b9c:	462a      	mov	r2, r5
 8006b9e:	f000 f981 	bl	8006ea4 <_realloc_r>
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d1e1      	bne.n	8006b6c <__ssputs_r+0x70>
 8006ba8:	6921      	ldr	r1, [r4, #16]
 8006baa:	4650      	mov	r0, sl
 8006bac:	f7ff fefc 	bl	80069a8 <_free_r>
 8006bb0:	e7c7      	b.n	8006b42 <__ssputs_r+0x46>
	...

08006bb4 <_svfiprintf_r>:
 8006bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb8:	4698      	mov	r8, r3
 8006bba:	898b      	ldrh	r3, [r1, #12]
 8006bbc:	061b      	lsls	r3, r3, #24
 8006bbe:	b09d      	sub	sp, #116	; 0x74
 8006bc0:	4607      	mov	r7, r0
 8006bc2:	460d      	mov	r5, r1
 8006bc4:	4614      	mov	r4, r2
 8006bc6:	d50e      	bpl.n	8006be6 <_svfiprintf_r+0x32>
 8006bc8:	690b      	ldr	r3, [r1, #16]
 8006bca:	b963      	cbnz	r3, 8006be6 <_svfiprintf_r+0x32>
 8006bcc:	2140      	movs	r1, #64	; 0x40
 8006bce:	f7ff ff3b 	bl	8006a48 <_malloc_r>
 8006bd2:	6028      	str	r0, [r5, #0]
 8006bd4:	6128      	str	r0, [r5, #16]
 8006bd6:	b920      	cbnz	r0, 8006be2 <_svfiprintf_r+0x2e>
 8006bd8:	230c      	movs	r3, #12
 8006bda:	603b      	str	r3, [r7, #0]
 8006bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006be0:	e0d1      	b.n	8006d86 <_svfiprintf_r+0x1d2>
 8006be2:	2340      	movs	r3, #64	; 0x40
 8006be4:	616b      	str	r3, [r5, #20]
 8006be6:	2300      	movs	r3, #0
 8006be8:	9309      	str	r3, [sp, #36]	; 0x24
 8006bea:	2320      	movs	r3, #32
 8006bec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bf4:	2330      	movs	r3, #48	; 0x30
 8006bf6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006da0 <_svfiprintf_r+0x1ec>
 8006bfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bfe:	f04f 0901 	mov.w	r9, #1
 8006c02:	4623      	mov	r3, r4
 8006c04:	469a      	mov	sl, r3
 8006c06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c0a:	b10a      	cbz	r2, 8006c10 <_svfiprintf_r+0x5c>
 8006c0c:	2a25      	cmp	r2, #37	; 0x25
 8006c0e:	d1f9      	bne.n	8006c04 <_svfiprintf_r+0x50>
 8006c10:	ebba 0b04 	subs.w	fp, sl, r4
 8006c14:	d00b      	beq.n	8006c2e <_svfiprintf_r+0x7a>
 8006c16:	465b      	mov	r3, fp
 8006c18:	4622      	mov	r2, r4
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	4638      	mov	r0, r7
 8006c1e:	f7ff ff6d 	bl	8006afc <__ssputs_r>
 8006c22:	3001      	adds	r0, #1
 8006c24:	f000 80aa 	beq.w	8006d7c <_svfiprintf_r+0x1c8>
 8006c28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c2a:	445a      	add	r2, fp
 8006c2c:	9209      	str	r2, [sp, #36]	; 0x24
 8006c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 80a2 	beq.w	8006d7c <_svfiprintf_r+0x1c8>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c42:	f10a 0a01 	add.w	sl, sl, #1
 8006c46:	9304      	str	r3, [sp, #16]
 8006c48:	9307      	str	r3, [sp, #28]
 8006c4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c4e:	931a      	str	r3, [sp, #104]	; 0x68
 8006c50:	4654      	mov	r4, sl
 8006c52:	2205      	movs	r2, #5
 8006c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c58:	4851      	ldr	r0, [pc, #324]	; (8006da0 <_svfiprintf_r+0x1ec>)
 8006c5a:	f7f9 fac9 	bl	80001f0 <memchr>
 8006c5e:	9a04      	ldr	r2, [sp, #16]
 8006c60:	b9d8      	cbnz	r0, 8006c9a <_svfiprintf_r+0xe6>
 8006c62:	06d0      	lsls	r0, r2, #27
 8006c64:	bf44      	itt	mi
 8006c66:	2320      	movmi	r3, #32
 8006c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c6c:	0711      	lsls	r1, r2, #28
 8006c6e:	bf44      	itt	mi
 8006c70:	232b      	movmi	r3, #43	; 0x2b
 8006c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c76:	f89a 3000 	ldrb.w	r3, [sl]
 8006c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c7c:	d015      	beq.n	8006caa <_svfiprintf_r+0xf6>
 8006c7e:	9a07      	ldr	r2, [sp, #28]
 8006c80:	4654      	mov	r4, sl
 8006c82:	2000      	movs	r0, #0
 8006c84:	f04f 0c0a 	mov.w	ip, #10
 8006c88:	4621      	mov	r1, r4
 8006c8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c8e:	3b30      	subs	r3, #48	; 0x30
 8006c90:	2b09      	cmp	r3, #9
 8006c92:	d94e      	bls.n	8006d32 <_svfiprintf_r+0x17e>
 8006c94:	b1b0      	cbz	r0, 8006cc4 <_svfiprintf_r+0x110>
 8006c96:	9207      	str	r2, [sp, #28]
 8006c98:	e014      	b.n	8006cc4 <_svfiprintf_r+0x110>
 8006c9a:	eba0 0308 	sub.w	r3, r0, r8
 8006c9e:	fa09 f303 	lsl.w	r3, r9, r3
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	9304      	str	r3, [sp, #16]
 8006ca6:	46a2      	mov	sl, r4
 8006ca8:	e7d2      	b.n	8006c50 <_svfiprintf_r+0x9c>
 8006caa:	9b03      	ldr	r3, [sp, #12]
 8006cac:	1d19      	adds	r1, r3, #4
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	9103      	str	r1, [sp, #12]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	bfbb      	ittet	lt
 8006cb6:	425b      	neglt	r3, r3
 8006cb8:	f042 0202 	orrlt.w	r2, r2, #2
 8006cbc:	9307      	strge	r3, [sp, #28]
 8006cbe:	9307      	strlt	r3, [sp, #28]
 8006cc0:	bfb8      	it	lt
 8006cc2:	9204      	strlt	r2, [sp, #16]
 8006cc4:	7823      	ldrb	r3, [r4, #0]
 8006cc6:	2b2e      	cmp	r3, #46	; 0x2e
 8006cc8:	d10c      	bne.n	8006ce4 <_svfiprintf_r+0x130>
 8006cca:	7863      	ldrb	r3, [r4, #1]
 8006ccc:	2b2a      	cmp	r3, #42	; 0x2a
 8006cce:	d135      	bne.n	8006d3c <_svfiprintf_r+0x188>
 8006cd0:	9b03      	ldr	r3, [sp, #12]
 8006cd2:	1d1a      	adds	r2, r3, #4
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	9203      	str	r2, [sp, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	bfb8      	it	lt
 8006cdc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ce0:	3402      	adds	r4, #2
 8006ce2:	9305      	str	r3, [sp, #20]
 8006ce4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006db0 <_svfiprintf_r+0x1fc>
 8006ce8:	7821      	ldrb	r1, [r4, #0]
 8006cea:	2203      	movs	r2, #3
 8006cec:	4650      	mov	r0, sl
 8006cee:	f7f9 fa7f 	bl	80001f0 <memchr>
 8006cf2:	b140      	cbz	r0, 8006d06 <_svfiprintf_r+0x152>
 8006cf4:	2340      	movs	r3, #64	; 0x40
 8006cf6:	eba0 000a 	sub.w	r0, r0, sl
 8006cfa:	fa03 f000 	lsl.w	r0, r3, r0
 8006cfe:	9b04      	ldr	r3, [sp, #16]
 8006d00:	4303      	orrs	r3, r0
 8006d02:	3401      	adds	r4, #1
 8006d04:	9304      	str	r3, [sp, #16]
 8006d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d0a:	4826      	ldr	r0, [pc, #152]	; (8006da4 <_svfiprintf_r+0x1f0>)
 8006d0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d10:	2206      	movs	r2, #6
 8006d12:	f7f9 fa6d 	bl	80001f0 <memchr>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	d038      	beq.n	8006d8c <_svfiprintf_r+0x1d8>
 8006d1a:	4b23      	ldr	r3, [pc, #140]	; (8006da8 <_svfiprintf_r+0x1f4>)
 8006d1c:	bb1b      	cbnz	r3, 8006d66 <_svfiprintf_r+0x1b2>
 8006d1e:	9b03      	ldr	r3, [sp, #12]
 8006d20:	3307      	adds	r3, #7
 8006d22:	f023 0307 	bic.w	r3, r3, #7
 8006d26:	3308      	adds	r3, #8
 8006d28:	9303      	str	r3, [sp, #12]
 8006d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d2c:	4433      	add	r3, r6
 8006d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d30:	e767      	b.n	8006c02 <_svfiprintf_r+0x4e>
 8006d32:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d36:	460c      	mov	r4, r1
 8006d38:	2001      	movs	r0, #1
 8006d3a:	e7a5      	b.n	8006c88 <_svfiprintf_r+0xd4>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	3401      	adds	r4, #1
 8006d40:	9305      	str	r3, [sp, #20]
 8006d42:	4619      	mov	r1, r3
 8006d44:	f04f 0c0a 	mov.w	ip, #10
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d4e:	3a30      	subs	r2, #48	; 0x30
 8006d50:	2a09      	cmp	r2, #9
 8006d52:	d903      	bls.n	8006d5c <_svfiprintf_r+0x1a8>
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d0c5      	beq.n	8006ce4 <_svfiprintf_r+0x130>
 8006d58:	9105      	str	r1, [sp, #20]
 8006d5a:	e7c3      	b.n	8006ce4 <_svfiprintf_r+0x130>
 8006d5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d60:	4604      	mov	r4, r0
 8006d62:	2301      	movs	r3, #1
 8006d64:	e7f0      	b.n	8006d48 <_svfiprintf_r+0x194>
 8006d66:	ab03      	add	r3, sp, #12
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	462a      	mov	r2, r5
 8006d6c:	4b0f      	ldr	r3, [pc, #60]	; (8006dac <_svfiprintf_r+0x1f8>)
 8006d6e:	a904      	add	r1, sp, #16
 8006d70:	4638      	mov	r0, r7
 8006d72:	f7fd fff9 	bl	8004d68 <_printf_float>
 8006d76:	1c42      	adds	r2, r0, #1
 8006d78:	4606      	mov	r6, r0
 8006d7a:	d1d6      	bne.n	8006d2a <_svfiprintf_r+0x176>
 8006d7c:	89ab      	ldrh	r3, [r5, #12]
 8006d7e:	065b      	lsls	r3, r3, #25
 8006d80:	f53f af2c 	bmi.w	8006bdc <_svfiprintf_r+0x28>
 8006d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d86:	b01d      	add	sp, #116	; 0x74
 8006d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8c:	ab03      	add	r3, sp, #12
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	462a      	mov	r2, r5
 8006d92:	4b06      	ldr	r3, [pc, #24]	; (8006dac <_svfiprintf_r+0x1f8>)
 8006d94:	a904      	add	r1, sp, #16
 8006d96:	4638      	mov	r0, r7
 8006d98:	f7fe fa8a 	bl	80052b0 <_printf_i>
 8006d9c:	e7eb      	b.n	8006d76 <_svfiprintf_r+0x1c2>
 8006d9e:	bf00      	nop
 8006da0:	08007c0c 	.word	0x08007c0c
 8006da4:	08007c16 	.word	0x08007c16
 8006da8:	08004d69 	.word	0x08004d69
 8006dac:	08006afd 	.word	0x08006afd
 8006db0:	08007c12 	.word	0x08007c12

08006db4 <_sbrk_r>:
 8006db4:	b538      	push	{r3, r4, r5, lr}
 8006db6:	4d06      	ldr	r5, [pc, #24]	; (8006dd0 <_sbrk_r+0x1c>)
 8006db8:	2300      	movs	r3, #0
 8006dba:	4604      	mov	r4, r0
 8006dbc:	4608      	mov	r0, r1
 8006dbe:	602b      	str	r3, [r5, #0]
 8006dc0:	f7fa ff08 	bl	8001bd4 <_sbrk>
 8006dc4:	1c43      	adds	r3, r0, #1
 8006dc6:	d102      	bne.n	8006dce <_sbrk_r+0x1a>
 8006dc8:	682b      	ldr	r3, [r5, #0]
 8006dca:	b103      	cbz	r3, 8006dce <_sbrk_r+0x1a>
 8006dcc:	6023      	str	r3, [r4, #0]
 8006dce:	bd38      	pop	{r3, r4, r5, pc}
 8006dd0:	20000318 	.word	0x20000318

08006dd4 <__assert_func>:
 8006dd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006dd6:	4614      	mov	r4, r2
 8006dd8:	461a      	mov	r2, r3
 8006dda:	4b09      	ldr	r3, [pc, #36]	; (8006e00 <__assert_func+0x2c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4605      	mov	r5, r0
 8006de0:	68d8      	ldr	r0, [r3, #12]
 8006de2:	b14c      	cbz	r4, 8006df8 <__assert_func+0x24>
 8006de4:	4b07      	ldr	r3, [pc, #28]	; (8006e04 <__assert_func+0x30>)
 8006de6:	9100      	str	r1, [sp, #0]
 8006de8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006dec:	4906      	ldr	r1, [pc, #24]	; (8006e08 <__assert_func+0x34>)
 8006dee:	462b      	mov	r3, r5
 8006df0:	f000 f80e 	bl	8006e10 <fiprintf>
 8006df4:	f000 faa4 	bl	8007340 <abort>
 8006df8:	4b04      	ldr	r3, [pc, #16]	; (8006e0c <__assert_func+0x38>)
 8006dfa:	461c      	mov	r4, r3
 8006dfc:	e7f3      	b.n	8006de6 <__assert_func+0x12>
 8006dfe:	bf00      	nop
 8006e00:	20000034 	.word	0x20000034
 8006e04:	08007c1d 	.word	0x08007c1d
 8006e08:	08007c2a 	.word	0x08007c2a
 8006e0c:	08007c58 	.word	0x08007c58

08006e10 <fiprintf>:
 8006e10:	b40e      	push	{r1, r2, r3}
 8006e12:	b503      	push	{r0, r1, lr}
 8006e14:	4601      	mov	r1, r0
 8006e16:	ab03      	add	r3, sp, #12
 8006e18:	4805      	ldr	r0, [pc, #20]	; (8006e30 <fiprintf+0x20>)
 8006e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e1e:	6800      	ldr	r0, [r0, #0]
 8006e20:	9301      	str	r3, [sp, #4]
 8006e22:	f000 f88f 	bl	8006f44 <_vfiprintf_r>
 8006e26:	b002      	add	sp, #8
 8006e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e2c:	b003      	add	sp, #12
 8006e2e:	4770      	bx	lr
 8006e30:	20000034 	.word	0x20000034

08006e34 <__ascii_mbtowc>:
 8006e34:	b082      	sub	sp, #8
 8006e36:	b901      	cbnz	r1, 8006e3a <__ascii_mbtowc+0x6>
 8006e38:	a901      	add	r1, sp, #4
 8006e3a:	b142      	cbz	r2, 8006e4e <__ascii_mbtowc+0x1a>
 8006e3c:	b14b      	cbz	r3, 8006e52 <__ascii_mbtowc+0x1e>
 8006e3e:	7813      	ldrb	r3, [r2, #0]
 8006e40:	600b      	str	r3, [r1, #0]
 8006e42:	7812      	ldrb	r2, [r2, #0]
 8006e44:	1e10      	subs	r0, r2, #0
 8006e46:	bf18      	it	ne
 8006e48:	2001      	movne	r0, #1
 8006e4a:	b002      	add	sp, #8
 8006e4c:	4770      	bx	lr
 8006e4e:	4610      	mov	r0, r2
 8006e50:	e7fb      	b.n	8006e4a <__ascii_mbtowc+0x16>
 8006e52:	f06f 0001 	mvn.w	r0, #1
 8006e56:	e7f8      	b.n	8006e4a <__ascii_mbtowc+0x16>

08006e58 <memmove>:
 8006e58:	4288      	cmp	r0, r1
 8006e5a:	b510      	push	{r4, lr}
 8006e5c:	eb01 0402 	add.w	r4, r1, r2
 8006e60:	d902      	bls.n	8006e68 <memmove+0x10>
 8006e62:	4284      	cmp	r4, r0
 8006e64:	4623      	mov	r3, r4
 8006e66:	d807      	bhi.n	8006e78 <memmove+0x20>
 8006e68:	1e43      	subs	r3, r0, #1
 8006e6a:	42a1      	cmp	r1, r4
 8006e6c:	d008      	beq.n	8006e80 <memmove+0x28>
 8006e6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e76:	e7f8      	b.n	8006e6a <memmove+0x12>
 8006e78:	4402      	add	r2, r0
 8006e7a:	4601      	mov	r1, r0
 8006e7c:	428a      	cmp	r2, r1
 8006e7e:	d100      	bne.n	8006e82 <memmove+0x2a>
 8006e80:	bd10      	pop	{r4, pc}
 8006e82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e8a:	e7f7      	b.n	8006e7c <memmove+0x24>

08006e8c <__malloc_lock>:
 8006e8c:	4801      	ldr	r0, [pc, #4]	; (8006e94 <__malloc_lock+0x8>)
 8006e8e:	f000 bc17 	b.w	80076c0 <__retarget_lock_acquire_recursive>
 8006e92:	bf00      	nop
 8006e94:	20000320 	.word	0x20000320

08006e98 <__malloc_unlock>:
 8006e98:	4801      	ldr	r0, [pc, #4]	; (8006ea0 <__malloc_unlock+0x8>)
 8006e9a:	f000 bc12 	b.w	80076c2 <__retarget_lock_release_recursive>
 8006e9e:	bf00      	nop
 8006ea0:	20000320 	.word	0x20000320

08006ea4 <_realloc_r>:
 8006ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea6:	4607      	mov	r7, r0
 8006ea8:	4614      	mov	r4, r2
 8006eaa:	460e      	mov	r6, r1
 8006eac:	b921      	cbnz	r1, 8006eb8 <_realloc_r+0x14>
 8006eae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	f7ff bdc8 	b.w	8006a48 <_malloc_r>
 8006eb8:	b922      	cbnz	r2, 8006ec4 <_realloc_r+0x20>
 8006eba:	f7ff fd75 	bl	80069a8 <_free_r>
 8006ebe:	4625      	mov	r5, r4
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ec4:	f000 fc62 	bl	800778c <_malloc_usable_size_r>
 8006ec8:	42a0      	cmp	r0, r4
 8006eca:	d20f      	bcs.n	8006eec <_realloc_r+0x48>
 8006ecc:	4621      	mov	r1, r4
 8006ece:	4638      	mov	r0, r7
 8006ed0:	f7ff fdba 	bl	8006a48 <_malloc_r>
 8006ed4:	4605      	mov	r5, r0
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	d0f2      	beq.n	8006ec0 <_realloc_r+0x1c>
 8006eda:	4631      	mov	r1, r6
 8006edc:	4622      	mov	r2, r4
 8006ede:	f7ff f9c7 	bl	8006270 <memcpy>
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	4638      	mov	r0, r7
 8006ee6:	f7ff fd5f 	bl	80069a8 <_free_r>
 8006eea:	e7e9      	b.n	8006ec0 <_realloc_r+0x1c>
 8006eec:	4635      	mov	r5, r6
 8006eee:	e7e7      	b.n	8006ec0 <_realloc_r+0x1c>

08006ef0 <__sfputc_r>:
 8006ef0:	6893      	ldr	r3, [r2, #8]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	b410      	push	{r4}
 8006ef8:	6093      	str	r3, [r2, #8]
 8006efa:	da08      	bge.n	8006f0e <__sfputc_r+0x1e>
 8006efc:	6994      	ldr	r4, [r2, #24]
 8006efe:	42a3      	cmp	r3, r4
 8006f00:	db01      	blt.n	8006f06 <__sfputc_r+0x16>
 8006f02:	290a      	cmp	r1, #10
 8006f04:	d103      	bne.n	8006f0e <__sfputc_r+0x1e>
 8006f06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f0a:	f000 b94b 	b.w	80071a4 <__swbuf_r>
 8006f0e:	6813      	ldr	r3, [r2, #0]
 8006f10:	1c58      	adds	r0, r3, #1
 8006f12:	6010      	str	r0, [r2, #0]
 8006f14:	7019      	strb	r1, [r3, #0]
 8006f16:	4608      	mov	r0, r1
 8006f18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <__sfputs_r>:
 8006f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f20:	4606      	mov	r6, r0
 8006f22:	460f      	mov	r7, r1
 8006f24:	4614      	mov	r4, r2
 8006f26:	18d5      	adds	r5, r2, r3
 8006f28:	42ac      	cmp	r4, r5
 8006f2a:	d101      	bne.n	8006f30 <__sfputs_r+0x12>
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	e007      	b.n	8006f40 <__sfputs_r+0x22>
 8006f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f34:	463a      	mov	r2, r7
 8006f36:	4630      	mov	r0, r6
 8006f38:	f7ff ffda 	bl	8006ef0 <__sfputc_r>
 8006f3c:	1c43      	adds	r3, r0, #1
 8006f3e:	d1f3      	bne.n	8006f28 <__sfputs_r+0xa>
 8006f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f44 <_vfiprintf_r>:
 8006f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f48:	460d      	mov	r5, r1
 8006f4a:	b09d      	sub	sp, #116	; 0x74
 8006f4c:	4614      	mov	r4, r2
 8006f4e:	4698      	mov	r8, r3
 8006f50:	4606      	mov	r6, r0
 8006f52:	b118      	cbz	r0, 8006f5c <_vfiprintf_r+0x18>
 8006f54:	6983      	ldr	r3, [r0, #24]
 8006f56:	b90b      	cbnz	r3, 8006f5c <_vfiprintf_r+0x18>
 8006f58:	f000 fb14 	bl	8007584 <__sinit>
 8006f5c:	4b89      	ldr	r3, [pc, #548]	; (8007184 <_vfiprintf_r+0x240>)
 8006f5e:	429d      	cmp	r5, r3
 8006f60:	d11b      	bne.n	8006f9a <_vfiprintf_r+0x56>
 8006f62:	6875      	ldr	r5, [r6, #4]
 8006f64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f66:	07d9      	lsls	r1, r3, #31
 8006f68:	d405      	bmi.n	8006f76 <_vfiprintf_r+0x32>
 8006f6a:	89ab      	ldrh	r3, [r5, #12]
 8006f6c:	059a      	lsls	r2, r3, #22
 8006f6e:	d402      	bmi.n	8006f76 <_vfiprintf_r+0x32>
 8006f70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f72:	f000 fba5 	bl	80076c0 <__retarget_lock_acquire_recursive>
 8006f76:	89ab      	ldrh	r3, [r5, #12]
 8006f78:	071b      	lsls	r3, r3, #28
 8006f7a:	d501      	bpl.n	8006f80 <_vfiprintf_r+0x3c>
 8006f7c:	692b      	ldr	r3, [r5, #16]
 8006f7e:	b9eb      	cbnz	r3, 8006fbc <_vfiprintf_r+0x78>
 8006f80:	4629      	mov	r1, r5
 8006f82:	4630      	mov	r0, r6
 8006f84:	f000 f96e 	bl	8007264 <__swsetup_r>
 8006f88:	b1c0      	cbz	r0, 8006fbc <_vfiprintf_r+0x78>
 8006f8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f8c:	07dc      	lsls	r4, r3, #31
 8006f8e:	d50e      	bpl.n	8006fae <_vfiprintf_r+0x6a>
 8006f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f94:	b01d      	add	sp, #116	; 0x74
 8006f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f9a:	4b7b      	ldr	r3, [pc, #492]	; (8007188 <_vfiprintf_r+0x244>)
 8006f9c:	429d      	cmp	r5, r3
 8006f9e:	d101      	bne.n	8006fa4 <_vfiprintf_r+0x60>
 8006fa0:	68b5      	ldr	r5, [r6, #8]
 8006fa2:	e7df      	b.n	8006f64 <_vfiprintf_r+0x20>
 8006fa4:	4b79      	ldr	r3, [pc, #484]	; (800718c <_vfiprintf_r+0x248>)
 8006fa6:	429d      	cmp	r5, r3
 8006fa8:	bf08      	it	eq
 8006faa:	68f5      	ldreq	r5, [r6, #12]
 8006fac:	e7da      	b.n	8006f64 <_vfiprintf_r+0x20>
 8006fae:	89ab      	ldrh	r3, [r5, #12]
 8006fb0:	0598      	lsls	r0, r3, #22
 8006fb2:	d4ed      	bmi.n	8006f90 <_vfiprintf_r+0x4c>
 8006fb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fb6:	f000 fb84 	bl	80076c2 <__retarget_lock_release_recursive>
 8006fba:	e7e9      	b.n	8006f90 <_vfiprintf_r+0x4c>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8006fc0:	2320      	movs	r3, #32
 8006fc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fca:	2330      	movs	r3, #48	; 0x30
 8006fcc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007190 <_vfiprintf_r+0x24c>
 8006fd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fd4:	f04f 0901 	mov.w	r9, #1
 8006fd8:	4623      	mov	r3, r4
 8006fda:	469a      	mov	sl, r3
 8006fdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fe0:	b10a      	cbz	r2, 8006fe6 <_vfiprintf_r+0xa2>
 8006fe2:	2a25      	cmp	r2, #37	; 0x25
 8006fe4:	d1f9      	bne.n	8006fda <_vfiprintf_r+0x96>
 8006fe6:	ebba 0b04 	subs.w	fp, sl, r4
 8006fea:	d00b      	beq.n	8007004 <_vfiprintf_r+0xc0>
 8006fec:	465b      	mov	r3, fp
 8006fee:	4622      	mov	r2, r4
 8006ff0:	4629      	mov	r1, r5
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	f7ff ff93 	bl	8006f1e <__sfputs_r>
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	f000 80aa 	beq.w	8007152 <_vfiprintf_r+0x20e>
 8006ffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007000:	445a      	add	r2, fp
 8007002:	9209      	str	r2, [sp, #36]	; 0x24
 8007004:	f89a 3000 	ldrb.w	r3, [sl]
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 80a2 	beq.w	8007152 <_vfiprintf_r+0x20e>
 800700e:	2300      	movs	r3, #0
 8007010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007014:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007018:	f10a 0a01 	add.w	sl, sl, #1
 800701c:	9304      	str	r3, [sp, #16]
 800701e:	9307      	str	r3, [sp, #28]
 8007020:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007024:	931a      	str	r3, [sp, #104]	; 0x68
 8007026:	4654      	mov	r4, sl
 8007028:	2205      	movs	r2, #5
 800702a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800702e:	4858      	ldr	r0, [pc, #352]	; (8007190 <_vfiprintf_r+0x24c>)
 8007030:	f7f9 f8de 	bl	80001f0 <memchr>
 8007034:	9a04      	ldr	r2, [sp, #16]
 8007036:	b9d8      	cbnz	r0, 8007070 <_vfiprintf_r+0x12c>
 8007038:	06d1      	lsls	r1, r2, #27
 800703a:	bf44      	itt	mi
 800703c:	2320      	movmi	r3, #32
 800703e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007042:	0713      	lsls	r3, r2, #28
 8007044:	bf44      	itt	mi
 8007046:	232b      	movmi	r3, #43	; 0x2b
 8007048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800704c:	f89a 3000 	ldrb.w	r3, [sl]
 8007050:	2b2a      	cmp	r3, #42	; 0x2a
 8007052:	d015      	beq.n	8007080 <_vfiprintf_r+0x13c>
 8007054:	9a07      	ldr	r2, [sp, #28]
 8007056:	4654      	mov	r4, sl
 8007058:	2000      	movs	r0, #0
 800705a:	f04f 0c0a 	mov.w	ip, #10
 800705e:	4621      	mov	r1, r4
 8007060:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007064:	3b30      	subs	r3, #48	; 0x30
 8007066:	2b09      	cmp	r3, #9
 8007068:	d94e      	bls.n	8007108 <_vfiprintf_r+0x1c4>
 800706a:	b1b0      	cbz	r0, 800709a <_vfiprintf_r+0x156>
 800706c:	9207      	str	r2, [sp, #28]
 800706e:	e014      	b.n	800709a <_vfiprintf_r+0x156>
 8007070:	eba0 0308 	sub.w	r3, r0, r8
 8007074:	fa09 f303 	lsl.w	r3, r9, r3
 8007078:	4313      	orrs	r3, r2
 800707a:	9304      	str	r3, [sp, #16]
 800707c:	46a2      	mov	sl, r4
 800707e:	e7d2      	b.n	8007026 <_vfiprintf_r+0xe2>
 8007080:	9b03      	ldr	r3, [sp, #12]
 8007082:	1d19      	adds	r1, r3, #4
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	9103      	str	r1, [sp, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	bfbb      	ittet	lt
 800708c:	425b      	neglt	r3, r3
 800708e:	f042 0202 	orrlt.w	r2, r2, #2
 8007092:	9307      	strge	r3, [sp, #28]
 8007094:	9307      	strlt	r3, [sp, #28]
 8007096:	bfb8      	it	lt
 8007098:	9204      	strlt	r2, [sp, #16]
 800709a:	7823      	ldrb	r3, [r4, #0]
 800709c:	2b2e      	cmp	r3, #46	; 0x2e
 800709e:	d10c      	bne.n	80070ba <_vfiprintf_r+0x176>
 80070a0:	7863      	ldrb	r3, [r4, #1]
 80070a2:	2b2a      	cmp	r3, #42	; 0x2a
 80070a4:	d135      	bne.n	8007112 <_vfiprintf_r+0x1ce>
 80070a6:	9b03      	ldr	r3, [sp, #12]
 80070a8:	1d1a      	adds	r2, r3, #4
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	9203      	str	r2, [sp, #12]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	bfb8      	it	lt
 80070b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80070b6:	3402      	adds	r4, #2
 80070b8:	9305      	str	r3, [sp, #20]
 80070ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80071a0 <_vfiprintf_r+0x25c>
 80070be:	7821      	ldrb	r1, [r4, #0]
 80070c0:	2203      	movs	r2, #3
 80070c2:	4650      	mov	r0, sl
 80070c4:	f7f9 f894 	bl	80001f0 <memchr>
 80070c8:	b140      	cbz	r0, 80070dc <_vfiprintf_r+0x198>
 80070ca:	2340      	movs	r3, #64	; 0x40
 80070cc:	eba0 000a 	sub.w	r0, r0, sl
 80070d0:	fa03 f000 	lsl.w	r0, r3, r0
 80070d4:	9b04      	ldr	r3, [sp, #16]
 80070d6:	4303      	orrs	r3, r0
 80070d8:	3401      	adds	r4, #1
 80070da:	9304      	str	r3, [sp, #16]
 80070dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070e0:	482c      	ldr	r0, [pc, #176]	; (8007194 <_vfiprintf_r+0x250>)
 80070e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070e6:	2206      	movs	r2, #6
 80070e8:	f7f9 f882 	bl	80001f0 <memchr>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d03f      	beq.n	8007170 <_vfiprintf_r+0x22c>
 80070f0:	4b29      	ldr	r3, [pc, #164]	; (8007198 <_vfiprintf_r+0x254>)
 80070f2:	bb1b      	cbnz	r3, 800713c <_vfiprintf_r+0x1f8>
 80070f4:	9b03      	ldr	r3, [sp, #12]
 80070f6:	3307      	adds	r3, #7
 80070f8:	f023 0307 	bic.w	r3, r3, #7
 80070fc:	3308      	adds	r3, #8
 80070fe:	9303      	str	r3, [sp, #12]
 8007100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007102:	443b      	add	r3, r7
 8007104:	9309      	str	r3, [sp, #36]	; 0x24
 8007106:	e767      	b.n	8006fd8 <_vfiprintf_r+0x94>
 8007108:	fb0c 3202 	mla	r2, ip, r2, r3
 800710c:	460c      	mov	r4, r1
 800710e:	2001      	movs	r0, #1
 8007110:	e7a5      	b.n	800705e <_vfiprintf_r+0x11a>
 8007112:	2300      	movs	r3, #0
 8007114:	3401      	adds	r4, #1
 8007116:	9305      	str	r3, [sp, #20]
 8007118:	4619      	mov	r1, r3
 800711a:	f04f 0c0a 	mov.w	ip, #10
 800711e:	4620      	mov	r0, r4
 8007120:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007124:	3a30      	subs	r2, #48	; 0x30
 8007126:	2a09      	cmp	r2, #9
 8007128:	d903      	bls.n	8007132 <_vfiprintf_r+0x1ee>
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0c5      	beq.n	80070ba <_vfiprintf_r+0x176>
 800712e:	9105      	str	r1, [sp, #20]
 8007130:	e7c3      	b.n	80070ba <_vfiprintf_r+0x176>
 8007132:	fb0c 2101 	mla	r1, ip, r1, r2
 8007136:	4604      	mov	r4, r0
 8007138:	2301      	movs	r3, #1
 800713a:	e7f0      	b.n	800711e <_vfiprintf_r+0x1da>
 800713c:	ab03      	add	r3, sp, #12
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	462a      	mov	r2, r5
 8007142:	4b16      	ldr	r3, [pc, #88]	; (800719c <_vfiprintf_r+0x258>)
 8007144:	a904      	add	r1, sp, #16
 8007146:	4630      	mov	r0, r6
 8007148:	f7fd fe0e 	bl	8004d68 <_printf_float>
 800714c:	4607      	mov	r7, r0
 800714e:	1c78      	adds	r0, r7, #1
 8007150:	d1d6      	bne.n	8007100 <_vfiprintf_r+0x1bc>
 8007152:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007154:	07d9      	lsls	r1, r3, #31
 8007156:	d405      	bmi.n	8007164 <_vfiprintf_r+0x220>
 8007158:	89ab      	ldrh	r3, [r5, #12]
 800715a:	059a      	lsls	r2, r3, #22
 800715c:	d402      	bmi.n	8007164 <_vfiprintf_r+0x220>
 800715e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007160:	f000 faaf 	bl	80076c2 <__retarget_lock_release_recursive>
 8007164:	89ab      	ldrh	r3, [r5, #12]
 8007166:	065b      	lsls	r3, r3, #25
 8007168:	f53f af12 	bmi.w	8006f90 <_vfiprintf_r+0x4c>
 800716c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800716e:	e711      	b.n	8006f94 <_vfiprintf_r+0x50>
 8007170:	ab03      	add	r3, sp, #12
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	462a      	mov	r2, r5
 8007176:	4b09      	ldr	r3, [pc, #36]	; (800719c <_vfiprintf_r+0x258>)
 8007178:	a904      	add	r1, sp, #16
 800717a:	4630      	mov	r0, r6
 800717c:	f7fe f898 	bl	80052b0 <_printf_i>
 8007180:	e7e4      	b.n	800714c <_vfiprintf_r+0x208>
 8007182:	bf00      	nop
 8007184:	08007d84 	.word	0x08007d84
 8007188:	08007da4 	.word	0x08007da4
 800718c:	08007d64 	.word	0x08007d64
 8007190:	08007c0c 	.word	0x08007c0c
 8007194:	08007c16 	.word	0x08007c16
 8007198:	08004d69 	.word	0x08004d69
 800719c:	08006f1f 	.word	0x08006f1f
 80071a0:	08007c12 	.word	0x08007c12

080071a4 <__swbuf_r>:
 80071a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a6:	460e      	mov	r6, r1
 80071a8:	4614      	mov	r4, r2
 80071aa:	4605      	mov	r5, r0
 80071ac:	b118      	cbz	r0, 80071b6 <__swbuf_r+0x12>
 80071ae:	6983      	ldr	r3, [r0, #24]
 80071b0:	b90b      	cbnz	r3, 80071b6 <__swbuf_r+0x12>
 80071b2:	f000 f9e7 	bl	8007584 <__sinit>
 80071b6:	4b21      	ldr	r3, [pc, #132]	; (800723c <__swbuf_r+0x98>)
 80071b8:	429c      	cmp	r4, r3
 80071ba:	d12b      	bne.n	8007214 <__swbuf_r+0x70>
 80071bc:	686c      	ldr	r4, [r5, #4]
 80071be:	69a3      	ldr	r3, [r4, #24]
 80071c0:	60a3      	str	r3, [r4, #8]
 80071c2:	89a3      	ldrh	r3, [r4, #12]
 80071c4:	071a      	lsls	r2, r3, #28
 80071c6:	d52f      	bpl.n	8007228 <__swbuf_r+0x84>
 80071c8:	6923      	ldr	r3, [r4, #16]
 80071ca:	b36b      	cbz	r3, 8007228 <__swbuf_r+0x84>
 80071cc:	6923      	ldr	r3, [r4, #16]
 80071ce:	6820      	ldr	r0, [r4, #0]
 80071d0:	1ac0      	subs	r0, r0, r3
 80071d2:	6963      	ldr	r3, [r4, #20]
 80071d4:	b2f6      	uxtb	r6, r6
 80071d6:	4283      	cmp	r3, r0
 80071d8:	4637      	mov	r7, r6
 80071da:	dc04      	bgt.n	80071e6 <__swbuf_r+0x42>
 80071dc:	4621      	mov	r1, r4
 80071de:	4628      	mov	r0, r5
 80071e0:	f000 f93c 	bl	800745c <_fflush_r>
 80071e4:	bb30      	cbnz	r0, 8007234 <__swbuf_r+0x90>
 80071e6:	68a3      	ldr	r3, [r4, #8]
 80071e8:	3b01      	subs	r3, #1
 80071ea:	60a3      	str	r3, [r4, #8]
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	1c5a      	adds	r2, r3, #1
 80071f0:	6022      	str	r2, [r4, #0]
 80071f2:	701e      	strb	r6, [r3, #0]
 80071f4:	6963      	ldr	r3, [r4, #20]
 80071f6:	3001      	adds	r0, #1
 80071f8:	4283      	cmp	r3, r0
 80071fa:	d004      	beq.n	8007206 <__swbuf_r+0x62>
 80071fc:	89a3      	ldrh	r3, [r4, #12]
 80071fe:	07db      	lsls	r3, r3, #31
 8007200:	d506      	bpl.n	8007210 <__swbuf_r+0x6c>
 8007202:	2e0a      	cmp	r6, #10
 8007204:	d104      	bne.n	8007210 <__swbuf_r+0x6c>
 8007206:	4621      	mov	r1, r4
 8007208:	4628      	mov	r0, r5
 800720a:	f000 f927 	bl	800745c <_fflush_r>
 800720e:	b988      	cbnz	r0, 8007234 <__swbuf_r+0x90>
 8007210:	4638      	mov	r0, r7
 8007212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007214:	4b0a      	ldr	r3, [pc, #40]	; (8007240 <__swbuf_r+0x9c>)
 8007216:	429c      	cmp	r4, r3
 8007218:	d101      	bne.n	800721e <__swbuf_r+0x7a>
 800721a:	68ac      	ldr	r4, [r5, #8]
 800721c:	e7cf      	b.n	80071be <__swbuf_r+0x1a>
 800721e:	4b09      	ldr	r3, [pc, #36]	; (8007244 <__swbuf_r+0xa0>)
 8007220:	429c      	cmp	r4, r3
 8007222:	bf08      	it	eq
 8007224:	68ec      	ldreq	r4, [r5, #12]
 8007226:	e7ca      	b.n	80071be <__swbuf_r+0x1a>
 8007228:	4621      	mov	r1, r4
 800722a:	4628      	mov	r0, r5
 800722c:	f000 f81a 	bl	8007264 <__swsetup_r>
 8007230:	2800      	cmp	r0, #0
 8007232:	d0cb      	beq.n	80071cc <__swbuf_r+0x28>
 8007234:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007238:	e7ea      	b.n	8007210 <__swbuf_r+0x6c>
 800723a:	bf00      	nop
 800723c:	08007d84 	.word	0x08007d84
 8007240:	08007da4 	.word	0x08007da4
 8007244:	08007d64 	.word	0x08007d64

08007248 <__ascii_wctomb>:
 8007248:	b149      	cbz	r1, 800725e <__ascii_wctomb+0x16>
 800724a:	2aff      	cmp	r2, #255	; 0xff
 800724c:	bf85      	ittet	hi
 800724e:	238a      	movhi	r3, #138	; 0x8a
 8007250:	6003      	strhi	r3, [r0, #0]
 8007252:	700a      	strbls	r2, [r1, #0]
 8007254:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007258:	bf98      	it	ls
 800725a:	2001      	movls	r0, #1
 800725c:	4770      	bx	lr
 800725e:	4608      	mov	r0, r1
 8007260:	4770      	bx	lr
	...

08007264 <__swsetup_r>:
 8007264:	4b32      	ldr	r3, [pc, #200]	; (8007330 <__swsetup_r+0xcc>)
 8007266:	b570      	push	{r4, r5, r6, lr}
 8007268:	681d      	ldr	r5, [r3, #0]
 800726a:	4606      	mov	r6, r0
 800726c:	460c      	mov	r4, r1
 800726e:	b125      	cbz	r5, 800727a <__swsetup_r+0x16>
 8007270:	69ab      	ldr	r3, [r5, #24]
 8007272:	b913      	cbnz	r3, 800727a <__swsetup_r+0x16>
 8007274:	4628      	mov	r0, r5
 8007276:	f000 f985 	bl	8007584 <__sinit>
 800727a:	4b2e      	ldr	r3, [pc, #184]	; (8007334 <__swsetup_r+0xd0>)
 800727c:	429c      	cmp	r4, r3
 800727e:	d10f      	bne.n	80072a0 <__swsetup_r+0x3c>
 8007280:	686c      	ldr	r4, [r5, #4]
 8007282:	89a3      	ldrh	r3, [r4, #12]
 8007284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007288:	0719      	lsls	r1, r3, #28
 800728a:	d42c      	bmi.n	80072e6 <__swsetup_r+0x82>
 800728c:	06dd      	lsls	r5, r3, #27
 800728e:	d411      	bmi.n	80072b4 <__swsetup_r+0x50>
 8007290:	2309      	movs	r3, #9
 8007292:	6033      	str	r3, [r6, #0]
 8007294:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007298:	81a3      	strh	r3, [r4, #12]
 800729a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800729e:	e03e      	b.n	800731e <__swsetup_r+0xba>
 80072a0:	4b25      	ldr	r3, [pc, #148]	; (8007338 <__swsetup_r+0xd4>)
 80072a2:	429c      	cmp	r4, r3
 80072a4:	d101      	bne.n	80072aa <__swsetup_r+0x46>
 80072a6:	68ac      	ldr	r4, [r5, #8]
 80072a8:	e7eb      	b.n	8007282 <__swsetup_r+0x1e>
 80072aa:	4b24      	ldr	r3, [pc, #144]	; (800733c <__swsetup_r+0xd8>)
 80072ac:	429c      	cmp	r4, r3
 80072ae:	bf08      	it	eq
 80072b0:	68ec      	ldreq	r4, [r5, #12]
 80072b2:	e7e6      	b.n	8007282 <__swsetup_r+0x1e>
 80072b4:	0758      	lsls	r0, r3, #29
 80072b6:	d512      	bpl.n	80072de <__swsetup_r+0x7a>
 80072b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072ba:	b141      	cbz	r1, 80072ce <__swsetup_r+0x6a>
 80072bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072c0:	4299      	cmp	r1, r3
 80072c2:	d002      	beq.n	80072ca <__swsetup_r+0x66>
 80072c4:	4630      	mov	r0, r6
 80072c6:	f7ff fb6f 	bl	80069a8 <_free_r>
 80072ca:	2300      	movs	r3, #0
 80072cc:	6363      	str	r3, [r4, #52]	; 0x34
 80072ce:	89a3      	ldrh	r3, [r4, #12]
 80072d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80072d4:	81a3      	strh	r3, [r4, #12]
 80072d6:	2300      	movs	r3, #0
 80072d8:	6063      	str	r3, [r4, #4]
 80072da:	6923      	ldr	r3, [r4, #16]
 80072dc:	6023      	str	r3, [r4, #0]
 80072de:	89a3      	ldrh	r3, [r4, #12]
 80072e0:	f043 0308 	orr.w	r3, r3, #8
 80072e4:	81a3      	strh	r3, [r4, #12]
 80072e6:	6923      	ldr	r3, [r4, #16]
 80072e8:	b94b      	cbnz	r3, 80072fe <__swsetup_r+0x9a>
 80072ea:	89a3      	ldrh	r3, [r4, #12]
 80072ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80072f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072f4:	d003      	beq.n	80072fe <__swsetup_r+0x9a>
 80072f6:	4621      	mov	r1, r4
 80072f8:	4630      	mov	r0, r6
 80072fa:	f000 fa07 	bl	800770c <__smakebuf_r>
 80072fe:	89a0      	ldrh	r0, [r4, #12]
 8007300:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007304:	f010 0301 	ands.w	r3, r0, #1
 8007308:	d00a      	beq.n	8007320 <__swsetup_r+0xbc>
 800730a:	2300      	movs	r3, #0
 800730c:	60a3      	str	r3, [r4, #8]
 800730e:	6963      	ldr	r3, [r4, #20]
 8007310:	425b      	negs	r3, r3
 8007312:	61a3      	str	r3, [r4, #24]
 8007314:	6923      	ldr	r3, [r4, #16]
 8007316:	b943      	cbnz	r3, 800732a <__swsetup_r+0xc6>
 8007318:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800731c:	d1ba      	bne.n	8007294 <__swsetup_r+0x30>
 800731e:	bd70      	pop	{r4, r5, r6, pc}
 8007320:	0781      	lsls	r1, r0, #30
 8007322:	bf58      	it	pl
 8007324:	6963      	ldrpl	r3, [r4, #20]
 8007326:	60a3      	str	r3, [r4, #8]
 8007328:	e7f4      	b.n	8007314 <__swsetup_r+0xb0>
 800732a:	2000      	movs	r0, #0
 800732c:	e7f7      	b.n	800731e <__swsetup_r+0xba>
 800732e:	bf00      	nop
 8007330:	20000034 	.word	0x20000034
 8007334:	08007d84 	.word	0x08007d84
 8007338:	08007da4 	.word	0x08007da4
 800733c:	08007d64 	.word	0x08007d64

08007340 <abort>:
 8007340:	b508      	push	{r3, lr}
 8007342:	2006      	movs	r0, #6
 8007344:	f000 fa52 	bl	80077ec <raise>
 8007348:	2001      	movs	r0, #1
 800734a:	f7fa fbcb 	bl	8001ae4 <_exit>
	...

08007350 <__sflush_r>:
 8007350:	898a      	ldrh	r2, [r1, #12]
 8007352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007356:	4605      	mov	r5, r0
 8007358:	0710      	lsls	r0, r2, #28
 800735a:	460c      	mov	r4, r1
 800735c:	d458      	bmi.n	8007410 <__sflush_r+0xc0>
 800735e:	684b      	ldr	r3, [r1, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	dc05      	bgt.n	8007370 <__sflush_r+0x20>
 8007364:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007366:	2b00      	cmp	r3, #0
 8007368:	dc02      	bgt.n	8007370 <__sflush_r+0x20>
 800736a:	2000      	movs	r0, #0
 800736c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007372:	2e00      	cmp	r6, #0
 8007374:	d0f9      	beq.n	800736a <__sflush_r+0x1a>
 8007376:	2300      	movs	r3, #0
 8007378:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800737c:	682f      	ldr	r7, [r5, #0]
 800737e:	602b      	str	r3, [r5, #0]
 8007380:	d032      	beq.n	80073e8 <__sflush_r+0x98>
 8007382:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007384:	89a3      	ldrh	r3, [r4, #12]
 8007386:	075a      	lsls	r2, r3, #29
 8007388:	d505      	bpl.n	8007396 <__sflush_r+0x46>
 800738a:	6863      	ldr	r3, [r4, #4]
 800738c:	1ac0      	subs	r0, r0, r3
 800738e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007390:	b10b      	cbz	r3, 8007396 <__sflush_r+0x46>
 8007392:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007394:	1ac0      	subs	r0, r0, r3
 8007396:	2300      	movs	r3, #0
 8007398:	4602      	mov	r2, r0
 800739a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800739c:	6a21      	ldr	r1, [r4, #32]
 800739e:	4628      	mov	r0, r5
 80073a0:	47b0      	blx	r6
 80073a2:	1c43      	adds	r3, r0, #1
 80073a4:	89a3      	ldrh	r3, [r4, #12]
 80073a6:	d106      	bne.n	80073b6 <__sflush_r+0x66>
 80073a8:	6829      	ldr	r1, [r5, #0]
 80073aa:	291d      	cmp	r1, #29
 80073ac:	d82c      	bhi.n	8007408 <__sflush_r+0xb8>
 80073ae:	4a2a      	ldr	r2, [pc, #168]	; (8007458 <__sflush_r+0x108>)
 80073b0:	40ca      	lsrs	r2, r1
 80073b2:	07d6      	lsls	r6, r2, #31
 80073b4:	d528      	bpl.n	8007408 <__sflush_r+0xb8>
 80073b6:	2200      	movs	r2, #0
 80073b8:	6062      	str	r2, [r4, #4]
 80073ba:	04d9      	lsls	r1, r3, #19
 80073bc:	6922      	ldr	r2, [r4, #16]
 80073be:	6022      	str	r2, [r4, #0]
 80073c0:	d504      	bpl.n	80073cc <__sflush_r+0x7c>
 80073c2:	1c42      	adds	r2, r0, #1
 80073c4:	d101      	bne.n	80073ca <__sflush_r+0x7a>
 80073c6:	682b      	ldr	r3, [r5, #0]
 80073c8:	b903      	cbnz	r3, 80073cc <__sflush_r+0x7c>
 80073ca:	6560      	str	r0, [r4, #84]	; 0x54
 80073cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073ce:	602f      	str	r7, [r5, #0]
 80073d0:	2900      	cmp	r1, #0
 80073d2:	d0ca      	beq.n	800736a <__sflush_r+0x1a>
 80073d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073d8:	4299      	cmp	r1, r3
 80073da:	d002      	beq.n	80073e2 <__sflush_r+0x92>
 80073dc:	4628      	mov	r0, r5
 80073de:	f7ff fae3 	bl	80069a8 <_free_r>
 80073e2:	2000      	movs	r0, #0
 80073e4:	6360      	str	r0, [r4, #52]	; 0x34
 80073e6:	e7c1      	b.n	800736c <__sflush_r+0x1c>
 80073e8:	6a21      	ldr	r1, [r4, #32]
 80073ea:	2301      	movs	r3, #1
 80073ec:	4628      	mov	r0, r5
 80073ee:	47b0      	blx	r6
 80073f0:	1c41      	adds	r1, r0, #1
 80073f2:	d1c7      	bne.n	8007384 <__sflush_r+0x34>
 80073f4:	682b      	ldr	r3, [r5, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d0c4      	beq.n	8007384 <__sflush_r+0x34>
 80073fa:	2b1d      	cmp	r3, #29
 80073fc:	d001      	beq.n	8007402 <__sflush_r+0xb2>
 80073fe:	2b16      	cmp	r3, #22
 8007400:	d101      	bne.n	8007406 <__sflush_r+0xb6>
 8007402:	602f      	str	r7, [r5, #0]
 8007404:	e7b1      	b.n	800736a <__sflush_r+0x1a>
 8007406:	89a3      	ldrh	r3, [r4, #12]
 8007408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800740c:	81a3      	strh	r3, [r4, #12]
 800740e:	e7ad      	b.n	800736c <__sflush_r+0x1c>
 8007410:	690f      	ldr	r7, [r1, #16]
 8007412:	2f00      	cmp	r7, #0
 8007414:	d0a9      	beq.n	800736a <__sflush_r+0x1a>
 8007416:	0793      	lsls	r3, r2, #30
 8007418:	680e      	ldr	r6, [r1, #0]
 800741a:	bf08      	it	eq
 800741c:	694b      	ldreq	r3, [r1, #20]
 800741e:	600f      	str	r7, [r1, #0]
 8007420:	bf18      	it	ne
 8007422:	2300      	movne	r3, #0
 8007424:	eba6 0807 	sub.w	r8, r6, r7
 8007428:	608b      	str	r3, [r1, #8]
 800742a:	f1b8 0f00 	cmp.w	r8, #0
 800742e:	dd9c      	ble.n	800736a <__sflush_r+0x1a>
 8007430:	6a21      	ldr	r1, [r4, #32]
 8007432:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007434:	4643      	mov	r3, r8
 8007436:	463a      	mov	r2, r7
 8007438:	4628      	mov	r0, r5
 800743a:	47b0      	blx	r6
 800743c:	2800      	cmp	r0, #0
 800743e:	dc06      	bgt.n	800744e <__sflush_r+0xfe>
 8007440:	89a3      	ldrh	r3, [r4, #12]
 8007442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007446:	81a3      	strh	r3, [r4, #12]
 8007448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800744c:	e78e      	b.n	800736c <__sflush_r+0x1c>
 800744e:	4407      	add	r7, r0
 8007450:	eba8 0800 	sub.w	r8, r8, r0
 8007454:	e7e9      	b.n	800742a <__sflush_r+0xda>
 8007456:	bf00      	nop
 8007458:	20400001 	.word	0x20400001

0800745c <_fflush_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	690b      	ldr	r3, [r1, #16]
 8007460:	4605      	mov	r5, r0
 8007462:	460c      	mov	r4, r1
 8007464:	b913      	cbnz	r3, 800746c <_fflush_r+0x10>
 8007466:	2500      	movs	r5, #0
 8007468:	4628      	mov	r0, r5
 800746a:	bd38      	pop	{r3, r4, r5, pc}
 800746c:	b118      	cbz	r0, 8007476 <_fflush_r+0x1a>
 800746e:	6983      	ldr	r3, [r0, #24]
 8007470:	b90b      	cbnz	r3, 8007476 <_fflush_r+0x1a>
 8007472:	f000 f887 	bl	8007584 <__sinit>
 8007476:	4b14      	ldr	r3, [pc, #80]	; (80074c8 <_fflush_r+0x6c>)
 8007478:	429c      	cmp	r4, r3
 800747a:	d11b      	bne.n	80074b4 <_fflush_r+0x58>
 800747c:	686c      	ldr	r4, [r5, #4]
 800747e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d0ef      	beq.n	8007466 <_fflush_r+0xa>
 8007486:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007488:	07d0      	lsls	r0, r2, #31
 800748a:	d404      	bmi.n	8007496 <_fflush_r+0x3a>
 800748c:	0599      	lsls	r1, r3, #22
 800748e:	d402      	bmi.n	8007496 <_fflush_r+0x3a>
 8007490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007492:	f000 f915 	bl	80076c0 <__retarget_lock_acquire_recursive>
 8007496:	4628      	mov	r0, r5
 8007498:	4621      	mov	r1, r4
 800749a:	f7ff ff59 	bl	8007350 <__sflush_r>
 800749e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074a0:	07da      	lsls	r2, r3, #31
 80074a2:	4605      	mov	r5, r0
 80074a4:	d4e0      	bmi.n	8007468 <_fflush_r+0xc>
 80074a6:	89a3      	ldrh	r3, [r4, #12]
 80074a8:	059b      	lsls	r3, r3, #22
 80074aa:	d4dd      	bmi.n	8007468 <_fflush_r+0xc>
 80074ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074ae:	f000 f908 	bl	80076c2 <__retarget_lock_release_recursive>
 80074b2:	e7d9      	b.n	8007468 <_fflush_r+0xc>
 80074b4:	4b05      	ldr	r3, [pc, #20]	; (80074cc <_fflush_r+0x70>)
 80074b6:	429c      	cmp	r4, r3
 80074b8:	d101      	bne.n	80074be <_fflush_r+0x62>
 80074ba:	68ac      	ldr	r4, [r5, #8]
 80074bc:	e7df      	b.n	800747e <_fflush_r+0x22>
 80074be:	4b04      	ldr	r3, [pc, #16]	; (80074d0 <_fflush_r+0x74>)
 80074c0:	429c      	cmp	r4, r3
 80074c2:	bf08      	it	eq
 80074c4:	68ec      	ldreq	r4, [r5, #12]
 80074c6:	e7da      	b.n	800747e <_fflush_r+0x22>
 80074c8:	08007d84 	.word	0x08007d84
 80074cc:	08007da4 	.word	0x08007da4
 80074d0:	08007d64 	.word	0x08007d64

080074d4 <std>:
 80074d4:	2300      	movs	r3, #0
 80074d6:	b510      	push	{r4, lr}
 80074d8:	4604      	mov	r4, r0
 80074da:	e9c0 3300 	strd	r3, r3, [r0]
 80074de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074e2:	6083      	str	r3, [r0, #8]
 80074e4:	8181      	strh	r1, [r0, #12]
 80074e6:	6643      	str	r3, [r0, #100]	; 0x64
 80074e8:	81c2      	strh	r2, [r0, #14]
 80074ea:	6183      	str	r3, [r0, #24]
 80074ec:	4619      	mov	r1, r3
 80074ee:	2208      	movs	r2, #8
 80074f0:	305c      	adds	r0, #92	; 0x5c
 80074f2:	f7fd fb91 	bl	8004c18 <memset>
 80074f6:	4b05      	ldr	r3, [pc, #20]	; (800750c <std+0x38>)
 80074f8:	6263      	str	r3, [r4, #36]	; 0x24
 80074fa:	4b05      	ldr	r3, [pc, #20]	; (8007510 <std+0x3c>)
 80074fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80074fe:	4b05      	ldr	r3, [pc, #20]	; (8007514 <std+0x40>)
 8007500:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007502:	4b05      	ldr	r3, [pc, #20]	; (8007518 <std+0x44>)
 8007504:	6224      	str	r4, [r4, #32]
 8007506:	6323      	str	r3, [r4, #48]	; 0x30
 8007508:	bd10      	pop	{r4, pc}
 800750a:	bf00      	nop
 800750c:	08007825 	.word	0x08007825
 8007510:	08007847 	.word	0x08007847
 8007514:	0800787f 	.word	0x0800787f
 8007518:	080078a3 	.word	0x080078a3

0800751c <_cleanup_r>:
 800751c:	4901      	ldr	r1, [pc, #4]	; (8007524 <_cleanup_r+0x8>)
 800751e:	f000 b8af 	b.w	8007680 <_fwalk_reent>
 8007522:	bf00      	nop
 8007524:	0800745d 	.word	0x0800745d

08007528 <__sfmoreglue>:
 8007528:	b570      	push	{r4, r5, r6, lr}
 800752a:	1e4a      	subs	r2, r1, #1
 800752c:	2568      	movs	r5, #104	; 0x68
 800752e:	4355      	muls	r5, r2
 8007530:	460e      	mov	r6, r1
 8007532:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007536:	f7ff fa87 	bl	8006a48 <_malloc_r>
 800753a:	4604      	mov	r4, r0
 800753c:	b140      	cbz	r0, 8007550 <__sfmoreglue+0x28>
 800753e:	2100      	movs	r1, #0
 8007540:	e9c0 1600 	strd	r1, r6, [r0]
 8007544:	300c      	adds	r0, #12
 8007546:	60a0      	str	r0, [r4, #8]
 8007548:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800754c:	f7fd fb64 	bl	8004c18 <memset>
 8007550:	4620      	mov	r0, r4
 8007552:	bd70      	pop	{r4, r5, r6, pc}

08007554 <__sfp_lock_acquire>:
 8007554:	4801      	ldr	r0, [pc, #4]	; (800755c <__sfp_lock_acquire+0x8>)
 8007556:	f000 b8b3 	b.w	80076c0 <__retarget_lock_acquire_recursive>
 800755a:	bf00      	nop
 800755c:	20000324 	.word	0x20000324

08007560 <__sfp_lock_release>:
 8007560:	4801      	ldr	r0, [pc, #4]	; (8007568 <__sfp_lock_release+0x8>)
 8007562:	f000 b8ae 	b.w	80076c2 <__retarget_lock_release_recursive>
 8007566:	bf00      	nop
 8007568:	20000324 	.word	0x20000324

0800756c <__sinit_lock_acquire>:
 800756c:	4801      	ldr	r0, [pc, #4]	; (8007574 <__sinit_lock_acquire+0x8>)
 800756e:	f000 b8a7 	b.w	80076c0 <__retarget_lock_acquire_recursive>
 8007572:	bf00      	nop
 8007574:	2000031f 	.word	0x2000031f

08007578 <__sinit_lock_release>:
 8007578:	4801      	ldr	r0, [pc, #4]	; (8007580 <__sinit_lock_release+0x8>)
 800757a:	f000 b8a2 	b.w	80076c2 <__retarget_lock_release_recursive>
 800757e:	bf00      	nop
 8007580:	2000031f 	.word	0x2000031f

08007584 <__sinit>:
 8007584:	b510      	push	{r4, lr}
 8007586:	4604      	mov	r4, r0
 8007588:	f7ff fff0 	bl	800756c <__sinit_lock_acquire>
 800758c:	69a3      	ldr	r3, [r4, #24]
 800758e:	b11b      	cbz	r3, 8007598 <__sinit+0x14>
 8007590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007594:	f7ff bff0 	b.w	8007578 <__sinit_lock_release>
 8007598:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800759c:	6523      	str	r3, [r4, #80]	; 0x50
 800759e:	4b13      	ldr	r3, [pc, #76]	; (80075ec <__sinit+0x68>)
 80075a0:	4a13      	ldr	r2, [pc, #76]	; (80075f0 <__sinit+0x6c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80075a6:	42a3      	cmp	r3, r4
 80075a8:	bf04      	itt	eq
 80075aa:	2301      	moveq	r3, #1
 80075ac:	61a3      	streq	r3, [r4, #24]
 80075ae:	4620      	mov	r0, r4
 80075b0:	f000 f820 	bl	80075f4 <__sfp>
 80075b4:	6060      	str	r0, [r4, #4]
 80075b6:	4620      	mov	r0, r4
 80075b8:	f000 f81c 	bl	80075f4 <__sfp>
 80075bc:	60a0      	str	r0, [r4, #8]
 80075be:	4620      	mov	r0, r4
 80075c0:	f000 f818 	bl	80075f4 <__sfp>
 80075c4:	2200      	movs	r2, #0
 80075c6:	60e0      	str	r0, [r4, #12]
 80075c8:	2104      	movs	r1, #4
 80075ca:	6860      	ldr	r0, [r4, #4]
 80075cc:	f7ff ff82 	bl	80074d4 <std>
 80075d0:	68a0      	ldr	r0, [r4, #8]
 80075d2:	2201      	movs	r2, #1
 80075d4:	2109      	movs	r1, #9
 80075d6:	f7ff ff7d 	bl	80074d4 <std>
 80075da:	68e0      	ldr	r0, [r4, #12]
 80075dc:	2202      	movs	r2, #2
 80075de:	2112      	movs	r1, #18
 80075e0:	f7ff ff78 	bl	80074d4 <std>
 80075e4:	2301      	movs	r3, #1
 80075e6:	61a3      	str	r3, [r4, #24]
 80075e8:	e7d2      	b.n	8007590 <__sinit+0xc>
 80075ea:	bf00      	nop
 80075ec:	080079e0 	.word	0x080079e0
 80075f0:	0800751d 	.word	0x0800751d

080075f4 <__sfp>:
 80075f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f6:	4607      	mov	r7, r0
 80075f8:	f7ff ffac 	bl	8007554 <__sfp_lock_acquire>
 80075fc:	4b1e      	ldr	r3, [pc, #120]	; (8007678 <__sfp+0x84>)
 80075fe:	681e      	ldr	r6, [r3, #0]
 8007600:	69b3      	ldr	r3, [r6, #24]
 8007602:	b913      	cbnz	r3, 800760a <__sfp+0x16>
 8007604:	4630      	mov	r0, r6
 8007606:	f7ff ffbd 	bl	8007584 <__sinit>
 800760a:	3648      	adds	r6, #72	; 0x48
 800760c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007610:	3b01      	subs	r3, #1
 8007612:	d503      	bpl.n	800761c <__sfp+0x28>
 8007614:	6833      	ldr	r3, [r6, #0]
 8007616:	b30b      	cbz	r3, 800765c <__sfp+0x68>
 8007618:	6836      	ldr	r6, [r6, #0]
 800761a:	e7f7      	b.n	800760c <__sfp+0x18>
 800761c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007620:	b9d5      	cbnz	r5, 8007658 <__sfp+0x64>
 8007622:	4b16      	ldr	r3, [pc, #88]	; (800767c <__sfp+0x88>)
 8007624:	60e3      	str	r3, [r4, #12]
 8007626:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800762a:	6665      	str	r5, [r4, #100]	; 0x64
 800762c:	f000 f847 	bl	80076be <__retarget_lock_init_recursive>
 8007630:	f7ff ff96 	bl	8007560 <__sfp_lock_release>
 8007634:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007638:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800763c:	6025      	str	r5, [r4, #0]
 800763e:	61a5      	str	r5, [r4, #24]
 8007640:	2208      	movs	r2, #8
 8007642:	4629      	mov	r1, r5
 8007644:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007648:	f7fd fae6 	bl	8004c18 <memset>
 800764c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007650:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007654:	4620      	mov	r0, r4
 8007656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007658:	3468      	adds	r4, #104	; 0x68
 800765a:	e7d9      	b.n	8007610 <__sfp+0x1c>
 800765c:	2104      	movs	r1, #4
 800765e:	4638      	mov	r0, r7
 8007660:	f7ff ff62 	bl	8007528 <__sfmoreglue>
 8007664:	4604      	mov	r4, r0
 8007666:	6030      	str	r0, [r6, #0]
 8007668:	2800      	cmp	r0, #0
 800766a:	d1d5      	bne.n	8007618 <__sfp+0x24>
 800766c:	f7ff ff78 	bl	8007560 <__sfp_lock_release>
 8007670:	230c      	movs	r3, #12
 8007672:	603b      	str	r3, [r7, #0]
 8007674:	e7ee      	b.n	8007654 <__sfp+0x60>
 8007676:	bf00      	nop
 8007678:	080079e0 	.word	0x080079e0
 800767c:	ffff0001 	.word	0xffff0001

08007680 <_fwalk_reent>:
 8007680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007684:	4606      	mov	r6, r0
 8007686:	4688      	mov	r8, r1
 8007688:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800768c:	2700      	movs	r7, #0
 800768e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007692:	f1b9 0901 	subs.w	r9, r9, #1
 8007696:	d505      	bpl.n	80076a4 <_fwalk_reent+0x24>
 8007698:	6824      	ldr	r4, [r4, #0]
 800769a:	2c00      	cmp	r4, #0
 800769c:	d1f7      	bne.n	800768e <_fwalk_reent+0xe>
 800769e:	4638      	mov	r0, r7
 80076a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076a4:	89ab      	ldrh	r3, [r5, #12]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d907      	bls.n	80076ba <_fwalk_reent+0x3a>
 80076aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076ae:	3301      	adds	r3, #1
 80076b0:	d003      	beq.n	80076ba <_fwalk_reent+0x3a>
 80076b2:	4629      	mov	r1, r5
 80076b4:	4630      	mov	r0, r6
 80076b6:	47c0      	blx	r8
 80076b8:	4307      	orrs	r7, r0
 80076ba:	3568      	adds	r5, #104	; 0x68
 80076bc:	e7e9      	b.n	8007692 <_fwalk_reent+0x12>

080076be <__retarget_lock_init_recursive>:
 80076be:	4770      	bx	lr

080076c0 <__retarget_lock_acquire_recursive>:
 80076c0:	4770      	bx	lr

080076c2 <__retarget_lock_release_recursive>:
 80076c2:	4770      	bx	lr

080076c4 <__swhatbuf_r>:
 80076c4:	b570      	push	{r4, r5, r6, lr}
 80076c6:	460e      	mov	r6, r1
 80076c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076cc:	2900      	cmp	r1, #0
 80076ce:	b096      	sub	sp, #88	; 0x58
 80076d0:	4614      	mov	r4, r2
 80076d2:	461d      	mov	r5, r3
 80076d4:	da07      	bge.n	80076e6 <__swhatbuf_r+0x22>
 80076d6:	2300      	movs	r3, #0
 80076d8:	602b      	str	r3, [r5, #0]
 80076da:	89b3      	ldrh	r3, [r6, #12]
 80076dc:	061a      	lsls	r2, r3, #24
 80076de:	d410      	bmi.n	8007702 <__swhatbuf_r+0x3e>
 80076e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076e4:	e00e      	b.n	8007704 <__swhatbuf_r+0x40>
 80076e6:	466a      	mov	r2, sp
 80076e8:	f000 f902 	bl	80078f0 <_fstat_r>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	dbf2      	blt.n	80076d6 <__swhatbuf_r+0x12>
 80076f0:	9a01      	ldr	r2, [sp, #4]
 80076f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80076f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80076fa:	425a      	negs	r2, r3
 80076fc:	415a      	adcs	r2, r3
 80076fe:	602a      	str	r2, [r5, #0]
 8007700:	e7ee      	b.n	80076e0 <__swhatbuf_r+0x1c>
 8007702:	2340      	movs	r3, #64	; 0x40
 8007704:	2000      	movs	r0, #0
 8007706:	6023      	str	r3, [r4, #0]
 8007708:	b016      	add	sp, #88	; 0x58
 800770a:	bd70      	pop	{r4, r5, r6, pc}

0800770c <__smakebuf_r>:
 800770c:	898b      	ldrh	r3, [r1, #12]
 800770e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007710:	079d      	lsls	r5, r3, #30
 8007712:	4606      	mov	r6, r0
 8007714:	460c      	mov	r4, r1
 8007716:	d507      	bpl.n	8007728 <__smakebuf_r+0x1c>
 8007718:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800771c:	6023      	str	r3, [r4, #0]
 800771e:	6123      	str	r3, [r4, #16]
 8007720:	2301      	movs	r3, #1
 8007722:	6163      	str	r3, [r4, #20]
 8007724:	b002      	add	sp, #8
 8007726:	bd70      	pop	{r4, r5, r6, pc}
 8007728:	ab01      	add	r3, sp, #4
 800772a:	466a      	mov	r2, sp
 800772c:	f7ff ffca 	bl	80076c4 <__swhatbuf_r>
 8007730:	9900      	ldr	r1, [sp, #0]
 8007732:	4605      	mov	r5, r0
 8007734:	4630      	mov	r0, r6
 8007736:	f7ff f987 	bl	8006a48 <_malloc_r>
 800773a:	b948      	cbnz	r0, 8007750 <__smakebuf_r+0x44>
 800773c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007740:	059a      	lsls	r2, r3, #22
 8007742:	d4ef      	bmi.n	8007724 <__smakebuf_r+0x18>
 8007744:	f023 0303 	bic.w	r3, r3, #3
 8007748:	f043 0302 	orr.w	r3, r3, #2
 800774c:	81a3      	strh	r3, [r4, #12]
 800774e:	e7e3      	b.n	8007718 <__smakebuf_r+0xc>
 8007750:	4b0d      	ldr	r3, [pc, #52]	; (8007788 <__smakebuf_r+0x7c>)
 8007752:	62b3      	str	r3, [r6, #40]	; 0x28
 8007754:	89a3      	ldrh	r3, [r4, #12]
 8007756:	6020      	str	r0, [r4, #0]
 8007758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800775c:	81a3      	strh	r3, [r4, #12]
 800775e:	9b00      	ldr	r3, [sp, #0]
 8007760:	6163      	str	r3, [r4, #20]
 8007762:	9b01      	ldr	r3, [sp, #4]
 8007764:	6120      	str	r0, [r4, #16]
 8007766:	b15b      	cbz	r3, 8007780 <__smakebuf_r+0x74>
 8007768:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800776c:	4630      	mov	r0, r6
 800776e:	f000 f8d1 	bl	8007914 <_isatty_r>
 8007772:	b128      	cbz	r0, 8007780 <__smakebuf_r+0x74>
 8007774:	89a3      	ldrh	r3, [r4, #12]
 8007776:	f023 0303 	bic.w	r3, r3, #3
 800777a:	f043 0301 	orr.w	r3, r3, #1
 800777e:	81a3      	strh	r3, [r4, #12]
 8007780:	89a0      	ldrh	r0, [r4, #12]
 8007782:	4305      	orrs	r5, r0
 8007784:	81a5      	strh	r5, [r4, #12]
 8007786:	e7cd      	b.n	8007724 <__smakebuf_r+0x18>
 8007788:	0800751d 	.word	0x0800751d

0800778c <_malloc_usable_size_r>:
 800778c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007790:	1f18      	subs	r0, r3, #4
 8007792:	2b00      	cmp	r3, #0
 8007794:	bfbc      	itt	lt
 8007796:	580b      	ldrlt	r3, [r1, r0]
 8007798:	18c0      	addlt	r0, r0, r3
 800779a:	4770      	bx	lr

0800779c <_raise_r>:
 800779c:	291f      	cmp	r1, #31
 800779e:	b538      	push	{r3, r4, r5, lr}
 80077a0:	4604      	mov	r4, r0
 80077a2:	460d      	mov	r5, r1
 80077a4:	d904      	bls.n	80077b0 <_raise_r+0x14>
 80077a6:	2316      	movs	r3, #22
 80077a8:	6003      	str	r3, [r0, #0]
 80077aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077ae:	bd38      	pop	{r3, r4, r5, pc}
 80077b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80077b2:	b112      	cbz	r2, 80077ba <_raise_r+0x1e>
 80077b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077b8:	b94b      	cbnz	r3, 80077ce <_raise_r+0x32>
 80077ba:	4620      	mov	r0, r4
 80077bc:	f000 f830 	bl	8007820 <_getpid_r>
 80077c0:	462a      	mov	r2, r5
 80077c2:	4601      	mov	r1, r0
 80077c4:	4620      	mov	r0, r4
 80077c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077ca:	f000 b817 	b.w	80077fc <_kill_r>
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d00a      	beq.n	80077e8 <_raise_r+0x4c>
 80077d2:	1c59      	adds	r1, r3, #1
 80077d4:	d103      	bne.n	80077de <_raise_r+0x42>
 80077d6:	2316      	movs	r3, #22
 80077d8:	6003      	str	r3, [r0, #0]
 80077da:	2001      	movs	r0, #1
 80077dc:	e7e7      	b.n	80077ae <_raise_r+0x12>
 80077de:	2400      	movs	r4, #0
 80077e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80077e4:	4628      	mov	r0, r5
 80077e6:	4798      	blx	r3
 80077e8:	2000      	movs	r0, #0
 80077ea:	e7e0      	b.n	80077ae <_raise_r+0x12>

080077ec <raise>:
 80077ec:	4b02      	ldr	r3, [pc, #8]	; (80077f8 <raise+0xc>)
 80077ee:	4601      	mov	r1, r0
 80077f0:	6818      	ldr	r0, [r3, #0]
 80077f2:	f7ff bfd3 	b.w	800779c <_raise_r>
 80077f6:	bf00      	nop
 80077f8:	20000034 	.word	0x20000034

080077fc <_kill_r>:
 80077fc:	b538      	push	{r3, r4, r5, lr}
 80077fe:	4d07      	ldr	r5, [pc, #28]	; (800781c <_kill_r+0x20>)
 8007800:	2300      	movs	r3, #0
 8007802:	4604      	mov	r4, r0
 8007804:	4608      	mov	r0, r1
 8007806:	4611      	mov	r1, r2
 8007808:	602b      	str	r3, [r5, #0]
 800780a:	f7fa f95b 	bl	8001ac4 <_kill>
 800780e:	1c43      	adds	r3, r0, #1
 8007810:	d102      	bne.n	8007818 <_kill_r+0x1c>
 8007812:	682b      	ldr	r3, [r5, #0]
 8007814:	b103      	cbz	r3, 8007818 <_kill_r+0x1c>
 8007816:	6023      	str	r3, [r4, #0]
 8007818:	bd38      	pop	{r3, r4, r5, pc}
 800781a:	bf00      	nop
 800781c:	20000318 	.word	0x20000318

08007820 <_getpid_r>:
 8007820:	f7fa b948 	b.w	8001ab4 <_getpid>

08007824 <__sread>:
 8007824:	b510      	push	{r4, lr}
 8007826:	460c      	mov	r4, r1
 8007828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800782c:	f000 f894 	bl	8007958 <_read_r>
 8007830:	2800      	cmp	r0, #0
 8007832:	bfab      	itete	ge
 8007834:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007836:	89a3      	ldrhlt	r3, [r4, #12]
 8007838:	181b      	addge	r3, r3, r0
 800783a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800783e:	bfac      	ite	ge
 8007840:	6563      	strge	r3, [r4, #84]	; 0x54
 8007842:	81a3      	strhlt	r3, [r4, #12]
 8007844:	bd10      	pop	{r4, pc}

08007846 <__swrite>:
 8007846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800784a:	461f      	mov	r7, r3
 800784c:	898b      	ldrh	r3, [r1, #12]
 800784e:	05db      	lsls	r3, r3, #23
 8007850:	4605      	mov	r5, r0
 8007852:	460c      	mov	r4, r1
 8007854:	4616      	mov	r6, r2
 8007856:	d505      	bpl.n	8007864 <__swrite+0x1e>
 8007858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800785c:	2302      	movs	r3, #2
 800785e:	2200      	movs	r2, #0
 8007860:	f000 f868 	bl	8007934 <_lseek_r>
 8007864:	89a3      	ldrh	r3, [r4, #12]
 8007866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800786a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800786e:	81a3      	strh	r3, [r4, #12]
 8007870:	4632      	mov	r2, r6
 8007872:	463b      	mov	r3, r7
 8007874:	4628      	mov	r0, r5
 8007876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800787a:	f000 b817 	b.w	80078ac <_write_r>

0800787e <__sseek>:
 800787e:	b510      	push	{r4, lr}
 8007880:	460c      	mov	r4, r1
 8007882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007886:	f000 f855 	bl	8007934 <_lseek_r>
 800788a:	1c43      	adds	r3, r0, #1
 800788c:	89a3      	ldrh	r3, [r4, #12]
 800788e:	bf15      	itete	ne
 8007890:	6560      	strne	r0, [r4, #84]	; 0x54
 8007892:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007896:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800789a:	81a3      	strheq	r3, [r4, #12]
 800789c:	bf18      	it	ne
 800789e:	81a3      	strhne	r3, [r4, #12]
 80078a0:	bd10      	pop	{r4, pc}

080078a2 <__sclose>:
 80078a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a6:	f000 b813 	b.w	80078d0 <_close_r>
	...

080078ac <_write_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4d07      	ldr	r5, [pc, #28]	; (80078cc <_write_r+0x20>)
 80078b0:	4604      	mov	r4, r0
 80078b2:	4608      	mov	r0, r1
 80078b4:	4611      	mov	r1, r2
 80078b6:	2200      	movs	r2, #0
 80078b8:	602a      	str	r2, [r5, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	f7fa f939 	bl	8001b32 <_write>
 80078c0:	1c43      	adds	r3, r0, #1
 80078c2:	d102      	bne.n	80078ca <_write_r+0x1e>
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	b103      	cbz	r3, 80078ca <_write_r+0x1e>
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	bd38      	pop	{r3, r4, r5, pc}
 80078cc:	20000318 	.word	0x20000318

080078d0 <_close_r>:
 80078d0:	b538      	push	{r3, r4, r5, lr}
 80078d2:	4d06      	ldr	r5, [pc, #24]	; (80078ec <_close_r+0x1c>)
 80078d4:	2300      	movs	r3, #0
 80078d6:	4604      	mov	r4, r0
 80078d8:	4608      	mov	r0, r1
 80078da:	602b      	str	r3, [r5, #0]
 80078dc:	f7fa f945 	bl	8001b6a <_close>
 80078e0:	1c43      	adds	r3, r0, #1
 80078e2:	d102      	bne.n	80078ea <_close_r+0x1a>
 80078e4:	682b      	ldr	r3, [r5, #0]
 80078e6:	b103      	cbz	r3, 80078ea <_close_r+0x1a>
 80078e8:	6023      	str	r3, [r4, #0]
 80078ea:	bd38      	pop	{r3, r4, r5, pc}
 80078ec:	20000318 	.word	0x20000318

080078f0 <_fstat_r>:
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	4d07      	ldr	r5, [pc, #28]	; (8007910 <_fstat_r+0x20>)
 80078f4:	2300      	movs	r3, #0
 80078f6:	4604      	mov	r4, r0
 80078f8:	4608      	mov	r0, r1
 80078fa:	4611      	mov	r1, r2
 80078fc:	602b      	str	r3, [r5, #0]
 80078fe:	f7fa f940 	bl	8001b82 <_fstat>
 8007902:	1c43      	adds	r3, r0, #1
 8007904:	d102      	bne.n	800790c <_fstat_r+0x1c>
 8007906:	682b      	ldr	r3, [r5, #0]
 8007908:	b103      	cbz	r3, 800790c <_fstat_r+0x1c>
 800790a:	6023      	str	r3, [r4, #0]
 800790c:	bd38      	pop	{r3, r4, r5, pc}
 800790e:	bf00      	nop
 8007910:	20000318 	.word	0x20000318

08007914 <_isatty_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	4d06      	ldr	r5, [pc, #24]	; (8007930 <_isatty_r+0x1c>)
 8007918:	2300      	movs	r3, #0
 800791a:	4604      	mov	r4, r0
 800791c:	4608      	mov	r0, r1
 800791e:	602b      	str	r3, [r5, #0]
 8007920:	f7fa f93f 	bl	8001ba2 <_isatty>
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	d102      	bne.n	800792e <_isatty_r+0x1a>
 8007928:	682b      	ldr	r3, [r5, #0]
 800792a:	b103      	cbz	r3, 800792e <_isatty_r+0x1a>
 800792c:	6023      	str	r3, [r4, #0]
 800792e:	bd38      	pop	{r3, r4, r5, pc}
 8007930:	20000318 	.word	0x20000318

08007934 <_lseek_r>:
 8007934:	b538      	push	{r3, r4, r5, lr}
 8007936:	4d07      	ldr	r5, [pc, #28]	; (8007954 <_lseek_r+0x20>)
 8007938:	4604      	mov	r4, r0
 800793a:	4608      	mov	r0, r1
 800793c:	4611      	mov	r1, r2
 800793e:	2200      	movs	r2, #0
 8007940:	602a      	str	r2, [r5, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	f7fa f938 	bl	8001bb8 <_lseek>
 8007948:	1c43      	adds	r3, r0, #1
 800794a:	d102      	bne.n	8007952 <_lseek_r+0x1e>
 800794c:	682b      	ldr	r3, [r5, #0]
 800794e:	b103      	cbz	r3, 8007952 <_lseek_r+0x1e>
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	bd38      	pop	{r3, r4, r5, pc}
 8007954:	20000318 	.word	0x20000318

08007958 <_read_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4d07      	ldr	r5, [pc, #28]	; (8007978 <_read_r+0x20>)
 800795c:	4604      	mov	r4, r0
 800795e:	4608      	mov	r0, r1
 8007960:	4611      	mov	r1, r2
 8007962:	2200      	movs	r2, #0
 8007964:	602a      	str	r2, [r5, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	f7fa f8c6 	bl	8001af8 <_read>
 800796c:	1c43      	adds	r3, r0, #1
 800796e:	d102      	bne.n	8007976 <_read_r+0x1e>
 8007970:	682b      	ldr	r3, [r5, #0]
 8007972:	b103      	cbz	r3, 8007976 <_read_r+0x1e>
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	bd38      	pop	{r3, r4, r5, pc}
 8007978:	20000318 	.word	0x20000318

0800797c <_init>:
 800797c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797e:	bf00      	nop
 8007980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007982:	bc08      	pop	{r3}
 8007984:	469e      	mov	lr, r3
 8007986:	4770      	bx	lr

08007988 <_fini>:
 8007988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798a:	bf00      	nop
 800798c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800798e:	bc08      	pop	{r3}
 8007990:	469e      	mov	lr, r3
 8007992:	4770      	bx	lr
