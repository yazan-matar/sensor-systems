
ADC_Timer_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b8c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08007d30  08007d30  00017d30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800815c  0800815c  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800815c  0800815c  0001815c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008164  08008164  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008164  08008164  00018164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008168  08008168  00018168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800816c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000204  08008370  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08008370  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e0c  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002601  00000000  00000000  00033040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00035648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  00036548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e6b  00000000  00000000  00037360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011518  00000000  00000000  000501cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aed5  00000000  00000000  000616e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fc5b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005090  00000000  00000000  000fc60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007d14 	.word	0x08007d14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	08007d14 	.word	0x08007d14

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <lcd_enable>:
#define LCD_D7 GPIOB,GPIO_PIN_15
#define LCD_BL_ON GPIOA,GPIO_PIN_4


//  LCD code
void lcd_enable(){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2102      	movs	r1, #2
 8000f58:	480b      	ldr	r0, [pc, #44]	; (8000f88 <lcd_enable+0x38>)
 8000f5a:	f002 f8c5 	bl	80030e8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f001 f8ea 	bl	8002138 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_SET);  //pulse needs to be some clock cycles long, we are not in hurry right now
 8000f64:	2201      	movs	r2, #1
 8000f66:	2102      	movs	r1, #2
 8000f68:	4807      	ldr	r0, [pc, #28]	; (8000f88 <lcd_enable+0x38>)
 8000f6a:	f002 f8bd 	bl	80030e8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f001 f8e2 	bl	8002138 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2102      	movs	r1, #2
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <lcd_enable+0x38>)
 8000f7a:	f002 f8b5 	bl	80030e8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f001 f8da 	bl	8002138 <HAL_Delay>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40020400 	.word	0x40020400

08000f8c <lcd_write4>:

//  write a nibble (4 bits)
void lcd_write4(uint8_t word){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(LCD_D4, (word & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET); //we AND the word and the mask. If it's true, we write GPIO_PIN_SET, else _RESET
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa4:	4816      	ldr	r0, [pc, #88]	; (8001000 <lcd_write4+0x74>)
 8000fa6:	f002 f89f 	bl	80030e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D5, (word & 0x02)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	105b      	asrs	r3, r3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fbc:	4810      	ldr	r0, [pc, #64]	; (8001000 <lcd_write4+0x74>)
 8000fbe:	f002 f893 	bl	80030e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D6, (word & 0x04)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	109b      	asrs	r3, r3, #2
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	461a      	mov	r2, r3
 8000fd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fd4:	480a      	ldr	r0, [pc, #40]	; (8001000 <lcd_write4+0x74>)
 8000fd6:	f002 f887 	bl	80030e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D7, (word & 0x08)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	10db      	asrs	r3, r3, #3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fec:	4804      	ldr	r0, [pc, #16]	; (8001000 <lcd_write4+0x74>)
 8000fee:	f002 f87b 	bl	80030e8 <HAL_GPIO_WritePin>
		lcd_enable();  //pulse the E line
 8000ff2:	f7ff ffad 	bl	8000f50 <lcd_enable>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40020400 	.word	0x40020400

08001004 <lcd_write>:

//  write a byte (8 bits)
void lcd_write(uint8_t word){	
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
		lcd_write4(word>>4); //we first write the upper nibble
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	091b      	lsrs	r3, r3, #4
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ffb9 	bl	8000f8c <lcd_write4>
		lcd_write4(word);    //and then the lower nibble
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ffb5 	bl	8000f8c <lcd_write4>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <lcd_command>:
#define DISPLAY_ON 0x04
#define LCD_SETDRAMADD 0x80
uint8_t _display_ctrl = 0;

//  send an instruction to the LCD
void lcd_command(uint8_t byte){
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET); //write an instruction -> RS must be low
 8001036:	2200      	movs	r2, #0
 8001038:	2104      	movs	r1, #4
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <lcd_command+0x24>)
 800103c:	f002 f854 	bl	80030e8 <HAL_GPIO_WritePin>
	lcd_write(byte);
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ffde 	bl	8001004 <lcd_write>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40020400 	.word	0x40020400

08001054 <lcd_clear>:

void lcd_clear(){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	lcd_command(LCD_CLEAR_COMMAND);
 8001058:	2001      	movs	r0, #1
 800105a:	f7ff ffe7 	bl	800102c <lcd_command>
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <lcd_data>:

//  send data to the LCD
void lcd_data(uint8_t byte){
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET); //write data, not instruction -> RS must be high
 800106e:	2201      	movs	r2, #1
 8001070:	2104      	movs	r1, #4
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <lcd_data+0x24>)
 8001074:	f002 f838 	bl	80030e8 <HAL_GPIO_WritePin>
	lcd_write(byte);
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ffc2 	bl	8001004 <lcd_write>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40020400 	.word	0x40020400

0800108c <setCursor>:

//  set (x, y) position of the cursor
void setCursor(uint8_t col, uint8_t row){
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	460a      	mov	r2, r1
 8001096:	71fb      	strb	r3, [r7, #7]
 8001098:	4613      	mov	r3, r2
 800109a:	71bb      	strb	r3, [r7, #6]
	if ((col+1)*(row+1)<80){
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	3301      	adds	r3, #1
 80010a0:	79ba      	ldrb	r2, [r7, #6]
 80010a2:	3201      	adds	r2, #1
 80010a4:	fb02 f303 	mul.w	r3, r2, r3
 80010a8:	2b4f      	cmp	r3, #79	; 0x4f
 80010aa:	dc10      	bgt.n	80010ce <setCursor+0x42>
		lcd_command(LCD_SETDRAMADD|(col + 40*row)); //in the second row, address is offset by 40
 80010ac:	79bb      	ldrb	r3, [r7, #6]
 80010ae:	461a      	mov	r2, r3
 80010b0:	0092      	lsls	r2, r2, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	4413      	add	r3, r2
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	b25b      	sxtb	r3, r3
 80010c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ffaf 	bl	800102c <lcd_command>
	}
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <lcd_print>:

//  print a string on the display, starting from the cursor position
void lcd_print(char string[]){  //pointer to first char in the string
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b084      	sub	sp, #16
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
	
	int size = strlen(string);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff f87e 	bl	80001e0 <strlen>
 80010e4:	4603      	mov	r3, r0
 80010e6:	60fb      	str	r3, [r7, #12]
	
	while (size--){
 80010e8:	e006      	b.n	80010f8 <lcd_print+0x22>
		lcd_data(*string++);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ffb6 	bl	8001064 <lcd_data>
	while (size--){
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	1e5a      	subs	r2, r3, #1
 80010fc:	60fa      	str	r2, [r7, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f3      	bne.n	80010ea <lcd_print+0x14>
	}
}
 8001102:	bf00      	nop
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <lcd_println>:

void lcd_println(char string[], uint8_t row){
 800110c:	b5b0      	push	{r4, r5, r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
	
	char line[] = "                ";
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <lcd_println+0x6c>)
 800111a:	f107 0408 	add.w	r4, r7, #8
 800111e:	461d      	mov	r5, r3
 8001120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001124:	682b      	ldr	r3, [r5, #0]
 8001126:	7023      	strb	r3, [r4, #0]
	
	int size = strlen(string);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff f859 	bl	80001e0 <strlen>
 800112e:	4603      	mov	r3, r0
 8001130:	61fb      	str	r3, [r7, #28]
	
	if (size > 16)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	2b10      	cmp	r3, #16
 8001136:	dd0c      	ble.n	8001152 <lcd_println+0x46>
		size = 16;
 8001138:	2310      	movs	r3, #16
 800113a:	61fb      	str	r3, [r7, #28]

	while (size--){
 800113c:	e009      	b.n	8001152 <lcd_println+0x46>
		line[size] = string[size];
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	4413      	add	r3, r2
 8001144:	7819      	ldrb	r1, [r3, #0]
 8001146:	f107 0208 	add.w	r2, r7, #8
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	4413      	add	r3, r2
 800114e:	460a      	mov	r2, r1
 8001150:	701a      	strb	r2, [r3, #0]
	while (size--){
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	1e5a      	subs	r2, r3, #1
 8001156:	61fa      	str	r2, [r7, #28]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1f0      	bne.n	800113e <lcd_println+0x32>
	}
	setCursor(0, row);
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	4619      	mov	r1, r3
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff ff93 	bl	800108c <setCursor>
	lcd_print(line);
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ffb3 	bl	80010d6 <lcd_print>
}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bdb0      	pop	{r4, r5, r7, pc}
 8001178:	08007d30 	.word	0x08007d30

0800117c <writeCustomChar>:

void writeCustomChar(uint8_t address, uint8_t map[]){ //fill Character Generator RAM with custom symbols
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
	address &= 0x7; //address must be 0 to 7
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	71fb      	strb	r3, [r7, #7]
	lcd_command(0x40 | (address <<3)); //Set CGRAM address + address shifted left by 3 bits to start writing first byte
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	b25b      	sxtb	r3, r3
 8001196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800119a:	b25b      	sxtb	r3, r3
 800119c:	b2db      	uxtb	r3, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff44 	bl	800102c <lcd_command>
	for (int i = 0; i<8; i++){
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	e009      	b.n	80011be <writeCustomChar+0x42>
		lcd_data(map[i]);	
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff56 	bl	8001064 <lcd_data>
	for (int i = 0; i<8; i++){
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	3301      	adds	r3, #1
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2b07      	cmp	r3, #7
 80011c2:	ddf2      	ble.n	80011aa <writeCustomChar+0x2e>
	}
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <loadCustomChars>:

void loadCustomChars(){ //write all custom characters to the LCD module memory
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	writeCustomChar(CHAR_1_5, CUSTOM_1_5);
 80011d4:	490a      	ldr	r1, [pc, #40]	; (8001200 <loadCustomChars+0x30>)
 80011d6:	2001      	movs	r0, #1
 80011d8:	f7ff ffd0 	bl	800117c <writeCustomChar>
	writeCustomChar(CHAR_2_5, CUSTOM_2_5);
 80011dc:	4909      	ldr	r1, [pc, #36]	; (8001204 <loadCustomChars+0x34>)
 80011de:	2002      	movs	r0, #2
 80011e0:	f7ff ffcc 	bl	800117c <writeCustomChar>
	writeCustomChar(CHAR_3_5, CUSTOM_3_5);
 80011e4:	4908      	ldr	r1, [pc, #32]	; (8001208 <loadCustomChars+0x38>)
 80011e6:	2003      	movs	r0, #3
 80011e8:	f7ff ffc8 	bl	800117c <writeCustomChar>
	writeCustomChar(CHAR_4_5, CUSTOM_4_5);
 80011ec:	4907      	ldr	r1, [pc, #28]	; (800120c <loadCustomChars+0x3c>)
 80011ee:	2004      	movs	r0, #4
 80011f0:	f7ff ffc4 	bl	800117c <writeCustomChar>
	writeCustomChar(CHAR_5_5, CUSTOM_5_5);
 80011f4:	4906      	ldr	r1, [pc, #24]	; (8001210 <loadCustomChars+0x40>)
 80011f6:	2005      	movs	r0, #5
 80011f8:	f7ff ffc0 	bl	800117c <writeCustomChar>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000000 	.word	0x20000000
 8001204:	20000008 	.word	0x20000008
 8001208:	20000010 	.word	0x20000010
 800120c:	20000018 	.word	0x20000018
 8001210:	20000020 	.word	0x20000020

08001214 <lcd_drawBar>:

void lcd_drawBar(int value){ //draws a bar using custom characters and spaces
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	setCursor(0,1); //bar is placed in the bottom row
 800121c:	2101      	movs	r1, #1
 800121e:	2000      	movs	r0, #0
 8001220:	f7ff ff34 	bl	800108c <setCursor>

	if (value>80)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b50      	cmp	r3, #80	; 0x50
 8001228:	dd01      	ble.n	800122e <lcd_drawBar+0x1a>
		value = 80;
 800122a:	2350      	movs	r3, #80	; 0x50
 800122c:	607b      	str	r3, [r7, #4]
	int quotient = value / 5;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a23      	ldr	r2, [pc, #140]	; (80012c0 <lcd_drawBar+0xac>)
 8001232:	fb82 1203 	smull	r1, r2, r2, r3
 8001236:	1052      	asrs	r2, r2, #1
 8001238:	17db      	asrs	r3, r3, #31
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	613b      	str	r3, [r7, #16]
	int modulo = value % 5;
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <lcd_drawBar+0xac>)
 8001242:	fb83 1302 	smull	r1, r3, r3, r2
 8001246:	1059      	asrs	r1, r3, #1
 8001248:	17d3      	asrs	r3, r2, #31
 800124a:	1ac9      	subs	r1, r1, r3
 800124c:	460b      	mov	r3, r1
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	440b      	add	r3, r1
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	60fb      	str	r3, [r7, #12]
	
	int i = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
	
	while (i<quotient){ //we write the required number of CHAR_5_5
 800125a:	e007      	b.n	800126c <lcd_drawBar+0x58>
		bar[i] = CHAR_5_5;
 800125c:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <lcd_drawBar+0xb0>)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	4413      	add	r3, r2
 8001262:	2205      	movs	r2, #5
 8001264:	701a      	strb	r2, [r3, #0]
		i++;
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3301      	adds	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
	while (i<quotient){ //we write the required number of CHAR_5_5
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	429a      	cmp	r2, r3
 8001272:	dbf3      	blt.n	800125c <lcd_drawBar+0x48>
	}
	
	if (modulo == 0) bar[i] = ' '; //then we either place a space
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d105      	bne.n	8001286 <lcd_drawBar+0x72>
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <lcd_drawBar+0xb0>)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	4413      	add	r3, r2
 8001280:	2220      	movs	r2, #32
 8001282:	701a      	strb	r2, [r3, #0]
 8001284:	e006      	b.n	8001294 <lcd_drawBar+0x80>
	else {
		bar[i] = CHAR_1_5 + modulo -1; //or the correct partial block
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	b2d9      	uxtb	r1, r3
 800128a:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <lcd_drawBar+0xb0>)
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	4413      	add	r3, r2
 8001290:	460a      	mov	r2, r1
 8001292:	701a      	strb	r2, [r3, #0]
	}
	i++;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	3301      	adds	r3, #1
 8001298:	617b      	str	r3, [r7, #20]
	while (i<16){ //and we fill the remainder with spaces
 800129a:	e007      	b.n	80012ac <lcd_drawBar+0x98>
		bar[i] = ' ';
 800129c:	4a09      	ldr	r2, [pc, #36]	; (80012c4 <lcd_drawBar+0xb0>)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	4413      	add	r3, r2
 80012a2:	2220      	movs	r2, #32
 80012a4:	701a      	strb	r2, [r3, #0]
		i++;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	3301      	adds	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
	while (i<16){ //and we fill the remainder with spaces
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	2b0f      	cmp	r3, #15
 80012b0:	ddf4      	ble.n	800129c <lcd_drawBar+0x88>
	}
	lcd_print(bar); //finally we write to the LCD
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <lcd_drawBar+0xb0>)
 80012b4:	f7ff ff0f 	bl	80010d6 <lcd_print>
}
 80012b8:	bf00      	nop
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	66666667 	.word	0x66666667
 80012c4:	20000230 	.word	0x20000230

080012c8 <lcd_initialize>:

void lcd_initialize(){  //initialize WH1602C LCD module in 4 bit mode, page 25
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0

	HAL_Delay(50);  //wait >40 ms as per datasheet
 80012cc:	2032      	movs	r0, #50	; 0x32
 80012ce:	f000 ff33 	bl	8002138 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2104      	movs	r1, #4
 80012d6:	481f      	ldr	r0, [pc, #124]	; (8001354 <lcd_initialize+0x8c>)
 80012d8:	f001 ff06 	bl	80030e8 <HAL_GPIO_WritePin>
	//LCD WritePIn is hard-wired low as per board schematic

	//Magic reset sequence
	lcd_write4(0x03);  //4-bit mode
 80012dc:	2003      	movs	r0, #3
 80012de:	f7ff fe55 	bl	8000f8c <lcd_write4>
	HAL_Delay(5);
 80012e2:	2005      	movs	r0, #5
 80012e4:	f000 ff28 	bl	8002138 <HAL_Delay>
	lcd_write4(0x03);
 80012e8:	2003      	movs	r0, #3
 80012ea:	f7ff fe4f 	bl	8000f8c <lcd_write4>
	HAL_Delay(5);
 80012ee:	2005      	movs	r0, #5
 80012f0:	f000 ff22 	bl	8002138 <HAL_Delay>
	lcd_write4(0x03);
 80012f4:	2003      	movs	r0, #3
 80012f6:	f7ff fe49 	bl	8000f8c <lcd_write4>
	HAL_Delay(5);
 80012fa:	2005      	movs	r0, #5
 80012fc:	f000 ff1c 	bl	8002138 <HAL_Delay>
	lcd_write4(0x02); //Set 4-bit mode
 8001300:	2002      	movs	r0, #2
 8001302:	f7ff fe43 	bl	8000f8c <lcd_write4>
	lcd_write(0x28); //4bit, 2 lines, 5x8 font
 8001306:	2028      	movs	r0, #40	; 0x28
 8001308:	f7ff fe7c 	bl	8001004 <lcd_write>
	HAL_Delay(5);
 800130c:	2005      	movs	r0, #5
 800130e:	f000 ff13 	bl	8002138 <HAL_Delay>
	lcd_write(0x08); //display off;
 8001312:	2008      	movs	r0, #8
 8001314:	f7ff fe76 	bl	8001004 <lcd_write>
	lcd_write(LCD_CLEAR_COMMAND); 			 //display clear;
 8001318:	2001      	movs	r0, #1
 800131a:	f7ff fe73 	bl	8001004 <lcd_write>
	lcd_write(0x06); //entry mode set: increment
 800131e:	2006      	movs	r0, #6
 8001320:	f7ff fe70 	bl	8001004 <lcd_write>
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);  //enable backlight
 8001324:	2201      	movs	r2, #1
 8001326:	2110      	movs	r1, #16
 8001328:	480b      	ldr	r0, [pc, #44]	; (8001358 <lcd_initialize+0x90>)
 800132a:	f001 fedd 	bl	80030e8 <HAL_GPIO_WritePin>
	//_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON|CURSOR_ON|BLINK_ON;
	_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <lcd_initialize+0x94>)
 8001330:	220c      	movs	r2, #12
 8001332:	701a      	strb	r2, [r3, #0]
	lcd_write(_display_ctrl); //set as above
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <lcd_initialize+0x94>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fe63 	bl	8001004 <lcd_write>
	lcd_write(0x02); //go home
 800133e:	2002      	movs	r0, #2
 8001340:	f7ff fe60 	bl	8001004 <lcd_write>
	HAL_Delay(2);
 8001344:	2002      	movs	r0, #2
 8001346:	f000 fef7 	bl	8002138 <HAL_Delay>
	loadCustomChars();
 800134a:	f7ff ff41 	bl	80011d0 <loadCustomChars>

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40020400 	.word	0x40020400
 8001358:	40020000 	.word	0x40020000
 800135c:	20000220 	.word	0x20000220

08001360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800137c:	4013      	ands	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800138c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001392:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	60d3      	str	r3, [r2, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	if (htim == &htim2){
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d102      	bne.n	80013be <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_ADC_Start_IT(&hadc1);
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80013ba:	f000 ff25 	bl	8002208 <HAL_ADC_Start_IT>
//		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
	}

}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000288 	.word	0x20000288
 80013cc:	20000240 	.word	0x20000240

080013d0 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08e      	sub	sp, #56	; 0x38
 80013d4:	af04      	add	r7, sp, #16
 80013d6:	6078      	str	r0, [r7, #4]
	char buffer[20];
	int value = HAL_ADC_GetValue(&hadc1);
 80013d8:	48cf      	ldr	r0, [pc, #828]	; (8001718 <HAL_ADC_ConvCpltCallback+0x348>)
 80013da:	f001 f914 	bl	8002606 <HAL_ADC_GetValue>
 80013de:	4603      	mov	r3, r0
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
	float voltage = value *3.3 / 4096.0; //make sure that it's a float with the division
 80013e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013e4:	f7ff f8a6 	bl	8000534 <__aeabi_i2d>
 80013e8:	a3b5      	add	r3, pc, #724	; (adr r3, 80016c0 <HAL_ADC_ConvCpltCallback+0x2f0>)
 80013ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ee:	f7ff f90b 	bl	8000608 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	4bc7      	ldr	r3, [pc, #796]	; (800171c <HAL_ADC_ConvCpltCallback+0x34c>)
 8001400:	f7ff fa2c 	bl	800085c <__aeabi_ddiv>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	f7ff fbd4 	bl	8000bb8 <__aeabi_d2f>
 8001410:	4603      	mov	r3, r0
 8001412:	623b      	str	r3, [r7, #32]

	snprintf(buffer, sizeof(buffer), "%s%.3f%s%s", "Voltage: ", voltage, " V");
 8001414:	6a38      	ldr	r0, [r7, #32]
 8001416:	f7ff f89f 	bl	8000558 <__aeabi_f2d>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	f107 000c 	add.w	r0, r7, #12
 8001422:	49bf      	ldr	r1, [pc, #764]	; (8001720 <HAL_ADC_ConvCpltCallback+0x350>)
 8001424:	9102      	str	r1, [sp, #8]
 8001426:	e9cd 2300 	strd	r2, r3, [sp]
 800142a:	4bbe      	ldr	r3, [pc, #760]	; (8001724 <HAL_ADC_ConvCpltCallback+0x354>)
 800142c:	4abe      	ldr	r2, [pc, #760]	; (8001728 <HAL_ADC_ConvCpltCallback+0x358>)
 800142e:	2114      	movs	r1, #20
 8001430:	f004 fa32 	bl	8005898 <sniprintf>
	lcd_println(buffer, 0);
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fe66 	bl	800110c <lcd_println>
	if (voltage < 0.5)							lcd_drawBar(0);
 8001440:	edd7 7a08 	vldr	s15, [r7, #32]
 8001444:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001448:	eef4 7ac7 	vcmpe.f32	s15, s14
 800144c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001450:	d503      	bpl.n	800145a <HAL_ADC_ConvCpltCallback+0x8a>
 8001452:	2000      	movs	r0, #0
 8001454:	f7ff fede 	bl	8001214 <lcd_drawBar>
	else if (voltage >= 2.8 && voltage < 3.0 )	lcd_drawBar(14*BAR);
	else if (voltage >= 3.0 && voltage < 3.2 )	lcd_drawBar(15*BAR);
	else if (voltage >= 3.2 && voltage < 3.3 )	lcd_drawBar(16*BAR-1);

//	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
}
 8001458:	e1d0      	b.n	80017fc <HAL_ADC_ConvCpltCallback+0x42c>
	else if (voltage >= 0.2 && voltage < 0.4 )	lcd_drawBar(1*BAR);
 800145a:	6a38      	ldr	r0, [r7, #32]
 800145c:	f7ff f87c 	bl	8000558 <__aeabi_f2d>
 8001460:	a399      	add	r3, pc, #612	; (adr r3, 80016c8 <HAL_ADC_ConvCpltCallback+0x2f8>)
 8001462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001466:	f7ff fb55 	bl	8000b14 <__aeabi_dcmpge>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00e      	beq.n	800148e <HAL_ADC_ConvCpltCallback+0xbe>
 8001470:	6a38      	ldr	r0, [r7, #32]
 8001472:	f7ff f871 	bl	8000558 <__aeabi_f2d>
 8001476:	a396      	add	r3, pc, #600	; (adr r3, 80016d0 <HAL_ADC_ConvCpltCallback+0x300>)
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	f7ff fb36 	bl	8000aec <__aeabi_dcmplt>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_ADC_ConvCpltCallback+0xbe>
 8001486:	2005      	movs	r0, #5
 8001488:	f7ff fec4 	bl	8001214 <lcd_drawBar>
 800148c:	e1b6      	b.n	80017fc <HAL_ADC_ConvCpltCallback+0x42c>
	else if (voltage >= 0.4 && voltage < 0.6 )	lcd_drawBar(2*BAR);
 800148e:	6a38      	ldr	r0, [r7, #32]
 8001490:	f7ff f862 	bl	8000558 <__aeabi_f2d>
 8001494:	a38e      	add	r3, pc, #568	; (adr r3, 80016d0 <HAL_ADC_ConvCpltCallback+0x300>)
 8001496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149a:	f7ff fb3b 	bl	8000b14 <__aeabi_dcmpge>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00e      	beq.n	80014c2 <HAL_ADC_ConvCpltCallback+0xf2>
 80014a4:	6a38      	ldr	r0, [r7, #32]
 80014a6:	f7ff f857 	bl	8000558 <__aeabi_f2d>
 80014aa:	a38b      	add	r3, pc, #556	; (adr r3, 80016d8 <HAL_ADC_ConvCpltCallback+0x308>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff fb1c 	bl	8000aec <__aeabi_dcmplt>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_ADC_ConvCpltCallback+0xf2>
 80014ba:	200a      	movs	r0, #10
 80014bc:	f7ff feaa 	bl	8001214 <lcd_drawBar>
 80014c0:	e19c      	b.n	80017fc <HAL_ADC_ConvCpltCallback+0x42c>
	else if (voltage >= 0.6 && voltage < 0.8 )	lcd_drawBar(3*BAR);
 80014c2:	6a38      	ldr	r0, [r7, #32]
 80014c4:	f7ff f848 	bl	8000558 <__aeabi_f2d>
 80014c8:	a383      	add	r3, pc, #524	; (adr r3, 80016d8 <HAL_ADC_ConvCpltCallback+0x308>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	f7ff fb21 	bl	8000b14 <__aeabi_dcmpge>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00e      	beq.n	80014f6 <HAL_ADC_ConvCpltCallback+0x126>
 80014d8:	6a38      	ldr	r0, [r7, #32]
 80014da:	f7ff f83d 	bl	8000558 <__aeabi_f2d>
 80014de:	a380      	add	r3, pc, #512	; (adr r3, 80016e0 <HAL_ADC_ConvCpltCallback+0x310>)
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	f7ff fb02 	bl	8000aec <__aeabi_dcmplt>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_ADC_ConvCpltCallback+0x126>
 80014ee:	200f      	movs	r0, #15
 80014f0:	f7ff fe90 	bl	8001214 <lcd_drawBar>
 80014f4:	e182      	b.n	80017fc <HAL_ADC_ConvCpltCallback+0x42c>
	else if (voltage >= 0.8 && voltage < 1.0 )	lcd_drawBar(4*BAR);
 80014f6:	6a38      	ldr	r0, [r7, #32]
 80014f8:	f7ff f82e 	bl	8000558 <__aeabi_f2d>
 80014fc:	a378      	add	r3, pc, #480	; (adr r3, 80016e0 <HAL_ADC_ConvCpltCallback+0x310>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	f7ff fb07 	bl	8000b14 <__aeabi_dcmpge>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00c      	beq.n	8001526 <HAL_ADC_ConvCpltCallback+0x156>
 800150c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001510:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151c:	d503      	bpl.n	8001526 <HAL_ADC_ConvCpltCallback+0x156>
 800151e:	2014      	movs	r0, #20
 8001520:	f7ff fe78 	bl	8001214 <lcd_drawBar>
 8001524:	e16a      	b.n	80017fc <HAL_ADC_ConvCpltCallback+0x42c>
	else if (voltage >= 1.0 && voltage < 1.2 )	lcd_drawBar(5*BAR);
 8001526:	edd7 7a08 	vldr	s15, [r7, #32]
 800152a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800152e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001536:	db0e      	blt.n	8001556 <HAL_ADC_ConvCpltCallback+0x186>
 8001538:	6a38      	ldr	r0, [r7, #32]
 800153a:	f7ff f80d 	bl	8000558 <__aeabi_f2d>
 800153e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001542:	4b7a      	ldr	r3, [pc, #488]	; (800172c <HAL_ADC_ConvCpltCallback+0x35c>)
 8001544:	f7ff fad2 	bl	8000aec <__aeabi_dcmplt>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_ADC_ConvCpltCallback+0x186>
 800154e:	2019      	movs	r0, #25
 8001550:	f7ff fe60 	bl	8001214 <lcd_drawBar>
 8001554:	e152      	b.n	80017fc <HAL_ADC_ConvCpltCallback+0x42c>
	else if (voltage >= 1.2 && voltage < 1.4 )	lcd_drawBar(6*BAR);
 8001556:	6a38      	ldr	r0, [r7, #32]
 8001558:	f7fe fffe 	bl	8000558 <__aeabi_f2d>
 800155c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001560:	4b72      	ldr	r3, [pc, #456]	; (800172c <HAL_ADC_ConvCpltCallback+0x35c>)
 8001562:	f7ff fad7 	bl	8000b14 <__aeabi_dcmpge>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00e      	beq.n	800158a <HAL_ADC_ConvCpltCallback+0x1ba>
 800156c:	6a38      	ldr	r0, [r7, #32]
 800156e:	f7fe fff3 	bl	8000558 <__aeabi_f2d>
 8001572:	a35d      	add	r3, pc, #372	; (adr r3, 80016e8 <HAL_ADC_ConvCpltCallback+0x318>)
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	f7ff fab8 	bl	8000aec <__aeabi_dcmplt>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_ADC_ConvCpltCallback+0x1ba>
 8001582:	201e      	movs	r0, #30
 8001584:	f7ff fe46 	bl	8001214 <lcd_drawBar>
 8001588:	e138      	b.n	80017fc <HAL_ADC_ConvCpltCallback+0x42c>
	else if (voltage >= 1.4 && voltage < 1.6 )	lcd_drawBar(7*BAR);
 800158a:	6a38      	ldr	r0, [r7, #32]
 800158c:	f7fe ffe4 	bl	8000558 <__aeabi_f2d>
 8001590:	a355      	add	r3, pc, #340	; (adr r3, 80016e8 <HAL_ADC_ConvCpltCallback+0x318>)
 8001592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001596:	f7ff fabd 	bl	8000b14 <__aeabi_dcmpge>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00e      	beq.n	80015be <HAL_ADC_ConvCpltCallback+0x1ee>
 80015a0:	6a38      	ldr	r0, [r7, #32]
 80015a2:	f7fe ffd9 	bl	8000558 <__aeabi_f2d>
 80015a6:	a352      	add	r3, pc, #328	; (adr r3, 80016f0 <HAL_ADC_ConvCpltCallback+0x320>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7ff fa9e 	bl	8000aec <__aeabi_dcmplt>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_ADC_ConvCpltCallback+0x1ee>
 80015b6:	2023      	movs	r0, #35	; 0x23
 80015b8:	f7ff fe2c 	bl	8001214 <lcd_drawBar>
 80015bc:	e11e      	b.n	80017fc <HAL_ADC_ConvCpltCallback+0x42c>
	else if (voltage >= 1.6 && voltage < 1.8 )	lcd_drawBar(8*BAR);
 80015be:	6a38      	ldr	r0, [r7, #32]
 80015c0:	f7fe ffca 	bl	8000558 <__aeabi_f2d>
 80015c4:	a34a      	add	r3, pc, #296	; (adr r3, 80016f0 <HAL_ADC_ConvCpltCallback+0x320>)
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	f7ff faa3 	bl	8000b14 <__aeabi_dcmpge>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00e      	beq.n	80015f2 <HAL_ADC_ConvCpltCallback+0x222>
 80015d4:	6a38      	ldr	r0, [r7, #32]
 80015d6:	f7fe ffbf 	bl	8000558 <__aeabi_f2d>
 80015da:	a347      	add	r3, pc, #284	; (adr r3, 80016f8 <HAL_ADC_ConvCpltCallback+0x328>)
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	f7ff fa84 	bl	8000aec <__aeabi_dcmplt>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_ADC_ConvCpltCallback+0x222>
 80015ea:	2028      	movs	r0, #40	; 0x28
 80015ec:	f7ff fe12 	bl	8001214 <lcd_drawBar>
 80015f0:	e104      	b.n	80017fc <HAL_ADC_ConvCpltCallback+0x42c>
	else if (voltage >= 1.8 && voltage < 2.0 )	lcd_drawBar(9*BAR);
 80015f2:	6a38      	ldr	r0, [r7, #32]
 80015f4:	f7fe ffb0 	bl	8000558 <__aeabi_f2d>
 80015f8:	a33f      	add	r3, pc, #252	; (adr r3, 80016f8 <HAL_ADC_ConvCpltCallback+0x328>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f7ff fa89 	bl	8000b14 <__aeabi_dcmpge>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00c      	beq.n	8001622 <HAL_ADC_ConvCpltCallback+0x252>
 8001608:	edd7 7a08 	vldr	s15, [r7, #32]
 800160c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001618:	d503      	bpl.n	8001622 <HAL_ADC_ConvCpltCallback+0x252>
 800161a:	202d      	movs	r0, #45	; 0x2d
 800161c:	f7ff fdfa 	bl	8001214 <lcd_drawBar>
 8001620:	e0ec      	b.n	80017fc <HAL_ADC_ConvCpltCallback+0x42c>
	else if (voltage >= 2.0 && voltage < 2.2 )	lcd_drawBar(10*BAR);
 8001622:	edd7 7a08 	vldr	s15, [r7, #32]
 8001626:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800162a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001632:	db0e      	blt.n	8001652 <HAL_ADC_ConvCpltCallback+0x282>
 8001634:	6a38      	ldr	r0, [r7, #32]
 8001636:	f7fe ff8f 	bl	8000558 <__aeabi_f2d>
 800163a:	a331      	add	r3, pc, #196	; (adr r3, 8001700 <HAL_ADC_ConvCpltCallback+0x330>)
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	f7ff fa54 	bl	8000aec <__aeabi_dcmplt>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_ADC_ConvCpltCallback+0x282>
 800164a:	2032      	movs	r0, #50	; 0x32
 800164c:	f7ff fde2 	bl	8001214 <lcd_drawBar>
 8001650:	e0d4      	b.n	80017fc <HAL_ADC_ConvCpltCallback+0x42c>
	else if (voltage >= 2.2 && voltage < 2.4 )	lcd_drawBar(11*BAR);
 8001652:	6a38      	ldr	r0, [r7, #32]
 8001654:	f7fe ff80 	bl	8000558 <__aeabi_f2d>
 8001658:	a329      	add	r3, pc, #164	; (adr r3, 8001700 <HAL_ADC_ConvCpltCallback+0x330>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7ff fa59 	bl	8000b14 <__aeabi_dcmpge>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d00e      	beq.n	8001686 <HAL_ADC_ConvCpltCallback+0x2b6>
 8001668:	6a38      	ldr	r0, [r7, #32]
 800166a:	f7fe ff75 	bl	8000558 <__aeabi_f2d>
 800166e:	a326      	add	r3, pc, #152	; (adr r3, 8001708 <HAL_ADC_ConvCpltCallback+0x338>)
 8001670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001674:	f7ff fa3a 	bl	8000aec <__aeabi_dcmplt>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_ADC_ConvCpltCallback+0x2b6>
 800167e:	2037      	movs	r0, #55	; 0x37
 8001680:	f7ff fdc8 	bl	8001214 <lcd_drawBar>
 8001684:	e0ba      	b.n	80017fc <HAL_ADC_ConvCpltCallback+0x42c>
	else if (voltage >= 2.4 && voltage < 2.6 )	lcd_drawBar(12*BAR);
 8001686:	6a38      	ldr	r0, [r7, #32]
 8001688:	f7fe ff66 	bl	8000558 <__aeabi_f2d>
 800168c:	a31e      	add	r3, pc, #120	; (adr r3, 8001708 <HAL_ADC_ConvCpltCallback+0x338>)
 800168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001692:	f7ff fa3f 	bl	8000b14 <__aeabi_dcmpge>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d049      	beq.n	8001730 <HAL_ADC_ConvCpltCallback+0x360>
 800169c:	6a38      	ldr	r0, [r7, #32]
 800169e:	f7fe ff5b 	bl	8000558 <__aeabi_f2d>
 80016a2:	a31b      	add	r3, pc, #108	; (adr r3, 8001710 <HAL_ADC_ConvCpltCallback+0x340>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	f7ff fa20 	bl	8000aec <__aeabi_dcmplt>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d03e      	beq.n	8001730 <HAL_ADC_ConvCpltCallback+0x360>
 80016b2:	203c      	movs	r0, #60	; 0x3c
 80016b4:	f7ff fdae 	bl	8001214 <lcd_drawBar>
 80016b8:	e0a0      	b.n	80017fc <HAL_ADC_ConvCpltCallback+0x42c>
 80016ba:	bf00      	nop
 80016bc:	f3af 8000 	nop.w
 80016c0:	66666666 	.word	0x66666666
 80016c4:	400a6666 	.word	0x400a6666
 80016c8:	9999999a 	.word	0x9999999a
 80016cc:	3fc99999 	.word	0x3fc99999
 80016d0:	9999999a 	.word	0x9999999a
 80016d4:	3fd99999 	.word	0x3fd99999
 80016d8:	33333333 	.word	0x33333333
 80016dc:	3fe33333 	.word	0x3fe33333
 80016e0:	9999999a 	.word	0x9999999a
 80016e4:	3fe99999 	.word	0x3fe99999
 80016e8:	66666666 	.word	0x66666666
 80016ec:	3ff66666 	.word	0x3ff66666
 80016f0:	9999999a 	.word	0x9999999a
 80016f4:	3ff99999 	.word	0x3ff99999
 80016f8:	cccccccd 	.word	0xcccccccd
 80016fc:	3ffccccc 	.word	0x3ffccccc
 8001700:	9999999a 	.word	0x9999999a
 8001704:	40019999 	.word	0x40019999
 8001708:	33333333 	.word	0x33333333
 800170c:	40033333 	.word	0x40033333
 8001710:	cccccccd 	.word	0xcccccccd
 8001714:	4004cccc 	.word	0x4004cccc
 8001718:	20000240 	.word	0x20000240
 800171c:	40b00000 	.word	0x40b00000
 8001720:	08007d5c 	.word	0x08007d5c
 8001724:	08007d44 	.word	0x08007d44
 8001728:	08007d50 	.word	0x08007d50
 800172c:	3ff33333 	.word	0x3ff33333
	else if (voltage >= 2.6 && voltage < 2.8 )	lcd_drawBar(13*BAR);
 8001730:	6a38      	ldr	r0, [r7, #32]
 8001732:	f7fe ff11 	bl	8000558 <__aeabi_f2d>
 8001736:	a334      	add	r3, pc, #208	; (adr r3, 8001808 <HAL_ADC_ConvCpltCallback+0x438>)
 8001738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173c:	f7ff f9ea 	bl	8000b14 <__aeabi_dcmpge>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00e      	beq.n	8001764 <HAL_ADC_ConvCpltCallback+0x394>
 8001746:	6a38      	ldr	r0, [r7, #32]
 8001748:	f7fe ff06 	bl	8000558 <__aeabi_f2d>
 800174c:	a330      	add	r3, pc, #192	; (adr r3, 8001810 <HAL_ADC_ConvCpltCallback+0x440>)
 800174e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001752:	f7ff f9cb 	bl	8000aec <__aeabi_dcmplt>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_ADC_ConvCpltCallback+0x394>
 800175c:	2041      	movs	r0, #65	; 0x41
 800175e:	f7ff fd59 	bl	8001214 <lcd_drawBar>
 8001762:	e04b      	b.n	80017fc <HAL_ADC_ConvCpltCallback+0x42c>
	else if (voltage >= 2.8 && voltage < 3.0 )	lcd_drawBar(14*BAR);
 8001764:	6a38      	ldr	r0, [r7, #32]
 8001766:	f7fe fef7 	bl	8000558 <__aeabi_f2d>
 800176a:	a329      	add	r3, pc, #164	; (adr r3, 8001810 <HAL_ADC_ConvCpltCallback+0x440>)
 800176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001770:	f7ff f9d0 	bl	8000b14 <__aeabi_dcmpge>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00c      	beq.n	8001794 <HAL_ADC_ConvCpltCallback+0x3c4>
 800177a:	edd7 7a08 	vldr	s15, [r7, #32]
 800177e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178a:	d503      	bpl.n	8001794 <HAL_ADC_ConvCpltCallback+0x3c4>
 800178c:	2046      	movs	r0, #70	; 0x46
 800178e:	f7ff fd41 	bl	8001214 <lcd_drawBar>
 8001792:	e033      	b.n	80017fc <HAL_ADC_ConvCpltCallback+0x42c>
	else if (voltage >= 3.0 && voltage < 3.2 )	lcd_drawBar(15*BAR);
 8001794:	edd7 7a08 	vldr	s15, [r7, #32]
 8001798:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800179c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a4:	db0e      	blt.n	80017c4 <HAL_ADC_ConvCpltCallback+0x3f4>
 80017a6:	6a38      	ldr	r0, [r7, #32]
 80017a8:	f7fe fed6 	bl	8000558 <__aeabi_f2d>
 80017ac:	a31a      	add	r3, pc, #104	; (adr r3, 8001818 <HAL_ADC_ConvCpltCallback+0x448>)
 80017ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b2:	f7ff f99b 	bl	8000aec <__aeabi_dcmplt>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_ADC_ConvCpltCallback+0x3f4>
 80017bc:	204b      	movs	r0, #75	; 0x4b
 80017be:	f7ff fd29 	bl	8001214 <lcd_drawBar>
 80017c2:	e01b      	b.n	80017fc <HAL_ADC_ConvCpltCallback+0x42c>
	else if (voltage >= 3.2 && voltage < 3.3 )	lcd_drawBar(16*BAR-1);
 80017c4:	6a38      	ldr	r0, [r7, #32]
 80017c6:	f7fe fec7 	bl	8000558 <__aeabi_f2d>
 80017ca:	a313      	add	r3, pc, #76	; (adr r3, 8001818 <HAL_ADC_ConvCpltCallback+0x448>)
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	f7ff f9a0 	bl	8000b14 <__aeabi_dcmpge>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d100      	bne.n	80017dc <HAL_ADC_ConvCpltCallback+0x40c>
}
 80017da:	e00f      	b.n	80017fc <HAL_ADC_ConvCpltCallback+0x42c>
	else if (voltage >= 3.2 && voltage < 3.3 )	lcd_drawBar(16*BAR-1);
 80017dc:	6a38      	ldr	r0, [r7, #32]
 80017de:	f7fe febb 	bl	8000558 <__aeabi_f2d>
 80017e2:	a30f      	add	r3, pc, #60	; (adr r3, 8001820 <HAL_ADC_ConvCpltCallback+0x450>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	f7ff f980 	bl	8000aec <__aeabi_dcmplt>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d100      	bne.n	80017f4 <HAL_ADC_ConvCpltCallback+0x424>
}
 80017f2:	e003      	b.n	80017fc <HAL_ADC_ConvCpltCallback+0x42c>
	else if (voltage >= 3.2 && voltage < 3.3 )	lcd_drawBar(16*BAR-1);
 80017f4:	204f      	movs	r0, #79	; 0x4f
 80017f6:	f7ff fd0d 	bl	8001214 <lcd_drawBar>
}
 80017fa:	e7ff      	b.n	80017fc <HAL_ADC_ConvCpltCallback+0x42c>
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	f3af 8000 	nop.w
 8001808:	cccccccd 	.word	0xcccccccd
 800180c:	4004cccc 	.word	0x4004cccc
 8001810:	66666666 	.word	0x66666666
 8001814:	40066666 	.word	0x40066666
 8001818:	9999999a 	.word	0x9999999a
 800181c:	40099999 	.word	0x40099999
 8001820:	66666666 	.word	0x66666666
 8001824:	400a6666 	.word	0x400a6666

08001828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800182c:	f000 fc12 	bl	8002054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001830:	f000 f81a 	bl	8001868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001834:	f000 f94e 	bl	8001ad4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001838:	f000 f922 	bl	8001a80 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800183c:	f000 f880 	bl	8001940 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001840:	f000 f8d0 	bl	80019e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_initialize();
 8001844:	f7ff fd40 	bl	80012c8 <lcd_initialize>
  lcd_clear();
 8001848:	f7ff fc04 	bl	8001054 <lcd_clear>

  HAL_TIM_Base_Start_IT(&htim2);
 800184c:	4805      	ldr	r0, [pc, #20]	; (8001864 <main+0x3c>)
 800184e:	f002 f929 	bl	8003aa4 <HAL_TIM_Base_Start_IT>
//  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001852:	2006      	movs	r0, #6
 8001854:	f7ff fd84 	bl	8001360 <__NVIC_SetPriorityGrouping>
  HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2101      	movs	r1, #1
 800185c:	2012      	movs	r0, #18
 800185e:	f001 f9f6 	bl	8002c4e <HAL_NVIC_SetPriority>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001862:	e7fe      	b.n	8001862 <main+0x3a>
 8001864:	20000288 	.word	0x20000288

08001868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b094      	sub	sp, #80	; 0x50
 800186c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186e:	f107 0320 	add.w	r3, r7, #32
 8001872:	2230      	movs	r2, #48	; 0x30
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f003 fb9c 	bl	8004fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	4b29      	ldr	r3, [pc, #164]	; (8001938 <SystemClock_Config+0xd0>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	4a28      	ldr	r2, [pc, #160]	; (8001938 <SystemClock_Config+0xd0>)
 8001896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189a:	6413      	str	r3, [r2, #64]	; 0x40
 800189c:	4b26      	ldr	r3, [pc, #152]	; (8001938 <SystemClock_Config+0xd0>)
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018a8:	2300      	movs	r3, #0
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	4b23      	ldr	r3, [pc, #140]	; (800193c <SystemClock_Config+0xd4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018b4:	4a21      	ldr	r2, [pc, #132]	; (800193c <SystemClock_Config+0xd4>)
 80018b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b1f      	ldr	r3, [pc, #124]	; (800193c <SystemClock_Config+0xd4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018c8:	2302      	movs	r3, #2
 80018ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018cc:	2301      	movs	r3, #1
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018d0:	2310      	movs	r3, #16
 80018d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018d4:	2302      	movs	r3, #2
 80018d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018d8:	2300      	movs	r3, #0
 80018da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018dc:	2310      	movs	r3, #16
 80018de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80018e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018e6:	2304      	movs	r3, #4
 80018e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018ea:	2307      	movs	r3, #7
 80018ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ee:	f107 0320 	add.w	r3, r7, #32
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 fc12 	bl	800311c <HAL_RCC_OscConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018fe:	f000 f96f 	bl	8001be0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001902:	230f      	movs	r3, #15
 8001904:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001906:	2302      	movs	r3, #2
 8001908:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800190e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001912:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	2102      	movs	r1, #2
 800191e:	4618      	mov	r0, r3
 8001920:	f001 fe74 	bl	800360c <HAL_RCC_ClockConfig>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800192a:	f000 f959 	bl	8001be0 <Error_Handler>
  }
}
 800192e:	bf00      	nop
 8001930:	3750      	adds	r7, #80	; 0x50
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800
 800193c:	40007000 	.word	0x40007000

08001940 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001946:	463b      	mov	r3, r7
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001952:	4b22      	ldr	r3, [pc, #136]	; (80019dc <MX_ADC1_Init+0x9c>)
 8001954:	4a22      	ldr	r2, [pc, #136]	; (80019e0 <MX_ADC1_Init+0xa0>)
 8001956:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001958:	4b20      	ldr	r3, [pc, #128]	; (80019dc <MX_ADC1_Init+0x9c>)
 800195a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800195e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001960:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <MX_ADC1_Init+0x9c>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001966:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <MX_ADC1_Init+0x9c>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800196c:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <MX_ADC1_Init+0x9c>)
 800196e:	2200      	movs	r2, #0
 8001970:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <MX_ADC1_Init+0x9c>)
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <MX_ADC1_Init+0x9c>)
 800197c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001980:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001982:	4b16      	ldr	r3, [pc, #88]	; (80019dc <MX_ADC1_Init+0x9c>)
 8001984:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001988:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800198a:	4b14      	ldr	r3, [pc, #80]	; (80019dc <MX_ADC1_Init+0x9c>)
 800198c:	2200      	movs	r2, #0
 800198e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <MX_ADC1_Init+0x9c>)
 8001992:	2201      	movs	r2, #1
 8001994:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <MX_ADC1_Init+0x9c>)
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <MX_ADC1_Init+0x9c>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019a4:	480d      	ldr	r0, [pc, #52]	; (80019dc <MX_ADC1_Init+0x9c>)
 80019a6:	f000 fbeb 	bl	8002180 <HAL_ADC_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80019b0:	f000 f916 	bl	8001be0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019b4:	2301      	movs	r3, #1
 80019b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019b8:	2301      	movs	r3, #1
 80019ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80019bc:	2307      	movs	r3, #7
 80019be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019c0:	463b      	mov	r3, r7
 80019c2:	4619      	mov	r1, r3
 80019c4:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_ADC1_Init+0x9c>)
 80019c6:	f000 fe3f 	bl	8002648 <HAL_ADC_ConfigChannel>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80019d0:	f000 f906 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000240 	.word	0x20000240
 80019e0:	40012000 	.word	0x40012000

080019e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f8:	463b      	mov	r3, r7
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a00:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <MX_TIM2_Init+0x98>)
 8001a02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400 - 1;
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <MX_TIM2_Init+0x98>)
 8001a0a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001a0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <MX_TIM2_Init+0x98>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000 - 1;
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <MX_TIM2_Init+0x98>)
 8001a18:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001a1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <MX_TIM2_Init+0x98>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a24:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <MX_TIM2_Init+0x98>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a2a:	4814      	ldr	r0, [pc, #80]	; (8001a7c <MX_TIM2_Init+0x98>)
 8001a2c:	f001 ffea 	bl	8003a04 <HAL_TIM_Base_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a36:	f000 f8d3 	bl	8001be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a40:	f107 0308 	add.w	r3, r7, #8
 8001a44:	4619      	mov	r1, r3
 8001a46:	480d      	ldr	r0, [pc, #52]	; (8001a7c <MX_TIM2_Init+0x98>)
 8001a48:	f002 f996 	bl	8003d78 <HAL_TIM_ConfigClockSource>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a52:	f000 f8c5 	bl	8001be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a56:	2320      	movs	r3, #32
 8001a58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a5e:	463b      	mov	r3, r7
 8001a60:	4619      	mov	r1, r3
 8001a62:	4806      	ldr	r0, [pc, #24]	; (8001a7c <MX_TIM2_Init+0x98>)
 8001a64:	f002 fb92 	bl	800418c <HAL_TIMEx_MasterConfigSynchronization>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a6e:	f000 f8b7 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a72:	bf00      	nop
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000288 	.word	0x20000288

08001a80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_USART2_UART_Init+0x4c>)
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <MX_USART2_UART_Init+0x50>)
 8001a88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <MX_USART2_UART_Init+0x4c>)
 8001a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <MX_USART2_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <MX_USART2_UART_Init+0x4c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <MX_USART2_UART_Init+0x4c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <MX_USART2_UART_Init+0x4c>)
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <MX_USART2_UART_Init+0x4c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <MX_USART2_UART_Init+0x4c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_USART2_UART_Init+0x4c>)
 8001ab8:	f002 fbea 	bl	8004290 <HAL_UART_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ac2:	f000 f88d 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200002d0 	.word	0x200002d0
 8001ad0:	40004400 	.word	0x40004400

08001ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	4b38      	ldr	r3, [pc, #224]	; (8001bd0 <MX_GPIO_Init+0xfc>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a37      	ldr	r2, [pc, #220]	; (8001bd0 <MX_GPIO_Init+0xfc>)
 8001af4:	f043 0304 	orr.w	r3, r3, #4
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b35      	ldr	r3, [pc, #212]	; (8001bd0 <MX_GPIO_Init+0xfc>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b31      	ldr	r3, [pc, #196]	; (8001bd0 <MX_GPIO_Init+0xfc>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a30      	ldr	r2, [pc, #192]	; (8001bd0 <MX_GPIO_Init+0xfc>)
 8001b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b2e      	ldr	r3, [pc, #184]	; (8001bd0 <MX_GPIO_Init+0xfc>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <MX_GPIO_Init+0xfc>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a29      	ldr	r2, [pc, #164]	; (8001bd0 <MX_GPIO_Init+0xfc>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b27      	ldr	r3, [pc, #156]	; (8001bd0 <MX_GPIO_Init+0xfc>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <MX_GPIO_Init+0xfc>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a22      	ldr	r2, [pc, #136]	; (8001bd0 <MX_GPIO_Init+0xfc>)
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <MX_GPIO_Init+0xfc>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2130      	movs	r1, #48	; 0x30
 8001b5e:	481d      	ldr	r0, [pc, #116]	; (8001bd4 <MX_GPIO_Init+0x100>)
 8001b60:	f001 fac2 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8001b64:	2200      	movs	r2, #0
 8001b66:	f24f 0106 	movw	r1, #61446	; 0xf006
 8001b6a:	481b      	ldr	r0, [pc, #108]	; (8001bd8 <MX_GPIO_Init+0x104>)
 8001b6c:	f001 fabc 	bl	80030e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b76:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	4619      	mov	r1, r3
 8001b86:	4815      	ldr	r0, [pc, #84]	; (8001bdc <MX_GPIO_Init+0x108>)
 8001b88:	f001 f92a 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8001b8c:	2330      	movs	r3, #48	; 0x30
 8001b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480c      	ldr	r0, [pc, #48]	; (8001bd4 <MX_GPIO_Init+0x100>)
 8001ba4:	f001 f91c 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8001ba8:	f24f 0306 	movw	r3, #61446	; 0xf006
 8001bac:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_GPIO_Init+0x104>)
 8001bc2:	f001 f90d 	bl	8002de0 <HAL_GPIO_Init>

}
 8001bc6:	bf00      	nop
 8001bc8:	3728      	adds	r7, #40	; 0x28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40020800 	.word	0x40020800

08001be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be4:	b672      	cpsid	i
}
 8001be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <Error_Handler+0x8>
	...

08001bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <HAL_MspInit+0x4c>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a0f      	ldr	r2, [pc, #60]	; (8001c38 <HAL_MspInit+0x4c>)
 8001bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <HAL_MspInit+0x4c>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_MspInit+0x4c>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	4a08      	ldr	r2, [pc, #32]	; (8001c38 <HAL_MspInit+0x4c>)
 8001c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_MspInit+0x4c>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c2a:	2007      	movs	r0, #7
 8001c2c:	f001 f804 	bl	8002c38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40023800 	.word	0x40023800

08001c3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a1b      	ldr	r2, [pc, #108]	; (8001cc8 <HAL_ADC_MspInit+0x8c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d12f      	bne.n	8001cbe <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <HAL_ADC_MspInit+0x90>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	4a19      	ldr	r2, [pc, #100]	; (8001ccc <HAL_ADC_MspInit+0x90>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6e:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <HAL_ADC_MspInit+0x90>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_ADC_MspInit+0x90>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <HAL_ADC_MspInit+0x90>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_ADC_MspInit+0x90>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c96:	2302      	movs	r3, #2
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4809      	ldr	r0, [pc, #36]	; (8001cd0 <HAL_ADC_MspInit+0x94>)
 8001caa:	f001 f899 	bl	8002de0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	2012      	movs	r0, #18
 8001cb4:	f000 ffcb 	bl	8002c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001cb8:	2012      	movs	r0, #18
 8001cba:	f000 ffe4 	bl	8002c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cbe:	bf00      	nop
 8001cc0:	3728      	adds	r7, #40	; 0x28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40012000 	.word	0x40012000
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40020000 	.word	0x40020000

08001cd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce4:	d115      	bne.n	8001d12 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <HAL_TIM_Base_MspInit+0x48>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <HAL_TIM_Base_MspInit+0x48>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_TIM_Base_MspInit+0x48>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	201c      	movs	r0, #28
 8001d08:	f000 ffa1 	bl	8002c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d0c:	201c      	movs	r0, #28
 8001d0e:	f000 ffba 	bl	8002c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800

08001d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a1d      	ldr	r2, [pc, #116]	; (8001db4 <HAL_UART_MspInit+0x94>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d133      	bne.n	8001daa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <HAL_UART_MspInit+0x98>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4a1b      	ldr	r2, [pc, #108]	; (8001db8 <HAL_UART_MspInit+0x98>)
 8001d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d50:	6413      	str	r3, [r2, #64]	; 0x40
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_UART_MspInit+0x98>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_UART_MspInit+0x98>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <HAL_UART_MspInit+0x98>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_UART_MspInit+0x98>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d7a:	230c      	movs	r3, #12
 8001d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d86:	2300      	movs	r3, #0
 8001d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d8a:	2307      	movs	r3, #7
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	4619      	mov	r1, r3
 8001d94:	4809      	ldr	r0, [pc, #36]	; (8001dbc <HAL_UART_MspInit+0x9c>)
 8001d96:	f001 f823 	bl	8002de0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	2026      	movs	r0, #38	; 0x26
 8001da0:	f000 ff55 	bl	8002c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001da4:	2026      	movs	r0, #38	; 0x26
 8001da6:	f000 ff6e 	bl	8002c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001daa:	bf00      	nop
 8001dac:	3728      	adds	r7, #40	; 0x28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40004400 	.word	0x40004400
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020000 	.word	0x40020000

08001dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <NMI_Handler+0x4>

08001dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dca:	e7fe      	b.n	8001dca <HardFault_Handler+0x4>

08001dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <MemManage_Handler+0x4>

08001dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <BusFault_Handler+0x4>

08001dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <UsageFault_Handler+0x4>

08001dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e0c:	f000 f974 	bl	80020f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e18:	4802      	ldr	r0, [pc, #8]	; (8001e24 <ADC_IRQHandler+0x10>)
 8001e1a:	f000 fab3 	bl	8002384 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000240 	.word	0x20000240

08001e28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <TIM2_IRQHandler+0x10>)
 8001e2e:	f001 fe9b 	bl	8003b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000288 	.word	0x20000288

08001e3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <USART2_IRQHandler+0x10>)
 8001e42:	f002 fa73 	bl	800432c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200002d0 	.word	0x200002d0

08001e50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
	return 1;
 8001e54:	2301      	movs	r3, #1
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <_kill>:

int _kill(int pid, int sig)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e6a:	f003 f879 	bl	8004f60 <__errno>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2216      	movs	r2, #22
 8001e72:	601a      	str	r2, [r3, #0]
	return -1;
 8001e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <_exit>:

void _exit (int status)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ffe7 	bl	8001e60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e92:	e7fe      	b.n	8001e92 <_exit+0x12>

08001e94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	e00a      	b.n	8001ebc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ea6:	f3af 8000 	nop.w
 8001eaa:	4601      	mov	r1, r0
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	60ba      	str	r2, [r7, #8]
 8001eb2:	b2ca      	uxtb	r2, r1
 8001eb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	dbf0      	blt.n	8001ea6 <_read+0x12>
	}

return len;
 8001ec4:	687b      	ldr	r3, [r7, #4]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b086      	sub	sp, #24
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	e009      	b.n	8001ef4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	60ba      	str	r2, [r7, #8]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	dbf1      	blt.n	8001ee0 <_write+0x12>
	}
	return len;
 8001efc:	687b      	ldr	r3, [r7, #4]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <_close>:

int _close(int file)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f2e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <_isatty>:

int _isatty(int file)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
	return 1;
 8001f46:	2301      	movs	r3, #1
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
	return 0;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f78:	4a14      	ldr	r2, [pc, #80]	; (8001fcc <_sbrk+0x5c>)
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <_sbrk+0x60>)
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <_sbrk+0x64>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <_sbrk+0x64>)
 8001f8e:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <_sbrk+0x68>)
 8001f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <_sbrk+0x64>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d207      	bcs.n	8001fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa0:	f002 ffde 	bl	8004f60 <__errno>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fae:	e009      	b.n	8001fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <_sbrk+0x64>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fb6:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <_sbrk+0x64>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <_sbrk+0x64>)
 8001fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20018000 	.word	0x20018000
 8001fd0:	00000400 	.word	0x00000400
 8001fd4:	20000224 	.word	0x20000224
 8001fd8:	20000328 	.word	0x20000328

08001fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <SystemInit+0x20>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe6:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <SystemInit+0x20>)
 8001fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002038 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002004:	480d      	ldr	r0, [pc, #52]	; (800203c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002006:	490e      	ldr	r1, [pc, #56]	; (8002040 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002008:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800200c:	e002      	b.n	8002014 <LoopCopyDataInit>

0800200e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002012:	3304      	adds	r3, #4

08002014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002018:	d3f9      	bcc.n	800200e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201a:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800201c:	4c0b      	ldr	r4, [pc, #44]	; (800204c <LoopFillZerobss+0x26>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002020:	e001      	b.n	8002026 <LoopFillZerobss>

08002022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002024:	3204      	adds	r2, #4

08002026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002028:	d3fb      	bcc.n	8002022 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800202a:	f7ff ffd7 	bl	8001fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800202e:	f002 ff9d 	bl	8004f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002032:	f7ff fbf9 	bl	8001828 <main>
  bx  lr    
 8002036:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002038:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800203c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002040:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002044:	0800816c 	.word	0x0800816c
  ldr r2, =_sbss
 8002048:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 800204c:	20000328 	.word	0x20000328

08002050 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002050:	e7fe      	b.n	8002050 <DMA1_Stream0_IRQHandler>
	...

08002054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002058:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <HAL_Init+0x40>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <HAL_Init+0x40>)
 800205e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002062:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_Init+0x40>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <HAL_Init+0x40>)
 800206a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800206e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_Init+0x40>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a07      	ldr	r2, [pc, #28]	; (8002094 <HAL_Init+0x40>)
 8002076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800207a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800207c:	2003      	movs	r0, #3
 800207e:	f000 fddb 	bl	8002c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002082:	2000      	movs	r0, #0
 8002084:	f000 f808 	bl	8002098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002088:	f7ff fdb0 	bl	8001bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023c00 	.word	0x40023c00

08002098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_InitTick+0x54>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <HAL_InitTick+0x58>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	4619      	mov	r1, r3
 80020aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80020b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 fdf3 	bl	8002ca2 <HAL_SYSTICK_Config>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e00e      	b.n	80020e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b0f      	cmp	r3, #15
 80020ca:	d80a      	bhi.n	80020e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020cc:	2200      	movs	r2, #0
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020d4:	f000 fdbb 	bl	8002c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d8:	4a06      	ldr	r2, [pc, #24]	; (80020f4 <HAL_InitTick+0x5c>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	e000      	b.n	80020e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000028 	.word	0x20000028
 80020f0:	20000030 	.word	0x20000030
 80020f4:	2000002c 	.word	0x2000002c

080020f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_IncTick+0x20>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <HAL_IncTick+0x24>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4413      	add	r3, r2
 8002108:	4a04      	ldr	r2, [pc, #16]	; (800211c <HAL_IncTick+0x24>)
 800210a:	6013      	str	r3, [r2, #0]
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	20000030 	.word	0x20000030
 800211c:	20000314 	.word	0x20000314

08002120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return uwTick;
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <HAL_GetTick+0x14>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	20000314 	.word	0x20000314

08002138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002140:	f7ff ffee 	bl	8002120 <HAL_GetTick>
 8002144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002150:	d005      	beq.n	800215e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <HAL_Delay+0x44>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4413      	add	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800215e:	bf00      	nop
 8002160:	f7ff ffde 	bl	8002120 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	429a      	cmp	r2, r3
 800216e:	d8f7      	bhi.n	8002160 <HAL_Delay+0x28>
  {
  }
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000030 	.word	0x20000030

08002180 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e033      	b.n	80021fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fd4c 	bl	8001c3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d118      	bne.n	80021f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021c6:	f023 0302 	bic.w	r3, r3, #2
 80021ca:	f043 0202 	orr.w	r2, r3, #2
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fb5a 	bl	800288c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f023 0303 	bic.w	r3, r3, #3
 80021e6:	f043 0201 	orr.w	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40
 80021ee:	e001      	b.n	80021f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_ADC_Start_IT+0x1a>
 800221e:	2302      	movs	r3, #2
 8002220:	e0a1      	b.n	8002366 <HAL_ADC_Start_IT+0x15e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b01      	cmp	r3, #1
 8002236:	d018      	beq.n	800226a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002248:	4b4a      	ldr	r3, [pc, #296]	; (8002374 <HAL_ADC_Start_IT+0x16c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a4a      	ldr	r2, [pc, #296]	; (8002378 <HAL_ADC_Start_IT+0x170>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	0c9a      	lsrs	r2, r3, #18
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800225c:	e002      	b.n	8002264 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	3b01      	subs	r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f9      	bne.n	800225e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d169      	bne.n	800234c <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002280:	f023 0301 	bic.w	r3, r3, #1
 8002284:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002296:	2b00      	cmp	r3, #0
 8002298:	d007      	beq.n	80022aa <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b6:	d106      	bne.n	80022c6 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022bc:	f023 0206 	bic.w	r2, r3, #6
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	645a      	str	r2, [r3, #68]	; 0x44
 80022c4:	e002      	b.n	80022cc <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022d4:	4b29      	ldr	r3, [pc, #164]	; (800237c <HAL_ADC_Start_IT+0x174>)
 80022d6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80022e0:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022f0:	f043 0320 	orr.w	r3, r3, #32
 80022f4:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10f      	bne.n	8002322 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d129      	bne.n	8002364 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	e020      	b.n	8002364 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a16      	ldr	r2, [pc, #88]	; (8002380 <HAL_ADC_Start_IT+0x178>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d11b      	bne.n	8002364 <HAL_ADC_Start_IT+0x15c>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d114      	bne.n	8002364 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	e00b      	b.n	8002364 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	f043 0210 	orr.w	r2, r3, #16
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235c:	f043 0201 	orr.w	r2, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000028 	.word	0x20000028
 8002378:	431bde83 	.word	0x431bde83
 800237c:	40012300 	.word	0x40012300
 8002380:	40012000 	.word	0x40012000

08002384 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	2300      	movs	r3, #0
 8002392:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b02      	cmp	r3, #2
 80023a0:	bf0c      	ite	eq
 80023a2:	2301      	moveq	r3, #1
 80023a4:	2300      	movne	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0320 	and.w	r3, r3, #32
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	bf0c      	ite	eq
 80023b8:	2301      	moveq	r3, #1
 80023ba:	2300      	movne	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d049      	beq.n	800245a <HAL_ADC_IRQHandler+0xd6>
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d046      	beq.n	800245a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d105      	bne.n	80023e4 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d12b      	bne.n	800244a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d127      	bne.n	800244a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002404:	2b00      	cmp	r3, #0
 8002406:	d006      	beq.n	8002416 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002412:	2b00      	cmp	r3, #0
 8002414:	d119      	bne.n	800244a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0220 	bic.w	r2, r2, #32
 8002424:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d105      	bne.n	800244a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f043 0201 	orr.w	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7fe ffc0 	bl	80013d0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0212 	mvn.w	r2, #18
 8002458:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b04      	cmp	r3, #4
 8002466:	bf0c      	ite	eq
 8002468:	2301      	moveq	r3, #1
 800246a:	2300      	movne	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247a:	2b80      	cmp	r3, #128	; 0x80
 800247c:	bf0c      	ite	eq
 800247e:	2301      	moveq	r3, #1
 8002480:	2300      	movne	r3, #0
 8002482:	b2db      	uxtb	r3, r3
 8002484:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d057      	beq.n	800253c <HAL_ADC_IRQHandler+0x1b8>
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d054      	beq.n	800253c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	2b00      	cmp	r3, #0
 800249c:	d105      	bne.n	80024aa <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d139      	bne.n	800252c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024be:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d006      	beq.n	80024d4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d12b      	bne.n	800252c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d124      	bne.n	800252c <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d11d      	bne.n	800252c <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d119      	bne.n	800252c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002506:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251c:	2b00      	cmp	r3, #0
 800251e:	d105      	bne.n	800252c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	f043 0201 	orr.w	r2, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 faa9 	bl	8002a84 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f06f 020c 	mvn.w	r2, #12
 800253a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b01      	cmp	r3, #1
 8002548:	bf0c      	ite	eq
 800254a:	2301      	moveq	r3, #1
 800254c:	2300      	movne	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255c:	2b40      	cmp	r3, #64	; 0x40
 800255e:	bf0c      	ite	eq
 8002560:	2301      	moveq	r3, #1
 8002562:	2300      	movne	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d017      	beq.n	800259e <HAL_ADC_IRQHandler+0x21a>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d014      	beq.n	800259e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b01      	cmp	r3, #1
 8002580:	d10d      	bne.n	800259e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f846 	bl	8002620 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0201 	mvn.w	r2, #1
 800259c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	bf0c      	ite	eq
 80025ac:	2301      	moveq	r3, #1
 80025ae:	2300      	movne	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025c2:	bf0c      	ite	eq
 80025c4:	2301      	moveq	r3, #1
 80025c6:	2300      	movne	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d015      	beq.n	80025fe <HAL_ADC_IRQHandler+0x27a>
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d012      	beq.n	80025fe <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025dc:	f043 0202 	orr.w	r2, r3, #2
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0220 	mvn.w	r2, #32
 80025ec:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f820 	bl	8002634 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f06f 0220 	mvn.w	r2, #32
 80025fc:	601a      	str	r2, [r3, #0]
  }
}
 80025fe:	bf00      	nop
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x1c>
 8002660:	2302      	movs	r3, #2
 8002662:	e105      	b.n	8002870 <HAL_ADC_ConfigChannel+0x228>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b09      	cmp	r3, #9
 8002672:	d925      	bls.n	80026c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68d9      	ldr	r1, [r3, #12]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	b29b      	uxth	r3, r3
 8002680:	461a      	mov	r2, r3
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	3b1e      	subs	r3, #30
 800268a:	2207      	movs	r2, #7
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43da      	mvns	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	400a      	ands	r2, r1
 8002698:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68d9      	ldr	r1, [r3, #12]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	4618      	mov	r0, r3
 80026ac:	4603      	mov	r3, r0
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4403      	add	r3, r0
 80026b2:	3b1e      	subs	r3, #30
 80026b4:	409a      	lsls	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	e022      	b.n	8002706 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6919      	ldr	r1, [r3, #16]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	4613      	mov	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	2207      	movs	r2, #7
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43da      	mvns	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	400a      	ands	r2, r1
 80026e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6919      	ldr	r1, [r3, #16]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	4618      	mov	r0, r3
 80026f6:	4603      	mov	r3, r0
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	4403      	add	r3, r0
 80026fc:	409a      	lsls	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b06      	cmp	r3, #6
 800270c:	d824      	bhi.n	8002758 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	3b05      	subs	r3, #5
 8002720:	221f      	movs	r2, #31
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43da      	mvns	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	400a      	ands	r2, r1
 800272e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	b29b      	uxth	r3, r3
 800273c:	4618      	mov	r0, r3
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	3b05      	subs	r3, #5
 800274a:	fa00 f203 	lsl.w	r2, r0, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	635a      	str	r2, [r3, #52]	; 0x34
 8002756:	e04c      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b0c      	cmp	r3, #12
 800275e:	d824      	bhi.n	80027aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	3b23      	subs	r3, #35	; 0x23
 8002772:	221f      	movs	r2, #31
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43da      	mvns	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	400a      	ands	r2, r1
 8002780:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	b29b      	uxth	r3, r3
 800278e:	4618      	mov	r0, r3
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	3b23      	subs	r3, #35	; 0x23
 800279c:	fa00 f203 	lsl.w	r2, r0, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30
 80027a8:	e023      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	3b41      	subs	r3, #65	; 0x41
 80027bc:	221f      	movs	r2, #31
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43da      	mvns	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	400a      	ands	r2, r1
 80027ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	4618      	mov	r0, r3
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	3b41      	subs	r3, #65	; 0x41
 80027e6:	fa00 f203 	lsl.w	r2, r0, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027f2:	4b22      	ldr	r3, [pc, #136]	; (800287c <HAL_ADC_ConfigChannel+0x234>)
 80027f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a21      	ldr	r2, [pc, #132]	; (8002880 <HAL_ADC_ConfigChannel+0x238>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d109      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x1cc>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b12      	cmp	r3, #18
 8002806:	d105      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a19      	ldr	r2, [pc, #100]	; (8002880 <HAL_ADC_ConfigChannel+0x238>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d123      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x21e>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b10      	cmp	r3, #16
 8002824:	d003      	beq.n	800282e <HAL_ADC_ConfigChannel+0x1e6>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b11      	cmp	r3, #17
 800282c:	d11b      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b10      	cmp	r3, #16
 8002840:	d111      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002842:	4b10      	ldr	r3, [pc, #64]	; (8002884 <HAL_ADC_ConfigChannel+0x23c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a10      	ldr	r2, [pc, #64]	; (8002888 <HAL_ADC_ConfigChannel+0x240>)
 8002848:	fba2 2303 	umull	r2, r3, r2, r3
 800284c:	0c9a      	lsrs	r2, r3, #18
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002858:	e002      	b.n	8002860 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	3b01      	subs	r3, #1
 800285e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f9      	bne.n	800285a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	40012300 	.word	0x40012300
 8002880:	40012000 	.word	0x40012000
 8002884:	20000028 	.word	0x20000028
 8002888:	431bde83 	.word	0x431bde83

0800288c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002894:	4b79      	ldr	r3, [pc, #484]	; (8002a7c <ADC_Init+0x1f0>)
 8002896:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6859      	ldr	r1, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	021a      	lsls	r2, r3, #8
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6859      	ldr	r1, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002906:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6899      	ldr	r1, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291e:	4a58      	ldr	r2, [pc, #352]	; (8002a80 <ADC_Init+0x1f4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d022      	beq.n	800296a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002932:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6899      	ldr	r1, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002954:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6899      	ldr	r1, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	e00f      	b.n	800298a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002978:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002988:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0202 	bic.w	r2, r2, #2
 8002998:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6899      	ldr	r1, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	7e1b      	ldrb	r3, [r3, #24]
 80029a4:	005a      	lsls	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d01b      	beq.n	80029f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6859      	ldr	r1, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	3b01      	subs	r3, #1
 80029e4:	035a      	lsls	r2, r3, #13
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	e007      	b.n	8002a00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	051a      	lsls	r2, r3, #20
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6899      	ldr	r1, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a42:	025a      	lsls	r2, r3, #9
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6899      	ldr	r1, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	029a      	lsls	r2, r3, #10
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	609a      	str	r2, [r3, #8]
}
 8002a70:	bf00      	nop
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	40012300 	.word	0x40012300
 8002a80:	0f000001 	.word	0x0f000001

08002a84 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <__NVIC_SetPriorityGrouping>:
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <__NVIC_SetPriorityGrouping+0x44>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aca:	4a04      	ldr	r2, [pc, #16]	; (8002adc <__NVIC_SetPriorityGrouping+0x44>)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	60d3      	str	r3, [r2, #12]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae4:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	0a1b      	lsrs	r3, r3, #8
 8002aea:	f003 0307 	and.w	r3, r3, #7
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	db0b      	blt.n	8002b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	f003 021f 	and.w	r2, r3, #31
 8002b14:	4907      	ldr	r1, [pc, #28]	; (8002b34 <__NVIC_EnableIRQ+0x38>)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	e000e100 	.word	0xe000e100

08002b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	6039      	str	r1, [r7, #0]
 8002b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	db0a      	blt.n	8002b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	490c      	ldr	r1, [pc, #48]	; (8002b84 <__NVIC_SetPriority+0x4c>)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	0112      	lsls	r2, r2, #4
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b60:	e00a      	b.n	8002b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4908      	ldr	r1, [pc, #32]	; (8002b88 <__NVIC_SetPriority+0x50>)
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	3b04      	subs	r3, #4
 8002b70:	0112      	lsls	r2, r2, #4
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	440b      	add	r3, r1
 8002b76:	761a      	strb	r2, [r3, #24]
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000e100 	.word	0xe000e100
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b089      	sub	sp, #36	; 0x24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f1c3 0307 	rsb	r3, r3, #7
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	bf28      	it	cs
 8002baa:	2304      	movcs	r3, #4
 8002bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	2b06      	cmp	r3, #6
 8002bb4:	d902      	bls.n	8002bbc <NVIC_EncodePriority+0x30>
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3b03      	subs	r3, #3
 8002bba:	e000      	b.n	8002bbe <NVIC_EncodePriority+0x32>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	401a      	ands	r2, r3
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	fa01 f303 	lsl.w	r3, r1, r3
 8002bde:	43d9      	mvns	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be4:	4313      	orrs	r3, r2
         );
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3724      	adds	r7, #36	; 0x24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
	...

08002bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c04:	d301      	bcc.n	8002c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c06:	2301      	movs	r3, #1
 8002c08:	e00f      	b.n	8002c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c0a:	4a0a      	ldr	r2, [pc, #40]	; (8002c34 <SysTick_Config+0x40>)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c12:	210f      	movs	r1, #15
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c18:	f7ff ff8e 	bl	8002b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <SysTick_Config+0x40>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c22:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <SysTick_Config+0x40>)
 8002c24:	2207      	movs	r2, #7
 8002c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	e000e010 	.word	0xe000e010

08002c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff ff29 	bl	8002a98 <__NVIC_SetPriorityGrouping>
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b086      	sub	sp, #24
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	4603      	mov	r3, r0
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c60:	f7ff ff3e 	bl	8002ae0 <__NVIC_GetPriorityGrouping>
 8002c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	6978      	ldr	r0, [r7, #20]
 8002c6c:	f7ff ff8e 	bl	8002b8c <NVIC_EncodePriority>
 8002c70:	4602      	mov	r2, r0
 8002c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c76:	4611      	mov	r1, r2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ff5d 	bl	8002b38 <__NVIC_SetPriority>
}
 8002c7e:	bf00      	nop
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff31 	bl	8002afc <__NVIC_EnableIRQ>
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff ffa2 	bl	8002bf4 <SysTick_Config>
 8002cb0:	4603      	mov	r3, r0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cc8:	f7ff fa2a 	bl	8002120 <HAL_GetTick>
 8002ccc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d008      	beq.n	8002cec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2280      	movs	r2, #128	; 0x80
 8002cde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e052      	b.n	8002d92 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0216 	bic.w	r2, r2, #22
 8002cfa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695a      	ldr	r2, [r3, #20]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d0a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d103      	bne.n	8002d1c <HAL_DMA_Abort+0x62>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d007      	beq.n	8002d2c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0208 	bic.w	r2, r2, #8
 8002d2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0201 	bic.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d3c:	e013      	b.n	8002d66 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d3e:	f7ff f9ef 	bl	8002120 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b05      	cmp	r3, #5
 8002d4a:	d90c      	bls.n	8002d66 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2203      	movs	r2, #3
 8002d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e015      	b.n	8002d92 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1e4      	bne.n	8002d3e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d78:	223f      	movs	r2, #63	; 0x3f
 8002d7a:	409a      	lsls	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d004      	beq.n	8002db8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2280      	movs	r2, #128	; 0x80
 8002db2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e00c      	b.n	8002dd2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2205      	movs	r2, #5
 8002dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0201 	bic.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b089      	sub	sp, #36	; 0x24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	e159      	b.n	80030b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	f040 8148 	bne.w	80030aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d005      	beq.n	8002e32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d130      	bne.n	8002e94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e68:	2201      	movs	r2, #1
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	091b      	lsrs	r3, r3, #4
 8002e7e:	f003 0201 	and.w	r2, r3, #1
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d017      	beq.n	8002ed0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	2203      	movs	r2, #3
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d123      	bne.n	8002f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	08da      	lsrs	r2, r3, #3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3208      	adds	r2, #8
 8002ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	220f      	movs	r2, #15
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	08da      	lsrs	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3208      	adds	r2, #8
 8002f1e:	69b9      	ldr	r1, [r7, #24]
 8002f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	2203      	movs	r2, #3
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 0203 	and.w	r2, r3, #3
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80a2 	beq.w	80030aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	4b57      	ldr	r3, [pc, #348]	; (80030c8 <HAL_GPIO_Init+0x2e8>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	4a56      	ldr	r2, [pc, #344]	; (80030c8 <HAL_GPIO_Init+0x2e8>)
 8002f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f74:	6453      	str	r3, [r2, #68]	; 0x44
 8002f76:	4b54      	ldr	r3, [pc, #336]	; (80030c8 <HAL_GPIO_Init+0x2e8>)
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f82:	4a52      	ldr	r2, [pc, #328]	; (80030cc <HAL_GPIO_Init+0x2ec>)
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	089b      	lsrs	r3, r3, #2
 8002f88:	3302      	adds	r3, #2
 8002f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	220f      	movs	r2, #15
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a49      	ldr	r2, [pc, #292]	; (80030d0 <HAL_GPIO_Init+0x2f0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d019      	beq.n	8002fe2 <HAL_GPIO_Init+0x202>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a48      	ldr	r2, [pc, #288]	; (80030d4 <HAL_GPIO_Init+0x2f4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <HAL_GPIO_Init+0x1fe>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a47      	ldr	r2, [pc, #284]	; (80030d8 <HAL_GPIO_Init+0x2f8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00d      	beq.n	8002fda <HAL_GPIO_Init+0x1fa>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a46      	ldr	r2, [pc, #280]	; (80030dc <HAL_GPIO_Init+0x2fc>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d007      	beq.n	8002fd6 <HAL_GPIO_Init+0x1f6>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a45      	ldr	r2, [pc, #276]	; (80030e0 <HAL_GPIO_Init+0x300>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d101      	bne.n	8002fd2 <HAL_GPIO_Init+0x1f2>
 8002fce:	2304      	movs	r3, #4
 8002fd0:	e008      	b.n	8002fe4 <HAL_GPIO_Init+0x204>
 8002fd2:	2307      	movs	r3, #7
 8002fd4:	e006      	b.n	8002fe4 <HAL_GPIO_Init+0x204>
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e004      	b.n	8002fe4 <HAL_GPIO_Init+0x204>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e002      	b.n	8002fe4 <HAL_GPIO_Init+0x204>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <HAL_GPIO_Init+0x204>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	f002 0203 	and.w	r2, r2, #3
 8002fea:	0092      	lsls	r2, r2, #2
 8002fec:	4093      	lsls	r3, r2
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ff4:	4935      	ldr	r1, [pc, #212]	; (80030cc <HAL_GPIO_Init+0x2ec>)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	089b      	lsrs	r3, r3, #2
 8002ffa:	3302      	adds	r3, #2
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003002:	4b38      	ldr	r3, [pc, #224]	; (80030e4 <HAL_GPIO_Init+0x304>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	43db      	mvns	r3, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4013      	ands	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003026:	4a2f      	ldr	r2, [pc, #188]	; (80030e4 <HAL_GPIO_Init+0x304>)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800302c:	4b2d      	ldr	r3, [pc, #180]	; (80030e4 <HAL_GPIO_Init+0x304>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003050:	4a24      	ldr	r2, [pc, #144]	; (80030e4 <HAL_GPIO_Init+0x304>)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003056:	4b23      	ldr	r3, [pc, #140]	; (80030e4 <HAL_GPIO_Init+0x304>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800307a:	4a1a      	ldr	r2, [pc, #104]	; (80030e4 <HAL_GPIO_Init+0x304>)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003080:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <HAL_GPIO_Init+0x304>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030a4:	4a0f      	ldr	r2, [pc, #60]	; (80030e4 <HAL_GPIO_Init+0x304>)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3301      	adds	r3, #1
 80030ae:	61fb      	str	r3, [r7, #28]
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	2b0f      	cmp	r3, #15
 80030b4:	f67f aea2 	bls.w	8002dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	3724      	adds	r7, #36	; 0x24
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40013800 	.word	0x40013800
 80030d0:	40020000 	.word	0x40020000
 80030d4:	40020400 	.word	0x40020400
 80030d8:	40020800 	.word	0x40020800
 80030dc:	40020c00 	.word	0x40020c00
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40013c00 	.word	0x40013c00

080030e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
 80030f4:	4613      	mov	r3, r2
 80030f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030f8:	787b      	ldrb	r3, [r7, #1]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030fe:	887a      	ldrh	r2, [r7, #2]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003104:	e003      	b.n	800310e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003106:	887b      	ldrh	r3, [r7, #2]
 8003108:	041a      	lsls	r2, r3, #16
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	619a      	str	r2, [r3, #24]
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e264      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d075      	beq.n	8003226 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800313a:	4ba3      	ldr	r3, [pc, #652]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b04      	cmp	r3, #4
 8003144:	d00c      	beq.n	8003160 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003146:	4ba0      	ldr	r3, [pc, #640]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800314e:	2b08      	cmp	r3, #8
 8003150:	d112      	bne.n	8003178 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003152:	4b9d      	ldr	r3, [pc, #628]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800315e:	d10b      	bne.n	8003178 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003160:	4b99      	ldr	r3, [pc, #612]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d05b      	beq.n	8003224 <HAL_RCC_OscConfig+0x108>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d157      	bne.n	8003224 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e23f      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003180:	d106      	bne.n	8003190 <HAL_RCC_OscConfig+0x74>
 8003182:	4b91      	ldr	r3, [pc, #580]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a90      	ldr	r2, [pc, #576]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e01d      	b.n	80031cc <HAL_RCC_OscConfig+0xb0>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003198:	d10c      	bne.n	80031b4 <HAL_RCC_OscConfig+0x98>
 800319a:	4b8b      	ldr	r3, [pc, #556]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a8a      	ldr	r2, [pc, #552]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	4b88      	ldr	r3, [pc, #544]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a87      	ldr	r2, [pc, #540]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e00b      	b.n	80031cc <HAL_RCC_OscConfig+0xb0>
 80031b4:	4b84      	ldr	r3, [pc, #528]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a83      	ldr	r2, [pc, #524]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80031ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	4b81      	ldr	r3, [pc, #516]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a80      	ldr	r2, [pc, #512]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80031c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d013      	beq.n	80031fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7fe ffa4 	bl	8002120 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031dc:	f7fe ffa0 	bl	8002120 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	; 0x64
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e204      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	4b76      	ldr	r3, [pc, #472]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0xc0>
 80031fa:	e014      	b.n	8003226 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fc:	f7fe ff90 	bl	8002120 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003204:	f7fe ff8c 	bl	8002120 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	; 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e1f0      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003216:	4b6c      	ldr	r3, [pc, #432]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0xe8>
 8003222:	e000      	b.n	8003226 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d063      	beq.n	80032fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003232:	4b65      	ldr	r3, [pc, #404]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800323e:	4b62      	ldr	r3, [pc, #392]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003246:	2b08      	cmp	r3, #8
 8003248:	d11c      	bne.n	8003284 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800324a:	4b5f      	ldr	r3, [pc, #380]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d116      	bne.n	8003284 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003256:	4b5c      	ldr	r3, [pc, #368]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_RCC_OscConfig+0x152>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d001      	beq.n	800326e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e1c4      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326e:	4b56      	ldr	r3, [pc, #344]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4952      	ldr	r1, [pc, #328]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 800327e:	4313      	orrs	r3, r2
 8003280:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003282:	e03a      	b.n	80032fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d020      	beq.n	80032ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800328c:	4b4f      	ldr	r3, [pc, #316]	; (80033cc <HAL_RCC_OscConfig+0x2b0>)
 800328e:	2201      	movs	r2, #1
 8003290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003292:	f7fe ff45 	bl	8002120 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800329a:	f7fe ff41 	bl	8002120 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e1a5      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ac:	4b46      	ldr	r3, [pc, #280]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b8:	4b43      	ldr	r3, [pc, #268]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4940      	ldr	r1, [pc, #256]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	600b      	str	r3, [r1, #0]
 80032cc:	e015      	b.n	80032fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ce:	4b3f      	ldr	r3, [pc, #252]	; (80033cc <HAL_RCC_OscConfig+0x2b0>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fe ff24 	bl	8002120 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032dc:	f7fe ff20 	bl	8002120 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e184      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ee:	4b36      	ldr	r3, [pc, #216]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d030      	beq.n	8003368 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d016      	beq.n	800333c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800330e:	4b30      	ldr	r3, [pc, #192]	; (80033d0 <HAL_RCC_OscConfig+0x2b4>)
 8003310:	2201      	movs	r2, #1
 8003312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003314:	f7fe ff04 	bl	8002120 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800331c:	f7fe ff00 	bl	8002120 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e164      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332e:	4b26      	ldr	r3, [pc, #152]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0x200>
 800333a:	e015      	b.n	8003368 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800333c:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <HAL_RCC_OscConfig+0x2b4>)
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003342:	f7fe feed 	bl	8002120 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800334a:	f7fe fee9 	bl	8002120 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e14d      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800335c:	4b1a      	ldr	r3, [pc, #104]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 800335e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f0      	bne.n	800334a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 80a0 	beq.w	80034b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003376:	2300      	movs	r3, #0
 8003378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337a:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10f      	bne.n	80033a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	4a0e      	ldr	r2, [pc, #56]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003394:	6413      	str	r3, [r2, #64]	; 0x40
 8003396:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_RCC_OscConfig+0x2b8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d121      	bne.n	80033f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b2:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <HAL_RCC_OscConfig+0x2b8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a07      	ldr	r2, [pc, #28]	; (80033d4 <HAL_RCC_OscConfig+0x2b8>)
 80033b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033be:	f7fe feaf 	bl	8002120 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c4:	e011      	b.n	80033ea <HAL_RCC_OscConfig+0x2ce>
 80033c6:	bf00      	nop
 80033c8:	40023800 	.word	0x40023800
 80033cc:	42470000 	.word	0x42470000
 80033d0:	42470e80 	.word	0x42470e80
 80033d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d8:	f7fe fea2 	bl	8002120 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e106      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ea:	4b85      	ldr	r3, [pc, #532]	; (8003600 <HAL_RCC_OscConfig+0x4e4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d106      	bne.n	800340c <HAL_RCC_OscConfig+0x2f0>
 80033fe:	4b81      	ldr	r3, [pc, #516]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	4a80      	ldr	r2, [pc, #512]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6713      	str	r3, [r2, #112]	; 0x70
 800340a:	e01c      	b.n	8003446 <HAL_RCC_OscConfig+0x32a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b05      	cmp	r3, #5
 8003412:	d10c      	bne.n	800342e <HAL_RCC_OscConfig+0x312>
 8003414:	4b7b      	ldr	r3, [pc, #492]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	4a7a      	ldr	r2, [pc, #488]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 800341a:	f043 0304 	orr.w	r3, r3, #4
 800341e:	6713      	str	r3, [r2, #112]	; 0x70
 8003420:	4b78      	ldr	r3, [pc, #480]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	4a77      	ldr	r2, [pc, #476]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6713      	str	r3, [r2, #112]	; 0x70
 800342c:	e00b      	b.n	8003446 <HAL_RCC_OscConfig+0x32a>
 800342e:	4b75      	ldr	r3, [pc, #468]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 8003430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003432:	4a74      	ldr	r2, [pc, #464]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	6713      	str	r3, [r2, #112]	; 0x70
 800343a:	4b72      	ldr	r3, [pc, #456]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343e:	4a71      	ldr	r2, [pc, #452]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 8003440:	f023 0304 	bic.w	r3, r3, #4
 8003444:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d015      	beq.n	800347a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344e:	f7fe fe67 	bl	8002120 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003454:	e00a      	b.n	800346c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fe fe63 	bl	8002120 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	; 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e0c5      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346c:	4b65      	ldr	r3, [pc, #404]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 800346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ee      	beq.n	8003456 <HAL_RCC_OscConfig+0x33a>
 8003478:	e014      	b.n	80034a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347a:	f7fe fe51 	bl	8002120 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003482:	f7fe fe4d 	bl	8002120 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003490:	4293      	cmp	r3, r2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e0af      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003498:	4b5a      	ldr	r3, [pc, #360]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1ee      	bne.n	8003482 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d105      	bne.n	80034b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034aa:	4b56      	ldr	r3, [pc, #344]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	4a55      	ldr	r2, [pc, #340]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 80034b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 809b 	beq.w	80035f6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034c0:	4b50      	ldr	r3, [pc, #320]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 030c 	and.w	r3, r3, #12
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d05c      	beq.n	8003586 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d141      	bne.n	8003558 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d4:	4b4c      	ldr	r3, [pc, #304]	; (8003608 <HAL_RCC_OscConfig+0x4ec>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034da:	f7fe fe21 	bl	8002120 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e2:	f7fe fe1d 	bl	8002120 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e081      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f4:	4b43      	ldr	r3, [pc, #268]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1f0      	bne.n	80034e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	019b      	lsls	r3, r3, #6
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	085b      	lsrs	r3, r3, #1
 8003518:	3b01      	subs	r3, #1
 800351a:	041b      	lsls	r3, r3, #16
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	061b      	lsls	r3, r3, #24
 8003524:	4937      	ldr	r1, [pc, #220]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 8003526:	4313      	orrs	r3, r2
 8003528:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800352a:	4b37      	ldr	r3, [pc, #220]	; (8003608 <HAL_RCC_OscConfig+0x4ec>)
 800352c:	2201      	movs	r2, #1
 800352e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003530:	f7fe fdf6 	bl	8002120 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003538:	f7fe fdf2 	bl	8002120 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e056      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354a:	4b2e      	ldr	r3, [pc, #184]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f0      	beq.n	8003538 <HAL_RCC_OscConfig+0x41c>
 8003556:	e04e      	b.n	80035f6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003558:	4b2b      	ldr	r3, [pc, #172]	; (8003608 <HAL_RCC_OscConfig+0x4ec>)
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355e:	f7fe fddf 	bl	8002120 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003566:	f7fe fddb 	bl	8002120 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e03f      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003578:	4b22      	ldr	r3, [pc, #136]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1f0      	bne.n	8003566 <HAL_RCC_OscConfig+0x44a>
 8003584:	e037      	b.n	80035f6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e032      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003592:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d028      	beq.n	80035f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d121      	bne.n	80035f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d11a      	bne.n	80035f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035c2:	4013      	ands	r3, r2
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035c8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d111      	bne.n	80035f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d8:	085b      	lsrs	r3, r3, #1
 80035da:	3b01      	subs	r3, #1
 80035dc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035de:	429a      	cmp	r2, r3
 80035e0:	d107      	bne.n	80035f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d001      	beq.n	80035f6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40007000 	.word	0x40007000
 8003604:	40023800 	.word	0x40023800
 8003608:	42470060 	.word	0x42470060

0800360c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0cc      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003620:	4b68      	ldr	r3, [pc, #416]	; (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d90c      	bls.n	8003648 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362e:	4b65      	ldr	r3, [pc, #404]	; (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003636:	4b63      	ldr	r3, [pc, #396]	; (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d001      	beq.n	8003648 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0b8      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d020      	beq.n	8003696 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003660:	4b59      	ldr	r3, [pc, #356]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	4a58      	ldr	r2, [pc, #352]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800366a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003678:	4b53      	ldr	r3, [pc, #332]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	4a52      	ldr	r2, [pc, #328]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003682:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003684:	4b50      	ldr	r3, [pc, #320]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	494d      	ldr	r1, [pc, #308]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d044      	beq.n	800372c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d107      	bne.n	80036ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036aa:	4b47      	ldr	r3, [pc, #284]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d119      	bne.n	80036ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e07f      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d003      	beq.n	80036ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d107      	bne.n	80036da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ca:	4b3f      	ldr	r3, [pc, #252]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e06f      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036da:	4b3b      	ldr	r3, [pc, #236]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e067      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ea:	4b37      	ldr	r3, [pc, #220]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f023 0203 	bic.w	r2, r3, #3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	4934      	ldr	r1, [pc, #208]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036fc:	f7fe fd10 	bl	8002120 <HAL_GetTick>
 8003700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003702:	e00a      	b.n	800371a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003704:	f7fe fd0c 	bl	8002120 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e04f      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371a:	4b2b      	ldr	r3, [pc, #172]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 020c 	and.w	r2, r3, #12
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	429a      	cmp	r2, r3
 800372a:	d1eb      	bne.n	8003704 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800372c:	4b25      	ldr	r3, [pc, #148]	; (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d20c      	bcs.n	8003754 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373a:	4b22      	ldr	r3, [pc, #136]	; (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003742:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e032      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003760:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4916      	ldr	r1, [pc, #88]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d009      	beq.n	8003792 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800377e:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	490e      	ldr	r1, [pc, #56]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	4313      	orrs	r3, r2
 8003790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003792:	f000 f821 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 8003796:	4602      	mov	r2, r0
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	490a      	ldr	r1, [pc, #40]	; (80037cc <HAL_RCC_ClockConfig+0x1c0>)
 80037a4:	5ccb      	ldrb	r3, [r1, r3]
 80037a6:	fa22 f303 	lsr.w	r3, r2, r3
 80037aa:	4a09      	ldr	r2, [pc, #36]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ae:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <HAL_RCC_ClockConfig+0x1c8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe fc70 	bl	8002098 <HAL_InitTick>

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40023c00 	.word	0x40023c00
 80037c8:	40023800 	.word	0x40023800
 80037cc:	08007d60 	.word	0x08007d60
 80037d0:	20000028 	.word	0x20000028
 80037d4:	2000002c 	.word	0x2000002c

080037d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037dc:	b084      	sub	sp, #16
 80037de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	607b      	str	r3, [r7, #4]
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	2300      	movs	r3, #0
 80037ea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037f0:	4b67      	ldr	r3, [pc, #412]	; (8003990 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d00d      	beq.n	8003818 <HAL_RCC_GetSysClockFreq+0x40>
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	f200 80bd 	bhi.w	800397c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <HAL_RCC_GetSysClockFreq+0x34>
 8003806:	2b04      	cmp	r3, #4
 8003808:	d003      	beq.n	8003812 <HAL_RCC_GetSysClockFreq+0x3a>
 800380a:	e0b7      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800380c:	4b61      	ldr	r3, [pc, #388]	; (8003994 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800380e:	60bb      	str	r3, [r7, #8]
       break;
 8003810:	e0b7      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003812:	4b61      	ldr	r3, [pc, #388]	; (8003998 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003814:	60bb      	str	r3, [r7, #8]
      break;
 8003816:	e0b4      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003818:	4b5d      	ldr	r3, [pc, #372]	; (8003990 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003820:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003822:	4b5b      	ldr	r3, [pc, #364]	; (8003990 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d04d      	beq.n	80038ca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800382e:	4b58      	ldr	r3, [pc, #352]	; (8003990 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	099b      	lsrs	r3, r3, #6
 8003834:	461a      	mov	r2, r3
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800383e:	f04f 0100 	mov.w	r1, #0
 8003842:	ea02 0800 	and.w	r8, r2, r0
 8003846:	ea03 0901 	and.w	r9, r3, r1
 800384a:	4640      	mov	r0, r8
 800384c:	4649      	mov	r1, r9
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	014b      	lsls	r3, r1, #5
 8003858:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800385c:	0142      	lsls	r2, r0, #5
 800385e:	4610      	mov	r0, r2
 8003860:	4619      	mov	r1, r3
 8003862:	ebb0 0008 	subs.w	r0, r0, r8
 8003866:	eb61 0109 	sbc.w	r1, r1, r9
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	018b      	lsls	r3, r1, #6
 8003874:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003878:	0182      	lsls	r2, r0, #6
 800387a:	1a12      	subs	r2, r2, r0
 800387c:	eb63 0301 	sbc.w	r3, r3, r1
 8003880:	f04f 0000 	mov.w	r0, #0
 8003884:	f04f 0100 	mov.w	r1, #0
 8003888:	00d9      	lsls	r1, r3, #3
 800388a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800388e:	00d0      	lsls	r0, r2, #3
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	eb12 0208 	adds.w	r2, r2, r8
 8003898:	eb43 0309 	adc.w	r3, r3, r9
 800389c:	f04f 0000 	mov.w	r0, #0
 80038a0:	f04f 0100 	mov.w	r1, #0
 80038a4:	0259      	lsls	r1, r3, #9
 80038a6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80038aa:	0250      	lsls	r0, r2, #9
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4610      	mov	r0, r2
 80038b2:	4619      	mov	r1, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	461a      	mov	r2, r3
 80038b8:	f04f 0300 	mov.w	r3, #0
 80038bc:	f7fd f9cc 	bl	8000c58 <__aeabi_uldivmod>
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4613      	mov	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	e04a      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ca:	4b31      	ldr	r3, [pc, #196]	; (8003990 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	099b      	lsrs	r3, r3, #6
 80038d0:	461a      	mov	r2, r3
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038da:	f04f 0100 	mov.w	r1, #0
 80038de:	ea02 0400 	and.w	r4, r2, r0
 80038e2:	ea03 0501 	and.w	r5, r3, r1
 80038e6:	4620      	mov	r0, r4
 80038e8:	4629      	mov	r1, r5
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	014b      	lsls	r3, r1, #5
 80038f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038f8:	0142      	lsls	r2, r0, #5
 80038fa:	4610      	mov	r0, r2
 80038fc:	4619      	mov	r1, r3
 80038fe:	1b00      	subs	r0, r0, r4
 8003900:	eb61 0105 	sbc.w	r1, r1, r5
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	018b      	lsls	r3, r1, #6
 800390e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003912:	0182      	lsls	r2, r0, #6
 8003914:	1a12      	subs	r2, r2, r0
 8003916:	eb63 0301 	sbc.w	r3, r3, r1
 800391a:	f04f 0000 	mov.w	r0, #0
 800391e:	f04f 0100 	mov.w	r1, #0
 8003922:	00d9      	lsls	r1, r3, #3
 8003924:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003928:	00d0      	lsls	r0, r2, #3
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	1912      	adds	r2, r2, r4
 8003930:	eb45 0303 	adc.w	r3, r5, r3
 8003934:	f04f 0000 	mov.w	r0, #0
 8003938:	f04f 0100 	mov.w	r1, #0
 800393c:	0299      	lsls	r1, r3, #10
 800393e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003942:	0290      	lsls	r0, r2, #10
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4610      	mov	r0, r2
 800394a:	4619      	mov	r1, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	461a      	mov	r2, r3
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	f7fd f980 	bl	8000c58 <__aeabi_uldivmod>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4613      	mov	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	0c1b      	lsrs	r3, r3, #16
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	3301      	adds	r3, #1
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	fbb2 f3f3 	udiv	r3, r2, r3
 8003978:	60bb      	str	r3, [r7, #8]
      break;
 800397a:	e002      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800397e:	60bb      	str	r3, [r7, #8]
      break;
 8003980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003982:	68bb      	ldr	r3, [r7, #8]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800398e:	bf00      	nop
 8003990:	40023800 	.word	0x40023800
 8003994:	00f42400 	.word	0x00f42400
 8003998:	007a1200 	.word	0x007a1200

0800399c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a0:	4b03      	ldr	r3, [pc, #12]	; (80039b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039a2:	681b      	ldr	r3, [r3, #0]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	20000028 	.word	0x20000028

080039b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039b8:	f7ff fff0 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039bc:	4602      	mov	r2, r0
 80039be:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	0a9b      	lsrs	r3, r3, #10
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	4903      	ldr	r1, [pc, #12]	; (80039d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ca:	5ccb      	ldrb	r3, [r1, r3]
 80039cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40023800 	.word	0x40023800
 80039d8:	08007d70 	.word	0x08007d70

080039dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039e0:	f7ff ffdc 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	0b5b      	lsrs	r3, r3, #13
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	4903      	ldr	r1, [pc, #12]	; (8003a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039f2:	5ccb      	ldrb	r3, [r1, r3]
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40023800 	.word	0x40023800
 8003a00:	08007d70 	.word	0x08007d70

08003a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e041      	b.n	8003a9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fe f952 	bl	8001cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	4619      	mov	r1, r3
 8003a42:	4610      	mov	r0, r2
 8003a44:	f000 fa88 	bl	8003f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d001      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e044      	b.n	8003b46 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a1e      	ldr	r2, [pc, #120]	; (8003b54 <HAL_TIM_Base_Start_IT+0xb0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d018      	beq.n	8003b10 <HAL_TIM_Base_Start_IT+0x6c>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae6:	d013      	beq.n	8003b10 <HAL_TIM_Base_Start_IT+0x6c>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1a      	ldr	r2, [pc, #104]	; (8003b58 <HAL_TIM_Base_Start_IT+0xb4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00e      	beq.n	8003b10 <HAL_TIM_Base_Start_IT+0x6c>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a19      	ldr	r2, [pc, #100]	; (8003b5c <HAL_TIM_Base_Start_IT+0xb8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d009      	beq.n	8003b10 <HAL_TIM_Base_Start_IT+0x6c>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a17      	ldr	r2, [pc, #92]	; (8003b60 <HAL_TIM_Base_Start_IT+0xbc>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d004      	beq.n	8003b10 <HAL_TIM_Base_Start_IT+0x6c>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a16      	ldr	r2, [pc, #88]	; (8003b64 <HAL_TIM_Base_Start_IT+0xc0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d111      	bne.n	8003b34 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b06      	cmp	r3, #6
 8003b20:	d010      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0201 	orr.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b32:	e007      	b.n	8003b44 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	40010000 	.word	0x40010000
 8003b58:	40000400 	.word	0x40000400
 8003b5c:	40000800 	.word	0x40000800
 8003b60:	40000c00 	.word	0x40000c00
 8003b64:	40014000 	.word	0x40014000

08003b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d122      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d11b      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f06f 0202 	mvn.w	r2, #2
 8003b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f9b5 	bl	8003f1a <HAL_TIM_IC_CaptureCallback>
 8003bb0:	e005      	b.n	8003bbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f9a7 	bl	8003f06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f9b8 	bl	8003f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d122      	bne.n	8003c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d11b      	bne.n	8003c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0204 	mvn.w	r2, #4
 8003be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2202      	movs	r2, #2
 8003bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f98b 	bl	8003f1a <HAL_TIM_IC_CaptureCallback>
 8003c04:	e005      	b.n	8003c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f97d 	bl	8003f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f98e 	bl	8003f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d122      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d11b      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0208 	mvn.w	r2, #8
 8003c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2204      	movs	r2, #4
 8003c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f961 	bl	8003f1a <HAL_TIM_IC_CaptureCallback>
 8003c58:	e005      	b.n	8003c66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f953 	bl	8003f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f964 	bl	8003f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b10      	cmp	r3, #16
 8003c78:	d122      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d11b      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0210 	mvn.w	r2, #16
 8003c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2208      	movs	r2, #8
 8003c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f937 	bl	8003f1a <HAL_TIM_IC_CaptureCallback>
 8003cac:	e005      	b.n	8003cba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f929 	bl	8003f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f93a 	bl	8003f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d10e      	bne.n	8003cec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d107      	bne.n	8003cec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0201 	mvn.w	r2, #1
 8003ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fd fb5e 	bl	80013a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf6:	2b80      	cmp	r3, #128	; 0x80
 8003cf8:	d10e      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d04:	2b80      	cmp	r3, #128	; 0x80
 8003d06:	d107      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fab2 	bl	800427c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d22:	2b40      	cmp	r3, #64	; 0x40
 8003d24:	d10e      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d30:	2b40      	cmp	r3, #64	; 0x40
 8003d32:	d107      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f8ff 	bl	8003f42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f003 0320 	and.w	r3, r3, #32
 8003d4e:	2b20      	cmp	r3, #32
 8003d50:	d10e      	bne.n	8003d70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b20      	cmp	r3, #32
 8003d5e:	d107      	bne.n	8003d70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f06f 0220 	mvn.w	r2, #32
 8003d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fa7c 	bl	8004268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d70:	bf00      	nop
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_TIM_ConfigClockSource+0x1c>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e0b4      	b.n	8003efe <HAL_TIM_ConfigClockSource+0x186>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dcc:	d03e      	beq.n	8003e4c <HAL_TIM_ConfigClockSource+0xd4>
 8003dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd2:	f200 8087 	bhi.w	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dda:	f000 8086 	beq.w	8003eea <HAL_TIM_ConfigClockSource+0x172>
 8003dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de2:	d87f      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003de4:	2b70      	cmp	r3, #112	; 0x70
 8003de6:	d01a      	beq.n	8003e1e <HAL_TIM_ConfigClockSource+0xa6>
 8003de8:	2b70      	cmp	r3, #112	; 0x70
 8003dea:	d87b      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dec:	2b60      	cmp	r3, #96	; 0x60
 8003dee:	d050      	beq.n	8003e92 <HAL_TIM_ConfigClockSource+0x11a>
 8003df0:	2b60      	cmp	r3, #96	; 0x60
 8003df2:	d877      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003df4:	2b50      	cmp	r3, #80	; 0x50
 8003df6:	d03c      	beq.n	8003e72 <HAL_TIM_ConfigClockSource+0xfa>
 8003df8:	2b50      	cmp	r3, #80	; 0x50
 8003dfa:	d873      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dfc:	2b40      	cmp	r3, #64	; 0x40
 8003dfe:	d058      	beq.n	8003eb2 <HAL_TIM_ConfigClockSource+0x13a>
 8003e00:	2b40      	cmp	r3, #64	; 0x40
 8003e02:	d86f      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e04:	2b30      	cmp	r3, #48	; 0x30
 8003e06:	d064      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e08:	2b30      	cmp	r3, #48	; 0x30
 8003e0a:	d86b      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d060      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	d867      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d05c      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e18:	2b10      	cmp	r3, #16
 8003e1a:	d05a      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e1c:	e062      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	6899      	ldr	r1, [r3, #8]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f000 f98d 	bl	800414c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	609a      	str	r2, [r3, #8]
      break;
 8003e4a:	e04f      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6818      	ldr	r0, [r3, #0]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	6899      	ldr	r1, [r3, #8]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f000 f976 	bl	800414c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e6e:	609a      	str	r2, [r3, #8]
      break;
 8003e70:	e03c      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	6859      	ldr	r1, [r3, #4]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	f000 f8ea 	bl	8004058 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2150      	movs	r1, #80	; 0x50
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 f943 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 8003e90:	e02c      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	6859      	ldr	r1, [r3, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f000 f909 	bl	80040b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2160      	movs	r1, #96	; 0x60
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 f933 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 8003eb0:	e01c      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6859      	ldr	r1, [r3, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f000 f8ca 	bl	8004058 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2140      	movs	r1, #64	; 0x40
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 f923 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 8003ed0:	e00c      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4619      	mov	r1, r3
 8003edc:	4610      	mov	r0, r2
 8003ede:	f000 f91a 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 8003ee2:	e003      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee8:	e000      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003eea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
	...

08003f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a34      	ldr	r2, [pc, #208]	; (800403c <TIM_Base_SetConfig+0xe4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00f      	beq.n	8003f90 <TIM_Base_SetConfig+0x38>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f76:	d00b      	beq.n	8003f90 <TIM_Base_SetConfig+0x38>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a31      	ldr	r2, [pc, #196]	; (8004040 <TIM_Base_SetConfig+0xe8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d007      	beq.n	8003f90 <TIM_Base_SetConfig+0x38>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a30      	ldr	r2, [pc, #192]	; (8004044 <TIM_Base_SetConfig+0xec>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d003      	beq.n	8003f90 <TIM_Base_SetConfig+0x38>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a2f      	ldr	r2, [pc, #188]	; (8004048 <TIM_Base_SetConfig+0xf0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d108      	bne.n	8003fa2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a25      	ldr	r2, [pc, #148]	; (800403c <TIM_Base_SetConfig+0xe4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d01b      	beq.n	8003fe2 <TIM_Base_SetConfig+0x8a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb0:	d017      	beq.n	8003fe2 <TIM_Base_SetConfig+0x8a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a22      	ldr	r2, [pc, #136]	; (8004040 <TIM_Base_SetConfig+0xe8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d013      	beq.n	8003fe2 <TIM_Base_SetConfig+0x8a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a21      	ldr	r2, [pc, #132]	; (8004044 <TIM_Base_SetConfig+0xec>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00f      	beq.n	8003fe2 <TIM_Base_SetConfig+0x8a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a20      	ldr	r2, [pc, #128]	; (8004048 <TIM_Base_SetConfig+0xf0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00b      	beq.n	8003fe2 <TIM_Base_SetConfig+0x8a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a1f      	ldr	r2, [pc, #124]	; (800404c <TIM_Base_SetConfig+0xf4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d007      	beq.n	8003fe2 <TIM_Base_SetConfig+0x8a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a1e      	ldr	r2, [pc, #120]	; (8004050 <TIM_Base_SetConfig+0xf8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d003      	beq.n	8003fe2 <TIM_Base_SetConfig+0x8a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a1d      	ldr	r2, [pc, #116]	; (8004054 <TIM_Base_SetConfig+0xfc>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d108      	bne.n	8003ff4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a08      	ldr	r2, [pc, #32]	; (800403c <TIM_Base_SetConfig+0xe4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d103      	bne.n	8004028 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	615a      	str	r2, [r3, #20]
}
 800402e:	bf00      	nop
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40010000 	.word	0x40010000
 8004040:	40000400 	.word	0x40000400
 8004044:	40000800 	.word	0x40000800
 8004048:	40000c00 	.word	0x40000c00
 800404c:	40014000 	.word	0x40014000
 8004050:	40014400 	.word	0x40014400
 8004054:	40014800 	.word	0x40014800

08004058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	f023 0201 	bic.w	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f023 030a 	bic.w	r3, r3, #10
 8004094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	621a      	str	r2, [r3, #32]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b087      	sub	sp, #28
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	f023 0210 	bic.w	r2, r3, #16
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	031b      	lsls	r3, r3, #12
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	621a      	str	r2, [r3, #32]
}
 800410a:	bf00      	nop
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004116:	b480      	push	{r7}
 8004118:	b085      	sub	sp, #20
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	f043 0307 	orr.w	r3, r3, #7
 8004138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	609a      	str	r2, [r3, #8]
}
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004166:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	021a      	lsls	r2, r3, #8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	431a      	orrs	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4313      	orrs	r3, r2
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4313      	orrs	r3, r2
 8004178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	609a      	str	r2, [r3, #8]
}
 8004180:	bf00      	nop
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e050      	b.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1c      	ldr	r2, [pc, #112]	; (8004254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d018      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f0:	d013      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a18      	ldr	r2, [pc, #96]	; (8004258 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00e      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a16      	ldr	r2, [pc, #88]	; (800425c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d009      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a15      	ldr	r2, [pc, #84]	; (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d004      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a13      	ldr	r2, [pc, #76]	; (8004264 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d10c      	bne.n	8004234 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004220:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	4313      	orrs	r3, r2
 800422a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40010000 	.word	0x40010000
 8004258:	40000400 	.word	0x40000400
 800425c:	40000800 	.word	0x40000800
 8004260:	40000c00 	.word	0x40000c00
 8004264:	40014000 	.word	0x40014000

08004268 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e03f      	b.n	8004322 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fd fd32 	bl	8001d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2224      	movs	r2, #36	; 0x24
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fc7b 	bl	8004bd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695a      	ldr	r2, [r3, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004308:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
	...

0800432c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b0ba      	sub	sp, #232	; 0xe8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004352:	2300      	movs	r3, #0
 8004354:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004358:	2300      	movs	r3, #0
 800435a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800435e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800436a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10f      	bne.n	8004392 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004376:	f003 0320 	and.w	r3, r3, #32
 800437a:	2b00      	cmp	r3, #0
 800437c:	d009      	beq.n	8004392 <HAL_UART_IRQHandler+0x66>
 800437e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fb65 	bl	8004a5a <UART_Receive_IT>
      return;
 8004390:	e256      	b.n	8004840 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 80de 	beq.w	8004558 <HAL_UART_IRQHandler+0x22c>
 800439c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 80d1 	beq.w	8004558 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00b      	beq.n	80043da <HAL_UART_IRQHandler+0xae>
 80043c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	f043 0201 	orr.w	r2, r3, #1
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00b      	beq.n	80043fe <HAL_UART_IRQHandler+0xd2>
 80043e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d005      	beq.n	80043fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f043 0202 	orr.w	r2, r3, #2
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00b      	beq.n	8004422 <HAL_UART_IRQHandler+0xf6>
 800440a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d005      	beq.n	8004422 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	f043 0204 	orr.w	r2, r3, #4
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d011      	beq.n	8004452 <HAL_UART_IRQHandler+0x126>
 800442e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b00      	cmp	r3, #0
 8004438:	d105      	bne.n	8004446 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800443a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d005      	beq.n	8004452 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	f043 0208 	orr.w	r2, r3, #8
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 81ed 	beq.w	8004836 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800445c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_UART_IRQHandler+0x14e>
 8004468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 faf0 	bl	8004a5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004484:	2b40      	cmp	r3, #64	; 0x40
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b00      	cmp	r3, #0
 800449c:	d103      	bne.n	80044a6 <HAL_UART_IRQHandler+0x17a>
 800449e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d04f      	beq.n	8004546 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f9f8 	bl	800489c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b6:	2b40      	cmp	r3, #64	; 0x40
 80044b8:	d141      	bne.n	800453e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3314      	adds	r3, #20
 80044c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044c8:	e853 3f00 	ldrex	r3, [r3]
 80044cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3314      	adds	r3, #20
 80044e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80044e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044f6:	e841 2300 	strex	r3, r2, [r1]
 80044fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1d9      	bne.n	80044ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	2b00      	cmp	r3, #0
 800450c:	d013      	beq.n	8004536 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004512:	4a7d      	ldr	r2, [pc, #500]	; (8004708 <HAL_UART_IRQHandler+0x3dc>)
 8004514:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451a:	4618      	mov	r0, r3
 800451c:	f7fe fc3d 	bl	8002d9a <HAL_DMA_Abort_IT>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d016      	beq.n	8004554 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004530:	4610      	mov	r0, r2
 8004532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004534:	e00e      	b.n	8004554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f99a 	bl	8004870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800453c:	e00a      	b.n	8004554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f996 	bl	8004870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004544:	e006      	b.n	8004554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f992 	bl	8004870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004552:	e170      	b.n	8004836 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004554:	bf00      	nop
    return;
 8004556:	e16e      	b.n	8004836 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455c:	2b01      	cmp	r3, #1
 800455e:	f040 814a 	bne.w	80047f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004566:	f003 0310 	and.w	r3, r3, #16
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 8143 	beq.w	80047f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 813c 	beq.w	80047f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800457e:	2300      	movs	r3, #0
 8004580:	60bb      	str	r3, [r7, #8]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	60bb      	str	r3, [r7, #8]
 8004592:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459e:	2b40      	cmp	r3, #64	; 0x40
 80045a0:	f040 80b4 	bne.w	800470c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 8140 	beq.w	800483a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045c2:	429a      	cmp	r2, r3
 80045c4:	f080 8139 	bcs.w	800483a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045da:	f000 8088 	beq.w	80046ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	330c      	adds	r3, #12
 80045e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045ec:	e853 3f00 	ldrex	r3, [r3]
 80045f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	330c      	adds	r3, #12
 8004606:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800460a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800460e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004612:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004616:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1d9      	bne.n	80045de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3314      	adds	r3, #20
 8004630:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800463a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800463c:	f023 0301 	bic.w	r3, r3, #1
 8004640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3314      	adds	r3, #20
 800464a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800464e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004652:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004654:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004656:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e1      	bne.n	800462a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3314      	adds	r3, #20
 800466c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004670:	e853 3f00 	ldrex	r3, [r3]
 8004674:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800467c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3314      	adds	r3, #20
 8004686:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800468a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800468c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004690:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004692:	e841 2300 	strex	r3, r2, [r1]
 8004696:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1e3      	bne.n	8004666 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	330c      	adds	r3, #12
 80046b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b6:	e853 3f00 	ldrex	r3, [r3]
 80046ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046be:	f023 0310 	bic.w	r3, r3, #16
 80046c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	330c      	adds	r3, #12
 80046cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80046d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80046d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046d8:	e841 2300 	strex	r3, r2, [r1]
 80046dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1e3      	bne.n	80046ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fe fae6 	bl	8002cba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	4619      	mov	r1, r3
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f8c0 	bl	8004884 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004704:	e099      	b.n	800483a <HAL_UART_IRQHandler+0x50e>
 8004706:	bf00      	nop
 8004708:	08004963 	.word	0x08004963
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004714:	b29b      	uxth	r3, r3
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 808b 	beq.w	800483e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004728:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 8086 	beq.w	800483e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	330c      	adds	r3, #12
 8004738:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004748:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	330c      	adds	r3, #12
 8004752:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004756:	647a      	str	r2, [r7, #68]	; 0x44
 8004758:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800475c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800475e:	e841 2300 	strex	r3, r2, [r1]
 8004762:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e3      	bne.n	8004732 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3314      	adds	r3, #20
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	e853 3f00 	ldrex	r3, [r3]
 8004778:	623b      	str	r3, [r7, #32]
   return(result);
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	f023 0301 	bic.w	r3, r3, #1
 8004780:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3314      	adds	r3, #20
 800478a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800478e:	633a      	str	r2, [r7, #48]	; 0x30
 8004790:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004796:	e841 2300 	strex	r3, r2, [r1]
 800479a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1e3      	bne.n	800476a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	330c      	adds	r3, #12
 80047b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	e853 3f00 	ldrex	r3, [r3]
 80047be:	60fb      	str	r3, [r7, #12]
   return(result);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f023 0310 	bic.w	r3, r3, #16
 80047c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	330c      	adds	r3, #12
 80047d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80047d4:	61fa      	str	r2, [r7, #28]
 80047d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	69b9      	ldr	r1, [r7, #24]
 80047da:	69fa      	ldr	r2, [r7, #28]
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	617b      	str	r3, [r7, #20]
   return(result);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e3      	bne.n	80047b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047ec:	4619      	mov	r1, r3
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f848 	bl	8004884 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047f4:	e023      	b.n	800483e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d009      	beq.n	8004816 <HAL_UART_IRQHandler+0x4ea>
 8004802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f8bb 	bl	800498a <UART_Transmit_IT>
    return;
 8004814:	e014      	b.n	8004840 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800481a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00e      	beq.n	8004840 <HAL_UART_IRQHandler+0x514>
 8004822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482a:	2b00      	cmp	r3, #0
 800482c:	d008      	beq.n	8004840 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f8fb 	bl	8004a2a <UART_EndTransmit_IT>
    return;
 8004834:	e004      	b.n	8004840 <HAL_UART_IRQHandler+0x514>
    return;
 8004836:	bf00      	nop
 8004838:	e002      	b.n	8004840 <HAL_UART_IRQHandler+0x514>
      return;
 800483a:	bf00      	nop
 800483c:	e000      	b.n	8004840 <HAL_UART_IRQHandler+0x514>
      return;
 800483e:	bf00      	nop
  }
}
 8004840:	37e8      	adds	r7, #232	; 0xe8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop

08004848 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	460b      	mov	r3, r1
 800488e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800489c:	b480      	push	{r7}
 800489e:	b095      	sub	sp, #84	; 0x54
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	330c      	adds	r3, #12
 80048aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ae:	e853 3f00 	ldrex	r3, [r3]
 80048b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	330c      	adds	r3, #12
 80048c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048c4:	643a      	str	r2, [r7, #64]	; 0x40
 80048c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048cc:	e841 2300 	strex	r3, r2, [r1]
 80048d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e5      	bne.n	80048a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3314      	adds	r3, #20
 80048de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	e853 3f00 	ldrex	r3, [r3]
 80048e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f023 0301 	bic.w	r3, r3, #1
 80048ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3314      	adds	r3, #20
 80048f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004900:	e841 2300 	strex	r3, r2, [r1]
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1e5      	bne.n	80048d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004910:	2b01      	cmp	r3, #1
 8004912:	d119      	bne.n	8004948 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	330c      	adds	r3, #12
 800491a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	60bb      	str	r3, [r7, #8]
   return(result);
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f023 0310 	bic.w	r3, r3, #16
 800492a:	647b      	str	r3, [r7, #68]	; 0x44
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	330c      	adds	r3, #12
 8004932:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004934:	61ba      	str	r2, [r7, #24]
 8004936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	6979      	ldr	r1, [r7, #20]
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	613b      	str	r3, [r7, #16]
   return(result);
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e5      	bne.n	8004914 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004956:	bf00      	nop
 8004958:	3754      	adds	r7, #84	; 0x54
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b084      	sub	sp, #16
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f7ff ff77 	bl	8004870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004982:	bf00      	nop
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800498a:	b480      	push	{r7}
 800498c:	b085      	sub	sp, #20
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b21      	cmp	r3, #33	; 0x21
 800499c:	d13e      	bne.n	8004a1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a6:	d114      	bne.n	80049d2 <UART_Transmit_IT+0x48>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d110      	bne.n	80049d2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	1c9a      	adds	r2, r3, #2
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	621a      	str	r2, [r3, #32]
 80049d0:	e008      	b.n	80049e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	1c59      	adds	r1, r3, #1
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6211      	str	r1, [r2, #32]
 80049dc:	781a      	ldrb	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	4619      	mov	r1, r3
 80049f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10f      	bne.n	8004a18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	e000      	b.n	8004a1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a1c:	2302      	movs	r3, #2
  }
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b082      	sub	sp, #8
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff fefc 	bl	8004848 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b08c      	sub	sp, #48	; 0x30
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b22      	cmp	r3, #34	; 0x22
 8004a6c:	f040 80ab 	bne.w	8004bc6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a78:	d117      	bne.n	8004aaa <UART_Receive_IT+0x50>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d113      	bne.n	8004aaa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	1c9a      	adds	r2, r3, #2
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	629a      	str	r2, [r3, #40]	; 0x28
 8004aa8:	e026      	b.n	8004af8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004abc:	d007      	beq.n	8004ace <UART_Receive_IT+0x74>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10a      	bne.n	8004adc <UART_Receive_IT+0x82>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad8:	701a      	strb	r2, [r3, #0]
 8004ada:	e008      	b.n	8004aee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	4619      	mov	r1, r3
 8004b06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d15a      	bne.n	8004bc2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0220 	bic.w	r2, r2, #32
 8004b1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695a      	ldr	r2, [r3, #20]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0201 	bic.w	r2, r2, #1
 8004b3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d135      	bne.n	8004bb8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	330c      	adds	r3, #12
 8004b58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	e853 3f00 	ldrex	r3, [r3]
 8004b60:	613b      	str	r3, [r7, #16]
   return(result);
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f023 0310 	bic.w	r3, r3, #16
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	330c      	adds	r3, #12
 8004b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b72:	623a      	str	r2, [r7, #32]
 8004b74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b76:	69f9      	ldr	r1, [r7, #28]
 8004b78:	6a3a      	ldr	r2, [r7, #32]
 8004b7a:	e841 2300 	strex	r3, r2, [r1]
 8004b7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1e5      	bne.n	8004b52 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0310 	and.w	r3, r3, #16
 8004b90:	2b10      	cmp	r3, #16
 8004b92:	d10a      	bne.n	8004baa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff fe67 	bl	8004884 <HAL_UARTEx_RxEventCallback>
 8004bb6:	e002      	b.n	8004bbe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff fe4f 	bl	800485c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e002      	b.n	8004bc8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	e000      	b.n	8004bc8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004bc6:	2302      	movs	r3, #2
  }
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3730      	adds	r7, #48	; 0x30
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd4:	b09f      	sub	sp, #124	; 0x7c
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be6:	68d9      	ldr	r1, [r3, #12]
 8004be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	ea40 0301 	orr.w	r3, r0, r1
 8004bf0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	431a      	orrs	r2, r3
 8004c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c14:	f021 010c 	bic.w	r1, r1, #12
 8004c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c1e:	430b      	orrs	r3, r1
 8004c20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c2e:	6999      	ldr	r1, [r3, #24]
 8004c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	ea40 0301 	orr.w	r3, r0, r1
 8004c38:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	4bc5      	ldr	r3, [pc, #788]	; (8004f54 <UART_SetConfig+0x384>)
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d004      	beq.n	8004c4e <UART_SetConfig+0x7e>
 8004c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	4bc3      	ldr	r3, [pc, #780]	; (8004f58 <UART_SetConfig+0x388>)
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d103      	bne.n	8004c56 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c4e:	f7fe fec5 	bl	80039dc <HAL_RCC_GetPCLK2Freq>
 8004c52:	6778      	str	r0, [r7, #116]	; 0x74
 8004c54:	e002      	b.n	8004c5c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c56:	f7fe fead 	bl	80039b4 <HAL_RCC_GetPCLK1Freq>
 8004c5a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c64:	f040 80b6 	bne.w	8004dd4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c6a:	461c      	mov	r4, r3
 8004c6c:	f04f 0500 	mov.w	r5, #0
 8004c70:	4622      	mov	r2, r4
 8004c72:	462b      	mov	r3, r5
 8004c74:	1891      	adds	r1, r2, r2
 8004c76:	6439      	str	r1, [r7, #64]	; 0x40
 8004c78:	415b      	adcs	r3, r3
 8004c7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c80:	1912      	adds	r2, r2, r4
 8004c82:	eb45 0303 	adc.w	r3, r5, r3
 8004c86:	f04f 0000 	mov.w	r0, #0
 8004c8a:	f04f 0100 	mov.w	r1, #0
 8004c8e:	00d9      	lsls	r1, r3, #3
 8004c90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c94:	00d0      	lsls	r0, r2, #3
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	1911      	adds	r1, r2, r4
 8004c9c:	6639      	str	r1, [r7, #96]	; 0x60
 8004c9e:	416b      	adcs	r3, r5
 8004ca0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	1891      	adds	r1, r2, r2
 8004cae:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cb0:	415b      	adcs	r3, r3
 8004cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cb8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004cbc:	f7fb ffcc 	bl	8000c58 <__aeabi_uldivmod>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4ba5      	ldr	r3, [pc, #660]	; (8004f5c <UART_SetConfig+0x38c>)
 8004cc6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	011e      	lsls	r6, r3, #4
 8004cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cd0:	461c      	mov	r4, r3
 8004cd2:	f04f 0500 	mov.w	r5, #0
 8004cd6:	4622      	mov	r2, r4
 8004cd8:	462b      	mov	r3, r5
 8004cda:	1891      	adds	r1, r2, r2
 8004cdc:	6339      	str	r1, [r7, #48]	; 0x30
 8004cde:	415b      	adcs	r3, r3
 8004ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ce2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ce6:	1912      	adds	r2, r2, r4
 8004ce8:	eb45 0303 	adc.w	r3, r5, r3
 8004cec:	f04f 0000 	mov.w	r0, #0
 8004cf0:	f04f 0100 	mov.w	r1, #0
 8004cf4:	00d9      	lsls	r1, r3, #3
 8004cf6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cfa:	00d0      	lsls	r0, r2, #3
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	1911      	adds	r1, r2, r4
 8004d02:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d04:	416b      	adcs	r3, r5
 8004d06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	1891      	adds	r1, r2, r2
 8004d14:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d16:	415b      	adcs	r3, r3
 8004d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d1e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004d22:	f7fb ff99 	bl	8000c58 <__aeabi_uldivmod>
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4b8c      	ldr	r3, [pc, #560]	; (8004f5c <UART_SetConfig+0x38c>)
 8004d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d30:	095b      	lsrs	r3, r3, #5
 8004d32:	2164      	movs	r1, #100	; 0x64
 8004d34:	fb01 f303 	mul.w	r3, r1, r3
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	3332      	adds	r3, #50	; 0x32
 8004d3e:	4a87      	ldr	r2, [pc, #540]	; (8004f5c <UART_SetConfig+0x38c>)
 8004d40:	fba2 2303 	umull	r2, r3, r2, r3
 8004d44:	095b      	lsrs	r3, r3, #5
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d4c:	441e      	add	r6, r3
 8004d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d50:	4618      	mov	r0, r3
 8004d52:	f04f 0100 	mov.w	r1, #0
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	1894      	adds	r4, r2, r2
 8004d5c:	623c      	str	r4, [r7, #32]
 8004d5e:	415b      	adcs	r3, r3
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
 8004d62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d66:	1812      	adds	r2, r2, r0
 8004d68:	eb41 0303 	adc.w	r3, r1, r3
 8004d6c:	f04f 0400 	mov.w	r4, #0
 8004d70:	f04f 0500 	mov.w	r5, #0
 8004d74:	00dd      	lsls	r5, r3, #3
 8004d76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d7a:	00d4      	lsls	r4, r2, #3
 8004d7c:	4622      	mov	r2, r4
 8004d7e:	462b      	mov	r3, r5
 8004d80:	1814      	adds	r4, r2, r0
 8004d82:	653c      	str	r4, [r7, #80]	; 0x50
 8004d84:	414b      	adcs	r3, r1
 8004d86:	657b      	str	r3, [r7, #84]	; 0x54
 8004d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	1891      	adds	r1, r2, r2
 8004d94:	61b9      	str	r1, [r7, #24]
 8004d96:	415b      	adcs	r3, r3
 8004d98:	61fb      	str	r3, [r7, #28]
 8004d9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d9e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004da2:	f7fb ff59 	bl	8000c58 <__aeabi_uldivmod>
 8004da6:	4602      	mov	r2, r0
 8004da8:	460b      	mov	r3, r1
 8004daa:	4b6c      	ldr	r3, [pc, #432]	; (8004f5c <UART_SetConfig+0x38c>)
 8004dac:	fba3 1302 	umull	r1, r3, r3, r2
 8004db0:	095b      	lsrs	r3, r3, #5
 8004db2:	2164      	movs	r1, #100	; 0x64
 8004db4:	fb01 f303 	mul.w	r3, r1, r3
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	3332      	adds	r3, #50	; 0x32
 8004dbe:	4a67      	ldr	r2, [pc, #412]	; (8004f5c <UART_SetConfig+0x38c>)
 8004dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	f003 0207 	and.w	r2, r3, #7
 8004dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4432      	add	r2, r6
 8004dd0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dd2:	e0b9      	b.n	8004f48 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dd6:	461c      	mov	r4, r3
 8004dd8:	f04f 0500 	mov.w	r5, #0
 8004ddc:	4622      	mov	r2, r4
 8004dde:	462b      	mov	r3, r5
 8004de0:	1891      	adds	r1, r2, r2
 8004de2:	6139      	str	r1, [r7, #16]
 8004de4:	415b      	adcs	r3, r3
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004dec:	1912      	adds	r2, r2, r4
 8004dee:	eb45 0303 	adc.w	r3, r5, r3
 8004df2:	f04f 0000 	mov.w	r0, #0
 8004df6:	f04f 0100 	mov.w	r1, #0
 8004dfa:	00d9      	lsls	r1, r3, #3
 8004dfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e00:	00d0      	lsls	r0, r2, #3
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	eb12 0804 	adds.w	r8, r2, r4
 8004e0a:	eb43 0905 	adc.w	r9, r3, r5
 8004e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f04f 0100 	mov.w	r1, #0
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	f04f 0300 	mov.w	r3, #0
 8004e20:	008b      	lsls	r3, r1, #2
 8004e22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e26:	0082      	lsls	r2, r0, #2
 8004e28:	4640      	mov	r0, r8
 8004e2a:	4649      	mov	r1, r9
 8004e2c:	f7fb ff14 	bl	8000c58 <__aeabi_uldivmod>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4b49      	ldr	r3, [pc, #292]	; (8004f5c <UART_SetConfig+0x38c>)
 8004e36:	fba3 2302 	umull	r2, r3, r3, r2
 8004e3a:	095b      	lsrs	r3, r3, #5
 8004e3c:	011e      	lsls	r6, r3, #4
 8004e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e40:	4618      	mov	r0, r3
 8004e42:	f04f 0100 	mov.w	r1, #0
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	1894      	adds	r4, r2, r2
 8004e4c:	60bc      	str	r4, [r7, #8]
 8004e4e:	415b      	adcs	r3, r3
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e56:	1812      	adds	r2, r2, r0
 8004e58:	eb41 0303 	adc.w	r3, r1, r3
 8004e5c:	f04f 0400 	mov.w	r4, #0
 8004e60:	f04f 0500 	mov.w	r5, #0
 8004e64:	00dd      	lsls	r5, r3, #3
 8004e66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e6a:	00d4      	lsls	r4, r2, #3
 8004e6c:	4622      	mov	r2, r4
 8004e6e:	462b      	mov	r3, r5
 8004e70:	1814      	adds	r4, r2, r0
 8004e72:	64bc      	str	r4, [r7, #72]	; 0x48
 8004e74:	414b      	adcs	r3, r1
 8004e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f04f 0100 	mov.w	r1, #0
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	f04f 0300 	mov.w	r3, #0
 8004e8a:	008b      	lsls	r3, r1, #2
 8004e8c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e90:	0082      	lsls	r2, r0, #2
 8004e92:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004e96:	f7fb fedf 	bl	8000c58 <__aeabi_uldivmod>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4b2f      	ldr	r3, [pc, #188]	; (8004f5c <UART_SetConfig+0x38c>)
 8004ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ea4:	095b      	lsrs	r3, r3, #5
 8004ea6:	2164      	movs	r1, #100	; 0x64
 8004ea8:	fb01 f303 	mul.w	r3, r1, r3
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	3332      	adds	r3, #50	; 0x32
 8004eb2:	4a2a      	ldr	r2, [pc, #168]	; (8004f5c <UART_SetConfig+0x38c>)
 8004eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ebe:	441e      	add	r6, r3
 8004ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f04f 0100 	mov.w	r1, #0
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	1894      	adds	r4, r2, r2
 8004ece:	603c      	str	r4, [r7, #0]
 8004ed0:	415b      	adcs	r3, r3
 8004ed2:	607b      	str	r3, [r7, #4]
 8004ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ed8:	1812      	adds	r2, r2, r0
 8004eda:	eb41 0303 	adc.w	r3, r1, r3
 8004ede:	f04f 0400 	mov.w	r4, #0
 8004ee2:	f04f 0500 	mov.w	r5, #0
 8004ee6:	00dd      	lsls	r5, r3, #3
 8004ee8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004eec:	00d4      	lsls	r4, r2, #3
 8004eee:	4622      	mov	r2, r4
 8004ef0:	462b      	mov	r3, r5
 8004ef2:	eb12 0a00 	adds.w	sl, r2, r0
 8004ef6:	eb43 0b01 	adc.w	fp, r3, r1
 8004efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f04f 0100 	mov.w	r1, #0
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	f04f 0300 	mov.w	r3, #0
 8004f0c:	008b      	lsls	r3, r1, #2
 8004f0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f12:	0082      	lsls	r2, r0, #2
 8004f14:	4650      	mov	r0, sl
 8004f16:	4659      	mov	r1, fp
 8004f18:	f7fb fe9e 	bl	8000c58 <__aeabi_uldivmod>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4b0e      	ldr	r3, [pc, #56]	; (8004f5c <UART_SetConfig+0x38c>)
 8004f22:	fba3 1302 	umull	r1, r3, r3, r2
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	2164      	movs	r1, #100	; 0x64
 8004f2a:	fb01 f303 	mul.w	r3, r1, r3
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	3332      	adds	r3, #50	; 0x32
 8004f34:	4a09      	ldr	r2, [pc, #36]	; (8004f5c <UART_SetConfig+0x38c>)
 8004f36:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3a:	095b      	lsrs	r3, r3, #5
 8004f3c:	f003 020f 	and.w	r2, r3, #15
 8004f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4432      	add	r2, r6
 8004f46:	609a      	str	r2, [r3, #8]
}
 8004f48:	bf00      	nop
 8004f4a:	377c      	adds	r7, #124	; 0x7c
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f52:	bf00      	nop
 8004f54:	40011000 	.word	0x40011000
 8004f58:	40011400 	.word	0x40011400
 8004f5c:	51eb851f 	.word	0x51eb851f

08004f60 <__errno>:
 8004f60:	4b01      	ldr	r3, [pc, #4]	; (8004f68 <__errno+0x8>)
 8004f62:	6818      	ldr	r0, [r3, #0]
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	20000034 	.word	0x20000034

08004f6c <__libc_init_array>:
 8004f6c:	b570      	push	{r4, r5, r6, lr}
 8004f6e:	4d0d      	ldr	r5, [pc, #52]	; (8004fa4 <__libc_init_array+0x38>)
 8004f70:	4c0d      	ldr	r4, [pc, #52]	; (8004fa8 <__libc_init_array+0x3c>)
 8004f72:	1b64      	subs	r4, r4, r5
 8004f74:	10a4      	asrs	r4, r4, #2
 8004f76:	2600      	movs	r6, #0
 8004f78:	42a6      	cmp	r6, r4
 8004f7a:	d109      	bne.n	8004f90 <__libc_init_array+0x24>
 8004f7c:	4d0b      	ldr	r5, [pc, #44]	; (8004fac <__libc_init_array+0x40>)
 8004f7e:	4c0c      	ldr	r4, [pc, #48]	; (8004fb0 <__libc_init_array+0x44>)
 8004f80:	f002 fec8 	bl	8007d14 <_init>
 8004f84:	1b64      	subs	r4, r4, r5
 8004f86:	10a4      	asrs	r4, r4, #2
 8004f88:	2600      	movs	r6, #0
 8004f8a:	42a6      	cmp	r6, r4
 8004f8c:	d105      	bne.n	8004f9a <__libc_init_array+0x2e>
 8004f8e:	bd70      	pop	{r4, r5, r6, pc}
 8004f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f94:	4798      	blx	r3
 8004f96:	3601      	adds	r6, #1
 8004f98:	e7ee      	b.n	8004f78 <__libc_init_array+0xc>
 8004f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f9e:	4798      	blx	r3
 8004fa0:	3601      	adds	r6, #1
 8004fa2:	e7f2      	b.n	8004f8a <__libc_init_array+0x1e>
 8004fa4:	08008164 	.word	0x08008164
 8004fa8:	08008164 	.word	0x08008164
 8004fac:	08008164 	.word	0x08008164
 8004fb0:	08008168 	.word	0x08008168

08004fb4 <memset>:
 8004fb4:	4402      	add	r2, r0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d100      	bne.n	8004fbe <memset+0xa>
 8004fbc:	4770      	bx	lr
 8004fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004fc2:	e7f9      	b.n	8004fb8 <memset+0x4>

08004fc4 <__cvt>:
 8004fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc8:	ec55 4b10 	vmov	r4, r5, d0
 8004fcc:	2d00      	cmp	r5, #0
 8004fce:	460e      	mov	r6, r1
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	462b      	mov	r3, r5
 8004fd4:	bfbb      	ittet	lt
 8004fd6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004fda:	461d      	movlt	r5, r3
 8004fdc:	2300      	movge	r3, #0
 8004fde:	232d      	movlt	r3, #45	; 0x2d
 8004fe0:	700b      	strb	r3, [r1, #0]
 8004fe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fe4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004fe8:	4691      	mov	r9, r2
 8004fea:	f023 0820 	bic.w	r8, r3, #32
 8004fee:	bfbc      	itt	lt
 8004ff0:	4622      	movlt	r2, r4
 8004ff2:	4614      	movlt	r4, r2
 8004ff4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ff8:	d005      	beq.n	8005006 <__cvt+0x42>
 8004ffa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ffe:	d100      	bne.n	8005002 <__cvt+0x3e>
 8005000:	3601      	adds	r6, #1
 8005002:	2102      	movs	r1, #2
 8005004:	e000      	b.n	8005008 <__cvt+0x44>
 8005006:	2103      	movs	r1, #3
 8005008:	ab03      	add	r3, sp, #12
 800500a:	9301      	str	r3, [sp, #4]
 800500c:	ab02      	add	r3, sp, #8
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	ec45 4b10 	vmov	d0, r4, r5
 8005014:	4653      	mov	r3, sl
 8005016:	4632      	mov	r2, r6
 8005018:	f000 fcfe 	bl	8005a18 <_dtoa_r>
 800501c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005020:	4607      	mov	r7, r0
 8005022:	d102      	bne.n	800502a <__cvt+0x66>
 8005024:	f019 0f01 	tst.w	r9, #1
 8005028:	d022      	beq.n	8005070 <__cvt+0xac>
 800502a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800502e:	eb07 0906 	add.w	r9, r7, r6
 8005032:	d110      	bne.n	8005056 <__cvt+0x92>
 8005034:	783b      	ldrb	r3, [r7, #0]
 8005036:	2b30      	cmp	r3, #48	; 0x30
 8005038:	d10a      	bne.n	8005050 <__cvt+0x8c>
 800503a:	2200      	movs	r2, #0
 800503c:	2300      	movs	r3, #0
 800503e:	4620      	mov	r0, r4
 8005040:	4629      	mov	r1, r5
 8005042:	f7fb fd49 	bl	8000ad8 <__aeabi_dcmpeq>
 8005046:	b918      	cbnz	r0, 8005050 <__cvt+0x8c>
 8005048:	f1c6 0601 	rsb	r6, r6, #1
 800504c:	f8ca 6000 	str.w	r6, [sl]
 8005050:	f8da 3000 	ldr.w	r3, [sl]
 8005054:	4499      	add	r9, r3
 8005056:	2200      	movs	r2, #0
 8005058:	2300      	movs	r3, #0
 800505a:	4620      	mov	r0, r4
 800505c:	4629      	mov	r1, r5
 800505e:	f7fb fd3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005062:	b108      	cbz	r0, 8005068 <__cvt+0xa4>
 8005064:	f8cd 900c 	str.w	r9, [sp, #12]
 8005068:	2230      	movs	r2, #48	; 0x30
 800506a:	9b03      	ldr	r3, [sp, #12]
 800506c:	454b      	cmp	r3, r9
 800506e:	d307      	bcc.n	8005080 <__cvt+0xbc>
 8005070:	9b03      	ldr	r3, [sp, #12]
 8005072:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005074:	1bdb      	subs	r3, r3, r7
 8005076:	4638      	mov	r0, r7
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	b004      	add	sp, #16
 800507c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005080:	1c59      	adds	r1, r3, #1
 8005082:	9103      	str	r1, [sp, #12]
 8005084:	701a      	strb	r2, [r3, #0]
 8005086:	e7f0      	b.n	800506a <__cvt+0xa6>

08005088 <__exponent>:
 8005088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800508a:	4603      	mov	r3, r0
 800508c:	2900      	cmp	r1, #0
 800508e:	bfb8      	it	lt
 8005090:	4249      	neglt	r1, r1
 8005092:	f803 2b02 	strb.w	r2, [r3], #2
 8005096:	bfb4      	ite	lt
 8005098:	222d      	movlt	r2, #45	; 0x2d
 800509a:	222b      	movge	r2, #43	; 0x2b
 800509c:	2909      	cmp	r1, #9
 800509e:	7042      	strb	r2, [r0, #1]
 80050a0:	dd2a      	ble.n	80050f8 <__exponent+0x70>
 80050a2:	f10d 0407 	add.w	r4, sp, #7
 80050a6:	46a4      	mov	ip, r4
 80050a8:	270a      	movs	r7, #10
 80050aa:	46a6      	mov	lr, r4
 80050ac:	460a      	mov	r2, r1
 80050ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80050b2:	fb07 1516 	mls	r5, r7, r6, r1
 80050b6:	3530      	adds	r5, #48	; 0x30
 80050b8:	2a63      	cmp	r2, #99	; 0x63
 80050ba:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80050be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80050c2:	4631      	mov	r1, r6
 80050c4:	dcf1      	bgt.n	80050aa <__exponent+0x22>
 80050c6:	3130      	adds	r1, #48	; 0x30
 80050c8:	f1ae 0502 	sub.w	r5, lr, #2
 80050cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80050d0:	1c44      	adds	r4, r0, #1
 80050d2:	4629      	mov	r1, r5
 80050d4:	4561      	cmp	r1, ip
 80050d6:	d30a      	bcc.n	80050ee <__exponent+0x66>
 80050d8:	f10d 0209 	add.w	r2, sp, #9
 80050dc:	eba2 020e 	sub.w	r2, r2, lr
 80050e0:	4565      	cmp	r5, ip
 80050e2:	bf88      	it	hi
 80050e4:	2200      	movhi	r2, #0
 80050e6:	4413      	add	r3, r2
 80050e8:	1a18      	subs	r0, r3, r0
 80050ea:	b003      	add	sp, #12
 80050ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80050f6:	e7ed      	b.n	80050d4 <__exponent+0x4c>
 80050f8:	2330      	movs	r3, #48	; 0x30
 80050fa:	3130      	adds	r1, #48	; 0x30
 80050fc:	7083      	strb	r3, [r0, #2]
 80050fe:	70c1      	strb	r1, [r0, #3]
 8005100:	1d03      	adds	r3, r0, #4
 8005102:	e7f1      	b.n	80050e8 <__exponent+0x60>

08005104 <_printf_float>:
 8005104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005108:	ed2d 8b02 	vpush	{d8}
 800510c:	b08d      	sub	sp, #52	; 0x34
 800510e:	460c      	mov	r4, r1
 8005110:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005114:	4616      	mov	r6, r2
 8005116:	461f      	mov	r7, r3
 8005118:	4605      	mov	r5, r0
 800511a:	f001 fa69 	bl	80065f0 <_localeconv_r>
 800511e:	f8d0 a000 	ldr.w	sl, [r0]
 8005122:	4650      	mov	r0, sl
 8005124:	f7fb f85c 	bl	80001e0 <strlen>
 8005128:	2300      	movs	r3, #0
 800512a:	930a      	str	r3, [sp, #40]	; 0x28
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	9305      	str	r3, [sp, #20]
 8005130:	f8d8 3000 	ldr.w	r3, [r8]
 8005134:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005138:	3307      	adds	r3, #7
 800513a:	f023 0307 	bic.w	r3, r3, #7
 800513e:	f103 0208 	add.w	r2, r3, #8
 8005142:	f8c8 2000 	str.w	r2, [r8]
 8005146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800514e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005152:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005156:	9307      	str	r3, [sp, #28]
 8005158:	f8cd 8018 	str.w	r8, [sp, #24]
 800515c:	ee08 0a10 	vmov	s16, r0
 8005160:	4b9f      	ldr	r3, [pc, #636]	; (80053e0 <_printf_float+0x2dc>)
 8005162:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005166:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800516a:	f7fb fce7 	bl	8000b3c <__aeabi_dcmpun>
 800516e:	bb88      	cbnz	r0, 80051d4 <_printf_float+0xd0>
 8005170:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005174:	4b9a      	ldr	r3, [pc, #616]	; (80053e0 <_printf_float+0x2dc>)
 8005176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800517a:	f7fb fcc1 	bl	8000b00 <__aeabi_dcmple>
 800517e:	bb48      	cbnz	r0, 80051d4 <_printf_float+0xd0>
 8005180:	2200      	movs	r2, #0
 8005182:	2300      	movs	r3, #0
 8005184:	4640      	mov	r0, r8
 8005186:	4649      	mov	r1, r9
 8005188:	f7fb fcb0 	bl	8000aec <__aeabi_dcmplt>
 800518c:	b110      	cbz	r0, 8005194 <_printf_float+0x90>
 800518e:	232d      	movs	r3, #45	; 0x2d
 8005190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005194:	4b93      	ldr	r3, [pc, #588]	; (80053e4 <_printf_float+0x2e0>)
 8005196:	4894      	ldr	r0, [pc, #592]	; (80053e8 <_printf_float+0x2e4>)
 8005198:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800519c:	bf94      	ite	ls
 800519e:	4698      	movls	r8, r3
 80051a0:	4680      	movhi	r8, r0
 80051a2:	2303      	movs	r3, #3
 80051a4:	6123      	str	r3, [r4, #16]
 80051a6:	9b05      	ldr	r3, [sp, #20]
 80051a8:	f023 0204 	bic.w	r2, r3, #4
 80051ac:	6022      	str	r2, [r4, #0]
 80051ae:	f04f 0900 	mov.w	r9, #0
 80051b2:	9700      	str	r7, [sp, #0]
 80051b4:	4633      	mov	r3, r6
 80051b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80051b8:	4621      	mov	r1, r4
 80051ba:	4628      	mov	r0, r5
 80051bc:	f000 f9d8 	bl	8005570 <_printf_common>
 80051c0:	3001      	adds	r0, #1
 80051c2:	f040 8090 	bne.w	80052e6 <_printf_float+0x1e2>
 80051c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051ca:	b00d      	add	sp, #52	; 0x34
 80051cc:	ecbd 8b02 	vpop	{d8}
 80051d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d4:	4642      	mov	r2, r8
 80051d6:	464b      	mov	r3, r9
 80051d8:	4640      	mov	r0, r8
 80051da:	4649      	mov	r1, r9
 80051dc:	f7fb fcae 	bl	8000b3c <__aeabi_dcmpun>
 80051e0:	b140      	cbz	r0, 80051f4 <_printf_float+0xf0>
 80051e2:	464b      	mov	r3, r9
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	bfbc      	itt	lt
 80051e8:	232d      	movlt	r3, #45	; 0x2d
 80051ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80051ee:	487f      	ldr	r0, [pc, #508]	; (80053ec <_printf_float+0x2e8>)
 80051f0:	4b7f      	ldr	r3, [pc, #508]	; (80053f0 <_printf_float+0x2ec>)
 80051f2:	e7d1      	b.n	8005198 <_printf_float+0x94>
 80051f4:	6863      	ldr	r3, [r4, #4]
 80051f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80051fa:	9206      	str	r2, [sp, #24]
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	d13f      	bne.n	8005280 <_printf_float+0x17c>
 8005200:	2306      	movs	r3, #6
 8005202:	6063      	str	r3, [r4, #4]
 8005204:	9b05      	ldr	r3, [sp, #20]
 8005206:	6861      	ldr	r1, [r4, #4]
 8005208:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800520c:	2300      	movs	r3, #0
 800520e:	9303      	str	r3, [sp, #12]
 8005210:	ab0a      	add	r3, sp, #40	; 0x28
 8005212:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005216:	ab09      	add	r3, sp, #36	; 0x24
 8005218:	ec49 8b10 	vmov	d0, r8, r9
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	6022      	str	r2, [r4, #0]
 8005220:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005224:	4628      	mov	r0, r5
 8005226:	f7ff fecd 	bl	8004fc4 <__cvt>
 800522a:	9b06      	ldr	r3, [sp, #24]
 800522c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800522e:	2b47      	cmp	r3, #71	; 0x47
 8005230:	4680      	mov	r8, r0
 8005232:	d108      	bne.n	8005246 <_printf_float+0x142>
 8005234:	1cc8      	adds	r0, r1, #3
 8005236:	db02      	blt.n	800523e <_printf_float+0x13a>
 8005238:	6863      	ldr	r3, [r4, #4]
 800523a:	4299      	cmp	r1, r3
 800523c:	dd41      	ble.n	80052c2 <_printf_float+0x1be>
 800523e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005242:	fa5f fb8b 	uxtb.w	fp, fp
 8005246:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800524a:	d820      	bhi.n	800528e <_printf_float+0x18a>
 800524c:	3901      	subs	r1, #1
 800524e:	465a      	mov	r2, fp
 8005250:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005254:	9109      	str	r1, [sp, #36]	; 0x24
 8005256:	f7ff ff17 	bl	8005088 <__exponent>
 800525a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800525c:	1813      	adds	r3, r2, r0
 800525e:	2a01      	cmp	r2, #1
 8005260:	4681      	mov	r9, r0
 8005262:	6123      	str	r3, [r4, #16]
 8005264:	dc02      	bgt.n	800526c <_printf_float+0x168>
 8005266:	6822      	ldr	r2, [r4, #0]
 8005268:	07d2      	lsls	r2, r2, #31
 800526a:	d501      	bpl.n	8005270 <_printf_float+0x16c>
 800526c:	3301      	adds	r3, #1
 800526e:	6123      	str	r3, [r4, #16]
 8005270:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005274:	2b00      	cmp	r3, #0
 8005276:	d09c      	beq.n	80051b2 <_printf_float+0xae>
 8005278:	232d      	movs	r3, #45	; 0x2d
 800527a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800527e:	e798      	b.n	80051b2 <_printf_float+0xae>
 8005280:	9a06      	ldr	r2, [sp, #24]
 8005282:	2a47      	cmp	r2, #71	; 0x47
 8005284:	d1be      	bne.n	8005204 <_printf_float+0x100>
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1bc      	bne.n	8005204 <_printf_float+0x100>
 800528a:	2301      	movs	r3, #1
 800528c:	e7b9      	b.n	8005202 <_printf_float+0xfe>
 800528e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005292:	d118      	bne.n	80052c6 <_printf_float+0x1c2>
 8005294:	2900      	cmp	r1, #0
 8005296:	6863      	ldr	r3, [r4, #4]
 8005298:	dd0b      	ble.n	80052b2 <_printf_float+0x1ae>
 800529a:	6121      	str	r1, [r4, #16]
 800529c:	b913      	cbnz	r3, 80052a4 <_printf_float+0x1a0>
 800529e:	6822      	ldr	r2, [r4, #0]
 80052a0:	07d0      	lsls	r0, r2, #31
 80052a2:	d502      	bpl.n	80052aa <_printf_float+0x1a6>
 80052a4:	3301      	adds	r3, #1
 80052a6:	440b      	add	r3, r1
 80052a8:	6123      	str	r3, [r4, #16]
 80052aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80052ac:	f04f 0900 	mov.w	r9, #0
 80052b0:	e7de      	b.n	8005270 <_printf_float+0x16c>
 80052b2:	b913      	cbnz	r3, 80052ba <_printf_float+0x1b6>
 80052b4:	6822      	ldr	r2, [r4, #0]
 80052b6:	07d2      	lsls	r2, r2, #31
 80052b8:	d501      	bpl.n	80052be <_printf_float+0x1ba>
 80052ba:	3302      	adds	r3, #2
 80052bc:	e7f4      	b.n	80052a8 <_printf_float+0x1a4>
 80052be:	2301      	movs	r3, #1
 80052c0:	e7f2      	b.n	80052a8 <_printf_float+0x1a4>
 80052c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80052c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052c8:	4299      	cmp	r1, r3
 80052ca:	db05      	blt.n	80052d8 <_printf_float+0x1d4>
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	6121      	str	r1, [r4, #16]
 80052d0:	07d8      	lsls	r0, r3, #31
 80052d2:	d5ea      	bpl.n	80052aa <_printf_float+0x1a6>
 80052d4:	1c4b      	adds	r3, r1, #1
 80052d6:	e7e7      	b.n	80052a8 <_printf_float+0x1a4>
 80052d8:	2900      	cmp	r1, #0
 80052da:	bfd4      	ite	le
 80052dc:	f1c1 0202 	rsble	r2, r1, #2
 80052e0:	2201      	movgt	r2, #1
 80052e2:	4413      	add	r3, r2
 80052e4:	e7e0      	b.n	80052a8 <_printf_float+0x1a4>
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	055a      	lsls	r2, r3, #21
 80052ea:	d407      	bmi.n	80052fc <_printf_float+0x1f8>
 80052ec:	6923      	ldr	r3, [r4, #16]
 80052ee:	4642      	mov	r2, r8
 80052f0:	4631      	mov	r1, r6
 80052f2:	4628      	mov	r0, r5
 80052f4:	47b8      	blx	r7
 80052f6:	3001      	adds	r0, #1
 80052f8:	d12c      	bne.n	8005354 <_printf_float+0x250>
 80052fa:	e764      	b.n	80051c6 <_printf_float+0xc2>
 80052fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005300:	f240 80e0 	bls.w	80054c4 <_printf_float+0x3c0>
 8005304:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005308:	2200      	movs	r2, #0
 800530a:	2300      	movs	r3, #0
 800530c:	f7fb fbe4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005310:	2800      	cmp	r0, #0
 8005312:	d034      	beq.n	800537e <_printf_float+0x27a>
 8005314:	4a37      	ldr	r2, [pc, #220]	; (80053f4 <_printf_float+0x2f0>)
 8005316:	2301      	movs	r3, #1
 8005318:	4631      	mov	r1, r6
 800531a:	4628      	mov	r0, r5
 800531c:	47b8      	blx	r7
 800531e:	3001      	adds	r0, #1
 8005320:	f43f af51 	beq.w	80051c6 <_printf_float+0xc2>
 8005324:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005328:	429a      	cmp	r2, r3
 800532a:	db02      	blt.n	8005332 <_printf_float+0x22e>
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	07d8      	lsls	r0, r3, #31
 8005330:	d510      	bpl.n	8005354 <_printf_float+0x250>
 8005332:	ee18 3a10 	vmov	r3, s16
 8005336:	4652      	mov	r2, sl
 8005338:	4631      	mov	r1, r6
 800533a:	4628      	mov	r0, r5
 800533c:	47b8      	blx	r7
 800533e:	3001      	adds	r0, #1
 8005340:	f43f af41 	beq.w	80051c6 <_printf_float+0xc2>
 8005344:	f04f 0800 	mov.w	r8, #0
 8005348:	f104 091a 	add.w	r9, r4, #26
 800534c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800534e:	3b01      	subs	r3, #1
 8005350:	4543      	cmp	r3, r8
 8005352:	dc09      	bgt.n	8005368 <_printf_float+0x264>
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	079b      	lsls	r3, r3, #30
 8005358:	f100 8105 	bmi.w	8005566 <_printf_float+0x462>
 800535c:	68e0      	ldr	r0, [r4, #12]
 800535e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005360:	4298      	cmp	r0, r3
 8005362:	bfb8      	it	lt
 8005364:	4618      	movlt	r0, r3
 8005366:	e730      	b.n	80051ca <_printf_float+0xc6>
 8005368:	2301      	movs	r3, #1
 800536a:	464a      	mov	r2, r9
 800536c:	4631      	mov	r1, r6
 800536e:	4628      	mov	r0, r5
 8005370:	47b8      	blx	r7
 8005372:	3001      	adds	r0, #1
 8005374:	f43f af27 	beq.w	80051c6 <_printf_float+0xc2>
 8005378:	f108 0801 	add.w	r8, r8, #1
 800537c:	e7e6      	b.n	800534c <_printf_float+0x248>
 800537e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005380:	2b00      	cmp	r3, #0
 8005382:	dc39      	bgt.n	80053f8 <_printf_float+0x2f4>
 8005384:	4a1b      	ldr	r2, [pc, #108]	; (80053f4 <_printf_float+0x2f0>)
 8005386:	2301      	movs	r3, #1
 8005388:	4631      	mov	r1, r6
 800538a:	4628      	mov	r0, r5
 800538c:	47b8      	blx	r7
 800538e:	3001      	adds	r0, #1
 8005390:	f43f af19 	beq.w	80051c6 <_printf_float+0xc2>
 8005394:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005398:	4313      	orrs	r3, r2
 800539a:	d102      	bne.n	80053a2 <_printf_float+0x29e>
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	07d9      	lsls	r1, r3, #31
 80053a0:	d5d8      	bpl.n	8005354 <_printf_float+0x250>
 80053a2:	ee18 3a10 	vmov	r3, s16
 80053a6:	4652      	mov	r2, sl
 80053a8:	4631      	mov	r1, r6
 80053aa:	4628      	mov	r0, r5
 80053ac:	47b8      	blx	r7
 80053ae:	3001      	adds	r0, #1
 80053b0:	f43f af09 	beq.w	80051c6 <_printf_float+0xc2>
 80053b4:	f04f 0900 	mov.w	r9, #0
 80053b8:	f104 0a1a 	add.w	sl, r4, #26
 80053bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053be:	425b      	negs	r3, r3
 80053c0:	454b      	cmp	r3, r9
 80053c2:	dc01      	bgt.n	80053c8 <_printf_float+0x2c4>
 80053c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053c6:	e792      	b.n	80052ee <_printf_float+0x1ea>
 80053c8:	2301      	movs	r3, #1
 80053ca:	4652      	mov	r2, sl
 80053cc:	4631      	mov	r1, r6
 80053ce:	4628      	mov	r0, r5
 80053d0:	47b8      	blx	r7
 80053d2:	3001      	adds	r0, #1
 80053d4:	f43f aef7 	beq.w	80051c6 <_printf_float+0xc2>
 80053d8:	f109 0901 	add.w	r9, r9, #1
 80053dc:	e7ee      	b.n	80053bc <_printf_float+0x2b8>
 80053de:	bf00      	nop
 80053e0:	7fefffff 	.word	0x7fefffff
 80053e4:	08007d7c 	.word	0x08007d7c
 80053e8:	08007d80 	.word	0x08007d80
 80053ec:	08007d88 	.word	0x08007d88
 80053f0:	08007d84 	.word	0x08007d84
 80053f4:	08007d8c 	.word	0x08007d8c
 80053f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053fc:	429a      	cmp	r2, r3
 80053fe:	bfa8      	it	ge
 8005400:	461a      	movge	r2, r3
 8005402:	2a00      	cmp	r2, #0
 8005404:	4691      	mov	r9, r2
 8005406:	dc37      	bgt.n	8005478 <_printf_float+0x374>
 8005408:	f04f 0b00 	mov.w	fp, #0
 800540c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005410:	f104 021a 	add.w	r2, r4, #26
 8005414:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005416:	9305      	str	r3, [sp, #20]
 8005418:	eba3 0309 	sub.w	r3, r3, r9
 800541c:	455b      	cmp	r3, fp
 800541e:	dc33      	bgt.n	8005488 <_printf_float+0x384>
 8005420:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005424:	429a      	cmp	r2, r3
 8005426:	db3b      	blt.n	80054a0 <_printf_float+0x39c>
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	07da      	lsls	r2, r3, #31
 800542c:	d438      	bmi.n	80054a0 <_printf_float+0x39c>
 800542e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005430:	9b05      	ldr	r3, [sp, #20]
 8005432:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	eba2 0901 	sub.w	r9, r2, r1
 800543a:	4599      	cmp	r9, r3
 800543c:	bfa8      	it	ge
 800543e:	4699      	movge	r9, r3
 8005440:	f1b9 0f00 	cmp.w	r9, #0
 8005444:	dc35      	bgt.n	80054b2 <_printf_float+0x3ae>
 8005446:	f04f 0800 	mov.w	r8, #0
 800544a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800544e:	f104 0a1a 	add.w	sl, r4, #26
 8005452:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005456:	1a9b      	subs	r3, r3, r2
 8005458:	eba3 0309 	sub.w	r3, r3, r9
 800545c:	4543      	cmp	r3, r8
 800545e:	f77f af79 	ble.w	8005354 <_printf_float+0x250>
 8005462:	2301      	movs	r3, #1
 8005464:	4652      	mov	r2, sl
 8005466:	4631      	mov	r1, r6
 8005468:	4628      	mov	r0, r5
 800546a:	47b8      	blx	r7
 800546c:	3001      	adds	r0, #1
 800546e:	f43f aeaa 	beq.w	80051c6 <_printf_float+0xc2>
 8005472:	f108 0801 	add.w	r8, r8, #1
 8005476:	e7ec      	b.n	8005452 <_printf_float+0x34e>
 8005478:	4613      	mov	r3, r2
 800547a:	4631      	mov	r1, r6
 800547c:	4642      	mov	r2, r8
 800547e:	4628      	mov	r0, r5
 8005480:	47b8      	blx	r7
 8005482:	3001      	adds	r0, #1
 8005484:	d1c0      	bne.n	8005408 <_printf_float+0x304>
 8005486:	e69e      	b.n	80051c6 <_printf_float+0xc2>
 8005488:	2301      	movs	r3, #1
 800548a:	4631      	mov	r1, r6
 800548c:	4628      	mov	r0, r5
 800548e:	9205      	str	r2, [sp, #20]
 8005490:	47b8      	blx	r7
 8005492:	3001      	adds	r0, #1
 8005494:	f43f ae97 	beq.w	80051c6 <_printf_float+0xc2>
 8005498:	9a05      	ldr	r2, [sp, #20]
 800549a:	f10b 0b01 	add.w	fp, fp, #1
 800549e:	e7b9      	b.n	8005414 <_printf_float+0x310>
 80054a0:	ee18 3a10 	vmov	r3, s16
 80054a4:	4652      	mov	r2, sl
 80054a6:	4631      	mov	r1, r6
 80054a8:	4628      	mov	r0, r5
 80054aa:	47b8      	blx	r7
 80054ac:	3001      	adds	r0, #1
 80054ae:	d1be      	bne.n	800542e <_printf_float+0x32a>
 80054b0:	e689      	b.n	80051c6 <_printf_float+0xc2>
 80054b2:	9a05      	ldr	r2, [sp, #20]
 80054b4:	464b      	mov	r3, r9
 80054b6:	4442      	add	r2, r8
 80054b8:	4631      	mov	r1, r6
 80054ba:	4628      	mov	r0, r5
 80054bc:	47b8      	blx	r7
 80054be:	3001      	adds	r0, #1
 80054c0:	d1c1      	bne.n	8005446 <_printf_float+0x342>
 80054c2:	e680      	b.n	80051c6 <_printf_float+0xc2>
 80054c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054c6:	2a01      	cmp	r2, #1
 80054c8:	dc01      	bgt.n	80054ce <_printf_float+0x3ca>
 80054ca:	07db      	lsls	r3, r3, #31
 80054cc:	d538      	bpl.n	8005540 <_printf_float+0x43c>
 80054ce:	2301      	movs	r3, #1
 80054d0:	4642      	mov	r2, r8
 80054d2:	4631      	mov	r1, r6
 80054d4:	4628      	mov	r0, r5
 80054d6:	47b8      	blx	r7
 80054d8:	3001      	adds	r0, #1
 80054da:	f43f ae74 	beq.w	80051c6 <_printf_float+0xc2>
 80054de:	ee18 3a10 	vmov	r3, s16
 80054e2:	4652      	mov	r2, sl
 80054e4:	4631      	mov	r1, r6
 80054e6:	4628      	mov	r0, r5
 80054e8:	47b8      	blx	r7
 80054ea:	3001      	adds	r0, #1
 80054ec:	f43f ae6b 	beq.w	80051c6 <_printf_float+0xc2>
 80054f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054f4:	2200      	movs	r2, #0
 80054f6:	2300      	movs	r3, #0
 80054f8:	f7fb faee 	bl	8000ad8 <__aeabi_dcmpeq>
 80054fc:	b9d8      	cbnz	r0, 8005536 <_printf_float+0x432>
 80054fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005500:	f108 0201 	add.w	r2, r8, #1
 8005504:	3b01      	subs	r3, #1
 8005506:	4631      	mov	r1, r6
 8005508:	4628      	mov	r0, r5
 800550a:	47b8      	blx	r7
 800550c:	3001      	adds	r0, #1
 800550e:	d10e      	bne.n	800552e <_printf_float+0x42a>
 8005510:	e659      	b.n	80051c6 <_printf_float+0xc2>
 8005512:	2301      	movs	r3, #1
 8005514:	4652      	mov	r2, sl
 8005516:	4631      	mov	r1, r6
 8005518:	4628      	mov	r0, r5
 800551a:	47b8      	blx	r7
 800551c:	3001      	adds	r0, #1
 800551e:	f43f ae52 	beq.w	80051c6 <_printf_float+0xc2>
 8005522:	f108 0801 	add.w	r8, r8, #1
 8005526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005528:	3b01      	subs	r3, #1
 800552a:	4543      	cmp	r3, r8
 800552c:	dcf1      	bgt.n	8005512 <_printf_float+0x40e>
 800552e:	464b      	mov	r3, r9
 8005530:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005534:	e6dc      	b.n	80052f0 <_printf_float+0x1ec>
 8005536:	f04f 0800 	mov.w	r8, #0
 800553a:	f104 0a1a 	add.w	sl, r4, #26
 800553e:	e7f2      	b.n	8005526 <_printf_float+0x422>
 8005540:	2301      	movs	r3, #1
 8005542:	4642      	mov	r2, r8
 8005544:	e7df      	b.n	8005506 <_printf_float+0x402>
 8005546:	2301      	movs	r3, #1
 8005548:	464a      	mov	r2, r9
 800554a:	4631      	mov	r1, r6
 800554c:	4628      	mov	r0, r5
 800554e:	47b8      	blx	r7
 8005550:	3001      	adds	r0, #1
 8005552:	f43f ae38 	beq.w	80051c6 <_printf_float+0xc2>
 8005556:	f108 0801 	add.w	r8, r8, #1
 800555a:	68e3      	ldr	r3, [r4, #12]
 800555c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800555e:	1a5b      	subs	r3, r3, r1
 8005560:	4543      	cmp	r3, r8
 8005562:	dcf0      	bgt.n	8005546 <_printf_float+0x442>
 8005564:	e6fa      	b.n	800535c <_printf_float+0x258>
 8005566:	f04f 0800 	mov.w	r8, #0
 800556a:	f104 0919 	add.w	r9, r4, #25
 800556e:	e7f4      	b.n	800555a <_printf_float+0x456>

08005570 <_printf_common>:
 8005570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005574:	4616      	mov	r6, r2
 8005576:	4699      	mov	r9, r3
 8005578:	688a      	ldr	r2, [r1, #8]
 800557a:	690b      	ldr	r3, [r1, #16]
 800557c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005580:	4293      	cmp	r3, r2
 8005582:	bfb8      	it	lt
 8005584:	4613      	movlt	r3, r2
 8005586:	6033      	str	r3, [r6, #0]
 8005588:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800558c:	4607      	mov	r7, r0
 800558e:	460c      	mov	r4, r1
 8005590:	b10a      	cbz	r2, 8005596 <_printf_common+0x26>
 8005592:	3301      	adds	r3, #1
 8005594:	6033      	str	r3, [r6, #0]
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	0699      	lsls	r1, r3, #26
 800559a:	bf42      	ittt	mi
 800559c:	6833      	ldrmi	r3, [r6, #0]
 800559e:	3302      	addmi	r3, #2
 80055a0:	6033      	strmi	r3, [r6, #0]
 80055a2:	6825      	ldr	r5, [r4, #0]
 80055a4:	f015 0506 	ands.w	r5, r5, #6
 80055a8:	d106      	bne.n	80055b8 <_printf_common+0x48>
 80055aa:	f104 0a19 	add.w	sl, r4, #25
 80055ae:	68e3      	ldr	r3, [r4, #12]
 80055b0:	6832      	ldr	r2, [r6, #0]
 80055b2:	1a9b      	subs	r3, r3, r2
 80055b4:	42ab      	cmp	r3, r5
 80055b6:	dc26      	bgt.n	8005606 <_printf_common+0x96>
 80055b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055bc:	1e13      	subs	r3, r2, #0
 80055be:	6822      	ldr	r2, [r4, #0]
 80055c0:	bf18      	it	ne
 80055c2:	2301      	movne	r3, #1
 80055c4:	0692      	lsls	r2, r2, #26
 80055c6:	d42b      	bmi.n	8005620 <_printf_common+0xb0>
 80055c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055cc:	4649      	mov	r1, r9
 80055ce:	4638      	mov	r0, r7
 80055d0:	47c0      	blx	r8
 80055d2:	3001      	adds	r0, #1
 80055d4:	d01e      	beq.n	8005614 <_printf_common+0xa4>
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	68e5      	ldr	r5, [r4, #12]
 80055da:	6832      	ldr	r2, [r6, #0]
 80055dc:	f003 0306 	and.w	r3, r3, #6
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	bf08      	it	eq
 80055e4:	1aad      	subeq	r5, r5, r2
 80055e6:	68a3      	ldr	r3, [r4, #8]
 80055e8:	6922      	ldr	r2, [r4, #16]
 80055ea:	bf0c      	ite	eq
 80055ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055f0:	2500      	movne	r5, #0
 80055f2:	4293      	cmp	r3, r2
 80055f4:	bfc4      	itt	gt
 80055f6:	1a9b      	subgt	r3, r3, r2
 80055f8:	18ed      	addgt	r5, r5, r3
 80055fa:	2600      	movs	r6, #0
 80055fc:	341a      	adds	r4, #26
 80055fe:	42b5      	cmp	r5, r6
 8005600:	d11a      	bne.n	8005638 <_printf_common+0xc8>
 8005602:	2000      	movs	r0, #0
 8005604:	e008      	b.n	8005618 <_printf_common+0xa8>
 8005606:	2301      	movs	r3, #1
 8005608:	4652      	mov	r2, sl
 800560a:	4649      	mov	r1, r9
 800560c:	4638      	mov	r0, r7
 800560e:	47c0      	blx	r8
 8005610:	3001      	adds	r0, #1
 8005612:	d103      	bne.n	800561c <_printf_common+0xac>
 8005614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800561c:	3501      	adds	r5, #1
 800561e:	e7c6      	b.n	80055ae <_printf_common+0x3e>
 8005620:	18e1      	adds	r1, r4, r3
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	2030      	movs	r0, #48	; 0x30
 8005626:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800562a:	4422      	add	r2, r4
 800562c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005630:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005634:	3302      	adds	r3, #2
 8005636:	e7c7      	b.n	80055c8 <_printf_common+0x58>
 8005638:	2301      	movs	r3, #1
 800563a:	4622      	mov	r2, r4
 800563c:	4649      	mov	r1, r9
 800563e:	4638      	mov	r0, r7
 8005640:	47c0      	blx	r8
 8005642:	3001      	adds	r0, #1
 8005644:	d0e6      	beq.n	8005614 <_printf_common+0xa4>
 8005646:	3601      	adds	r6, #1
 8005648:	e7d9      	b.n	80055fe <_printf_common+0x8e>
	...

0800564c <_printf_i>:
 800564c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005650:	460c      	mov	r4, r1
 8005652:	4691      	mov	r9, r2
 8005654:	7e27      	ldrb	r7, [r4, #24]
 8005656:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005658:	2f78      	cmp	r7, #120	; 0x78
 800565a:	4680      	mov	r8, r0
 800565c:	469a      	mov	sl, r3
 800565e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005662:	d807      	bhi.n	8005674 <_printf_i+0x28>
 8005664:	2f62      	cmp	r7, #98	; 0x62
 8005666:	d80a      	bhi.n	800567e <_printf_i+0x32>
 8005668:	2f00      	cmp	r7, #0
 800566a:	f000 80d8 	beq.w	800581e <_printf_i+0x1d2>
 800566e:	2f58      	cmp	r7, #88	; 0x58
 8005670:	f000 80a3 	beq.w	80057ba <_printf_i+0x16e>
 8005674:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005678:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800567c:	e03a      	b.n	80056f4 <_printf_i+0xa8>
 800567e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005682:	2b15      	cmp	r3, #21
 8005684:	d8f6      	bhi.n	8005674 <_printf_i+0x28>
 8005686:	a001      	add	r0, pc, #4	; (adr r0, 800568c <_printf_i+0x40>)
 8005688:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800568c:	080056e5 	.word	0x080056e5
 8005690:	080056f9 	.word	0x080056f9
 8005694:	08005675 	.word	0x08005675
 8005698:	08005675 	.word	0x08005675
 800569c:	08005675 	.word	0x08005675
 80056a0:	08005675 	.word	0x08005675
 80056a4:	080056f9 	.word	0x080056f9
 80056a8:	08005675 	.word	0x08005675
 80056ac:	08005675 	.word	0x08005675
 80056b0:	08005675 	.word	0x08005675
 80056b4:	08005675 	.word	0x08005675
 80056b8:	08005805 	.word	0x08005805
 80056bc:	08005729 	.word	0x08005729
 80056c0:	080057e7 	.word	0x080057e7
 80056c4:	08005675 	.word	0x08005675
 80056c8:	08005675 	.word	0x08005675
 80056cc:	08005827 	.word	0x08005827
 80056d0:	08005675 	.word	0x08005675
 80056d4:	08005729 	.word	0x08005729
 80056d8:	08005675 	.word	0x08005675
 80056dc:	08005675 	.word	0x08005675
 80056e0:	080057ef 	.word	0x080057ef
 80056e4:	680b      	ldr	r3, [r1, #0]
 80056e6:	1d1a      	adds	r2, r3, #4
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	600a      	str	r2, [r1, #0]
 80056ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056f4:	2301      	movs	r3, #1
 80056f6:	e0a3      	b.n	8005840 <_printf_i+0x1f4>
 80056f8:	6825      	ldr	r5, [r4, #0]
 80056fa:	6808      	ldr	r0, [r1, #0]
 80056fc:	062e      	lsls	r6, r5, #24
 80056fe:	f100 0304 	add.w	r3, r0, #4
 8005702:	d50a      	bpl.n	800571a <_printf_i+0xce>
 8005704:	6805      	ldr	r5, [r0, #0]
 8005706:	600b      	str	r3, [r1, #0]
 8005708:	2d00      	cmp	r5, #0
 800570a:	da03      	bge.n	8005714 <_printf_i+0xc8>
 800570c:	232d      	movs	r3, #45	; 0x2d
 800570e:	426d      	negs	r5, r5
 8005710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005714:	485e      	ldr	r0, [pc, #376]	; (8005890 <_printf_i+0x244>)
 8005716:	230a      	movs	r3, #10
 8005718:	e019      	b.n	800574e <_printf_i+0x102>
 800571a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800571e:	6805      	ldr	r5, [r0, #0]
 8005720:	600b      	str	r3, [r1, #0]
 8005722:	bf18      	it	ne
 8005724:	b22d      	sxthne	r5, r5
 8005726:	e7ef      	b.n	8005708 <_printf_i+0xbc>
 8005728:	680b      	ldr	r3, [r1, #0]
 800572a:	6825      	ldr	r5, [r4, #0]
 800572c:	1d18      	adds	r0, r3, #4
 800572e:	6008      	str	r0, [r1, #0]
 8005730:	0628      	lsls	r0, r5, #24
 8005732:	d501      	bpl.n	8005738 <_printf_i+0xec>
 8005734:	681d      	ldr	r5, [r3, #0]
 8005736:	e002      	b.n	800573e <_printf_i+0xf2>
 8005738:	0669      	lsls	r1, r5, #25
 800573a:	d5fb      	bpl.n	8005734 <_printf_i+0xe8>
 800573c:	881d      	ldrh	r5, [r3, #0]
 800573e:	4854      	ldr	r0, [pc, #336]	; (8005890 <_printf_i+0x244>)
 8005740:	2f6f      	cmp	r7, #111	; 0x6f
 8005742:	bf0c      	ite	eq
 8005744:	2308      	moveq	r3, #8
 8005746:	230a      	movne	r3, #10
 8005748:	2100      	movs	r1, #0
 800574a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800574e:	6866      	ldr	r6, [r4, #4]
 8005750:	60a6      	str	r6, [r4, #8]
 8005752:	2e00      	cmp	r6, #0
 8005754:	bfa2      	ittt	ge
 8005756:	6821      	ldrge	r1, [r4, #0]
 8005758:	f021 0104 	bicge.w	r1, r1, #4
 800575c:	6021      	strge	r1, [r4, #0]
 800575e:	b90d      	cbnz	r5, 8005764 <_printf_i+0x118>
 8005760:	2e00      	cmp	r6, #0
 8005762:	d04d      	beq.n	8005800 <_printf_i+0x1b4>
 8005764:	4616      	mov	r6, r2
 8005766:	fbb5 f1f3 	udiv	r1, r5, r3
 800576a:	fb03 5711 	mls	r7, r3, r1, r5
 800576e:	5dc7      	ldrb	r7, [r0, r7]
 8005770:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005774:	462f      	mov	r7, r5
 8005776:	42bb      	cmp	r3, r7
 8005778:	460d      	mov	r5, r1
 800577a:	d9f4      	bls.n	8005766 <_printf_i+0x11a>
 800577c:	2b08      	cmp	r3, #8
 800577e:	d10b      	bne.n	8005798 <_printf_i+0x14c>
 8005780:	6823      	ldr	r3, [r4, #0]
 8005782:	07df      	lsls	r7, r3, #31
 8005784:	d508      	bpl.n	8005798 <_printf_i+0x14c>
 8005786:	6923      	ldr	r3, [r4, #16]
 8005788:	6861      	ldr	r1, [r4, #4]
 800578a:	4299      	cmp	r1, r3
 800578c:	bfde      	ittt	le
 800578e:	2330      	movle	r3, #48	; 0x30
 8005790:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005794:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005798:	1b92      	subs	r2, r2, r6
 800579a:	6122      	str	r2, [r4, #16]
 800579c:	f8cd a000 	str.w	sl, [sp]
 80057a0:	464b      	mov	r3, r9
 80057a2:	aa03      	add	r2, sp, #12
 80057a4:	4621      	mov	r1, r4
 80057a6:	4640      	mov	r0, r8
 80057a8:	f7ff fee2 	bl	8005570 <_printf_common>
 80057ac:	3001      	adds	r0, #1
 80057ae:	d14c      	bne.n	800584a <_printf_i+0x1fe>
 80057b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057b4:	b004      	add	sp, #16
 80057b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ba:	4835      	ldr	r0, [pc, #212]	; (8005890 <_printf_i+0x244>)
 80057bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	680e      	ldr	r6, [r1, #0]
 80057c4:	061f      	lsls	r7, r3, #24
 80057c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80057ca:	600e      	str	r6, [r1, #0]
 80057cc:	d514      	bpl.n	80057f8 <_printf_i+0x1ac>
 80057ce:	07d9      	lsls	r1, r3, #31
 80057d0:	bf44      	itt	mi
 80057d2:	f043 0320 	orrmi.w	r3, r3, #32
 80057d6:	6023      	strmi	r3, [r4, #0]
 80057d8:	b91d      	cbnz	r5, 80057e2 <_printf_i+0x196>
 80057da:	6823      	ldr	r3, [r4, #0]
 80057dc:	f023 0320 	bic.w	r3, r3, #32
 80057e0:	6023      	str	r3, [r4, #0]
 80057e2:	2310      	movs	r3, #16
 80057e4:	e7b0      	b.n	8005748 <_printf_i+0xfc>
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	f043 0320 	orr.w	r3, r3, #32
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	2378      	movs	r3, #120	; 0x78
 80057f0:	4828      	ldr	r0, [pc, #160]	; (8005894 <_printf_i+0x248>)
 80057f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057f6:	e7e3      	b.n	80057c0 <_printf_i+0x174>
 80057f8:	065e      	lsls	r6, r3, #25
 80057fa:	bf48      	it	mi
 80057fc:	b2ad      	uxthmi	r5, r5
 80057fe:	e7e6      	b.n	80057ce <_printf_i+0x182>
 8005800:	4616      	mov	r6, r2
 8005802:	e7bb      	b.n	800577c <_printf_i+0x130>
 8005804:	680b      	ldr	r3, [r1, #0]
 8005806:	6826      	ldr	r6, [r4, #0]
 8005808:	6960      	ldr	r0, [r4, #20]
 800580a:	1d1d      	adds	r5, r3, #4
 800580c:	600d      	str	r5, [r1, #0]
 800580e:	0635      	lsls	r5, r6, #24
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	d501      	bpl.n	8005818 <_printf_i+0x1cc>
 8005814:	6018      	str	r0, [r3, #0]
 8005816:	e002      	b.n	800581e <_printf_i+0x1d2>
 8005818:	0671      	lsls	r1, r6, #25
 800581a:	d5fb      	bpl.n	8005814 <_printf_i+0x1c8>
 800581c:	8018      	strh	r0, [r3, #0]
 800581e:	2300      	movs	r3, #0
 8005820:	6123      	str	r3, [r4, #16]
 8005822:	4616      	mov	r6, r2
 8005824:	e7ba      	b.n	800579c <_printf_i+0x150>
 8005826:	680b      	ldr	r3, [r1, #0]
 8005828:	1d1a      	adds	r2, r3, #4
 800582a:	600a      	str	r2, [r1, #0]
 800582c:	681e      	ldr	r6, [r3, #0]
 800582e:	6862      	ldr	r2, [r4, #4]
 8005830:	2100      	movs	r1, #0
 8005832:	4630      	mov	r0, r6
 8005834:	f7fa fcdc 	bl	80001f0 <memchr>
 8005838:	b108      	cbz	r0, 800583e <_printf_i+0x1f2>
 800583a:	1b80      	subs	r0, r0, r6
 800583c:	6060      	str	r0, [r4, #4]
 800583e:	6863      	ldr	r3, [r4, #4]
 8005840:	6123      	str	r3, [r4, #16]
 8005842:	2300      	movs	r3, #0
 8005844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005848:	e7a8      	b.n	800579c <_printf_i+0x150>
 800584a:	6923      	ldr	r3, [r4, #16]
 800584c:	4632      	mov	r2, r6
 800584e:	4649      	mov	r1, r9
 8005850:	4640      	mov	r0, r8
 8005852:	47d0      	blx	sl
 8005854:	3001      	adds	r0, #1
 8005856:	d0ab      	beq.n	80057b0 <_printf_i+0x164>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	079b      	lsls	r3, r3, #30
 800585c:	d413      	bmi.n	8005886 <_printf_i+0x23a>
 800585e:	68e0      	ldr	r0, [r4, #12]
 8005860:	9b03      	ldr	r3, [sp, #12]
 8005862:	4298      	cmp	r0, r3
 8005864:	bfb8      	it	lt
 8005866:	4618      	movlt	r0, r3
 8005868:	e7a4      	b.n	80057b4 <_printf_i+0x168>
 800586a:	2301      	movs	r3, #1
 800586c:	4632      	mov	r2, r6
 800586e:	4649      	mov	r1, r9
 8005870:	4640      	mov	r0, r8
 8005872:	47d0      	blx	sl
 8005874:	3001      	adds	r0, #1
 8005876:	d09b      	beq.n	80057b0 <_printf_i+0x164>
 8005878:	3501      	adds	r5, #1
 800587a:	68e3      	ldr	r3, [r4, #12]
 800587c:	9903      	ldr	r1, [sp, #12]
 800587e:	1a5b      	subs	r3, r3, r1
 8005880:	42ab      	cmp	r3, r5
 8005882:	dcf2      	bgt.n	800586a <_printf_i+0x21e>
 8005884:	e7eb      	b.n	800585e <_printf_i+0x212>
 8005886:	2500      	movs	r5, #0
 8005888:	f104 0619 	add.w	r6, r4, #25
 800588c:	e7f5      	b.n	800587a <_printf_i+0x22e>
 800588e:	bf00      	nop
 8005890:	08007d8e 	.word	0x08007d8e
 8005894:	08007d9f 	.word	0x08007d9f

08005898 <sniprintf>:
 8005898:	b40c      	push	{r2, r3}
 800589a:	b530      	push	{r4, r5, lr}
 800589c:	4b17      	ldr	r3, [pc, #92]	; (80058fc <sniprintf+0x64>)
 800589e:	1e0c      	subs	r4, r1, #0
 80058a0:	681d      	ldr	r5, [r3, #0]
 80058a2:	b09d      	sub	sp, #116	; 0x74
 80058a4:	da08      	bge.n	80058b8 <sniprintf+0x20>
 80058a6:	238b      	movs	r3, #139	; 0x8b
 80058a8:	602b      	str	r3, [r5, #0]
 80058aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058ae:	b01d      	add	sp, #116	; 0x74
 80058b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058b4:	b002      	add	sp, #8
 80058b6:	4770      	bx	lr
 80058b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80058bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80058c0:	bf14      	ite	ne
 80058c2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80058c6:	4623      	moveq	r3, r4
 80058c8:	9304      	str	r3, [sp, #16]
 80058ca:	9307      	str	r3, [sp, #28]
 80058cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058d0:	9002      	str	r0, [sp, #8]
 80058d2:	9006      	str	r0, [sp, #24]
 80058d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80058d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80058da:	ab21      	add	r3, sp, #132	; 0x84
 80058dc:	a902      	add	r1, sp, #8
 80058de:	4628      	mov	r0, r5
 80058e0:	9301      	str	r3, [sp, #4]
 80058e2:	f001 fb33 	bl	8006f4c <_svfiprintf_r>
 80058e6:	1c43      	adds	r3, r0, #1
 80058e8:	bfbc      	itt	lt
 80058ea:	238b      	movlt	r3, #139	; 0x8b
 80058ec:	602b      	strlt	r3, [r5, #0]
 80058ee:	2c00      	cmp	r4, #0
 80058f0:	d0dd      	beq.n	80058ae <sniprintf+0x16>
 80058f2:	9b02      	ldr	r3, [sp, #8]
 80058f4:	2200      	movs	r2, #0
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	e7d9      	b.n	80058ae <sniprintf+0x16>
 80058fa:	bf00      	nop
 80058fc:	20000034 	.word	0x20000034

08005900 <quorem>:
 8005900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005904:	6903      	ldr	r3, [r0, #16]
 8005906:	690c      	ldr	r4, [r1, #16]
 8005908:	42a3      	cmp	r3, r4
 800590a:	4607      	mov	r7, r0
 800590c:	f2c0 8081 	blt.w	8005a12 <quorem+0x112>
 8005910:	3c01      	subs	r4, #1
 8005912:	f101 0814 	add.w	r8, r1, #20
 8005916:	f100 0514 	add.w	r5, r0, #20
 800591a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800591e:	9301      	str	r3, [sp, #4]
 8005920:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005924:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005928:	3301      	adds	r3, #1
 800592a:	429a      	cmp	r2, r3
 800592c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005930:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005934:	fbb2 f6f3 	udiv	r6, r2, r3
 8005938:	d331      	bcc.n	800599e <quorem+0x9e>
 800593a:	f04f 0e00 	mov.w	lr, #0
 800593e:	4640      	mov	r0, r8
 8005940:	46ac      	mov	ip, r5
 8005942:	46f2      	mov	sl, lr
 8005944:	f850 2b04 	ldr.w	r2, [r0], #4
 8005948:	b293      	uxth	r3, r2
 800594a:	fb06 e303 	mla	r3, r6, r3, lr
 800594e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005952:	b29b      	uxth	r3, r3
 8005954:	ebaa 0303 	sub.w	r3, sl, r3
 8005958:	0c12      	lsrs	r2, r2, #16
 800595a:	f8dc a000 	ldr.w	sl, [ip]
 800595e:	fb06 e202 	mla	r2, r6, r2, lr
 8005962:	fa13 f38a 	uxtah	r3, r3, sl
 8005966:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800596a:	fa1f fa82 	uxth.w	sl, r2
 800596e:	f8dc 2000 	ldr.w	r2, [ip]
 8005972:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005976:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800597a:	b29b      	uxth	r3, r3
 800597c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005980:	4581      	cmp	r9, r0
 8005982:	f84c 3b04 	str.w	r3, [ip], #4
 8005986:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800598a:	d2db      	bcs.n	8005944 <quorem+0x44>
 800598c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005990:	b92b      	cbnz	r3, 800599e <quorem+0x9e>
 8005992:	9b01      	ldr	r3, [sp, #4]
 8005994:	3b04      	subs	r3, #4
 8005996:	429d      	cmp	r5, r3
 8005998:	461a      	mov	r2, r3
 800599a:	d32e      	bcc.n	80059fa <quorem+0xfa>
 800599c:	613c      	str	r4, [r7, #16]
 800599e:	4638      	mov	r0, r7
 80059a0:	f001 f8be 	bl	8006b20 <__mcmp>
 80059a4:	2800      	cmp	r0, #0
 80059a6:	db24      	blt.n	80059f2 <quorem+0xf2>
 80059a8:	3601      	adds	r6, #1
 80059aa:	4628      	mov	r0, r5
 80059ac:	f04f 0c00 	mov.w	ip, #0
 80059b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80059b4:	f8d0 e000 	ldr.w	lr, [r0]
 80059b8:	b293      	uxth	r3, r2
 80059ba:	ebac 0303 	sub.w	r3, ip, r3
 80059be:	0c12      	lsrs	r2, r2, #16
 80059c0:	fa13 f38e 	uxtah	r3, r3, lr
 80059c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80059c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059d2:	45c1      	cmp	r9, r8
 80059d4:	f840 3b04 	str.w	r3, [r0], #4
 80059d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80059dc:	d2e8      	bcs.n	80059b0 <quorem+0xb0>
 80059de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059e6:	b922      	cbnz	r2, 80059f2 <quorem+0xf2>
 80059e8:	3b04      	subs	r3, #4
 80059ea:	429d      	cmp	r5, r3
 80059ec:	461a      	mov	r2, r3
 80059ee:	d30a      	bcc.n	8005a06 <quorem+0x106>
 80059f0:	613c      	str	r4, [r7, #16]
 80059f2:	4630      	mov	r0, r6
 80059f4:	b003      	add	sp, #12
 80059f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059fa:	6812      	ldr	r2, [r2, #0]
 80059fc:	3b04      	subs	r3, #4
 80059fe:	2a00      	cmp	r2, #0
 8005a00:	d1cc      	bne.n	800599c <quorem+0x9c>
 8005a02:	3c01      	subs	r4, #1
 8005a04:	e7c7      	b.n	8005996 <quorem+0x96>
 8005a06:	6812      	ldr	r2, [r2, #0]
 8005a08:	3b04      	subs	r3, #4
 8005a0a:	2a00      	cmp	r2, #0
 8005a0c:	d1f0      	bne.n	80059f0 <quorem+0xf0>
 8005a0e:	3c01      	subs	r4, #1
 8005a10:	e7eb      	b.n	80059ea <quorem+0xea>
 8005a12:	2000      	movs	r0, #0
 8005a14:	e7ee      	b.n	80059f4 <quorem+0xf4>
	...

08005a18 <_dtoa_r>:
 8005a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1c:	ed2d 8b02 	vpush	{d8}
 8005a20:	ec57 6b10 	vmov	r6, r7, d0
 8005a24:	b095      	sub	sp, #84	; 0x54
 8005a26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005a2c:	9105      	str	r1, [sp, #20]
 8005a2e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005a32:	4604      	mov	r4, r0
 8005a34:	9209      	str	r2, [sp, #36]	; 0x24
 8005a36:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a38:	b975      	cbnz	r5, 8005a58 <_dtoa_r+0x40>
 8005a3a:	2010      	movs	r0, #16
 8005a3c:	f000 fddc 	bl	80065f8 <malloc>
 8005a40:	4602      	mov	r2, r0
 8005a42:	6260      	str	r0, [r4, #36]	; 0x24
 8005a44:	b920      	cbnz	r0, 8005a50 <_dtoa_r+0x38>
 8005a46:	4bb2      	ldr	r3, [pc, #712]	; (8005d10 <_dtoa_r+0x2f8>)
 8005a48:	21ea      	movs	r1, #234	; 0xea
 8005a4a:	48b2      	ldr	r0, [pc, #712]	; (8005d14 <_dtoa_r+0x2fc>)
 8005a4c:	f001 fb8e 	bl	800716c <__assert_func>
 8005a50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a54:	6005      	str	r5, [r0, #0]
 8005a56:	60c5      	str	r5, [r0, #12]
 8005a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a5a:	6819      	ldr	r1, [r3, #0]
 8005a5c:	b151      	cbz	r1, 8005a74 <_dtoa_r+0x5c>
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	604a      	str	r2, [r1, #4]
 8005a62:	2301      	movs	r3, #1
 8005a64:	4093      	lsls	r3, r2
 8005a66:	608b      	str	r3, [r1, #8]
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f000 fe1b 	bl	80066a4 <_Bfree>
 8005a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	1e3b      	subs	r3, r7, #0
 8005a76:	bfb9      	ittee	lt
 8005a78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a7c:	9303      	strlt	r3, [sp, #12]
 8005a7e:	2300      	movge	r3, #0
 8005a80:	f8c8 3000 	strge.w	r3, [r8]
 8005a84:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005a88:	4ba3      	ldr	r3, [pc, #652]	; (8005d18 <_dtoa_r+0x300>)
 8005a8a:	bfbc      	itt	lt
 8005a8c:	2201      	movlt	r2, #1
 8005a8e:	f8c8 2000 	strlt.w	r2, [r8]
 8005a92:	ea33 0309 	bics.w	r3, r3, r9
 8005a96:	d11b      	bne.n	8005ad0 <_dtoa_r+0xb8>
 8005a98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a9a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005aa4:	4333      	orrs	r3, r6
 8005aa6:	f000 857a 	beq.w	800659e <_dtoa_r+0xb86>
 8005aaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005aac:	b963      	cbnz	r3, 8005ac8 <_dtoa_r+0xb0>
 8005aae:	4b9b      	ldr	r3, [pc, #620]	; (8005d1c <_dtoa_r+0x304>)
 8005ab0:	e024      	b.n	8005afc <_dtoa_r+0xe4>
 8005ab2:	4b9b      	ldr	r3, [pc, #620]	; (8005d20 <_dtoa_r+0x308>)
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	3308      	adds	r3, #8
 8005ab8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	9800      	ldr	r0, [sp, #0]
 8005abe:	b015      	add	sp, #84	; 0x54
 8005ac0:	ecbd 8b02 	vpop	{d8}
 8005ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac8:	4b94      	ldr	r3, [pc, #592]	; (8005d1c <_dtoa_r+0x304>)
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	3303      	adds	r3, #3
 8005ace:	e7f3      	b.n	8005ab8 <_dtoa_r+0xa0>
 8005ad0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	ec51 0b17 	vmov	r0, r1, d7
 8005ada:	2300      	movs	r3, #0
 8005adc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005ae0:	f7fa fffa 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ae4:	4680      	mov	r8, r0
 8005ae6:	b158      	cbz	r0, 8005b00 <_dtoa_r+0xe8>
 8005ae8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005aea:	2301      	movs	r3, #1
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 8551 	beq.w	8006598 <_dtoa_r+0xb80>
 8005af6:	488b      	ldr	r0, [pc, #556]	; (8005d24 <_dtoa_r+0x30c>)
 8005af8:	6018      	str	r0, [r3, #0]
 8005afa:	1e43      	subs	r3, r0, #1
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	e7dd      	b.n	8005abc <_dtoa_r+0xa4>
 8005b00:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005b04:	aa12      	add	r2, sp, #72	; 0x48
 8005b06:	a913      	add	r1, sp, #76	; 0x4c
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f001 f8ad 	bl	8006c68 <__d2b>
 8005b0e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005b12:	4683      	mov	fp, r0
 8005b14:	2d00      	cmp	r5, #0
 8005b16:	d07c      	beq.n	8005c12 <_dtoa_r+0x1fa>
 8005b18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b1a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005b1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b22:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005b26:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005b2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005b2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b32:	4b7d      	ldr	r3, [pc, #500]	; (8005d28 <_dtoa_r+0x310>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	4630      	mov	r0, r6
 8005b38:	4639      	mov	r1, r7
 8005b3a:	f7fa fbad 	bl	8000298 <__aeabi_dsub>
 8005b3e:	a36e      	add	r3, pc, #440	; (adr r3, 8005cf8 <_dtoa_r+0x2e0>)
 8005b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b44:	f7fa fd60 	bl	8000608 <__aeabi_dmul>
 8005b48:	a36d      	add	r3, pc, #436	; (adr r3, 8005d00 <_dtoa_r+0x2e8>)
 8005b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4e:	f7fa fba5 	bl	800029c <__adddf3>
 8005b52:	4606      	mov	r6, r0
 8005b54:	4628      	mov	r0, r5
 8005b56:	460f      	mov	r7, r1
 8005b58:	f7fa fcec 	bl	8000534 <__aeabi_i2d>
 8005b5c:	a36a      	add	r3, pc, #424	; (adr r3, 8005d08 <_dtoa_r+0x2f0>)
 8005b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b62:	f7fa fd51 	bl	8000608 <__aeabi_dmul>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	4639      	mov	r1, r7
 8005b6e:	f7fa fb95 	bl	800029c <__adddf3>
 8005b72:	4606      	mov	r6, r0
 8005b74:	460f      	mov	r7, r1
 8005b76:	f7fa fff7 	bl	8000b68 <__aeabi_d2iz>
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	4682      	mov	sl, r0
 8005b7e:	2300      	movs	r3, #0
 8005b80:	4630      	mov	r0, r6
 8005b82:	4639      	mov	r1, r7
 8005b84:	f7fa ffb2 	bl	8000aec <__aeabi_dcmplt>
 8005b88:	b148      	cbz	r0, 8005b9e <_dtoa_r+0x186>
 8005b8a:	4650      	mov	r0, sl
 8005b8c:	f7fa fcd2 	bl	8000534 <__aeabi_i2d>
 8005b90:	4632      	mov	r2, r6
 8005b92:	463b      	mov	r3, r7
 8005b94:	f7fa ffa0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b98:	b908      	cbnz	r0, 8005b9e <_dtoa_r+0x186>
 8005b9a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005b9e:	f1ba 0f16 	cmp.w	sl, #22
 8005ba2:	d854      	bhi.n	8005c4e <_dtoa_r+0x236>
 8005ba4:	4b61      	ldr	r3, [pc, #388]	; (8005d2c <_dtoa_r+0x314>)
 8005ba6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005bb2:	f7fa ff9b 	bl	8000aec <__aeabi_dcmplt>
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	d04b      	beq.n	8005c52 <_dtoa_r+0x23a>
 8005bba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	930e      	str	r3, [sp, #56]	; 0x38
 8005bc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bc4:	1b5d      	subs	r5, r3, r5
 8005bc6:	1e6b      	subs	r3, r5, #1
 8005bc8:	9304      	str	r3, [sp, #16]
 8005bca:	bf43      	ittte	mi
 8005bcc:	2300      	movmi	r3, #0
 8005bce:	f1c5 0801 	rsbmi	r8, r5, #1
 8005bd2:	9304      	strmi	r3, [sp, #16]
 8005bd4:	f04f 0800 	movpl.w	r8, #0
 8005bd8:	f1ba 0f00 	cmp.w	sl, #0
 8005bdc:	db3b      	blt.n	8005c56 <_dtoa_r+0x23e>
 8005bde:	9b04      	ldr	r3, [sp, #16]
 8005be0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005be4:	4453      	add	r3, sl
 8005be6:	9304      	str	r3, [sp, #16]
 8005be8:	2300      	movs	r3, #0
 8005bea:	9306      	str	r3, [sp, #24]
 8005bec:	9b05      	ldr	r3, [sp, #20]
 8005bee:	2b09      	cmp	r3, #9
 8005bf0:	d869      	bhi.n	8005cc6 <_dtoa_r+0x2ae>
 8005bf2:	2b05      	cmp	r3, #5
 8005bf4:	bfc4      	itt	gt
 8005bf6:	3b04      	subgt	r3, #4
 8005bf8:	9305      	strgt	r3, [sp, #20]
 8005bfa:	9b05      	ldr	r3, [sp, #20]
 8005bfc:	f1a3 0302 	sub.w	r3, r3, #2
 8005c00:	bfcc      	ite	gt
 8005c02:	2500      	movgt	r5, #0
 8005c04:	2501      	movle	r5, #1
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d869      	bhi.n	8005cde <_dtoa_r+0x2c6>
 8005c0a:	e8df f003 	tbb	[pc, r3]
 8005c0e:	4e2c      	.short	0x4e2c
 8005c10:	5a4c      	.short	0x5a4c
 8005c12:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005c16:	441d      	add	r5, r3
 8005c18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005c1c:	2b20      	cmp	r3, #32
 8005c1e:	bfc1      	itttt	gt
 8005c20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c24:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005c28:	fa09 f303 	lslgt.w	r3, r9, r3
 8005c2c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005c30:	bfda      	itte	le
 8005c32:	f1c3 0320 	rsble	r3, r3, #32
 8005c36:	fa06 f003 	lslle.w	r0, r6, r3
 8005c3a:	4318      	orrgt	r0, r3
 8005c3c:	f7fa fc6a 	bl	8000514 <__aeabi_ui2d>
 8005c40:	2301      	movs	r3, #1
 8005c42:	4606      	mov	r6, r0
 8005c44:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005c48:	3d01      	subs	r5, #1
 8005c4a:	9310      	str	r3, [sp, #64]	; 0x40
 8005c4c:	e771      	b.n	8005b32 <_dtoa_r+0x11a>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e7b6      	b.n	8005bc0 <_dtoa_r+0x1a8>
 8005c52:	900e      	str	r0, [sp, #56]	; 0x38
 8005c54:	e7b5      	b.n	8005bc2 <_dtoa_r+0x1aa>
 8005c56:	f1ca 0300 	rsb	r3, sl, #0
 8005c5a:	9306      	str	r3, [sp, #24]
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	eba8 080a 	sub.w	r8, r8, sl
 8005c62:	930d      	str	r3, [sp, #52]	; 0x34
 8005c64:	e7c2      	b.n	8005bec <_dtoa_r+0x1d4>
 8005c66:	2300      	movs	r3, #0
 8005c68:	9308      	str	r3, [sp, #32]
 8005c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	dc39      	bgt.n	8005ce4 <_dtoa_r+0x2cc>
 8005c70:	f04f 0901 	mov.w	r9, #1
 8005c74:	f8cd 9004 	str.w	r9, [sp, #4]
 8005c78:	464b      	mov	r3, r9
 8005c7a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005c7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005c80:	2200      	movs	r2, #0
 8005c82:	6042      	str	r2, [r0, #4]
 8005c84:	2204      	movs	r2, #4
 8005c86:	f102 0614 	add.w	r6, r2, #20
 8005c8a:	429e      	cmp	r6, r3
 8005c8c:	6841      	ldr	r1, [r0, #4]
 8005c8e:	d92f      	bls.n	8005cf0 <_dtoa_r+0x2d8>
 8005c90:	4620      	mov	r0, r4
 8005c92:	f000 fcc7 	bl	8006624 <_Balloc>
 8005c96:	9000      	str	r0, [sp, #0]
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	d14b      	bne.n	8005d34 <_dtoa_r+0x31c>
 8005c9c:	4b24      	ldr	r3, [pc, #144]	; (8005d30 <_dtoa_r+0x318>)
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005ca4:	e6d1      	b.n	8005a4a <_dtoa_r+0x32>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e7de      	b.n	8005c68 <_dtoa_r+0x250>
 8005caa:	2300      	movs	r3, #0
 8005cac:	9308      	str	r3, [sp, #32]
 8005cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cb0:	eb0a 0903 	add.w	r9, sl, r3
 8005cb4:	f109 0301 	add.w	r3, r9, #1
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	9301      	str	r3, [sp, #4]
 8005cbc:	bfb8      	it	lt
 8005cbe:	2301      	movlt	r3, #1
 8005cc0:	e7dd      	b.n	8005c7e <_dtoa_r+0x266>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e7f2      	b.n	8005cac <_dtoa_r+0x294>
 8005cc6:	2501      	movs	r5, #1
 8005cc8:	2300      	movs	r3, #0
 8005cca:	9305      	str	r3, [sp, #20]
 8005ccc:	9508      	str	r5, [sp, #32]
 8005cce:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8005cd8:	2312      	movs	r3, #18
 8005cda:	9209      	str	r2, [sp, #36]	; 0x24
 8005cdc:	e7cf      	b.n	8005c7e <_dtoa_r+0x266>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	9308      	str	r3, [sp, #32]
 8005ce2:	e7f4      	b.n	8005cce <_dtoa_r+0x2b6>
 8005ce4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005ce8:	f8cd 9004 	str.w	r9, [sp, #4]
 8005cec:	464b      	mov	r3, r9
 8005cee:	e7c6      	b.n	8005c7e <_dtoa_r+0x266>
 8005cf0:	3101      	adds	r1, #1
 8005cf2:	6041      	str	r1, [r0, #4]
 8005cf4:	0052      	lsls	r2, r2, #1
 8005cf6:	e7c6      	b.n	8005c86 <_dtoa_r+0x26e>
 8005cf8:	636f4361 	.word	0x636f4361
 8005cfc:	3fd287a7 	.word	0x3fd287a7
 8005d00:	8b60c8b3 	.word	0x8b60c8b3
 8005d04:	3fc68a28 	.word	0x3fc68a28
 8005d08:	509f79fb 	.word	0x509f79fb
 8005d0c:	3fd34413 	.word	0x3fd34413
 8005d10:	08007dbd 	.word	0x08007dbd
 8005d14:	08007dd4 	.word	0x08007dd4
 8005d18:	7ff00000 	.word	0x7ff00000
 8005d1c:	08007db9 	.word	0x08007db9
 8005d20:	08007db0 	.word	0x08007db0
 8005d24:	08007d8d 	.word	0x08007d8d
 8005d28:	3ff80000 	.word	0x3ff80000
 8005d2c:	08007ed0 	.word	0x08007ed0
 8005d30:	08007e33 	.word	0x08007e33
 8005d34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d36:	9a00      	ldr	r2, [sp, #0]
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	9b01      	ldr	r3, [sp, #4]
 8005d3c:	2b0e      	cmp	r3, #14
 8005d3e:	f200 80ad 	bhi.w	8005e9c <_dtoa_r+0x484>
 8005d42:	2d00      	cmp	r5, #0
 8005d44:	f000 80aa 	beq.w	8005e9c <_dtoa_r+0x484>
 8005d48:	f1ba 0f00 	cmp.w	sl, #0
 8005d4c:	dd36      	ble.n	8005dbc <_dtoa_r+0x3a4>
 8005d4e:	4ac3      	ldr	r2, [pc, #780]	; (800605c <_dtoa_r+0x644>)
 8005d50:	f00a 030f 	and.w	r3, sl, #15
 8005d54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005d58:	ed93 7b00 	vldr	d7, [r3]
 8005d5c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005d60:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005d64:	eeb0 8a47 	vmov.f32	s16, s14
 8005d68:	eef0 8a67 	vmov.f32	s17, s15
 8005d6c:	d016      	beq.n	8005d9c <_dtoa_r+0x384>
 8005d6e:	4bbc      	ldr	r3, [pc, #752]	; (8006060 <_dtoa_r+0x648>)
 8005d70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d78:	f7fa fd70 	bl	800085c <__aeabi_ddiv>
 8005d7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d80:	f007 070f 	and.w	r7, r7, #15
 8005d84:	2503      	movs	r5, #3
 8005d86:	4eb6      	ldr	r6, [pc, #728]	; (8006060 <_dtoa_r+0x648>)
 8005d88:	b957      	cbnz	r7, 8005da0 <_dtoa_r+0x388>
 8005d8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d8e:	ec53 2b18 	vmov	r2, r3, d8
 8005d92:	f7fa fd63 	bl	800085c <__aeabi_ddiv>
 8005d96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d9a:	e029      	b.n	8005df0 <_dtoa_r+0x3d8>
 8005d9c:	2502      	movs	r5, #2
 8005d9e:	e7f2      	b.n	8005d86 <_dtoa_r+0x36e>
 8005da0:	07f9      	lsls	r1, r7, #31
 8005da2:	d508      	bpl.n	8005db6 <_dtoa_r+0x39e>
 8005da4:	ec51 0b18 	vmov	r0, r1, d8
 8005da8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005dac:	f7fa fc2c 	bl	8000608 <__aeabi_dmul>
 8005db0:	ec41 0b18 	vmov	d8, r0, r1
 8005db4:	3501      	adds	r5, #1
 8005db6:	107f      	asrs	r7, r7, #1
 8005db8:	3608      	adds	r6, #8
 8005dba:	e7e5      	b.n	8005d88 <_dtoa_r+0x370>
 8005dbc:	f000 80a6 	beq.w	8005f0c <_dtoa_r+0x4f4>
 8005dc0:	f1ca 0600 	rsb	r6, sl, #0
 8005dc4:	4ba5      	ldr	r3, [pc, #660]	; (800605c <_dtoa_r+0x644>)
 8005dc6:	4fa6      	ldr	r7, [pc, #664]	; (8006060 <_dtoa_r+0x648>)
 8005dc8:	f006 020f 	and.w	r2, r6, #15
 8005dcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005dd8:	f7fa fc16 	bl	8000608 <__aeabi_dmul>
 8005ddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005de0:	1136      	asrs	r6, r6, #4
 8005de2:	2300      	movs	r3, #0
 8005de4:	2502      	movs	r5, #2
 8005de6:	2e00      	cmp	r6, #0
 8005de8:	f040 8085 	bne.w	8005ef6 <_dtoa_r+0x4de>
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1d2      	bne.n	8005d96 <_dtoa_r+0x37e>
 8005df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 808c 	beq.w	8005f10 <_dtoa_r+0x4f8>
 8005df8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005dfc:	4b99      	ldr	r3, [pc, #612]	; (8006064 <_dtoa_r+0x64c>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	4630      	mov	r0, r6
 8005e02:	4639      	mov	r1, r7
 8005e04:	f7fa fe72 	bl	8000aec <__aeabi_dcmplt>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	f000 8081 	beq.w	8005f10 <_dtoa_r+0x4f8>
 8005e0e:	9b01      	ldr	r3, [sp, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d07d      	beq.n	8005f10 <_dtoa_r+0x4f8>
 8005e14:	f1b9 0f00 	cmp.w	r9, #0
 8005e18:	dd3c      	ble.n	8005e94 <_dtoa_r+0x47c>
 8005e1a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005e1e:	9307      	str	r3, [sp, #28]
 8005e20:	2200      	movs	r2, #0
 8005e22:	4b91      	ldr	r3, [pc, #580]	; (8006068 <_dtoa_r+0x650>)
 8005e24:	4630      	mov	r0, r6
 8005e26:	4639      	mov	r1, r7
 8005e28:	f7fa fbee 	bl	8000608 <__aeabi_dmul>
 8005e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e30:	3501      	adds	r5, #1
 8005e32:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005e36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f7fa fb7a 	bl	8000534 <__aeabi_i2d>
 8005e40:	4632      	mov	r2, r6
 8005e42:	463b      	mov	r3, r7
 8005e44:	f7fa fbe0 	bl	8000608 <__aeabi_dmul>
 8005e48:	4b88      	ldr	r3, [pc, #544]	; (800606c <_dtoa_r+0x654>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f7fa fa26 	bl	800029c <__adddf3>
 8005e50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005e54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e58:	9303      	str	r3, [sp, #12]
 8005e5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d15c      	bne.n	8005f1a <_dtoa_r+0x502>
 8005e60:	4b83      	ldr	r3, [pc, #524]	; (8006070 <_dtoa_r+0x658>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	4630      	mov	r0, r6
 8005e66:	4639      	mov	r1, r7
 8005e68:	f7fa fa16 	bl	8000298 <__aeabi_dsub>
 8005e6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e70:	4606      	mov	r6, r0
 8005e72:	460f      	mov	r7, r1
 8005e74:	f7fa fe58 	bl	8000b28 <__aeabi_dcmpgt>
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	f040 8296 	bne.w	80063aa <_dtoa_r+0x992>
 8005e7e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005e82:	4630      	mov	r0, r6
 8005e84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e88:	4639      	mov	r1, r7
 8005e8a:	f7fa fe2f 	bl	8000aec <__aeabi_dcmplt>
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	f040 8288 	bne.w	80063a4 <_dtoa_r+0x98c>
 8005e94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f2c0 8158 	blt.w	8006154 <_dtoa_r+0x73c>
 8005ea4:	f1ba 0f0e 	cmp.w	sl, #14
 8005ea8:	f300 8154 	bgt.w	8006154 <_dtoa_r+0x73c>
 8005eac:	4b6b      	ldr	r3, [pc, #428]	; (800605c <_dtoa_r+0x644>)
 8005eae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005eb2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f280 80e3 	bge.w	8006084 <_dtoa_r+0x66c>
 8005ebe:	9b01      	ldr	r3, [sp, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f300 80df 	bgt.w	8006084 <_dtoa_r+0x66c>
 8005ec6:	f040 826d 	bne.w	80063a4 <_dtoa_r+0x98c>
 8005eca:	4b69      	ldr	r3, [pc, #420]	; (8006070 <_dtoa_r+0x658>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	4640      	mov	r0, r8
 8005ed0:	4649      	mov	r1, r9
 8005ed2:	f7fa fb99 	bl	8000608 <__aeabi_dmul>
 8005ed6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eda:	f7fa fe1b 	bl	8000b14 <__aeabi_dcmpge>
 8005ede:	9e01      	ldr	r6, [sp, #4]
 8005ee0:	4637      	mov	r7, r6
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	f040 8243 	bne.w	800636e <_dtoa_r+0x956>
 8005ee8:	9d00      	ldr	r5, [sp, #0]
 8005eea:	2331      	movs	r3, #49	; 0x31
 8005eec:	f805 3b01 	strb.w	r3, [r5], #1
 8005ef0:	f10a 0a01 	add.w	sl, sl, #1
 8005ef4:	e23f      	b.n	8006376 <_dtoa_r+0x95e>
 8005ef6:	07f2      	lsls	r2, r6, #31
 8005ef8:	d505      	bpl.n	8005f06 <_dtoa_r+0x4ee>
 8005efa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005efe:	f7fa fb83 	bl	8000608 <__aeabi_dmul>
 8005f02:	3501      	adds	r5, #1
 8005f04:	2301      	movs	r3, #1
 8005f06:	1076      	asrs	r6, r6, #1
 8005f08:	3708      	adds	r7, #8
 8005f0a:	e76c      	b.n	8005de6 <_dtoa_r+0x3ce>
 8005f0c:	2502      	movs	r5, #2
 8005f0e:	e76f      	b.n	8005df0 <_dtoa_r+0x3d8>
 8005f10:	9b01      	ldr	r3, [sp, #4]
 8005f12:	f8cd a01c 	str.w	sl, [sp, #28]
 8005f16:	930c      	str	r3, [sp, #48]	; 0x30
 8005f18:	e78d      	b.n	8005e36 <_dtoa_r+0x41e>
 8005f1a:	9900      	ldr	r1, [sp, #0]
 8005f1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005f1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f20:	4b4e      	ldr	r3, [pc, #312]	; (800605c <_dtoa_r+0x644>)
 8005f22:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f26:	4401      	add	r1, r0
 8005f28:	9102      	str	r1, [sp, #8]
 8005f2a:	9908      	ldr	r1, [sp, #32]
 8005f2c:	eeb0 8a47 	vmov.f32	s16, s14
 8005f30:	eef0 8a67 	vmov.f32	s17, s15
 8005f34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f3c:	2900      	cmp	r1, #0
 8005f3e:	d045      	beq.n	8005fcc <_dtoa_r+0x5b4>
 8005f40:	494c      	ldr	r1, [pc, #304]	; (8006074 <_dtoa_r+0x65c>)
 8005f42:	2000      	movs	r0, #0
 8005f44:	f7fa fc8a 	bl	800085c <__aeabi_ddiv>
 8005f48:	ec53 2b18 	vmov	r2, r3, d8
 8005f4c:	f7fa f9a4 	bl	8000298 <__aeabi_dsub>
 8005f50:	9d00      	ldr	r5, [sp, #0]
 8005f52:	ec41 0b18 	vmov	d8, r0, r1
 8005f56:	4639      	mov	r1, r7
 8005f58:	4630      	mov	r0, r6
 8005f5a:	f7fa fe05 	bl	8000b68 <__aeabi_d2iz>
 8005f5e:	900c      	str	r0, [sp, #48]	; 0x30
 8005f60:	f7fa fae8 	bl	8000534 <__aeabi_i2d>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4630      	mov	r0, r6
 8005f6a:	4639      	mov	r1, r7
 8005f6c:	f7fa f994 	bl	8000298 <__aeabi_dsub>
 8005f70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f72:	3330      	adds	r3, #48	; 0x30
 8005f74:	f805 3b01 	strb.w	r3, [r5], #1
 8005f78:	ec53 2b18 	vmov	r2, r3, d8
 8005f7c:	4606      	mov	r6, r0
 8005f7e:	460f      	mov	r7, r1
 8005f80:	f7fa fdb4 	bl	8000aec <__aeabi_dcmplt>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d165      	bne.n	8006054 <_dtoa_r+0x63c>
 8005f88:	4632      	mov	r2, r6
 8005f8a:	463b      	mov	r3, r7
 8005f8c:	4935      	ldr	r1, [pc, #212]	; (8006064 <_dtoa_r+0x64c>)
 8005f8e:	2000      	movs	r0, #0
 8005f90:	f7fa f982 	bl	8000298 <__aeabi_dsub>
 8005f94:	ec53 2b18 	vmov	r2, r3, d8
 8005f98:	f7fa fda8 	bl	8000aec <__aeabi_dcmplt>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	f040 80b9 	bne.w	8006114 <_dtoa_r+0x6fc>
 8005fa2:	9b02      	ldr	r3, [sp, #8]
 8005fa4:	429d      	cmp	r5, r3
 8005fa6:	f43f af75 	beq.w	8005e94 <_dtoa_r+0x47c>
 8005faa:	4b2f      	ldr	r3, [pc, #188]	; (8006068 <_dtoa_r+0x650>)
 8005fac:	ec51 0b18 	vmov	r0, r1, d8
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f7fa fb29 	bl	8000608 <__aeabi_dmul>
 8005fb6:	4b2c      	ldr	r3, [pc, #176]	; (8006068 <_dtoa_r+0x650>)
 8005fb8:	ec41 0b18 	vmov	d8, r0, r1
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	4639      	mov	r1, r7
 8005fc2:	f7fa fb21 	bl	8000608 <__aeabi_dmul>
 8005fc6:	4606      	mov	r6, r0
 8005fc8:	460f      	mov	r7, r1
 8005fca:	e7c4      	b.n	8005f56 <_dtoa_r+0x53e>
 8005fcc:	ec51 0b17 	vmov	r0, r1, d7
 8005fd0:	f7fa fb1a 	bl	8000608 <__aeabi_dmul>
 8005fd4:	9b02      	ldr	r3, [sp, #8]
 8005fd6:	9d00      	ldr	r5, [sp, #0]
 8005fd8:	930c      	str	r3, [sp, #48]	; 0x30
 8005fda:	ec41 0b18 	vmov	d8, r0, r1
 8005fde:	4639      	mov	r1, r7
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	f7fa fdc1 	bl	8000b68 <__aeabi_d2iz>
 8005fe6:	9011      	str	r0, [sp, #68]	; 0x44
 8005fe8:	f7fa faa4 	bl	8000534 <__aeabi_i2d>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	4639      	mov	r1, r7
 8005ff4:	f7fa f950 	bl	8000298 <__aeabi_dsub>
 8005ff8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ffa:	3330      	adds	r3, #48	; 0x30
 8005ffc:	f805 3b01 	strb.w	r3, [r5], #1
 8006000:	9b02      	ldr	r3, [sp, #8]
 8006002:	429d      	cmp	r5, r3
 8006004:	4606      	mov	r6, r0
 8006006:	460f      	mov	r7, r1
 8006008:	f04f 0200 	mov.w	r2, #0
 800600c:	d134      	bne.n	8006078 <_dtoa_r+0x660>
 800600e:	4b19      	ldr	r3, [pc, #100]	; (8006074 <_dtoa_r+0x65c>)
 8006010:	ec51 0b18 	vmov	r0, r1, d8
 8006014:	f7fa f942 	bl	800029c <__adddf3>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4630      	mov	r0, r6
 800601e:	4639      	mov	r1, r7
 8006020:	f7fa fd82 	bl	8000b28 <__aeabi_dcmpgt>
 8006024:	2800      	cmp	r0, #0
 8006026:	d175      	bne.n	8006114 <_dtoa_r+0x6fc>
 8006028:	ec53 2b18 	vmov	r2, r3, d8
 800602c:	4911      	ldr	r1, [pc, #68]	; (8006074 <_dtoa_r+0x65c>)
 800602e:	2000      	movs	r0, #0
 8006030:	f7fa f932 	bl	8000298 <__aeabi_dsub>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4630      	mov	r0, r6
 800603a:	4639      	mov	r1, r7
 800603c:	f7fa fd56 	bl	8000aec <__aeabi_dcmplt>
 8006040:	2800      	cmp	r0, #0
 8006042:	f43f af27 	beq.w	8005e94 <_dtoa_r+0x47c>
 8006046:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006048:	1e6b      	subs	r3, r5, #1
 800604a:	930c      	str	r3, [sp, #48]	; 0x30
 800604c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006050:	2b30      	cmp	r3, #48	; 0x30
 8006052:	d0f8      	beq.n	8006046 <_dtoa_r+0x62e>
 8006054:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006058:	e04a      	b.n	80060f0 <_dtoa_r+0x6d8>
 800605a:	bf00      	nop
 800605c:	08007ed0 	.word	0x08007ed0
 8006060:	08007ea8 	.word	0x08007ea8
 8006064:	3ff00000 	.word	0x3ff00000
 8006068:	40240000 	.word	0x40240000
 800606c:	401c0000 	.word	0x401c0000
 8006070:	40140000 	.word	0x40140000
 8006074:	3fe00000 	.word	0x3fe00000
 8006078:	4baf      	ldr	r3, [pc, #700]	; (8006338 <_dtoa_r+0x920>)
 800607a:	f7fa fac5 	bl	8000608 <__aeabi_dmul>
 800607e:	4606      	mov	r6, r0
 8006080:	460f      	mov	r7, r1
 8006082:	e7ac      	b.n	8005fde <_dtoa_r+0x5c6>
 8006084:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006088:	9d00      	ldr	r5, [sp, #0]
 800608a:	4642      	mov	r2, r8
 800608c:	464b      	mov	r3, r9
 800608e:	4630      	mov	r0, r6
 8006090:	4639      	mov	r1, r7
 8006092:	f7fa fbe3 	bl	800085c <__aeabi_ddiv>
 8006096:	f7fa fd67 	bl	8000b68 <__aeabi_d2iz>
 800609a:	9002      	str	r0, [sp, #8]
 800609c:	f7fa fa4a 	bl	8000534 <__aeabi_i2d>
 80060a0:	4642      	mov	r2, r8
 80060a2:	464b      	mov	r3, r9
 80060a4:	f7fa fab0 	bl	8000608 <__aeabi_dmul>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4630      	mov	r0, r6
 80060ae:	4639      	mov	r1, r7
 80060b0:	f7fa f8f2 	bl	8000298 <__aeabi_dsub>
 80060b4:	9e02      	ldr	r6, [sp, #8]
 80060b6:	9f01      	ldr	r7, [sp, #4]
 80060b8:	3630      	adds	r6, #48	; 0x30
 80060ba:	f805 6b01 	strb.w	r6, [r5], #1
 80060be:	9e00      	ldr	r6, [sp, #0]
 80060c0:	1bae      	subs	r6, r5, r6
 80060c2:	42b7      	cmp	r7, r6
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	d137      	bne.n	800613a <_dtoa_r+0x722>
 80060ca:	f7fa f8e7 	bl	800029c <__adddf3>
 80060ce:	4642      	mov	r2, r8
 80060d0:	464b      	mov	r3, r9
 80060d2:	4606      	mov	r6, r0
 80060d4:	460f      	mov	r7, r1
 80060d6:	f7fa fd27 	bl	8000b28 <__aeabi_dcmpgt>
 80060da:	b9c8      	cbnz	r0, 8006110 <_dtoa_r+0x6f8>
 80060dc:	4642      	mov	r2, r8
 80060de:	464b      	mov	r3, r9
 80060e0:	4630      	mov	r0, r6
 80060e2:	4639      	mov	r1, r7
 80060e4:	f7fa fcf8 	bl	8000ad8 <__aeabi_dcmpeq>
 80060e8:	b110      	cbz	r0, 80060f0 <_dtoa_r+0x6d8>
 80060ea:	9b02      	ldr	r3, [sp, #8]
 80060ec:	07d9      	lsls	r1, r3, #31
 80060ee:	d40f      	bmi.n	8006110 <_dtoa_r+0x6f8>
 80060f0:	4620      	mov	r0, r4
 80060f2:	4659      	mov	r1, fp
 80060f4:	f000 fad6 	bl	80066a4 <_Bfree>
 80060f8:	2300      	movs	r3, #0
 80060fa:	702b      	strb	r3, [r5, #0]
 80060fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060fe:	f10a 0001 	add.w	r0, sl, #1
 8006102:	6018      	str	r0, [r3, #0]
 8006104:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006106:	2b00      	cmp	r3, #0
 8006108:	f43f acd8 	beq.w	8005abc <_dtoa_r+0xa4>
 800610c:	601d      	str	r5, [r3, #0]
 800610e:	e4d5      	b.n	8005abc <_dtoa_r+0xa4>
 8006110:	f8cd a01c 	str.w	sl, [sp, #28]
 8006114:	462b      	mov	r3, r5
 8006116:	461d      	mov	r5, r3
 8006118:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800611c:	2a39      	cmp	r2, #57	; 0x39
 800611e:	d108      	bne.n	8006132 <_dtoa_r+0x71a>
 8006120:	9a00      	ldr	r2, [sp, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d1f7      	bne.n	8006116 <_dtoa_r+0x6fe>
 8006126:	9a07      	ldr	r2, [sp, #28]
 8006128:	9900      	ldr	r1, [sp, #0]
 800612a:	3201      	adds	r2, #1
 800612c:	9207      	str	r2, [sp, #28]
 800612e:	2230      	movs	r2, #48	; 0x30
 8006130:	700a      	strb	r2, [r1, #0]
 8006132:	781a      	ldrb	r2, [r3, #0]
 8006134:	3201      	adds	r2, #1
 8006136:	701a      	strb	r2, [r3, #0]
 8006138:	e78c      	b.n	8006054 <_dtoa_r+0x63c>
 800613a:	4b7f      	ldr	r3, [pc, #508]	; (8006338 <_dtoa_r+0x920>)
 800613c:	2200      	movs	r2, #0
 800613e:	f7fa fa63 	bl	8000608 <__aeabi_dmul>
 8006142:	2200      	movs	r2, #0
 8006144:	2300      	movs	r3, #0
 8006146:	4606      	mov	r6, r0
 8006148:	460f      	mov	r7, r1
 800614a:	f7fa fcc5 	bl	8000ad8 <__aeabi_dcmpeq>
 800614e:	2800      	cmp	r0, #0
 8006150:	d09b      	beq.n	800608a <_dtoa_r+0x672>
 8006152:	e7cd      	b.n	80060f0 <_dtoa_r+0x6d8>
 8006154:	9a08      	ldr	r2, [sp, #32]
 8006156:	2a00      	cmp	r2, #0
 8006158:	f000 80c4 	beq.w	80062e4 <_dtoa_r+0x8cc>
 800615c:	9a05      	ldr	r2, [sp, #20]
 800615e:	2a01      	cmp	r2, #1
 8006160:	f300 80a8 	bgt.w	80062b4 <_dtoa_r+0x89c>
 8006164:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006166:	2a00      	cmp	r2, #0
 8006168:	f000 80a0 	beq.w	80062ac <_dtoa_r+0x894>
 800616c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006170:	9e06      	ldr	r6, [sp, #24]
 8006172:	4645      	mov	r5, r8
 8006174:	9a04      	ldr	r2, [sp, #16]
 8006176:	2101      	movs	r1, #1
 8006178:	441a      	add	r2, r3
 800617a:	4620      	mov	r0, r4
 800617c:	4498      	add	r8, r3
 800617e:	9204      	str	r2, [sp, #16]
 8006180:	f000 fb4c 	bl	800681c <__i2b>
 8006184:	4607      	mov	r7, r0
 8006186:	2d00      	cmp	r5, #0
 8006188:	dd0b      	ble.n	80061a2 <_dtoa_r+0x78a>
 800618a:	9b04      	ldr	r3, [sp, #16]
 800618c:	2b00      	cmp	r3, #0
 800618e:	dd08      	ble.n	80061a2 <_dtoa_r+0x78a>
 8006190:	42ab      	cmp	r3, r5
 8006192:	9a04      	ldr	r2, [sp, #16]
 8006194:	bfa8      	it	ge
 8006196:	462b      	movge	r3, r5
 8006198:	eba8 0803 	sub.w	r8, r8, r3
 800619c:	1aed      	subs	r5, r5, r3
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	9304      	str	r3, [sp, #16]
 80061a2:	9b06      	ldr	r3, [sp, #24]
 80061a4:	b1fb      	cbz	r3, 80061e6 <_dtoa_r+0x7ce>
 80061a6:	9b08      	ldr	r3, [sp, #32]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 809f 	beq.w	80062ec <_dtoa_r+0x8d4>
 80061ae:	2e00      	cmp	r6, #0
 80061b0:	dd11      	ble.n	80061d6 <_dtoa_r+0x7be>
 80061b2:	4639      	mov	r1, r7
 80061b4:	4632      	mov	r2, r6
 80061b6:	4620      	mov	r0, r4
 80061b8:	f000 fbec 	bl	8006994 <__pow5mult>
 80061bc:	465a      	mov	r2, fp
 80061be:	4601      	mov	r1, r0
 80061c0:	4607      	mov	r7, r0
 80061c2:	4620      	mov	r0, r4
 80061c4:	f000 fb40 	bl	8006848 <__multiply>
 80061c8:	4659      	mov	r1, fp
 80061ca:	9007      	str	r0, [sp, #28]
 80061cc:	4620      	mov	r0, r4
 80061ce:	f000 fa69 	bl	80066a4 <_Bfree>
 80061d2:	9b07      	ldr	r3, [sp, #28]
 80061d4:	469b      	mov	fp, r3
 80061d6:	9b06      	ldr	r3, [sp, #24]
 80061d8:	1b9a      	subs	r2, r3, r6
 80061da:	d004      	beq.n	80061e6 <_dtoa_r+0x7ce>
 80061dc:	4659      	mov	r1, fp
 80061de:	4620      	mov	r0, r4
 80061e0:	f000 fbd8 	bl	8006994 <__pow5mult>
 80061e4:	4683      	mov	fp, r0
 80061e6:	2101      	movs	r1, #1
 80061e8:	4620      	mov	r0, r4
 80061ea:	f000 fb17 	bl	800681c <__i2b>
 80061ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	4606      	mov	r6, r0
 80061f4:	dd7c      	ble.n	80062f0 <_dtoa_r+0x8d8>
 80061f6:	461a      	mov	r2, r3
 80061f8:	4601      	mov	r1, r0
 80061fa:	4620      	mov	r0, r4
 80061fc:	f000 fbca 	bl	8006994 <__pow5mult>
 8006200:	9b05      	ldr	r3, [sp, #20]
 8006202:	2b01      	cmp	r3, #1
 8006204:	4606      	mov	r6, r0
 8006206:	dd76      	ble.n	80062f6 <_dtoa_r+0x8de>
 8006208:	2300      	movs	r3, #0
 800620a:	9306      	str	r3, [sp, #24]
 800620c:	6933      	ldr	r3, [r6, #16]
 800620e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006212:	6918      	ldr	r0, [r3, #16]
 8006214:	f000 fab2 	bl	800677c <__hi0bits>
 8006218:	f1c0 0020 	rsb	r0, r0, #32
 800621c:	9b04      	ldr	r3, [sp, #16]
 800621e:	4418      	add	r0, r3
 8006220:	f010 001f 	ands.w	r0, r0, #31
 8006224:	f000 8086 	beq.w	8006334 <_dtoa_r+0x91c>
 8006228:	f1c0 0320 	rsb	r3, r0, #32
 800622c:	2b04      	cmp	r3, #4
 800622e:	dd7f      	ble.n	8006330 <_dtoa_r+0x918>
 8006230:	f1c0 001c 	rsb	r0, r0, #28
 8006234:	9b04      	ldr	r3, [sp, #16]
 8006236:	4403      	add	r3, r0
 8006238:	4480      	add	r8, r0
 800623a:	4405      	add	r5, r0
 800623c:	9304      	str	r3, [sp, #16]
 800623e:	f1b8 0f00 	cmp.w	r8, #0
 8006242:	dd05      	ble.n	8006250 <_dtoa_r+0x838>
 8006244:	4659      	mov	r1, fp
 8006246:	4642      	mov	r2, r8
 8006248:	4620      	mov	r0, r4
 800624a:	f000 fbfd 	bl	8006a48 <__lshift>
 800624e:	4683      	mov	fp, r0
 8006250:	9b04      	ldr	r3, [sp, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	dd05      	ble.n	8006262 <_dtoa_r+0x84a>
 8006256:	4631      	mov	r1, r6
 8006258:	461a      	mov	r2, r3
 800625a:	4620      	mov	r0, r4
 800625c:	f000 fbf4 	bl	8006a48 <__lshift>
 8006260:	4606      	mov	r6, r0
 8006262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006264:	2b00      	cmp	r3, #0
 8006266:	d069      	beq.n	800633c <_dtoa_r+0x924>
 8006268:	4631      	mov	r1, r6
 800626a:	4658      	mov	r0, fp
 800626c:	f000 fc58 	bl	8006b20 <__mcmp>
 8006270:	2800      	cmp	r0, #0
 8006272:	da63      	bge.n	800633c <_dtoa_r+0x924>
 8006274:	2300      	movs	r3, #0
 8006276:	4659      	mov	r1, fp
 8006278:	220a      	movs	r2, #10
 800627a:	4620      	mov	r0, r4
 800627c:	f000 fa34 	bl	80066e8 <__multadd>
 8006280:	9b08      	ldr	r3, [sp, #32]
 8006282:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006286:	4683      	mov	fp, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 818f 	beq.w	80065ac <_dtoa_r+0xb94>
 800628e:	4639      	mov	r1, r7
 8006290:	2300      	movs	r3, #0
 8006292:	220a      	movs	r2, #10
 8006294:	4620      	mov	r0, r4
 8006296:	f000 fa27 	bl	80066e8 <__multadd>
 800629a:	f1b9 0f00 	cmp.w	r9, #0
 800629e:	4607      	mov	r7, r0
 80062a0:	f300 808e 	bgt.w	80063c0 <_dtoa_r+0x9a8>
 80062a4:	9b05      	ldr	r3, [sp, #20]
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	dc50      	bgt.n	800634c <_dtoa_r+0x934>
 80062aa:	e089      	b.n	80063c0 <_dtoa_r+0x9a8>
 80062ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80062b2:	e75d      	b.n	8006170 <_dtoa_r+0x758>
 80062b4:	9b01      	ldr	r3, [sp, #4]
 80062b6:	1e5e      	subs	r6, r3, #1
 80062b8:	9b06      	ldr	r3, [sp, #24]
 80062ba:	42b3      	cmp	r3, r6
 80062bc:	bfbf      	itttt	lt
 80062be:	9b06      	ldrlt	r3, [sp, #24]
 80062c0:	9606      	strlt	r6, [sp, #24]
 80062c2:	1af2      	sublt	r2, r6, r3
 80062c4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80062c6:	bfb6      	itet	lt
 80062c8:	189b      	addlt	r3, r3, r2
 80062ca:	1b9e      	subge	r6, r3, r6
 80062cc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80062ce:	9b01      	ldr	r3, [sp, #4]
 80062d0:	bfb8      	it	lt
 80062d2:	2600      	movlt	r6, #0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	bfb5      	itete	lt
 80062d8:	eba8 0503 	sublt.w	r5, r8, r3
 80062dc:	9b01      	ldrge	r3, [sp, #4]
 80062de:	2300      	movlt	r3, #0
 80062e0:	4645      	movge	r5, r8
 80062e2:	e747      	b.n	8006174 <_dtoa_r+0x75c>
 80062e4:	9e06      	ldr	r6, [sp, #24]
 80062e6:	9f08      	ldr	r7, [sp, #32]
 80062e8:	4645      	mov	r5, r8
 80062ea:	e74c      	b.n	8006186 <_dtoa_r+0x76e>
 80062ec:	9a06      	ldr	r2, [sp, #24]
 80062ee:	e775      	b.n	80061dc <_dtoa_r+0x7c4>
 80062f0:	9b05      	ldr	r3, [sp, #20]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	dc18      	bgt.n	8006328 <_dtoa_r+0x910>
 80062f6:	9b02      	ldr	r3, [sp, #8]
 80062f8:	b9b3      	cbnz	r3, 8006328 <_dtoa_r+0x910>
 80062fa:	9b03      	ldr	r3, [sp, #12]
 80062fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006300:	b9a3      	cbnz	r3, 800632c <_dtoa_r+0x914>
 8006302:	9b03      	ldr	r3, [sp, #12]
 8006304:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006308:	0d1b      	lsrs	r3, r3, #20
 800630a:	051b      	lsls	r3, r3, #20
 800630c:	b12b      	cbz	r3, 800631a <_dtoa_r+0x902>
 800630e:	9b04      	ldr	r3, [sp, #16]
 8006310:	3301      	adds	r3, #1
 8006312:	9304      	str	r3, [sp, #16]
 8006314:	f108 0801 	add.w	r8, r8, #1
 8006318:	2301      	movs	r3, #1
 800631a:	9306      	str	r3, [sp, #24]
 800631c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800631e:	2b00      	cmp	r3, #0
 8006320:	f47f af74 	bne.w	800620c <_dtoa_r+0x7f4>
 8006324:	2001      	movs	r0, #1
 8006326:	e779      	b.n	800621c <_dtoa_r+0x804>
 8006328:	2300      	movs	r3, #0
 800632a:	e7f6      	b.n	800631a <_dtoa_r+0x902>
 800632c:	9b02      	ldr	r3, [sp, #8]
 800632e:	e7f4      	b.n	800631a <_dtoa_r+0x902>
 8006330:	d085      	beq.n	800623e <_dtoa_r+0x826>
 8006332:	4618      	mov	r0, r3
 8006334:	301c      	adds	r0, #28
 8006336:	e77d      	b.n	8006234 <_dtoa_r+0x81c>
 8006338:	40240000 	.word	0x40240000
 800633c:	9b01      	ldr	r3, [sp, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	dc38      	bgt.n	80063b4 <_dtoa_r+0x99c>
 8006342:	9b05      	ldr	r3, [sp, #20]
 8006344:	2b02      	cmp	r3, #2
 8006346:	dd35      	ble.n	80063b4 <_dtoa_r+0x99c>
 8006348:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800634c:	f1b9 0f00 	cmp.w	r9, #0
 8006350:	d10d      	bne.n	800636e <_dtoa_r+0x956>
 8006352:	4631      	mov	r1, r6
 8006354:	464b      	mov	r3, r9
 8006356:	2205      	movs	r2, #5
 8006358:	4620      	mov	r0, r4
 800635a:	f000 f9c5 	bl	80066e8 <__multadd>
 800635e:	4601      	mov	r1, r0
 8006360:	4606      	mov	r6, r0
 8006362:	4658      	mov	r0, fp
 8006364:	f000 fbdc 	bl	8006b20 <__mcmp>
 8006368:	2800      	cmp	r0, #0
 800636a:	f73f adbd 	bgt.w	8005ee8 <_dtoa_r+0x4d0>
 800636e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006370:	9d00      	ldr	r5, [sp, #0]
 8006372:	ea6f 0a03 	mvn.w	sl, r3
 8006376:	f04f 0800 	mov.w	r8, #0
 800637a:	4631      	mov	r1, r6
 800637c:	4620      	mov	r0, r4
 800637e:	f000 f991 	bl	80066a4 <_Bfree>
 8006382:	2f00      	cmp	r7, #0
 8006384:	f43f aeb4 	beq.w	80060f0 <_dtoa_r+0x6d8>
 8006388:	f1b8 0f00 	cmp.w	r8, #0
 800638c:	d005      	beq.n	800639a <_dtoa_r+0x982>
 800638e:	45b8      	cmp	r8, r7
 8006390:	d003      	beq.n	800639a <_dtoa_r+0x982>
 8006392:	4641      	mov	r1, r8
 8006394:	4620      	mov	r0, r4
 8006396:	f000 f985 	bl	80066a4 <_Bfree>
 800639a:	4639      	mov	r1, r7
 800639c:	4620      	mov	r0, r4
 800639e:	f000 f981 	bl	80066a4 <_Bfree>
 80063a2:	e6a5      	b.n	80060f0 <_dtoa_r+0x6d8>
 80063a4:	2600      	movs	r6, #0
 80063a6:	4637      	mov	r7, r6
 80063a8:	e7e1      	b.n	800636e <_dtoa_r+0x956>
 80063aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80063ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80063b0:	4637      	mov	r7, r6
 80063b2:	e599      	b.n	8005ee8 <_dtoa_r+0x4d0>
 80063b4:	9b08      	ldr	r3, [sp, #32]
 80063b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 80fd 	beq.w	80065ba <_dtoa_r+0xba2>
 80063c0:	2d00      	cmp	r5, #0
 80063c2:	dd05      	ble.n	80063d0 <_dtoa_r+0x9b8>
 80063c4:	4639      	mov	r1, r7
 80063c6:	462a      	mov	r2, r5
 80063c8:	4620      	mov	r0, r4
 80063ca:	f000 fb3d 	bl	8006a48 <__lshift>
 80063ce:	4607      	mov	r7, r0
 80063d0:	9b06      	ldr	r3, [sp, #24]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d05c      	beq.n	8006490 <_dtoa_r+0xa78>
 80063d6:	6879      	ldr	r1, [r7, #4]
 80063d8:	4620      	mov	r0, r4
 80063da:	f000 f923 	bl	8006624 <_Balloc>
 80063de:	4605      	mov	r5, r0
 80063e0:	b928      	cbnz	r0, 80063ee <_dtoa_r+0x9d6>
 80063e2:	4b80      	ldr	r3, [pc, #512]	; (80065e4 <_dtoa_r+0xbcc>)
 80063e4:	4602      	mov	r2, r0
 80063e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80063ea:	f7ff bb2e 	b.w	8005a4a <_dtoa_r+0x32>
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	3202      	adds	r2, #2
 80063f2:	0092      	lsls	r2, r2, #2
 80063f4:	f107 010c 	add.w	r1, r7, #12
 80063f8:	300c      	adds	r0, #12
 80063fa:	f000 f905 	bl	8006608 <memcpy>
 80063fe:	2201      	movs	r2, #1
 8006400:	4629      	mov	r1, r5
 8006402:	4620      	mov	r0, r4
 8006404:	f000 fb20 	bl	8006a48 <__lshift>
 8006408:	9b00      	ldr	r3, [sp, #0]
 800640a:	3301      	adds	r3, #1
 800640c:	9301      	str	r3, [sp, #4]
 800640e:	9b00      	ldr	r3, [sp, #0]
 8006410:	444b      	add	r3, r9
 8006412:	9307      	str	r3, [sp, #28]
 8006414:	9b02      	ldr	r3, [sp, #8]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	46b8      	mov	r8, r7
 800641c:	9306      	str	r3, [sp, #24]
 800641e:	4607      	mov	r7, r0
 8006420:	9b01      	ldr	r3, [sp, #4]
 8006422:	4631      	mov	r1, r6
 8006424:	3b01      	subs	r3, #1
 8006426:	4658      	mov	r0, fp
 8006428:	9302      	str	r3, [sp, #8]
 800642a:	f7ff fa69 	bl	8005900 <quorem>
 800642e:	4603      	mov	r3, r0
 8006430:	3330      	adds	r3, #48	; 0x30
 8006432:	9004      	str	r0, [sp, #16]
 8006434:	4641      	mov	r1, r8
 8006436:	4658      	mov	r0, fp
 8006438:	9308      	str	r3, [sp, #32]
 800643a:	f000 fb71 	bl	8006b20 <__mcmp>
 800643e:	463a      	mov	r2, r7
 8006440:	4681      	mov	r9, r0
 8006442:	4631      	mov	r1, r6
 8006444:	4620      	mov	r0, r4
 8006446:	f000 fb87 	bl	8006b58 <__mdiff>
 800644a:	68c2      	ldr	r2, [r0, #12]
 800644c:	9b08      	ldr	r3, [sp, #32]
 800644e:	4605      	mov	r5, r0
 8006450:	bb02      	cbnz	r2, 8006494 <_dtoa_r+0xa7c>
 8006452:	4601      	mov	r1, r0
 8006454:	4658      	mov	r0, fp
 8006456:	f000 fb63 	bl	8006b20 <__mcmp>
 800645a:	9b08      	ldr	r3, [sp, #32]
 800645c:	4602      	mov	r2, r0
 800645e:	4629      	mov	r1, r5
 8006460:	4620      	mov	r0, r4
 8006462:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006466:	f000 f91d 	bl	80066a4 <_Bfree>
 800646a:	9b05      	ldr	r3, [sp, #20]
 800646c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800646e:	9d01      	ldr	r5, [sp, #4]
 8006470:	ea43 0102 	orr.w	r1, r3, r2
 8006474:	9b06      	ldr	r3, [sp, #24]
 8006476:	430b      	orrs	r3, r1
 8006478:	9b08      	ldr	r3, [sp, #32]
 800647a:	d10d      	bne.n	8006498 <_dtoa_r+0xa80>
 800647c:	2b39      	cmp	r3, #57	; 0x39
 800647e:	d029      	beq.n	80064d4 <_dtoa_r+0xabc>
 8006480:	f1b9 0f00 	cmp.w	r9, #0
 8006484:	dd01      	ble.n	800648a <_dtoa_r+0xa72>
 8006486:	9b04      	ldr	r3, [sp, #16]
 8006488:	3331      	adds	r3, #49	; 0x31
 800648a:	9a02      	ldr	r2, [sp, #8]
 800648c:	7013      	strb	r3, [r2, #0]
 800648e:	e774      	b.n	800637a <_dtoa_r+0x962>
 8006490:	4638      	mov	r0, r7
 8006492:	e7b9      	b.n	8006408 <_dtoa_r+0x9f0>
 8006494:	2201      	movs	r2, #1
 8006496:	e7e2      	b.n	800645e <_dtoa_r+0xa46>
 8006498:	f1b9 0f00 	cmp.w	r9, #0
 800649c:	db06      	blt.n	80064ac <_dtoa_r+0xa94>
 800649e:	9905      	ldr	r1, [sp, #20]
 80064a0:	ea41 0909 	orr.w	r9, r1, r9
 80064a4:	9906      	ldr	r1, [sp, #24]
 80064a6:	ea59 0101 	orrs.w	r1, r9, r1
 80064aa:	d120      	bne.n	80064ee <_dtoa_r+0xad6>
 80064ac:	2a00      	cmp	r2, #0
 80064ae:	ddec      	ble.n	800648a <_dtoa_r+0xa72>
 80064b0:	4659      	mov	r1, fp
 80064b2:	2201      	movs	r2, #1
 80064b4:	4620      	mov	r0, r4
 80064b6:	9301      	str	r3, [sp, #4]
 80064b8:	f000 fac6 	bl	8006a48 <__lshift>
 80064bc:	4631      	mov	r1, r6
 80064be:	4683      	mov	fp, r0
 80064c0:	f000 fb2e 	bl	8006b20 <__mcmp>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	9b01      	ldr	r3, [sp, #4]
 80064c8:	dc02      	bgt.n	80064d0 <_dtoa_r+0xab8>
 80064ca:	d1de      	bne.n	800648a <_dtoa_r+0xa72>
 80064cc:	07da      	lsls	r2, r3, #31
 80064ce:	d5dc      	bpl.n	800648a <_dtoa_r+0xa72>
 80064d0:	2b39      	cmp	r3, #57	; 0x39
 80064d2:	d1d8      	bne.n	8006486 <_dtoa_r+0xa6e>
 80064d4:	9a02      	ldr	r2, [sp, #8]
 80064d6:	2339      	movs	r3, #57	; 0x39
 80064d8:	7013      	strb	r3, [r2, #0]
 80064da:	462b      	mov	r3, r5
 80064dc:	461d      	mov	r5, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80064e4:	2a39      	cmp	r2, #57	; 0x39
 80064e6:	d050      	beq.n	800658a <_dtoa_r+0xb72>
 80064e8:	3201      	adds	r2, #1
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	e745      	b.n	800637a <_dtoa_r+0x962>
 80064ee:	2a00      	cmp	r2, #0
 80064f0:	dd03      	ble.n	80064fa <_dtoa_r+0xae2>
 80064f2:	2b39      	cmp	r3, #57	; 0x39
 80064f4:	d0ee      	beq.n	80064d4 <_dtoa_r+0xabc>
 80064f6:	3301      	adds	r3, #1
 80064f8:	e7c7      	b.n	800648a <_dtoa_r+0xa72>
 80064fa:	9a01      	ldr	r2, [sp, #4]
 80064fc:	9907      	ldr	r1, [sp, #28]
 80064fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006502:	428a      	cmp	r2, r1
 8006504:	d02a      	beq.n	800655c <_dtoa_r+0xb44>
 8006506:	4659      	mov	r1, fp
 8006508:	2300      	movs	r3, #0
 800650a:	220a      	movs	r2, #10
 800650c:	4620      	mov	r0, r4
 800650e:	f000 f8eb 	bl	80066e8 <__multadd>
 8006512:	45b8      	cmp	r8, r7
 8006514:	4683      	mov	fp, r0
 8006516:	f04f 0300 	mov.w	r3, #0
 800651a:	f04f 020a 	mov.w	r2, #10
 800651e:	4641      	mov	r1, r8
 8006520:	4620      	mov	r0, r4
 8006522:	d107      	bne.n	8006534 <_dtoa_r+0xb1c>
 8006524:	f000 f8e0 	bl	80066e8 <__multadd>
 8006528:	4680      	mov	r8, r0
 800652a:	4607      	mov	r7, r0
 800652c:	9b01      	ldr	r3, [sp, #4]
 800652e:	3301      	adds	r3, #1
 8006530:	9301      	str	r3, [sp, #4]
 8006532:	e775      	b.n	8006420 <_dtoa_r+0xa08>
 8006534:	f000 f8d8 	bl	80066e8 <__multadd>
 8006538:	4639      	mov	r1, r7
 800653a:	4680      	mov	r8, r0
 800653c:	2300      	movs	r3, #0
 800653e:	220a      	movs	r2, #10
 8006540:	4620      	mov	r0, r4
 8006542:	f000 f8d1 	bl	80066e8 <__multadd>
 8006546:	4607      	mov	r7, r0
 8006548:	e7f0      	b.n	800652c <_dtoa_r+0xb14>
 800654a:	f1b9 0f00 	cmp.w	r9, #0
 800654e:	9a00      	ldr	r2, [sp, #0]
 8006550:	bfcc      	ite	gt
 8006552:	464d      	movgt	r5, r9
 8006554:	2501      	movle	r5, #1
 8006556:	4415      	add	r5, r2
 8006558:	f04f 0800 	mov.w	r8, #0
 800655c:	4659      	mov	r1, fp
 800655e:	2201      	movs	r2, #1
 8006560:	4620      	mov	r0, r4
 8006562:	9301      	str	r3, [sp, #4]
 8006564:	f000 fa70 	bl	8006a48 <__lshift>
 8006568:	4631      	mov	r1, r6
 800656a:	4683      	mov	fp, r0
 800656c:	f000 fad8 	bl	8006b20 <__mcmp>
 8006570:	2800      	cmp	r0, #0
 8006572:	dcb2      	bgt.n	80064da <_dtoa_r+0xac2>
 8006574:	d102      	bne.n	800657c <_dtoa_r+0xb64>
 8006576:	9b01      	ldr	r3, [sp, #4]
 8006578:	07db      	lsls	r3, r3, #31
 800657a:	d4ae      	bmi.n	80064da <_dtoa_r+0xac2>
 800657c:	462b      	mov	r3, r5
 800657e:	461d      	mov	r5, r3
 8006580:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006584:	2a30      	cmp	r2, #48	; 0x30
 8006586:	d0fa      	beq.n	800657e <_dtoa_r+0xb66>
 8006588:	e6f7      	b.n	800637a <_dtoa_r+0x962>
 800658a:	9a00      	ldr	r2, [sp, #0]
 800658c:	429a      	cmp	r2, r3
 800658e:	d1a5      	bne.n	80064dc <_dtoa_r+0xac4>
 8006590:	f10a 0a01 	add.w	sl, sl, #1
 8006594:	2331      	movs	r3, #49	; 0x31
 8006596:	e779      	b.n	800648c <_dtoa_r+0xa74>
 8006598:	4b13      	ldr	r3, [pc, #76]	; (80065e8 <_dtoa_r+0xbd0>)
 800659a:	f7ff baaf 	b.w	8005afc <_dtoa_r+0xe4>
 800659e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f47f aa86 	bne.w	8005ab2 <_dtoa_r+0x9a>
 80065a6:	4b11      	ldr	r3, [pc, #68]	; (80065ec <_dtoa_r+0xbd4>)
 80065a8:	f7ff baa8 	b.w	8005afc <_dtoa_r+0xe4>
 80065ac:	f1b9 0f00 	cmp.w	r9, #0
 80065b0:	dc03      	bgt.n	80065ba <_dtoa_r+0xba2>
 80065b2:	9b05      	ldr	r3, [sp, #20]
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	f73f aec9 	bgt.w	800634c <_dtoa_r+0x934>
 80065ba:	9d00      	ldr	r5, [sp, #0]
 80065bc:	4631      	mov	r1, r6
 80065be:	4658      	mov	r0, fp
 80065c0:	f7ff f99e 	bl	8005900 <quorem>
 80065c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80065c8:	f805 3b01 	strb.w	r3, [r5], #1
 80065cc:	9a00      	ldr	r2, [sp, #0]
 80065ce:	1aaa      	subs	r2, r5, r2
 80065d0:	4591      	cmp	r9, r2
 80065d2:	ddba      	ble.n	800654a <_dtoa_r+0xb32>
 80065d4:	4659      	mov	r1, fp
 80065d6:	2300      	movs	r3, #0
 80065d8:	220a      	movs	r2, #10
 80065da:	4620      	mov	r0, r4
 80065dc:	f000 f884 	bl	80066e8 <__multadd>
 80065e0:	4683      	mov	fp, r0
 80065e2:	e7eb      	b.n	80065bc <_dtoa_r+0xba4>
 80065e4:	08007e33 	.word	0x08007e33
 80065e8:	08007d8c 	.word	0x08007d8c
 80065ec:	08007db0 	.word	0x08007db0

080065f0 <_localeconv_r>:
 80065f0:	4800      	ldr	r0, [pc, #0]	; (80065f4 <_localeconv_r+0x4>)
 80065f2:	4770      	bx	lr
 80065f4:	20000188 	.word	0x20000188

080065f8 <malloc>:
 80065f8:	4b02      	ldr	r3, [pc, #8]	; (8006604 <malloc+0xc>)
 80065fa:	4601      	mov	r1, r0
 80065fc:	6818      	ldr	r0, [r3, #0]
 80065fe:	f000 bbef 	b.w	8006de0 <_malloc_r>
 8006602:	bf00      	nop
 8006604:	20000034 	.word	0x20000034

08006608 <memcpy>:
 8006608:	440a      	add	r2, r1
 800660a:	4291      	cmp	r1, r2
 800660c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006610:	d100      	bne.n	8006614 <memcpy+0xc>
 8006612:	4770      	bx	lr
 8006614:	b510      	push	{r4, lr}
 8006616:	f811 4b01 	ldrb.w	r4, [r1], #1
 800661a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800661e:	4291      	cmp	r1, r2
 8006620:	d1f9      	bne.n	8006616 <memcpy+0xe>
 8006622:	bd10      	pop	{r4, pc}

08006624 <_Balloc>:
 8006624:	b570      	push	{r4, r5, r6, lr}
 8006626:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006628:	4604      	mov	r4, r0
 800662a:	460d      	mov	r5, r1
 800662c:	b976      	cbnz	r6, 800664c <_Balloc+0x28>
 800662e:	2010      	movs	r0, #16
 8006630:	f7ff ffe2 	bl	80065f8 <malloc>
 8006634:	4602      	mov	r2, r0
 8006636:	6260      	str	r0, [r4, #36]	; 0x24
 8006638:	b920      	cbnz	r0, 8006644 <_Balloc+0x20>
 800663a:	4b18      	ldr	r3, [pc, #96]	; (800669c <_Balloc+0x78>)
 800663c:	4818      	ldr	r0, [pc, #96]	; (80066a0 <_Balloc+0x7c>)
 800663e:	2166      	movs	r1, #102	; 0x66
 8006640:	f000 fd94 	bl	800716c <__assert_func>
 8006644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006648:	6006      	str	r6, [r0, #0]
 800664a:	60c6      	str	r6, [r0, #12]
 800664c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800664e:	68f3      	ldr	r3, [r6, #12]
 8006650:	b183      	cbz	r3, 8006674 <_Balloc+0x50>
 8006652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800665a:	b9b8      	cbnz	r0, 800668c <_Balloc+0x68>
 800665c:	2101      	movs	r1, #1
 800665e:	fa01 f605 	lsl.w	r6, r1, r5
 8006662:	1d72      	adds	r2, r6, #5
 8006664:	0092      	lsls	r2, r2, #2
 8006666:	4620      	mov	r0, r4
 8006668:	f000 fb5a 	bl	8006d20 <_calloc_r>
 800666c:	b160      	cbz	r0, 8006688 <_Balloc+0x64>
 800666e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006672:	e00e      	b.n	8006692 <_Balloc+0x6e>
 8006674:	2221      	movs	r2, #33	; 0x21
 8006676:	2104      	movs	r1, #4
 8006678:	4620      	mov	r0, r4
 800667a:	f000 fb51 	bl	8006d20 <_calloc_r>
 800667e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006680:	60f0      	str	r0, [r6, #12]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e4      	bne.n	8006652 <_Balloc+0x2e>
 8006688:	2000      	movs	r0, #0
 800668a:	bd70      	pop	{r4, r5, r6, pc}
 800668c:	6802      	ldr	r2, [r0, #0]
 800668e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006692:	2300      	movs	r3, #0
 8006694:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006698:	e7f7      	b.n	800668a <_Balloc+0x66>
 800669a:	bf00      	nop
 800669c:	08007dbd 	.word	0x08007dbd
 80066a0:	08007e44 	.word	0x08007e44

080066a4 <_Bfree>:
 80066a4:	b570      	push	{r4, r5, r6, lr}
 80066a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80066a8:	4605      	mov	r5, r0
 80066aa:	460c      	mov	r4, r1
 80066ac:	b976      	cbnz	r6, 80066cc <_Bfree+0x28>
 80066ae:	2010      	movs	r0, #16
 80066b0:	f7ff ffa2 	bl	80065f8 <malloc>
 80066b4:	4602      	mov	r2, r0
 80066b6:	6268      	str	r0, [r5, #36]	; 0x24
 80066b8:	b920      	cbnz	r0, 80066c4 <_Bfree+0x20>
 80066ba:	4b09      	ldr	r3, [pc, #36]	; (80066e0 <_Bfree+0x3c>)
 80066bc:	4809      	ldr	r0, [pc, #36]	; (80066e4 <_Bfree+0x40>)
 80066be:	218a      	movs	r1, #138	; 0x8a
 80066c0:	f000 fd54 	bl	800716c <__assert_func>
 80066c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066c8:	6006      	str	r6, [r0, #0]
 80066ca:	60c6      	str	r6, [r0, #12]
 80066cc:	b13c      	cbz	r4, 80066de <_Bfree+0x3a>
 80066ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80066d0:	6862      	ldr	r2, [r4, #4]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066d8:	6021      	str	r1, [r4, #0]
 80066da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80066de:	bd70      	pop	{r4, r5, r6, pc}
 80066e0:	08007dbd 	.word	0x08007dbd
 80066e4:	08007e44 	.word	0x08007e44

080066e8 <__multadd>:
 80066e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ec:	690e      	ldr	r6, [r1, #16]
 80066ee:	4607      	mov	r7, r0
 80066f0:	4698      	mov	r8, r3
 80066f2:	460c      	mov	r4, r1
 80066f4:	f101 0014 	add.w	r0, r1, #20
 80066f8:	2300      	movs	r3, #0
 80066fa:	6805      	ldr	r5, [r0, #0]
 80066fc:	b2a9      	uxth	r1, r5
 80066fe:	fb02 8101 	mla	r1, r2, r1, r8
 8006702:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006706:	0c2d      	lsrs	r5, r5, #16
 8006708:	fb02 c505 	mla	r5, r2, r5, ip
 800670c:	b289      	uxth	r1, r1
 800670e:	3301      	adds	r3, #1
 8006710:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006714:	429e      	cmp	r6, r3
 8006716:	f840 1b04 	str.w	r1, [r0], #4
 800671a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800671e:	dcec      	bgt.n	80066fa <__multadd+0x12>
 8006720:	f1b8 0f00 	cmp.w	r8, #0
 8006724:	d022      	beq.n	800676c <__multadd+0x84>
 8006726:	68a3      	ldr	r3, [r4, #8]
 8006728:	42b3      	cmp	r3, r6
 800672a:	dc19      	bgt.n	8006760 <__multadd+0x78>
 800672c:	6861      	ldr	r1, [r4, #4]
 800672e:	4638      	mov	r0, r7
 8006730:	3101      	adds	r1, #1
 8006732:	f7ff ff77 	bl	8006624 <_Balloc>
 8006736:	4605      	mov	r5, r0
 8006738:	b928      	cbnz	r0, 8006746 <__multadd+0x5e>
 800673a:	4602      	mov	r2, r0
 800673c:	4b0d      	ldr	r3, [pc, #52]	; (8006774 <__multadd+0x8c>)
 800673e:	480e      	ldr	r0, [pc, #56]	; (8006778 <__multadd+0x90>)
 8006740:	21b5      	movs	r1, #181	; 0xb5
 8006742:	f000 fd13 	bl	800716c <__assert_func>
 8006746:	6922      	ldr	r2, [r4, #16]
 8006748:	3202      	adds	r2, #2
 800674a:	f104 010c 	add.w	r1, r4, #12
 800674e:	0092      	lsls	r2, r2, #2
 8006750:	300c      	adds	r0, #12
 8006752:	f7ff ff59 	bl	8006608 <memcpy>
 8006756:	4621      	mov	r1, r4
 8006758:	4638      	mov	r0, r7
 800675a:	f7ff ffa3 	bl	80066a4 <_Bfree>
 800675e:	462c      	mov	r4, r5
 8006760:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006764:	3601      	adds	r6, #1
 8006766:	f8c3 8014 	str.w	r8, [r3, #20]
 800676a:	6126      	str	r6, [r4, #16]
 800676c:	4620      	mov	r0, r4
 800676e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006772:	bf00      	nop
 8006774:	08007e33 	.word	0x08007e33
 8006778:	08007e44 	.word	0x08007e44

0800677c <__hi0bits>:
 800677c:	0c03      	lsrs	r3, r0, #16
 800677e:	041b      	lsls	r3, r3, #16
 8006780:	b9d3      	cbnz	r3, 80067b8 <__hi0bits+0x3c>
 8006782:	0400      	lsls	r0, r0, #16
 8006784:	2310      	movs	r3, #16
 8006786:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800678a:	bf04      	itt	eq
 800678c:	0200      	lsleq	r0, r0, #8
 800678e:	3308      	addeq	r3, #8
 8006790:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006794:	bf04      	itt	eq
 8006796:	0100      	lsleq	r0, r0, #4
 8006798:	3304      	addeq	r3, #4
 800679a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800679e:	bf04      	itt	eq
 80067a0:	0080      	lsleq	r0, r0, #2
 80067a2:	3302      	addeq	r3, #2
 80067a4:	2800      	cmp	r0, #0
 80067a6:	db05      	blt.n	80067b4 <__hi0bits+0x38>
 80067a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80067ac:	f103 0301 	add.w	r3, r3, #1
 80067b0:	bf08      	it	eq
 80067b2:	2320      	moveq	r3, #32
 80067b4:	4618      	mov	r0, r3
 80067b6:	4770      	bx	lr
 80067b8:	2300      	movs	r3, #0
 80067ba:	e7e4      	b.n	8006786 <__hi0bits+0xa>

080067bc <__lo0bits>:
 80067bc:	6803      	ldr	r3, [r0, #0]
 80067be:	f013 0207 	ands.w	r2, r3, #7
 80067c2:	4601      	mov	r1, r0
 80067c4:	d00b      	beq.n	80067de <__lo0bits+0x22>
 80067c6:	07da      	lsls	r2, r3, #31
 80067c8:	d424      	bmi.n	8006814 <__lo0bits+0x58>
 80067ca:	0798      	lsls	r0, r3, #30
 80067cc:	bf49      	itett	mi
 80067ce:	085b      	lsrmi	r3, r3, #1
 80067d0:	089b      	lsrpl	r3, r3, #2
 80067d2:	2001      	movmi	r0, #1
 80067d4:	600b      	strmi	r3, [r1, #0]
 80067d6:	bf5c      	itt	pl
 80067d8:	600b      	strpl	r3, [r1, #0]
 80067da:	2002      	movpl	r0, #2
 80067dc:	4770      	bx	lr
 80067de:	b298      	uxth	r0, r3
 80067e0:	b9b0      	cbnz	r0, 8006810 <__lo0bits+0x54>
 80067e2:	0c1b      	lsrs	r3, r3, #16
 80067e4:	2010      	movs	r0, #16
 80067e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80067ea:	bf04      	itt	eq
 80067ec:	0a1b      	lsreq	r3, r3, #8
 80067ee:	3008      	addeq	r0, #8
 80067f0:	071a      	lsls	r2, r3, #28
 80067f2:	bf04      	itt	eq
 80067f4:	091b      	lsreq	r3, r3, #4
 80067f6:	3004      	addeq	r0, #4
 80067f8:	079a      	lsls	r2, r3, #30
 80067fa:	bf04      	itt	eq
 80067fc:	089b      	lsreq	r3, r3, #2
 80067fe:	3002      	addeq	r0, #2
 8006800:	07da      	lsls	r2, r3, #31
 8006802:	d403      	bmi.n	800680c <__lo0bits+0x50>
 8006804:	085b      	lsrs	r3, r3, #1
 8006806:	f100 0001 	add.w	r0, r0, #1
 800680a:	d005      	beq.n	8006818 <__lo0bits+0x5c>
 800680c:	600b      	str	r3, [r1, #0]
 800680e:	4770      	bx	lr
 8006810:	4610      	mov	r0, r2
 8006812:	e7e8      	b.n	80067e6 <__lo0bits+0x2a>
 8006814:	2000      	movs	r0, #0
 8006816:	4770      	bx	lr
 8006818:	2020      	movs	r0, #32
 800681a:	4770      	bx	lr

0800681c <__i2b>:
 800681c:	b510      	push	{r4, lr}
 800681e:	460c      	mov	r4, r1
 8006820:	2101      	movs	r1, #1
 8006822:	f7ff feff 	bl	8006624 <_Balloc>
 8006826:	4602      	mov	r2, r0
 8006828:	b928      	cbnz	r0, 8006836 <__i2b+0x1a>
 800682a:	4b05      	ldr	r3, [pc, #20]	; (8006840 <__i2b+0x24>)
 800682c:	4805      	ldr	r0, [pc, #20]	; (8006844 <__i2b+0x28>)
 800682e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006832:	f000 fc9b 	bl	800716c <__assert_func>
 8006836:	2301      	movs	r3, #1
 8006838:	6144      	str	r4, [r0, #20]
 800683a:	6103      	str	r3, [r0, #16]
 800683c:	bd10      	pop	{r4, pc}
 800683e:	bf00      	nop
 8006840:	08007e33 	.word	0x08007e33
 8006844:	08007e44 	.word	0x08007e44

08006848 <__multiply>:
 8006848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684c:	4614      	mov	r4, r2
 800684e:	690a      	ldr	r2, [r1, #16]
 8006850:	6923      	ldr	r3, [r4, #16]
 8006852:	429a      	cmp	r2, r3
 8006854:	bfb8      	it	lt
 8006856:	460b      	movlt	r3, r1
 8006858:	460d      	mov	r5, r1
 800685a:	bfbc      	itt	lt
 800685c:	4625      	movlt	r5, r4
 800685e:	461c      	movlt	r4, r3
 8006860:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006864:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006868:	68ab      	ldr	r3, [r5, #8]
 800686a:	6869      	ldr	r1, [r5, #4]
 800686c:	eb0a 0709 	add.w	r7, sl, r9
 8006870:	42bb      	cmp	r3, r7
 8006872:	b085      	sub	sp, #20
 8006874:	bfb8      	it	lt
 8006876:	3101      	addlt	r1, #1
 8006878:	f7ff fed4 	bl	8006624 <_Balloc>
 800687c:	b930      	cbnz	r0, 800688c <__multiply+0x44>
 800687e:	4602      	mov	r2, r0
 8006880:	4b42      	ldr	r3, [pc, #264]	; (800698c <__multiply+0x144>)
 8006882:	4843      	ldr	r0, [pc, #268]	; (8006990 <__multiply+0x148>)
 8006884:	f240 115d 	movw	r1, #349	; 0x15d
 8006888:	f000 fc70 	bl	800716c <__assert_func>
 800688c:	f100 0614 	add.w	r6, r0, #20
 8006890:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006894:	4633      	mov	r3, r6
 8006896:	2200      	movs	r2, #0
 8006898:	4543      	cmp	r3, r8
 800689a:	d31e      	bcc.n	80068da <__multiply+0x92>
 800689c:	f105 0c14 	add.w	ip, r5, #20
 80068a0:	f104 0314 	add.w	r3, r4, #20
 80068a4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80068a8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80068ac:	9202      	str	r2, [sp, #8]
 80068ae:	ebac 0205 	sub.w	r2, ip, r5
 80068b2:	3a15      	subs	r2, #21
 80068b4:	f022 0203 	bic.w	r2, r2, #3
 80068b8:	3204      	adds	r2, #4
 80068ba:	f105 0115 	add.w	r1, r5, #21
 80068be:	458c      	cmp	ip, r1
 80068c0:	bf38      	it	cc
 80068c2:	2204      	movcc	r2, #4
 80068c4:	9201      	str	r2, [sp, #4]
 80068c6:	9a02      	ldr	r2, [sp, #8]
 80068c8:	9303      	str	r3, [sp, #12]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d808      	bhi.n	80068e0 <__multiply+0x98>
 80068ce:	2f00      	cmp	r7, #0
 80068d0:	dc55      	bgt.n	800697e <__multiply+0x136>
 80068d2:	6107      	str	r7, [r0, #16]
 80068d4:	b005      	add	sp, #20
 80068d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068da:	f843 2b04 	str.w	r2, [r3], #4
 80068de:	e7db      	b.n	8006898 <__multiply+0x50>
 80068e0:	f8b3 a000 	ldrh.w	sl, [r3]
 80068e4:	f1ba 0f00 	cmp.w	sl, #0
 80068e8:	d020      	beq.n	800692c <__multiply+0xe4>
 80068ea:	f105 0e14 	add.w	lr, r5, #20
 80068ee:	46b1      	mov	r9, r6
 80068f0:	2200      	movs	r2, #0
 80068f2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80068f6:	f8d9 b000 	ldr.w	fp, [r9]
 80068fa:	b2a1      	uxth	r1, r4
 80068fc:	fa1f fb8b 	uxth.w	fp, fp
 8006900:	fb0a b101 	mla	r1, sl, r1, fp
 8006904:	4411      	add	r1, r2
 8006906:	f8d9 2000 	ldr.w	r2, [r9]
 800690a:	0c24      	lsrs	r4, r4, #16
 800690c:	0c12      	lsrs	r2, r2, #16
 800690e:	fb0a 2404 	mla	r4, sl, r4, r2
 8006912:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006916:	b289      	uxth	r1, r1
 8006918:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800691c:	45f4      	cmp	ip, lr
 800691e:	f849 1b04 	str.w	r1, [r9], #4
 8006922:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006926:	d8e4      	bhi.n	80068f2 <__multiply+0xaa>
 8006928:	9901      	ldr	r1, [sp, #4]
 800692a:	5072      	str	r2, [r6, r1]
 800692c:	9a03      	ldr	r2, [sp, #12]
 800692e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006932:	3304      	adds	r3, #4
 8006934:	f1b9 0f00 	cmp.w	r9, #0
 8006938:	d01f      	beq.n	800697a <__multiply+0x132>
 800693a:	6834      	ldr	r4, [r6, #0]
 800693c:	f105 0114 	add.w	r1, r5, #20
 8006940:	46b6      	mov	lr, r6
 8006942:	f04f 0a00 	mov.w	sl, #0
 8006946:	880a      	ldrh	r2, [r1, #0]
 8006948:	f8be b002 	ldrh.w	fp, [lr, #2]
 800694c:	fb09 b202 	mla	r2, r9, r2, fp
 8006950:	4492      	add	sl, r2
 8006952:	b2a4      	uxth	r4, r4
 8006954:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006958:	f84e 4b04 	str.w	r4, [lr], #4
 800695c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006960:	f8be 2000 	ldrh.w	r2, [lr]
 8006964:	0c24      	lsrs	r4, r4, #16
 8006966:	fb09 2404 	mla	r4, r9, r4, r2
 800696a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800696e:	458c      	cmp	ip, r1
 8006970:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006974:	d8e7      	bhi.n	8006946 <__multiply+0xfe>
 8006976:	9a01      	ldr	r2, [sp, #4]
 8006978:	50b4      	str	r4, [r6, r2]
 800697a:	3604      	adds	r6, #4
 800697c:	e7a3      	b.n	80068c6 <__multiply+0x7e>
 800697e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1a5      	bne.n	80068d2 <__multiply+0x8a>
 8006986:	3f01      	subs	r7, #1
 8006988:	e7a1      	b.n	80068ce <__multiply+0x86>
 800698a:	bf00      	nop
 800698c:	08007e33 	.word	0x08007e33
 8006990:	08007e44 	.word	0x08007e44

08006994 <__pow5mult>:
 8006994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006998:	4615      	mov	r5, r2
 800699a:	f012 0203 	ands.w	r2, r2, #3
 800699e:	4606      	mov	r6, r0
 80069a0:	460f      	mov	r7, r1
 80069a2:	d007      	beq.n	80069b4 <__pow5mult+0x20>
 80069a4:	4c25      	ldr	r4, [pc, #148]	; (8006a3c <__pow5mult+0xa8>)
 80069a6:	3a01      	subs	r2, #1
 80069a8:	2300      	movs	r3, #0
 80069aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80069ae:	f7ff fe9b 	bl	80066e8 <__multadd>
 80069b2:	4607      	mov	r7, r0
 80069b4:	10ad      	asrs	r5, r5, #2
 80069b6:	d03d      	beq.n	8006a34 <__pow5mult+0xa0>
 80069b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80069ba:	b97c      	cbnz	r4, 80069dc <__pow5mult+0x48>
 80069bc:	2010      	movs	r0, #16
 80069be:	f7ff fe1b 	bl	80065f8 <malloc>
 80069c2:	4602      	mov	r2, r0
 80069c4:	6270      	str	r0, [r6, #36]	; 0x24
 80069c6:	b928      	cbnz	r0, 80069d4 <__pow5mult+0x40>
 80069c8:	4b1d      	ldr	r3, [pc, #116]	; (8006a40 <__pow5mult+0xac>)
 80069ca:	481e      	ldr	r0, [pc, #120]	; (8006a44 <__pow5mult+0xb0>)
 80069cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80069d0:	f000 fbcc 	bl	800716c <__assert_func>
 80069d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069d8:	6004      	str	r4, [r0, #0]
 80069da:	60c4      	str	r4, [r0, #12]
 80069dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80069e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069e4:	b94c      	cbnz	r4, 80069fa <__pow5mult+0x66>
 80069e6:	f240 2171 	movw	r1, #625	; 0x271
 80069ea:	4630      	mov	r0, r6
 80069ec:	f7ff ff16 	bl	800681c <__i2b>
 80069f0:	2300      	movs	r3, #0
 80069f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80069f6:	4604      	mov	r4, r0
 80069f8:	6003      	str	r3, [r0, #0]
 80069fa:	f04f 0900 	mov.w	r9, #0
 80069fe:	07eb      	lsls	r3, r5, #31
 8006a00:	d50a      	bpl.n	8006a18 <__pow5mult+0x84>
 8006a02:	4639      	mov	r1, r7
 8006a04:	4622      	mov	r2, r4
 8006a06:	4630      	mov	r0, r6
 8006a08:	f7ff ff1e 	bl	8006848 <__multiply>
 8006a0c:	4639      	mov	r1, r7
 8006a0e:	4680      	mov	r8, r0
 8006a10:	4630      	mov	r0, r6
 8006a12:	f7ff fe47 	bl	80066a4 <_Bfree>
 8006a16:	4647      	mov	r7, r8
 8006a18:	106d      	asrs	r5, r5, #1
 8006a1a:	d00b      	beq.n	8006a34 <__pow5mult+0xa0>
 8006a1c:	6820      	ldr	r0, [r4, #0]
 8006a1e:	b938      	cbnz	r0, 8006a30 <__pow5mult+0x9c>
 8006a20:	4622      	mov	r2, r4
 8006a22:	4621      	mov	r1, r4
 8006a24:	4630      	mov	r0, r6
 8006a26:	f7ff ff0f 	bl	8006848 <__multiply>
 8006a2a:	6020      	str	r0, [r4, #0]
 8006a2c:	f8c0 9000 	str.w	r9, [r0]
 8006a30:	4604      	mov	r4, r0
 8006a32:	e7e4      	b.n	80069fe <__pow5mult+0x6a>
 8006a34:	4638      	mov	r0, r7
 8006a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a3a:	bf00      	nop
 8006a3c:	08007f98 	.word	0x08007f98
 8006a40:	08007dbd 	.word	0x08007dbd
 8006a44:	08007e44 	.word	0x08007e44

08006a48 <__lshift>:
 8006a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a4c:	460c      	mov	r4, r1
 8006a4e:	6849      	ldr	r1, [r1, #4]
 8006a50:	6923      	ldr	r3, [r4, #16]
 8006a52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a56:	68a3      	ldr	r3, [r4, #8]
 8006a58:	4607      	mov	r7, r0
 8006a5a:	4691      	mov	r9, r2
 8006a5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a60:	f108 0601 	add.w	r6, r8, #1
 8006a64:	42b3      	cmp	r3, r6
 8006a66:	db0b      	blt.n	8006a80 <__lshift+0x38>
 8006a68:	4638      	mov	r0, r7
 8006a6a:	f7ff fddb 	bl	8006624 <_Balloc>
 8006a6e:	4605      	mov	r5, r0
 8006a70:	b948      	cbnz	r0, 8006a86 <__lshift+0x3e>
 8006a72:	4602      	mov	r2, r0
 8006a74:	4b28      	ldr	r3, [pc, #160]	; (8006b18 <__lshift+0xd0>)
 8006a76:	4829      	ldr	r0, [pc, #164]	; (8006b1c <__lshift+0xd4>)
 8006a78:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006a7c:	f000 fb76 	bl	800716c <__assert_func>
 8006a80:	3101      	adds	r1, #1
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	e7ee      	b.n	8006a64 <__lshift+0x1c>
 8006a86:	2300      	movs	r3, #0
 8006a88:	f100 0114 	add.w	r1, r0, #20
 8006a8c:	f100 0210 	add.w	r2, r0, #16
 8006a90:	4618      	mov	r0, r3
 8006a92:	4553      	cmp	r3, sl
 8006a94:	db33      	blt.n	8006afe <__lshift+0xb6>
 8006a96:	6920      	ldr	r0, [r4, #16]
 8006a98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a9c:	f104 0314 	add.w	r3, r4, #20
 8006aa0:	f019 091f 	ands.w	r9, r9, #31
 8006aa4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006aa8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006aac:	d02b      	beq.n	8006b06 <__lshift+0xbe>
 8006aae:	f1c9 0e20 	rsb	lr, r9, #32
 8006ab2:	468a      	mov	sl, r1
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	6818      	ldr	r0, [r3, #0]
 8006ab8:	fa00 f009 	lsl.w	r0, r0, r9
 8006abc:	4302      	orrs	r2, r0
 8006abe:	f84a 2b04 	str.w	r2, [sl], #4
 8006ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ac6:	459c      	cmp	ip, r3
 8006ac8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006acc:	d8f3      	bhi.n	8006ab6 <__lshift+0x6e>
 8006ace:	ebac 0304 	sub.w	r3, ip, r4
 8006ad2:	3b15      	subs	r3, #21
 8006ad4:	f023 0303 	bic.w	r3, r3, #3
 8006ad8:	3304      	adds	r3, #4
 8006ada:	f104 0015 	add.w	r0, r4, #21
 8006ade:	4584      	cmp	ip, r0
 8006ae0:	bf38      	it	cc
 8006ae2:	2304      	movcc	r3, #4
 8006ae4:	50ca      	str	r2, [r1, r3]
 8006ae6:	b10a      	cbz	r2, 8006aec <__lshift+0xa4>
 8006ae8:	f108 0602 	add.w	r6, r8, #2
 8006aec:	3e01      	subs	r6, #1
 8006aee:	4638      	mov	r0, r7
 8006af0:	612e      	str	r6, [r5, #16]
 8006af2:	4621      	mov	r1, r4
 8006af4:	f7ff fdd6 	bl	80066a4 <_Bfree>
 8006af8:	4628      	mov	r0, r5
 8006afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b02:	3301      	adds	r3, #1
 8006b04:	e7c5      	b.n	8006a92 <__lshift+0x4a>
 8006b06:	3904      	subs	r1, #4
 8006b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b10:	459c      	cmp	ip, r3
 8006b12:	d8f9      	bhi.n	8006b08 <__lshift+0xc0>
 8006b14:	e7ea      	b.n	8006aec <__lshift+0xa4>
 8006b16:	bf00      	nop
 8006b18:	08007e33 	.word	0x08007e33
 8006b1c:	08007e44 	.word	0x08007e44

08006b20 <__mcmp>:
 8006b20:	b530      	push	{r4, r5, lr}
 8006b22:	6902      	ldr	r2, [r0, #16]
 8006b24:	690c      	ldr	r4, [r1, #16]
 8006b26:	1b12      	subs	r2, r2, r4
 8006b28:	d10e      	bne.n	8006b48 <__mcmp+0x28>
 8006b2a:	f100 0314 	add.w	r3, r0, #20
 8006b2e:	3114      	adds	r1, #20
 8006b30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006b34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006b38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006b3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006b40:	42a5      	cmp	r5, r4
 8006b42:	d003      	beq.n	8006b4c <__mcmp+0x2c>
 8006b44:	d305      	bcc.n	8006b52 <__mcmp+0x32>
 8006b46:	2201      	movs	r2, #1
 8006b48:	4610      	mov	r0, r2
 8006b4a:	bd30      	pop	{r4, r5, pc}
 8006b4c:	4283      	cmp	r3, r0
 8006b4e:	d3f3      	bcc.n	8006b38 <__mcmp+0x18>
 8006b50:	e7fa      	b.n	8006b48 <__mcmp+0x28>
 8006b52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b56:	e7f7      	b.n	8006b48 <__mcmp+0x28>

08006b58 <__mdiff>:
 8006b58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b5c:	460c      	mov	r4, r1
 8006b5e:	4606      	mov	r6, r0
 8006b60:	4611      	mov	r1, r2
 8006b62:	4620      	mov	r0, r4
 8006b64:	4617      	mov	r7, r2
 8006b66:	f7ff ffdb 	bl	8006b20 <__mcmp>
 8006b6a:	1e05      	subs	r5, r0, #0
 8006b6c:	d110      	bne.n	8006b90 <__mdiff+0x38>
 8006b6e:	4629      	mov	r1, r5
 8006b70:	4630      	mov	r0, r6
 8006b72:	f7ff fd57 	bl	8006624 <_Balloc>
 8006b76:	b930      	cbnz	r0, 8006b86 <__mdiff+0x2e>
 8006b78:	4b39      	ldr	r3, [pc, #228]	; (8006c60 <__mdiff+0x108>)
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	f240 2132 	movw	r1, #562	; 0x232
 8006b80:	4838      	ldr	r0, [pc, #224]	; (8006c64 <__mdiff+0x10c>)
 8006b82:	f000 faf3 	bl	800716c <__assert_func>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006b8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b90:	bfa4      	itt	ge
 8006b92:	463b      	movge	r3, r7
 8006b94:	4627      	movge	r7, r4
 8006b96:	4630      	mov	r0, r6
 8006b98:	6879      	ldr	r1, [r7, #4]
 8006b9a:	bfa6      	itte	ge
 8006b9c:	461c      	movge	r4, r3
 8006b9e:	2500      	movge	r5, #0
 8006ba0:	2501      	movlt	r5, #1
 8006ba2:	f7ff fd3f 	bl	8006624 <_Balloc>
 8006ba6:	b920      	cbnz	r0, 8006bb2 <__mdiff+0x5a>
 8006ba8:	4b2d      	ldr	r3, [pc, #180]	; (8006c60 <__mdiff+0x108>)
 8006baa:	4602      	mov	r2, r0
 8006bac:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006bb0:	e7e6      	b.n	8006b80 <__mdiff+0x28>
 8006bb2:	693e      	ldr	r6, [r7, #16]
 8006bb4:	60c5      	str	r5, [r0, #12]
 8006bb6:	6925      	ldr	r5, [r4, #16]
 8006bb8:	f107 0114 	add.w	r1, r7, #20
 8006bbc:	f104 0914 	add.w	r9, r4, #20
 8006bc0:	f100 0e14 	add.w	lr, r0, #20
 8006bc4:	f107 0210 	add.w	r2, r7, #16
 8006bc8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006bcc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006bd0:	46f2      	mov	sl, lr
 8006bd2:	2700      	movs	r7, #0
 8006bd4:	f859 3b04 	ldr.w	r3, [r9], #4
 8006bd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006bdc:	fa1f f883 	uxth.w	r8, r3
 8006be0:	fa17 f78b 	uxtah	r7, r7, fp
 8006be4:	0c1b      	lsrs	r3, r3, #16
 8006be6:	eba7 0808 	sub.w	r8, r7, r8
 8006bea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006bee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006bf2:	fa1f f888 	uxth.w	r8, r8
 8006bf6:	141f      	asrs	r7, r3, #16
 8006bf8:	454d      	cmp	r5, r9
 8006bfa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006bfe:	f84a 3b04 	str.w	r3, [sl], #4
 8006c02:	d8e7      	bhi.n	8006bd4 <__mdiff+0x7c>
 8006c04:	1b2b      	subs	r3, r5, r4
 8006c06:	3b15      	subs	r3, #21
 8006c08:	f023 0303 	bic.w	r3, r3, #3
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	3415      	adds	r4, #21
 8006c10:	42a5      	cmp	r5, r4
 8006c12:	bf38      	it	cc
 8006c14:	2304      	movcc	r3, #4
 8006c16:	4419      	add	r1, r3
 8006c18:	4473      	add	r3, lr
 8006c1a:	469e      	mov	lr, r3
 8006c1c:	460d      	mov	r5, r1
 8006c1e:	4565      	cmp	r5, ip
 8006c20:	d30e      	bcc.n	8006c40 <__mdiff+0xe8>
 8006c22:	f10c 0203 	add.w	r2, ip, #3
 8006c26:	1a52      	subs	r2, r2, r1
 8006c28:	f022 0203 	bic.w	r2, r2, #3
 8006c2c:	3903      	subs	r1, #3
 8006c2e:	458c      	cmp	ip, r1
 8006c30:	bf38      	it	cc
 8006c32:	2200      	movcc	r2, #0
 8006c34:	441a      	add	r2, r3
 8006c36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006c3a:	b17b      	cbz	r3, 8006c5c <__mdiff+0x104>
 8006c3c:	6106      	str	r6, [r0, #16]
 8006c3e:	e7a5      	b.n	8006b8c <__mdiff+0x34>
 8006c40:	f855 8b04 	ldr.w	r8, [r5], #4
 8006c44:	fa17 f488 	uxtah	r4, r7, r8
 8006c48:	1422      	asrs	r2, r4, #16
 8006c4a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006c4e:	b2a4      	uxth	r4, r4
 8006c50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006c54:	f84e 4b04 	str.w	r4, [lr], #4
 8006c58:	1417      	asrs	r7, r2, #16
 8006c5a:	e7e0      	b.n	8006c1e <__mdiff+0xc6>
 8006c5c:	3e01      	subs	r6, #1
 8006c5e:	e7ea      	b.n	8006c36 <__mdiff+0xde>
 8006c60:	08007e33 	.word	0x08007e33
 8006c64:	08007e44 	.word	0x08007e44

08006c68 <__d2b>:
 8006c68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c6c:	4689      	mov	r9, r1
 8006c6e:	2101      	movs	r1, #1
 8006c70:	ec57 6b10 	vmov	r6, r7, d0
 8006c74:	4690      	mov	r8, r2
 8006c76:	f7ff fcd5 	bl	8006624 <_Balloc>
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	b930      	cbnz	r0, 8006c8c <__d2b+0x24>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	4b25      	ldr	r3, [pc, #148]	; (8006d18 <__d2b+0xb0>)
 8006c82:	4826      	ldr	r0, [pc, #152]	; (8006d1c <__d2b+0xb4>)
 8006c84:	f240 310a 	movw	r1, #778	; 0x30a
 8006c88:	f000 fa70 	bl	800716c <__assert_func>
 8006c8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006c90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006c94:	bb35      	cbnz	r5, 8006ce4 <__d2b+0x7c>
 8006c96:	2e00      	cmp	r6, #0
 8006c98:	9301      	str	r3, [sp, #4]
 8006c9a:	d028      	beq.n	8006cee <__d2b+0x86>
 8006c9c:	4668      	mov	r0, sp
 8006c9e:	9600      	str	r6, [sp, #0]
 8006ca0:	f7ff fd8c 	bl	80067bc <__lo0bits>
 8006ca4:	9900      	ldr	r1, [sp, #0]
 8006ca6:	b300      	cbz	r0, 8006cea <__d2b+0x82>
 8006ca8:	9a01      	ldr	r2, [sp, #4]
 8006caa:	f1c0 0320 	rsb	r3, r0, #32
 8006cae:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb2:	430b      	orrs	r3, r1
 8006cb4:	40c2      	lsrs	r2, r0
 8006cb6:	6163      	str	r3, [r4, #20]
 8006cb8:	9201      	str	r2, [sp, #4]
 8006cba:	9b01      	ldr	r3, [sp, #4]
 8006cbc:	61a3      	str	r3, [r4, #24]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	bf14      	ite	ne
 8006cc2:	2202      	movne	r2, #2
 8006cc4:	2201      	moveq	r2, #1
 8006cc6:	6122      	str	r2, [r4, #16]
 8006cc8:	b1d5      	cbz	r5, 8006d00 <__d2b+0x98>
 8006cca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006cce:	4405      	add	r5, r0
 8006cd0:	f8c9 5000 	str.w	r5, [r9]
 8006cd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006cd8:	f8c8 0000 	str.w	r0, [r8]
 8006cdc:	4620      	mov	r0, r4
 8006cde:	b003      	add	sp, #12
 8006ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ce4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ce8:	e7d5      	b.n	8006c96 <__d2b+0x2e>
 8006cea:	6161      	str	r1, [r4, #20]
 8006cec:	e7e5      	b.n	8006cba <__d2b+0x52>
 8006cee:	a801      	add	r0, sp, #4
 8006cf0:	f7ff fd64 	bl	80067bc <__lo0bits>
 8006cf4:	9b01      	ldr	r3, [sp, #4]
 8006cf6:	6163      	str	r3, [r4, #20]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	6122      	str	r2, [r4, #16]
 8006cfc:	3020      	adds	r0, #32
 8006cfe:	e7e3      	b.n	8006cc8 <__d2b+0x60>
 8006d00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006d04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d08:	f8c9 0000 	str.w	r0, [r9]
 8006d0c:	6918      	ldr	r0, [r3, #16]
 8006d0e:	f7ff fd35 	bl	800677c <__hi0bits>
 8006d12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006d16:	e7df      	b.n	8006cd8 <__d2b+0x70>
 8006d18:	08007e33 	.word	0x08007e33
 8006d1c:	08007e44 	.word	0x08007e44

08006d20 <_calloc_r>:
 8006d20:	b513      	push	{r0, r1, r4, lr}
 8006d22:	434a      	muls	r2, r1
 8006d24:	4611      	mov	r1, r2
 8006d26:	9201      	str	r2, [sp, #4]
 8006d28:	f000 f85a 	bl	8006de0 <_malloc_r>
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	b118      	cbz	r0, 8006d38 <_calloc_r+0x18>
 8006d30:	9a01      	ldr	r2, [sp, #4]
 8006d32:	2100      	movs	r1, #0
 8006d34:	f7fe f93e 	bl	8004fb4 <memset>
 8006d38:	4620      	mov	r0, r4
 8006d3a:	b002      	add	sp, #8
 8006d3c:	bd10      	pop	{r4, pc}
	...

08006d40 <_free_r>:
 8006d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d42:	2900      	cmp	r1, #0
 8006d44:	d048      	beq.n	8006dd8 <_free_r+0x98>
 8006d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d4a:	9001      	str	r0, [sp, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8006d52:	bfb8      	it	lt
 8006d54:	18e4      	addlt	r4, r4, r3
 8006d56:	f000 fa65 	bl	8007224 <__malloc_lock>
 8006d5a:	4a20      	ldr	r2, [pc, #128]	; (8006ddc <_free_r+0x9c>)
 8006d5c:	9801      	ldr	r0, [sp, #4]
 8006d5e:	6813      	ldr	r3, [r2, #0]
 8006d60:	4615      	mov	r5, r2
 8006d62:	b933      	cbnz	r3, 8006d72 <_free_r+0x32>
 8006d64:	6063      	str	r3, [r4, #4]
 8006d66:	6014      	str	r4, [r2, #0]
 8006d68:	b003      	add	sp, #12
 8006d6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d6e:	f000 ba5f 	b.w	8007230 <__malloc_unlock>
 8006d72:	42a3      	cmp	r3, r4
 8006d74:	d90b      	bls.n	8006d8e <_free_r+0x4e>
 8006d76:	6821      	ldr	r1, [r4, #0]
 8006d78:	1862      	adds	r2, r4, r1
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	bf04      	itt	eq
 8006d7e:	681a      	ldreq	r2, [r3, #0]
 8006d80:	685b      	ldreq	r3, [r3, #4]
 8006d82:	6063      	str	r3, [r4, #4]
 8006d84:	bf04      	itt	eq
 8006d86:	1852      	addeq	r2, r2, r1
 8006d88:	6022      	streq	r2, [r4, #0]
 8006d8a:	602c      	str	r4, [r5, #0]
 8006d8c:	e7ec      	b.n	8006d68 <_free_r+0x28>
 8006d8e:	461a      	mov	r2, r3
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	b10b      	cbz	r3, 8006d98 <_free_r+0x58>
 8006d94:	42a3      	cmp	r3, r4
 8006d96:	d9fa      	bls.n	8006d8e <_free_r+0x4e>
 8006d98:	6811      	ldr	r1, [r2, #0]
 8006d9a:	1855      	adds	r5, r2, r1
 8006d9c:	42a5      	cmp	r5, r4
 8006d9e:	d10b      	bne.n	8006db8 <_free_r+0x78>
 8006da0:	6824      	ldr	r4, [r4, #0]
 8006da2:	4421      	add	r1, r4
 8006da4:	1854      	adds	r4, r2, r1
 8006da6:	42a3      	cmp	r3, r4
 8006da8:	6011      	str	r1, [r2, #0]
 8006daa:	d1dd      	bne.n	8006d68 <_free_r+0x28>
 8006dac:	681c      	ldr	r4, [r3, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	6053      	str	r3, [r2, #4]
 8006db2:	4421      	add	r1, r4
 8006db4:	6011      	str	r1, [r2, #0]
 8006db6:	e7d7      	b.n	8006d68 <_free_r+0x28>
 8006db8:	d902      	bls.n	8006dc0 <_free_r+0x80>
 8006dba:	230c      	movs	r3, #12
 8006dbc:	6003      	str	r3, [r0, #0]
 8006dbe:	e7d3      	b.n	8006d68 <_free_r+0x28>
 8006dc0:	6825      	ldr	r5, [r4, #0]
 8006dc2:	1961      	adds	r1, r4, r5
 8006dc4:	428b      	cmp	r3, r1
 8006dc6:	bf04      	itt	eq
 8006dc8:	6819      	ldreq	r1, [r3, #0]
 8006dca:	685b      	ldreq	r3, [r3, #4]
 8006dcc:	6063      	str	r3, [r4, #4]
 8006dce:	bf04      	itt	eq
 8006dd0:	1949      	addeq	r1, r1, r5
 8006dd2:	6021      	streq	r1, [r4, #0]
 8006dd4:	6054      	str	r4, [r2, #4]
 8006dd6:	e7c7      	b.n	8006d68 <_free_r+0x28>
 8006dd8:	b003      	add	sp, #12
 8006dda:	bd30      	pop	{r4, r5, pc}
 8006ddc:	20000228 	.word	0x20000228

08006de0 <_malloc_r>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	1ccd      	adds	r5, r1, #3
 8006de4:	f025 0503 	bic.w	r5, r5, #3
 8006de8:	3508      	adds	r5, #8
 8006dea:	2d0c      	cmp	r5, #12
 8006dec:	bf38      	it	cc
 8006dee:	250c      	movcc	r5, #12
 8006df0:	2d00      	cmp	r5, #0
 8006df2:	4606      	mov	r6, r0
 8006df4:	db01      	blt.n	8006dfa <_malloc_r+0x1a>
 8006df6:	42a9      	cmp	r1, r5
 8006df8:	d903      	bls.n	8006e02 <_malloc_r+0x22>
 8006dfa:	230c      	movs	r3, #12
 8006dfc:	6033      	str	r3, [r6, #0]
 8006dfe:	2000      	movs	r0, #0
 8006e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e02:	f000 fa0f 	bl	8007224 <__malloc_lock>
 8006e06:	4921      	ldr	r1, [pc, #132]	; (8006e8c <_malloc_r+0xac>)
 8006e08:	680a      	ldr	r2, [r1, #0]
 8006e0a:	4614      	mov	r4, r2
 8006e0c:	b99c      	cbnz	r4, 8006e36 <_malloc_r+0x56>
 8006e0e:	4f20      	ldr	r7, [pc, #128]	; (8006e90 <_malloc_r+0xb0>)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	b923      	cbnz	r3, 8006e1e <_malloc_r+0x3e>
 8006e14:	4621      	mov	r1, r4
 8006e16:	4630      	mov	r0, r6
 8006e18:	f000 f998 	bl	800714c <_sbrk_r>
 8006e1c:	6038      	str	r0, [r7, #0]
 8006e1e:	4629      	mov	r1, r5
 8006e20:	4630      	mov	r0, r6
 8006e22:	f000 f993 	bl	800714c <_sbrk_r>
 8006e26:	1c43      	adds	r3, r0, #1
 8006e28:	d123      	bne.n	8006e72 <_malloc_r+0x92>
 8006e2a:	230c      	movs	r3, #12
 8006e2c:	6033      	str	r3, [r6, #0]
 8006e2e:	4630      	mov	r0, r6
 8006e30:	f000 f9fe 	bl	8007230 <__malloc_unlock>
 8006e34:	e7e3      	b.n	8006dfe <_malloc_r+0x1e>
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	1b5b      	subs	r3, r3, r5
 8006e3a:	d417      	bmi.n	8006e6c <_malloc_r+0x8c>
 8006e3c:	2b0b      	cmp	r3, #11
 8006e3e:	d903      	bls.n	8006e48 <_malloc_r+0x68>
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	441c      	add	r4, r3
 8006e44:	6025      	str	r5, [r4, #0]
 8006e46:	e004      	b.n	8006e52 <_malloc_r+0x72>
 8006e48:	6863      	ldr	r3, [r4, #4]
 8006e4a:	42a2      	cmp	r2, r4
 8006e4c:	bf0c      	ite	eq
 8006e4e:	600b      	streq	r3, [r1, #0]
 8006e50:	6053      	strne	r3, [r2, #4]
 8006e52:	4630      	mov	r0, r6
 8006e54:	f000 f9ec 	bl	8007230 <__malloc_unlock>
 8006e58:	f104 000b 	add.w	r0, r4, #11
 8006e5c:	1d23      	adds	r3, r4, #4
 8006e5e:	f020 0007 	bic.w	r0, r0, #7
 8006e62:	1ac2      	subs	r2, r0, r3
 8006e64:	d0cc      	beq.n	8006e00 <_malloc_r+0x20>
 8006e66:	1a1b      	subs	r3, r3, r0
 8006e68:	50a3      	str	r3, [r4, r2]
 8006e6a:	e7c9      	b.n	8006e00 <_malloc_r+0x20>
 8006e6c:	4622      	mov	r2, r4
 8006e6e:	6864      	ldr	r4, [r4, #4]
 8006e70:	e7cc      	b.n	8006e0c <_malloc_r+0x2c>
 8006e72:	1cc4      	adds	r4, r0, #3
 8006e74:	f024 0403 	bic.w	r4, r4, #3
 8006e78:	42a0      	cmp	r0, r4
 8006e7a:	d0e3      	beq.n	8006e44 <_malloc_r+0x64>
 8006e7c:	1a21      	subs	r1, r4, r0
 8006e7e:	4630      	mov	r0, r6
 8006e80:	f000 f964 	bl	800714c <_sbrk_r>
 8006e84:	3001      	adds	r0, #1
 8006e86:	d1dd      	bne.n	8006e44 <_malloc_r+0x64>
 8006e88:	e7cf      	b.n	8006e2a <_malloc_r+0x4a>
 8006e8a:	bf00      	nop
 8006e8c:	20000228 	.word	0x20000228
 8006e90:	2000022c 	.word	0x2000022c

08006e94 <__ssputs_r>:
 8006e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e98:	688e      	ldr	r6, [r1, #8]
 8006e9a:	429e      	cmp	r6, r3
 8006e9c:	4682      	mov	sl, r0
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	4690      	mov	r8, r2
 8006ea2:	461f      	mov	r7, r3
 8006ea4:	d838      	bhi.n	8006f18 <__ssputs_r+0x84>
 8006ea6:	898a      	ldrh	r2, [r1, #12]
 8006ea8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006eac:	d032      	beq.n	8006f14 <__ssputs_r+0x80>
 8006eae:	6825      	ldr	r5, [r4, #0]
 8006eb0:	6909      	ldr	r1, [r1, #16]
 8006eb2:	eba5 0901 	sub.w	r9, r5, r1
 8006eb6:	6965      	ldr	r5, [r4, #20]
 8006eb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ebc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	444b      	add	r3, r9
 8006ec4:	106d      	asrs	r5, r5, #1
 8006ec6:	429d      	cmp	r5, r3
 8006ec8:	bf38      	it	cc
 8006eca:	461d      	movcc	r5, r3
 8006ecc:	0553      	lsls	r3, r2, #21
 8006ece:	d531      	bpl.n	8006f34 <__ssputs_r+0xa0>
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	f7ff ff85 	bl	8006de0 <_malloc_r>
 8006ed6:	4606      	mov	r6, r0
 8006ed8:	b950      	cbnz	r0, 8006ef0 <__ssputs_r+0x5c>
 8006eda:	230c      	movs	r3, #12
 8006edc:	f8ca 3000 	str.w	r3, [sl]
 8006ee0:	89a3      	ldrh	r3, [r4, #12]
 8006ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ee6:	81a3      	strh	r3, [r4, #12]
 8006ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef0:	6921      	ldr	r1, [r4, #16]
 8006ef2:	464a      	mov	r2, r9
 8006ef4:	f7ff fb88 	bl	8006608 <memcpy>
 8006ef8:	89a3      	ldrh	r3, [r4, #12]
 8006efa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f02:	81a3      	strh	r3, [r4, #12]
 8006f04:	6126      	str	r6, [r4, #16]
 8006f06:	6165      	str	r5, [r4, #20]
 8006f08:	444e      	add	r6, r9
 8006f0a:	eba5 0509 	sub.w	r5, r5, r9
 8006f0e:	6026      	str	r6, [r4, #0]
 8006f10:	60a5      	str	r5, [r4, #8]
 8006f12:	463e      	mov	r6, r7
 8006f14:	42be      	cmp	r6, r7
 8006f16:	d900      	bls.n	8006f1a <__ssputs_r+0x86>
 8006f18:	463e      	mov	r6, r7
 8006f1a:	4632      	mov	r2, r6
 8006f1c:	6820      	ldr	r0, [r4, #0]
 8006f1e:	4641      	mov	r1, r8
 8006f20:	f000 f966 	bl	80071f0 <memmove>
 8006f24:	68a3      	ldr	r3, [r4, #8]
 8006f26:	6822      	ldr	r2, [r4, #0]
 8006f28:	1b9b      	subs	r3, r3, r6
 8006f2a:	4432      	add	r2, r6
 8006f2c:	60a3      	str	r3, [r4, #8]
 8006f2e:	6022      	str	r2, [r4, #0]
 8006f30:	2000      	movs	r0, #0
 8006f32:	e7db      	b.n	8006eec <__ssputs_r+0x58>
 8006f34:	462a      	mov	r2, r5
 8006f36:	f000 f981 	bl	800723c <_realloc_r>
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d1e1      	bne.n	8006f04 <__ssputs_r+0x70>
 8006f40:	6921      	ldr	r1, [r4, #16]
 8006f42:	4650      	mov	r0, sl
 8006f44:	f7ff fefc 	bl	8006d40 <_free_r>
 8006f48:	e7c7      	b.n	8006eda <__ssputs_r+0x46>
	...

08006f4c <_svfiprintf_r>:
 8006f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f50:	4698      	mov	r8, r3
 8006f52:	898b      	ldrh	r3, [r1, #12]
 8006f54:	061b      	lsls	r3, r3, #24
 8006f56:	b09d      	sub	sp, #116	; 0x74
 8006f58:	4607      	mov	r7, r0
 8006f5a:	460d      	mov	r5, r1
 8006f5c:	4614      	mov	r4, r2
 8006f5e:	d50e      	bpl.n	8006f7e <_svfiprintf_r+0x32>
 8006f60:	690b      	ldr	r3, [r1, #16]
 8006f62:	b963      	cbnz	r3, 8006f7e <_svfiprintf_r+0x32>
 8006f64:	2140      	movs	r1, #64	; 0x40
 8006f66:	f7ff ff3b 	bl	8006de0 <_malloc_r>
 8006f6a:	6028      	str	r0, [r5, #0]
 8006f6c:	6128      	str	r0, [r5, #16]
 8006f6e:	b920      	cbnz	r0, 8006f7a <_svfiprintf_r+0x2e>
 8006f70:	230c      	movs	r3, #12
 8006f72:	603b      	str	r3, [r7, #0]
 8006f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f78:	e0d1      	b.n	800711e <_svfiprintf_r+0x1d2>
 8006f7a:	2340      	movs	r3, #64	; 0x40
 8006f7c:	616b      	str	r3, [r5, #20]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	9309      	str	r3, [sp, #36]	; 0x24
 8006f82:	2320      	movs	r3, #32
 8006f84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f88:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f8c:	2330      	movs	r3, #48	; 0x30
 8006f8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007138 <_svfiprintf_r+0x1ec>
 8006f92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f96:	f04f 0901 	mov.w	r9, #1
 8006f9a:	4623      	mov	r3, r4
 8006f9c:	469a      	mov	sl, r3
 8006f9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fa2:	b10a      	cbz	r2, 8006fa8 <_svfiprintf_r+0x5c>
 8006fa4:	2a25      	cmp	r2, #37	; 0x25
 8006fa6:	d1f9      	bne.n	8006f9c <_svfiprintf_r+0x50>
 8006fa8:	ebba 0b04 	subs.w	fp, sl, r4
 8006fac:	d00b      	beq.n	8006fc6 <_svfiprintf_r+0x7a>
 8006fae:	465b      	mov	r3, fp
 8006fb0:	4622      	mov	r2, r4
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	4638      	mov	r0, r7
 8006fb6:	f7ff ff6d 	bl	8006e94 <__ssputs_r>
 8006fba:	3001      	adds	r0, #1
 8006fbc:	f000 80aa 	beq.w	8007114 <_svfiprintf_r+0x1c8>
 8006fc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fc2:	445a      	add	r2, fp
 8006fc4:	9209      	str	r2, [sp, #36]	; 0x24
 8006fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 80a2 	beq.w	8007114 <_svfiprintf_r+0x1c8>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fda:	f10a 0a01 	add.w	sl, sl, #1
 8006fde:	9304      	str	r3, [sp, #16]
 8006fe0:	9307      	str	r3, [sp, #28]
 8006fe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fe6:	931a      	str	r3, [sp, #104]	; 0x68
 8006fe8:	4654      	mov	r4, sl
 8006fea:	2205      	movs	r2, #5
 8006fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ff0:	4851      	ldr	r0, [pc, #324]	; (8007138 <_svfiprintf_r+0x1ec>)
 8006ff2:	f7f9 f8fd 	bl	80001f0 <memchr>
 8006ff6:	9a04      	ldr	r2, [sp, #16]
 8006ff8:	b9d8      	cbnz	r0, 8007032 <_svfiprintf_r+0xe6>
 8006ffa:	06d0      	lsls	r0, r2, #27
 8006ffc:	bf44      	itt	mi
 8006ffe:	2320      	movmi	r3, #32
 8007000:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007004:	0711      	lsls	r1, r2, #28
 8007006:	bf44      	itt	mi
 8007008:	232b      	movmi	r3, #43	; 0x2b
 800700a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800700e:	f89a 3000 	ldrb.w	r3, [sl]
 8007012:	2b2a      	cmp	r3, #42	; 0x2a
 8007014:	d015      	beq.n	8007042 <_svfiprintf_r+0xf6>
 8007016:	9a07      	ldr	r2, [sp, #28]
 8007018:	4654      	mov	r4, sl
 800701a:	2000      	movs	r0, #0
 800701c:	f04f 0c0a 	mov.w	ip, #10
 8007020:	4621      	mov	r1, r4
 8007022:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007026:	3b30      	subs	r3, #48	; 0x30
 8007028:	2b09      	cmp	r3, #9
 800702a:	d94e      	bls.n	80070ca <_svfiprintf_r+0x17e>
 800702c:	b1b0      	cbz	r0, 800705c <_svfiprintf_r+0x110>
 800702e:	9207      	str	r2, [sp, #28]
 8007030:	e014      	b.n	800705c <_svfiprintf_r+0x110>
 8007032:	eba0 0308 	sub.w	r3, r0, r8
 8007036:	fa09 f303 	lsl.w	r3, r9, r3
 800703a:	4313      	orrs	r3, r2
 800703c:	9304      	str	r3, [sp, #16]
 800703e:	46a2      	mov	sl, r4
 8007040:	e7d2      	b.n	8006fe8 <_svfiprintf_r+0x9c>
 8007042:	9b03      	ldr	r3, [sp, #12]
 8007044:	1d19      	adds	r1, r3, #4
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	9103      	str	r1, [sp, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	bfbb      	ittet	lt
 800704e:	425b      	neglt	r3, r3
 8007050:	f042 0202 	orrlt.w	r2, r2, #2
 8007054:	9307      	strge	r3, [sp, #28]
 8007056:	9307      	strlt	r3, [sp, #28]
 8007058:	bfb8      	it	lt
 800705a:	9204      	strlt	r2, [sp, #16]
 800705c:	7823      	ldrb	r3, [r4, #0]
 800705e:	2b2e      	cmp	r3, #46	; 0x2e
 8007060:	d10c      	bne.n	800707c <_svfiprintf_r+0x130>
 8007062:	7863      	ldrb	r3, [r4, #1]
 8007064:	2b2a      	cmp	r3, #42	; 0x2a
 8007066:	d135      	bne.n	80070d4 <_svfiprintf_r+0x188>
 8007068:	9b03      	ldr	r3, [sp, #12]
 800706a:	1d1a      	adds	r2, r3, #4
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	9203      	str	r2, [sp, #12]
 8007070:	2b00      	cmp	r3, #0
 8007072:	bfb8      	it	lt
 8007074:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007078:	3402      	adds	r4, #2
 800707a:	9305      	str	r3, [sp, #20]
 800707c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007148 <_svfiprintf_r+0x1fc>
 8007080:	7821      	ldrb	r1, [r4, #0]
 8007082:	2203      	movs	r2, #3
 8007084:	4650      	mov	r0, sl
 8007086:	f7f9 f8b3 	bl	80001f0 <memchr>
 800708a:	b140      	cbz	r0, 800709e <_svfiprintf_r+0x152>
 800708c:	2340      	movs	r3, #64	; 0x40
 800708e:	eba0 000a 	sub.w	r0, r0, sl
 8007092:	fa03 f000 	lsl.w	r0, r3, r0
 8007096:	9b04      	ldr	r3, [sp, #16]
 8007098:	4303      	orrs	r3, r0
 800709a:	3401      	adds	r4, #1
 800709c:	9304      	str	r3, [sp, #16]
 800709e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070a2:	4826      	ldr	r0, [pc, #152]	; (800713c <_svfiprintf_r+0x1f0>)
 80070a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070a8:	2206      	movs	r2, #6
 80070aa:	f7f9 f8a1 	bl	80001f0 <memchr>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d038      	beq.n	8007124 <_svfiprintf_r+0x1d8>
 80070b2:	4b23      	ldr	r3, [pc, #140]	; (8007140 <_svfiprintf_r+0x1f4>)
 80070b4:	bb1b      	cbnz	r3, 80070fe <_svfiprintf_r+0x1b2>
 80070b6:	9b03      	ldr	r3, [sp, #12]
 80070b8:	3307      	adds	r3, #7
 80070ba:	f023 0307 	bic.w	r3, r3, #7
 80070be:	3308      	adds	r3, #8
 80070c0:	9303      	str	r3, [sp, #12]
 80070c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c4:	4433      	add	r3, r6
 80070c6:	9309      	str	r3, [sp, #36]	; 0x24
 80070c8:	e767      	b.n	8006f9a <_svfiprintf_r+0x4e>
 80070ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80070ce:	460c      	mov	r4, r1
 80070d0:	2001      	movs	r0, #1
 80070d2:	e7a5      	b.n	8007020 <_svfiprintf_r+0xd4>
 80070d4:	2300      	movs	r3, #0
 80070d6:	3401      	adds	r4, #1
 80070d8:	9305      	str	r3, [sp, #20]
 80070da:	4619      	mov	r1, r3
 80070dc:	f04f 0c0a 	mov.w	ip, #10
 80070e0:	4620      	mov	r0, r4
 80070e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070e6:	3a30      	subs	r2, #48	; 0x30
 80070e8:	2a09      	cmp	r2, #9
 80070ea:	d903      	bls.n	80070f4 <_svfiprintf_r+0x1a8>
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d0c5      	beq.n	800707c <_svfiprintf_r+0x130>
 80070f0:	9105      	str	r1, [sp, #20]
 80070f2:	e7c3      	b.n	800707c <_svfiprintf_r+0x130>
 80070f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80070f8:	4604      	mov	r4, r0
 80070fa:	2301      	movs	r3, #1
 80070fc:	e7f0      	b.n	80070e0 <_svfiprintf_r+0x194>
 80070fe:	ab03      	add	r3, sp, #12
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	462a      	mov	r2, r5
 8007104:	4b0f      	ldr	r3, [pc, #60]	; (8007144 <_svfiprintf_r+0x1f8>)
 8007106:	a904      	add	r1, sp, #16
 8007108:	4638      	mov	r0, r7
 800710a:	f7fd fffb 	bl	8005104 <_printf_float>
 800710e:	1c42      	adds	r2, r0, #1
 8007110:	4606      	mov	r6, r0
 8007112:	d1d6      	bne.n	80070c2 <_svfiprintf_r+0x176>
 8007114:	89ab      	ldrh	r3, [r5, #12]
 8007116:	065b      	lsls	r3, r3, #25
 8007118:	f53f af2c 	bmi.w	8006f74 <_svfiprintf_r+0x28>
 800711c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800711e:	b01d      	add	sp, #116	; 0x74
 8007120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007124:	ab03      	add	r3, sp, #12
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	462a      	mov	r2, r5
 800712a:	4b06      	ldr	r3, [pc, #24]	; (8007144 <_svfiprintf_r+0x1f8>)
 800712c:	a904      	add	r1, sp, #16
 800712e:	4638      	mov	r0, r7
 8007130:	f7fe fa8c 	bl	800564c <_printf_i>
 8007134:	e7eb      	b.n	800710e <_svfiprintf_r+0x1c2>
 8007136:	bf00      	nop
 8007138:	08007fa4 	.word	0x08007fa4
 800713c:	08007fae 	.word	0x08007fae
 8007140:	08005105 	.word	0x08005105
 8007144:	08006e95 	.word	0x08006e95
 8007148:	08007faa 	.word	0x08007faa

0800714c <_sbrk_r>:
 800714c:	b538      	push	{r3, r4, r5, lr}
 800714e:	4d06      	ldr	r5, [pc, #24]	; (8007168 <_sbrk_r+0x1c>)
 8007150:	2300      	movs	r3, #0
 8007152:	4604      	mov	r4, r0
 8007154:	4608      	mov	r0, r1
 8007156:	602b      	str	r3, [r5, #0]
 8007158:	f7fa ff0a 	bl	8001f70 <_sbrk>
 800715c:	1c43      	adds	r3, r0, #1
 800715e:	d102      	bne.n	8007166 <_sbrk_r+0x1a>
 8007160:	682b      	ldr	r3, [r5, #0]
 8007162:	b103      	cbz	r3, 8007166 <_sbrk_r+0x1a>
 8007164:	6023      	str	r3, [r4, #0]
 8007166:	bd38      	pop	{r3, r4, r5, pc}
 8007168:	20000318 	.word	0x20000318

0800716c <__assert_func>:
 800716c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800716e:	4614      	mov	r4, r2
 8007170:	461a      	mov	r2, r3
 8007172:	4b09      	ldr	r3, [pc, #36]	; (8007198 <__assert_func+0x2c>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4605      	mov	r5, r0
 8007178:	68d8      	ldr	r0, [r3, #12]
 800717a:	b14c      	cbz	r4, 8007190 <__assert_func+0x24>
 800717c:	4b07      	ldr	r3, [pc, #28]	; (800719c <__assert_func+0x30>)
 800717e:	9100      	str	r1, [sp, #0]
 8007180:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007184:	4906      	ldr	r1, [pc, #24]	; (80071a0 <__assert_func+0x34>)
 8007186:	462b      	mov	r3, r5
 8007188:	f000 f80e 	bl	80071a8 <fiprintf>
 800718c:	f000 faa4 	bl	80076d8 <abort>
 8007190:	4b04      	ldr	r3, [pc, #16]	; (80071a4 <__assert_func+0x38>)
 8007192:	461c      	mov	r4, r3
 8007194:	e7f3      	b.n	800717e <__assert_func+0x12>
 8007196:	bf00      	nop
 8007198:	20000034 	.word	0x20000034
 800719c:	08007fb5 	.word	0x08007fb5
 80071a0:	08007fc2 	.word	0x08007fc2
 80071a4:	08007ff0 	.word	0x08007ff0

080071a8 <fiprintf>:
 80071a8:	b40e      	push	{r1, r2, r3}
 80071aa:	b503      	push	{r0, r1, lr}
 80071ac:	4601      	mov	r1, r0
 80071ae:	ab03      	add	r3, sp, #12
 80071b0:	4805      	ldr	r0, [pc, #20]	; (80071c8 <fiprintf+0x20>)
 80071b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80071b6:	6800      	ldr	r0, [r0, #0]
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	f000 f88f 	bl	80072dc <_vfiprintf_r>
 80071be:	b002      	add	sp, #8
 80071c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071c4:	b003      	add	sp, #12
 80071c6:	4770      	bx	lr
 80071c8:	20000034 	.word	0x20000034

080071cc <__ascii_mbtowc>:
 80071cc:	b082      	sub	sp, #8
 80071ce:	b901      	cbnz	r1, 80071d2 <__ascii_mbtowc+0x6>
 80071d0:	a901      	add	r1, sp, #4
 80071d2:	b142      	cbz	r2, 80071e6 <__ascii_mbtowc+0x1a>
 80071d4:	b14b      	cbz	r3, 80071ea <__ascii_mbtowc+0x1e>
 80071d6:	7813      	ldrb	r3, [r2, #0]
 80071d8:	600b      	str	r3, [r1, #0]
 80071da:	7812      	ldrb	r2, [r2, #0]
 80071dc:	1e10      	subs	r0, r2, #0
 80071de:	bf18      	it	ne
 80071e0:	2001      	movne	r0, #1
 80071e2:	b002      	add	sp, #8
 80071e4:	4770      	bx	lr
 80071e6:	4610      	mov	r0, r2
 80071e8:	e7fb      	b.n	80071e2 <__ascii_mbtowc+0x16>
 80071ea:	f06f 0001 	mvn.w	r0, #1
 80071ee:	e7f8      	b.n	80071e2 <__ascii_mbtowc+0x16>

080071f0 <memmove>:
 80071f0:	4288      	cmp	r0, r1
 80071f2:	b510      	push	{r4, lr}
 80071f4:	eb01 0402 	add.w	r4, r1, r2
 80071f8:	d902      	bls.n	8007200 <memmove+0x10>
 80071fa:	4284      	cmp	r4, r0
 80071fc:	4623      	mov	r3, r4
 80071fe:	d807      	bhi.n	8007210 <memmove+0x20>
 8007200:	1e43      	subs	r3, r0, #1
 8007202:	42a1      	cmp	r1, r4
 8007204:	d008      	beq.n	8007218 <memmove+0x28>
 8007206:	f811 2b01 	ldrb.w	r2, [r1], #1
 800720a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800720e:	e7f8      	b.n	8007202 <memmove+0x12>
 8007210:	4402      	add	r2, r0
 8007212:	4601      	mov	r1, r0
 8007214:	428a      	cmp	r2, r1
 8007216:	d100      	bne.n	800721a <memmove+0x2a>
 8007218:	bd10      	pop	{r4, pc}
 800721a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800721e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007222:	e7f7      	b.n	8007214 <memmove+0x24>

08007224 <__malloc_lock>:
 8007224:	4801      	ldr	r0, [pc, #4]	; (800722c <__malloc_lock+0x8>)
 8007226:	f000 bc17 	b.w	8007a58 <__retarget_lock_acquire_recursive>
 800722a:	bf00      	nop
 800722c:	20000320 	.word	0x20000320

08007230 <__malloc_unlock>:
 8007230:	4801      	ldr	r0, [pc, #4]	; (8007238 <__malloc_unlock+0x8>)
 8007232:	f000 bc12 	b.w	8007a5a <__retarget_lock_release_recursive>
 8007236:	bf00      	nop
 8007238:	20000320 	.word	0x20000320

0800723c <_realloc_r>:
 800723c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723e:	4607      	mov	r7, r0
 8007240:	4614      	mov	r4, r2
 8007242:	460e      	mov	r6, r1
 8007244:	b921      	cbnz	r1, 8007250 <_realloc_r+0x14>
 8007246:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800724a:	4611      	mov	r1, r2
 800724c:	f7ff bdc8 	b.w	8006de0 <_malloc_r>
 8007250:	b922      	cbnz	r2, 800725c <_realloc_r+0x20>
 8007252:	f7ff fd75 	bl	8006d40 <_free_r>
 8007256:	4625      	mov	r5, r4
 8007258:	4628      	mov	r0, r5
 800725a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800725c:	f000 fc62 	bl	8007b24 <_malloc_usable_size_r>
 8007260:	42a0      	cmp	r0, r4
 8007262:	d20f      	bcs.n	8007284 <_realloc_r+0x48>
 8007264:	4621      	mov	r1, r4
 8007266:	4638      	mov	r0, r7
 8007268:	f7ff fdba 	bl	8006de0 <_malloc_r>
 800726c:	4605      	mov	r5, r0
 800726e:	2800      	cmp	r0, #0
 8007270:	d0f2      	beq.n	8007258 <_realloc_r+0x1c>
 8007272:	4631      	mov	r1, r6
 8007274:	4622      	mov	r2, r4
 8007276:	f7ff f9c7 	bl	8006608 <memcpy>
 800727a:	4631      	mov	r1, r6
 800727c:	4638      	mov	r0, r7
 800727e:	f7ff fd5f 	bl	8006d40 <_free_r>
 8007282:	e7e9      	b.n	8007258 <_realloc_r+0x1c>
 8007284:	4635      	mov	r5, r6
 8007286:	e7e7      	b.n	8007258 <_realloc_r+0x1c>

08007288 <__sfputc_r>:
 8007288:	6893      	ldr	r3, [r2, #8]
 800728a:	3b01      	subs	r3, #1
 800728c:	2b00      	cmp	r3, #0
 800728e:	b410      	push	{r4}
 8007290:	6093      	str	r3, [r2, #8]
 8007292:	da08      	bge.n	80072a6 <__sfputc_r+0x1e>
 8007294:	6994      	ldr	r4, [r2, #24]
 8007296:	42a3      	cmp	r3, r4
 8007298:	db01      	blt.n	800729e <__sfputc_r+0x16>
 800729a:	290a      	cmp	r1, #10
 800729c:	d103      	bne.n	80072a6 <__sfputc_r+0x1e>
 800729e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072a2:	f000 b94b 	b.w	800753c <__swbuf_r>
 80072a6:	6813      	ldr	r3, [r2, #0]
 80072a8:	1c58      	adds	r0, r3, #1
 80072aa:	6010      	str	r0, [r2, #0]
 80072ac:	7019      	strb	r1, [r3, #0]
 80072ae:	4608      	mov	r0, r1
 80072b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <__sfputs_r>:
 80072b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b8:	4606      	mov	r6, r0
 80072ba:	460f      	mov	r7, r1
 80072bc:	4614      	mov	r4, r2
 80072be:	18d5      	adds	r5, r2, r3
 80072c0:	42ac      	cmp	r4, r5
 80072c2:	d101      	bne.n	80072c8 <__sfputs_r+0x12>
 80072c4:	2000      	movs	r0, #0
 80072c6:	e007      	b.n	80072d8 <__sfputs_r+0x22>
 80072c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072cc:	463a      	mov	r2, r7
 80072ce:	4630      	mov	r0, r6
 80072d0:	f7ff ffda 	bl	8007288 <__sfputc_r>
 80072d4:	1c43      	adds	r3, r0, #1
 80072d6:	d1f3      	bne.n	80072c0 <__sfputs_r+0xa>
 80072d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072dc <_vfiprintf_r>:
 80072dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e0:	460d      	mov	r5, r1
 80072e2:	b09d      	sub	sp, #116	; 0x74
 80072e4:	4614      	mov	r4, r2
 80072e6:	4698      	mov	r8, r3
 80072e8:	4606      	mov	r6, r0
 80072ea:	b118      	cbz	r0, 80072f4 <_vfiprintf_r+0x18>
 80072ec:	6983      	ldr	r3, [r0, #24]
 80072ee:	b90b      	cbnz	r3, 80072f4 <_vfiprintf_r+0x18>
 80072f0:	f000 fb14 	bl	800791c <__sinit>
 80072f4:	4b89      	ldr	r3, [pc, #548]	; (800751c <_vfiprintf_r+0x240>)
 80072f6:	429d      	cmp	r5, r3
 80072f8:	d11b      	bne.n	8007332 <_vfiprintf_r+0x56>
 80072fa:	6875      	ldr	r5, [r6, #4]
 80072fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072fe:	07d9      	lsls	r1, r3, #31
 8007300:	d405      	bmi.n	800730e <_vfiprintf_r+0x32>
 8007302:	89ab      	ldrh	r3, [r5, #12]
 8007304:	059a      	lsls	r2, r3, #22
 8007306:	d402      	bmi.n	800730e <_vfiprintf_r+0x32>
 8007308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800730a:	f000 fba5 	bl	8007a58 <__retarget_lock_acquire_recursive>
 800730e:	89ab      	ldrh	r3, [r5, #12]
 8007310:	071b      	lsls	r3, r3, #28
 8007312:	d501      	bpl.n	8007318 <_vfiprintf_r+0x3c>
 8007314:	692b      	ldr	r3, [r5, #16]
 8007316:	b9eb      	cbnz	r3, 8007354 <_vfiprintf_r+0x78>
 8007318:	4629      	mov	r1, r5
 800731a:	4630      	mov	r0, r6
 800731c:	f000 f96e 	bl	80075fc <__swsetup_r>
 8007320:	b1c0      	cbz	r0, 8007354 <_vfiprintf_r+0x78>
 8007322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007324:	07dc      	lsls	r4, r3, #31
 8007326:	d50e      	bpl.n	8007346 <_vfiprintf_r+0x6a>
 8007328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800732c:	b01d      	add	sp, #116	; 0x74
 800732e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007332:	4b7b      	ldr	r3, [pc, #492]	; (8007520 <_vfiprintf_r+0x244>)
 8007334:	429d      	cmp	r5, r3
 8007336:	d101      	bne.n	800733c <_vfiprintf_r+0x60>
 8007338:	68b5      	ldr	r5, [r6, #8]
 800733a:	e7df      	b.n	80072fc <_vfiprintf_r+0x20>
 800733c:	4b79      	ldr	r3, [pc, #484]	; (8007524 <_vfiprintf_r+0x248>)
 800733e:	429d      	cmp	r5, r3
 8007340:	bf08      	it	eq
 8007342:	68f5      	ldreq	r5, [r6, #12]
 8007344:	e7da      	b.n	80072fc <_vfiprintf_r+0x20>
 8007346:	89ab      	ldrh	r3, [r5, #12]
 8007348:	0598      	lsls	r0, r3, #22
 800734a:	d4ed      	bmi.n	8007328 <_vfiprintf_r+0x4c>
 800734c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800734e:	f000 fb84 	bl	8007a5a <__retarget_lock_release_recursive>
 8007352:	e7e9      	b.n	8007328 <_vfiprintf_r+0x4c>
 8007354:	2300      	movs	r3, #0
 8007356:	9309      	str	r3, [sp, #36]	; 0x24
 8007358:	2320      	movs	r3, #32
 800735a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800735e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007362:	2330      	movs	r3, #48	; 0x30
 8007364:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007528 <_vfiprintf_r+0x24c>
 8007368:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800736c:	f04f 0901 	mov.w	r9, #1
 8007370:	4623      	mov	r3, r4
 8007372:	469a      	mov	sl, r3
 8007374:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007378:	b10a      	cbz	r2, 800737e <_vfiprintf_r+0xa2>
 800737a:	2a25      	cmp	r2, #37	; 0x25
 800737c:	d1f9      	bne.n	8007372 <_vfiprintf_r+0x96>
 800737e:	ebba 0b04 	subs.w	fp, sl, r4
 8007382:	d00b      	beq.n	800739c <_vfiprintf_r+0xc0>
 8007384:	465b      	mov	r3, fp
 8007386:	4622      	mov	r2, r4
 8007388:	4629      	mov	r1, r5
 800738a:	4630      	mov	r0, r6
 800738c:	f7ff ff93 	bl	80072b6 <__sfputs_r>
 8007390:	3001      	adds	r0, #1
 8007392:	f000 80aa 	beq.w	80074ea <_vfiprintf_r+0x20e>
 8007396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007398:	445a      	add	r2, fp
 800739a:	9209      	str	r2, [sp, #36]	; 0x24
 800739c:	f89a 3000 	ldrb.w	r3, [sl]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 80a2 	beq.w	80074ea <_vfiprintf_r+0x20e>
 80073a6:	2300      	movs	r3, #0
 80073a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073b0:	f10a 0a01 	add.w	sl, sl, #1
 80073b4:	9304      	str	r3, [sp, #16]
 80073b6:	9307      	str	r3, [sp, #28]
 80073b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073bc:	931a      	str	r3, [sp, #104]	; 0x68
 80073be:	4654      	mov	r4, sl
 80073c0:	2205      	movs	r2, #5
 80073c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073c6:	4858      	ldr	r0, [pc, #352]	; (8007528 <_vfiprintf_r+0x24c>)
 80073c8:	f7f8 ff12 	bl	80001f0 <memchr>
 80073cc:	9a04      	ldr	r2, [sp, #16]
 80073ce:	b9d8      	cbnz	r0, 8007408 <_vfiprintf_r+0x12c>
 80073d0:	06d1      	lsls	r1, r2, #27
 80073d2:	bf44      	itt	mi
 80073d4:	2320      	movmi	r3, #32
 80073d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073da:	0713      	lsls	r3, r2, #28
 80073dc:	bf44      	itt	mi
 80073de:	232b      	movmi	r3, #43	; 0x2b
 80073e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073e4:	f89a 3000 	ldrb.w	r3, [sl]
 80073e8:	2b2a      	cmp	r3, #42	; 0x2a
 80073ea:	d015      	beq.n	8007418 <_vfiprintf_r+0x13c>
 80073ec:	9a07      	ldr	r2, [sp, #28]
 80073ee:	4654      	mov	r4, sl
 80073f0:	2000      	movs	r0, #0
 80073f2:	f04f 0c0a 	mov.w	ip, #10
 80073f6:	4621      	mov	r1, r4
 80073f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073fc:	3b30      	subs	r3, #48	; 0x30
 80073fe:	2b09      	cmp	r3, #9
 8007400:	d94e      	bls.n	80074a0 <_vfiprintf_r+0x1c4>
 8007402:	b1b0      	cbz	r0, 8007432 <_vfiprintf_r+0x156>
 8007404:	9207      	str	r2, [sp, #28]
 8007406:	e014      	b.n	8007432 <_vfiprintf_r+0x156>
 8007408:	eba0 0308 	sub.w	r3, r0, r8
 800740c:	fa09 f303 	lsl.w	r3, r9, r3
 8007410:	4313      	orrs	r3, r2
 8007412:	9304      	str	r3, [sp, #16]
 8007414:	46a2      	mov	sl, r4
 8007416:	e7d2      	b.n	80073be <_vfiprintf_r+0xe2>
 8007418:	9b03      	ldr	r3, [sp, #12]
 800741a:	1d19      	adds	r1, r3, #4
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	9103      	str	r1, [sp, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	bfbb      	ittet	lt
 8007424:	425b      	neglt	r3, r3
 8007426:	f042 0202 	orrlt.w	r2, r2, #2
 800742a:	9307      	strge	r3, [sp, #28]
 800742c:	9307      	strlt	r3, [sp, #28]
 800742e:	bfb8      	it	lt
 8007430:	9204      	strlt	r2, [sp, #16]
 8007432:	7823      	ldrb	r3, [r4, #0]
 8007434:	2b2e      	cmp	r3, #46	; 0x2e
 8007436:	d10c      	bne.n	8007452 <_vfiprintf_r+0x176>
 8007438:	7863      	ldrb	r3, [r4, #1]
 800743a:	2b2a      	cmp	r3, #42	; 0x2a
 800743c:	d135      	bne.n	80074aa <_vfiprintf_r+0x1ce>
 800743e:	9b03      	ldr	r3, [sp, #12]
 8007440:	1d1a      	adds	r2, r3, #4
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	9203      	str	r2, [sp, #12]
 8007446:	2b00      	cmp	r3, #0
 8007448:	bfb8      	it	lt
 800744a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800744e:	3402      	adds	r4, #2
 8007450:	9305      	str	r3, [sp, #20]
 8007452:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007538 <_vfiprintf_r+0x25c>
 8007456:	7821      	ldrb	r1, [r4, #0]
 8007458:	2203      	movs	r2, #3
 800745a:	4650      	mov	r0, sl
 800745c:	f7f8 fec8 	bl	80001f0 <memchr>
 8007460:	b140      	cbz	r0, 8007474 <_vfiprintf_r+0x198>
 8007462:	2340      	movs	r3, #64	; 0x40
 8007464:	eba0 000a 	sub.w	r0, r0, sl
 8007468:	fa03 f000 	lsl.w	r0, r3, r0
 800746c:	9b04      	ldr	r3, [sp, #16]
 800746e:	4303      	orrs	r3, r0
 8007470:	3401      	adds	r4, #1
 8007472:	9304      	str	r3, [sp, #16]
 8007474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007478:	482c      	ldr	r0, [pc, #176]	; (800752c <_vfiprintf_r+0x250>)
 800747a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800747e:	2206      	movs	r2, #6
 8007480:	f7f8 feb6 	bl	80001f0 <memchr>
 8007484:	2800      	cmp	r0, #0
 8007486:	d03f      	beq.n	8007508 <_vfiprintf_r+0x22c>
 8007488:	4b29      	ldr	r3, [pc, #164]	; (8007530 <_vfiprintf_r+0x254>)
 800748a:	bb1b      	cbnz	r3, 80074d4 <_vfiprintf_r+0x1f8>
 800748c:	9b03      	ldr	r3, [sp, #12]
 800748e:	3307      	adds	r3, #7
 8007490:	f023 0307 	bic.w	r3, r3, #7
 8007494:	3308      	adds	r3, #8
 8007496:	9303      	str	r3, [sp, #12]
 8007498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800749a:	443b      	add	r3, r7
 800749c:	9309      	str	r3, [sp, #36]	; 0x24
 800749e:	e767      	b.n	8007370 <_vfiprintf_r+0x94>
 80074a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80074a4:	460c      	mov	r4, r1
 80074a6:	2001      	movs	r0, #1
 80074a8:	e7a5      	b.n	80073f6 <_vfiprintf_r+0x11a>
 80074aa:	2300      	movs	r3, #0
 80074ac:	3401      	adds	r4, #1
 80074ae:	9305      	str	r3, [sp, #20]
 80074b0:	4619      	mov	r1, r3
 80074b2:	f04f 0c0a 	mov.w	ip, #10
 80074b6:	4620      	mov	r0, r4
 80074b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074bc:	3a30      	subs	r2, #48	; 0x30
 80074be:	2a09      	cmp	r2, #9
 80074c0:	d903      	bls.n	80074ca <_vfiprintf_r+0x1ee>
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0c5      	beq.n	8007452 <_vfiprintf_r+0x176>
 80074c6:	9105      	str	r1, [sp, #20]
 80074c8:	e7c3      	b.n	8007452 <_vfiprintf_r+0x176>
 80074ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80074ce:	4604      	mov	r4, r0
 80074d0:	2301      	movs	r3, #1
 80074d2:	e7f0      	b.n	80074b6 <_vfiprintf_r+0x1da>
 80074d4:	ab03      	add	r3, sp, #12
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	462a      	mov	r2, r5
 80074da:	4b16      	ldr	r3, [pc, #88]	; (8007534 <_vfiprintf_r+0x258>)
 80074dc:	a904      	add	r1, sp, #16
 80074de:	4630      	mov	r0, r6
 80074e0:	f7fd fe10 	bl	8005104 <_printf_float>
 80074e4:	4607      	mov	r7, r0
 80074e6:	1c78      	adds	r0, r7, #1
 80074e8:	d1d6      	bne.n	8007498 <_vfiprintf_r+0x1bc>
 80074ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074ec:	07d9      	lsls	r1, r3, #31
 80074ee:	d405      	bmi.n	80074fc <_vfiprintf_r+0x220>
 80074f0:	89ab      	ldrh	r3, [r5, #12]
 80074f2:	059a      	lsls	r2, r3, #22
 80074f4:	d402      	bmi.n	80074fc <_vfiprintf_r+0x220>
 80074f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074f8:	f000 faaf 	bl	8007a5a <__retarget_lock_release_recursive>
 80074fc:	89ab      	ldrh	r3, [r5, #12]
 80074fe:	065b      	lsls	r3, r3, #25
 8007500:	f53f af12 	bmi.w	8007328 <_vfiprintf_r+0x4c>
 8007504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007506:	e711      	b.n	800732c <_vfiprintf_r+0x50>
 8007508:	ab03      	add	r3, sp, #12
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	462a      	mov	r2, r5
 800750e:	4b09      	ldr	r3, [pc, #36]	; (8007534 <_vfiprintf_r+0x258>)
 8007510:	a904      	add	r1, sp, #16
 8007512:	4630      	mov	r0, r6
 8007514:	f7fe f89a 	bl	800564c <_printf_i>
 8007518:	e7e4      	b.n	80074e4 <_vfiprintf_r+0x208>
 800751a:	bf00      	nop
 800751c:	0800811c 	.word	0x0800811c
 8007520:	0800813c 	.word	0x0800813c
 8007524:	080080fc 	.word	0x080080fc
 8007528:	08007fa4 	.word	0x08007fa4
 800752c:	08007fae 	.word	0x08007fae
 8007530:	08005105 	.word	0x08005105
 8007534:	080072b7 	.word	0x080072b7
 8007538:	08007faa 	.word	0x08007faa

0800753c <__swbuf_r>:
 800753c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753e:	460e      	mov	r6, r1
 8007540:	4614      	mov	r4, r2
 8007542:	4605      	mov	r5, r0
 8007544:	b118      	cbz	r0, 800754e <__swbuf_r+0x12>
 8007546:	6983      	ldr	r3, [r0, #24]
 8007548:	b90b      	cbnz	r3, 800754e <__swbuf_r+0x12>
 800754a:	f000 f9e7 	bl	800791c <__sinit>
 800754e:	4b21      	ldr	r3, [pc, #132]	; (80075d4 <__swbuf_r+0x98>)
 8007550:	429c      	cmp	r4, r3
 8007552:	d12b      	bne.n	80075ac <__swbuf_r+0x70>
 8007554:	686c      	ldr	r4, [r5, #4]
 8007556:	69a3      	ldr	r3, [r4, #24]
 8007558:	60a3      	str	r3, [r4, #8]
 800755a:	89a3      	ldrh	r3, [r4, #12]
 800755c:	071a      	lsls	r2, r3, #28
 800755e:	d52f      	bpl.n	80075c0 <__swbuf_r+0x84>
 8007560:	6923      	ldr	r3, [r4, #16]
 8007562:	b36b      	cbz	r3, 80075c0 <__swbuf_r+0x84>
 8007564:	6923      	ldr	r3, [r4, #16]
 8007566:	6820      	ldr	r0, [r4, #0]
 8007568:	1ac0      	subs	r0, r0, r3
 800756a:	6963      	ldr	r3, [r4, #20]
 800756c:	b2f6      	uxtb	r6, r6
 800756e:	4283      	cmp	r3, r0
 8007570:	4637      	mov	r7, r6
 8007572:	dc04      	bgt.n	800757e <__swbuf_r+0x42>
 8007574:	4621      	mov	r1, r4
 8007576:	4628      	mov	r0, r5
 8007578:	f000 f93c 	bl	80077f4 <_fflush_r>
 800757c:	bb30      	cbnz	r0, 80075cc <__swbuf_r+0x90>
 800757e:	68a3      	ldr	r3, [r4, #8]
 8007580:	3b01      	subs	r3, #1
 8007582:	60a3      	str	r3, [r4, #8]
 8007584:	6823      	ldr	r3, [r4, #0]
 8007586:	1c5a      	adds	r2, r3, #1
 8007588:	6022      	str	r2, [r4, #0]
 800758a:	701e      	strb	r6, [r3, #0]
 800758c:	6963      	ldr	r3, [r4, #20]
 800758e:	3001      	adds	r0, #1
 8007590:	4283      	cmp	r3, r0
 8007592:	d004      	beq.n	800759e <__swbuf_r+0x62>
 8007594:	89a3      	ldrh	r3, [r4, #12]
 8007596:	07db      	lsls	r3, r3, #31
 8007598:	d506      	bpl.n	80075a8 <__swbuf_r+0x6c>
 800759a:	2e0a      	cmp	r6, #10
 800759c:	d104      	bne.n	80075a8 <__swbuf_r+0x6c>
 800759e:	4621      	mov	r1, r4
 80075a0:	4628      	mov	r0, r5
 80075a2:	f000 f927 	bl	80077f4 <_fflush_r>
 80075a6:	b988      	cbnz	r0, 80075cc <__swbuf_r+0x90>
 80075a8:	4638      	mov	r0, r7
 80075aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075ac:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <__swbuf_r+0x9c>)
 80075ae:	429c      	cmp	r4, r3
 80075b0:	d101      	bne.n	80075b6 <__swbuf_r+0x7a>
 80075b2:	68ac      	ldr	r4, [r5, #8]
 80075b4:	e7cf      	b.n	8007556 <__swbuf_r+0x1a>
 80075b6:	4b09      	ldr	r3, [pc, #36]	; (80075dc <__swbuf_r+0xa0>)
 80075b8:	429c      	cmp	r4, r3
 80075ba:	bf08      	it	eq
 80075bc:	68ec      	ldreq	r4, [r5, #12]
 80075be:	e7ca      	b.n	8007556 <__swbuf_r+0x1a>
 80075c0:	4621      	mov	r1, r4
 80075c2:	4628      	mov	r0, r5
 80075c4:	f000 f81a 	bl	80075fc <__swsetup_r>
 80075c8:	2800      	cmp	r0, #0
 80075ca:	d0cb      	beq.n	8007564 <__swbuf_r+0x28>
 80075cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80075d0:	e7ea      	b.n	80075a8 <__swbuf_r+0x6c>
 80075d2:	bf00      	nop
 80075d4:	0800811c 	.word	0x0800811c
 80075d8:	0800813c 	.word	0x0800813c
 80075dc:	080080fc 	.word	0x080080fc

080075e0 <__ascii_wctomb>:
 80075e0:	b149      	cbz	r1, 80075f6 <__ascii_wctomb+0x16>
 80075e2:	2aff      	cmp	r2, #255	; 0xff
 80075e4:	bf85      	ittet	hi
 80075e6:	238a      	movhi	r3, #138	; 0x8a
 80075e8:	6003      	strhi	r3, [r0, #0]
 80075ea:	700a      	strbls	r2, [r1, #0]
 80075ec:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80075f0:	bf98      	it	ls
 80075f2:	2001      	movls	r0, #1
 80075f4:	4770      	bx	lr
 80075f6:	4608      	mov	r0, r1
 80075f8:	4770      	bx	lr
	...

080075fc <__swsetup_r>:
 80075fc:	4b32      	ldr	r3, [pc, #200]	; (80076c8 <__swsetup_r+0xcc>)
 80075fe:	b570      	push	{r4, r5, r6, lr}
 8007600:	681d      	ldr	r5, [r3, #0]
 8007602:	4606      	mov	r6, r0
 8007604:	460c      	mov	r4, r1
 8007606:	b125      	cbz	r5, 8007612 <__swsetup_r+0x16>
 8007608:	69ab      	ldr	r3, [r5, #24]
 800760a:	b913      	cbnz	r3, 8007612 <__swsetup_r+0x16>
 800760c:	4628      	mov	r0, r5
 800760e:	f000 f985 	bl	800791c <__sinit>
 8007612:	4b2e      	ldr	r3, [pc, #184]	; (80076cc <__swsetup_r+0xd0>)
 8007614:	429c      	cmp	r4, r3
 8007616:	d10f      	bne.n	8007638 <__swsetup_r+0x3c>
 8007618:	686c      	ldr	r4, [r5, #4]
 800761a:	89a3      	ldrh	r3, [r4, #12]
 800761c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007620:	0719      	lsls	r1, r3, #28
 8007622:	d42c      	bmi.n	800767e <__swsetup_r+0x82>
 8007624:	06dd      	lsls	r5, r3, #27
 8007626:	d411      	bmi.n	800764c <__swsetup_r+0x50>
 8007628:	2309      	movs	r3, #9
 800762a:	6033      	str	r3, [r6, #0]
 800762c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007630:	81a3      	strh	r3, [r4, #12]
 8007632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007636:	e03e      	b.n	80076b6 <__swsetup_r+0xba>
 8007638:	4b25      	ldr	r3, [pc, #148]	; (80076d0 <__swsetup_r+0xd4>)
 800763a:	429c      	cmp	r4, r3
 800763c:	d101      	bne.n	8007642 <__swsetup_r+0x46>
 800763e:	68ac      	ldr	r4, [r5, #8]
 8007640:	e7eb      	b.n	800761a <__swsetup_r+0x1e>
 8007642:	4b24      	ldr	r3, [pc, #144]	; (80076d4 <__swsetup_r+0xd8>)
 8007644:	429c      	cmp	r4, r3
 8007646:	bf08      	it	eq
 8007648:	68ec      	ldreq	r4, [r5, #12]
 800764a:	e7e6      	b.n	800761a <__swsetup_r+0x1e>
 800764c:	0758      	lsls	r0, r3, #29
 800764e:	d512      	bpl.n	8007676 <__swsetup_r+0x7a>
 8007650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007652:	b141      	cbz	r1, 8007666 <__swsetup_r+0x6a>
 8007654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007658:	4299      	cmp	r1, r3
 800765a:	d002      	beq.n	8007662 <__swsetup_r+0x66>
 800765c:	4630      	mov	r0, r6
 800765e:	f7ff fb6f 	bl	8006d40 <_free_r>
 8007662:	2300      	movs	r3, #0
 8007664:	6363      	str	r3, [r4, #52]	; 0x34
 8007666:	89a3      	ldrh	r3, [r4, #12]
 8007668:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800766c:	81a3      	strh	r3, [r4, #12]
 800766e:	2300      	movs	r3, #0
 8007670:	6063      	str	r3, [r4, #4]
 8007672:	6923      	ldr	r3, [r4, #16]
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	89a3      	ldrh	r3, [r4, #12]
 8007678:	f043 0308 	orr.w	r3, r3, #8
 800767c:	81a3      	strh	r3, [r4, #12]
 800767e:	6923      	ldr	r3, [r4, #16]
 8007680:	b94b      	cbnz	r3, 8007696 <__swsetup_r+0x9a>
 8007682:	89a3      	ldrh	r3, [r4, #12]
 8007684:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800768c:	d003      	beq.n	8007696 <__swsetup_r+0x9a>
 800768e:	4621      	mov	r1, r4
 8007690:	4630      	mov	r0, r6
 8007692:	f000 fa07 	bl	8007aa4 <__smakebuf_r>
 8007696:	89a0      	ldrh	r0, [r4, #12]
 8007698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800769c:	f010 0301 	ands.w	r3, r0, #1
 80076a0:	d00a      	beq.n	80076b8 <__swsetup_r+0xbc>
 80076a2:	2300      	movs	r3, #0
 80076a4:	60a3      	str	r3, [r4, #8]
 80076a6:	6963      	ldr	r3, [r4, #20]
 80076a8:	425b      	negs	r3, r3
 80076aa:	61a3      	str	r3, [r4, #24]
 80076ac:	6923      	ldr	r3, [r4, #16]
 80076ae:	b943      	cbnz	r3, 80076c2 <__swsetup_r+0xc6>
 80076b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076b4:	d1ba      	bne.n	800762c <__swsetup_r+0x30>
 80076b6:	bd70      	pop	{r4, r5, r6, pc}
 80076b8:	0781      	lsls	r1, r0, #30
 80076ba:	bf58      	it	pl
 80076bc:	6963      	ldrpl	r3, [r4, #20]
 80076be:	60a3      	str	r3, [r4, #8]
 80076c0:	e7f4      	b.n	80076ac <__swsetup_r+0xb0>
 80076c2:	2000      	movs	r0, #0
 80076c4:	e7f7      	b.n	80076b6 <__swsetup_r+0xba>
 80076c6:	bf00      	nop
 80076c8:	20000034 	.word	0x20000034
 80076cc:	0800811c 	.word	0x0800811c
 80076d0:	0800813c 	.word	0x0800813c
 80076d4:	080080fc 	.word	0x080080fc

080076d8 <abort>:
 80076d8:	b508      	push	{r3, lr}
 80076da:	2006      	movs	r0, #6
 80076dc:	f000 fa52 	bl	8007b84 <raise>
 80076e0:	2001      	movs	r0, #1
 80076e2:	f7fa fbcd 	bl	8001e80 <_exit>
	...

080076e8 <__sflush_r>:
 80076e8:	898a      	ldrh	r2, [r1, #12]
 80076ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ee:	4605      	mov	r5, r0
 80076f0:	0710      	lsls	r0, r2, #28
 80076f2:	460c      	mov	r4, r1
 80076f4:	d458      	bmi.n	80077a8 <__sflush_r+0xc0>
 80076f6:	684b      	ldr	r3, [r1, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	dc05      	bgt.n	8007708 <__sflush_r+0x20>
 80076fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076fe:	2b00      	cmp	r3, #0
 8007700:	dc02      	bgt.n	8007708 <__sflush_r+0x20>
 8007702:	2000      	movs	r0, #0
 8007704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800770a:	2e00      	cmp	r6, #0
 800770c:	d0f9      	beq.n	8007702 <__sflush_r+0x1a>
 800770e:	2300      	movs	r3, #0
 8007710:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007714:	682f      	ldr	r7, [r5, #0]
 8007716:	602b      	str	r3, [r5, #0]
 8007718:	d032      	beq.n	8007780 <__sflush_r+0x98>
 800771a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800771c:	89a3      	ldrh	r3, [r4, #12]
 800771e:	075a      	lsls	r2, r3, #29
 8007720:	d505      	bpl.n	800772e <__sflush_r+0x46>
 8007722:	6863      	ldr	r3, [r4, #4]
 8007724:	1ac0      	subs	r0, r0, r3
 8007726:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007728:	b10b      	cbz	r3, 800772e <__sflush_r+0x46>
 800772a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800772c:	1ac0      	subs	r0, r0, r3
 800772e:	2300      	movs	r3, #0
 8007730:	4602      	mov	r2, r0
 8007732:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007734:	6a21      	ldr	r1, [r4, #32]
 8007736:	4628      	mov	r0, r5
 8007738:	47b0      	blx	r6
 800773a:	1c43      	adds	r3, r0, #1
 800773c:	89a3      	ldrh	r3, [r4, #12]
 800773e:	d106      	bne.n	800774e <__sflush_r+0x66>
 8007740:	6829      	ldr	r1, [r5, #0]
 8007742:	291d      	cmp	r1, #29
 8007744:	d82c      	bhi.n	80077a0 <__sflush_r+0xb8>
 8007746:	4a2a      	ldr	r2, [pc, #168]	; (80077f0 <__sflush_r+0x108>)
 8007748:	40ca      	lsrs	r2, r1
 800774a:	07d6      	lsls	r6, r2, #31
 800774c:	d528      	bpl.n	80077a0 <__sflush_r+0xb8>
 800774e:	2200      	movs	r2, #0
 8007750:	6062      	str	r2, [r4, #4]
 8007752:	04d9      	lsls	r1, r3, #19
 8007754:	6922      	ldr	r2, [r4, #16]
 8007756:	6022      	str	r2, [r4, #0]
 8007758:	d504      	bpl.n	8007764 <__sflush_r+0x7c>
 800775a:	1c42      	adds	r2, r0, #1
 800775c:	d101      	bne.n	8007762 <__sflush_r+0x7a>
 800775e:	682b      	ldr	r3, [r5, #0]
 8007760:	b903      	cbnz	r3, 8007764 <__sflush_r+0x7c>
 8007762:	6560      	str	r0, [r4, #84]	; 0x54
 8007764:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007766:	602f      	str	r7, [r5, #0]
 8007768:	2900      	cmp	r1, #0
 800776a:	d0ca      	beq.n	8007702 <__sflush_r+0x1a>
 800776c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007770:	4299      	cmp	r1, r3
 8007772:	d002      	beq.n	800777a <__sflush_r+0x92>
 8007774:	4628      	mov	r0, r5
 8007776:	f7ff fae3 	bl	8006d40 <_free_r>
 800777a:	2000      	movs	r0, #0
 800777c:	6360      	str	r0, [r4, #52]	; 0x34
 800777e:	e7c1      	b.n	8007704 <__sflush_r+0x1c>
 8007780:	6a21      	ldr	r1, [r4, #32]
 8007782:	2301      	movs	r3, #1
 8007784:	4628      	mov	r0, r5
 8007786:	47b0      	blx	r6
 8007788:	1c41      	adds	r1, r0, #1
 800778a:	d1c7      	bne.n	800771c <__sflush_r+0x34>
 800778c:	682b      	ldr	r3, [r5, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0c4      	beq.n	800771c <__sflush_r+0x34>
 8007792:	2b1d      	cmp	r3, #29
 8007794:	d001      	beq.n	800779a <__sflush_r+0xb2>
 8007796:	2b16      	cmp	r3, #22
 8007798:	d101      	bne.n	800779e <__sflush_r+0xb6>
 800779a:	602f      	str	r7, [r5, #0]
 800779c:	e7b1      	b.n	8007702 <__sflush_r+0x1a>
 800779e:	89a3      	ldrh	r3, [r4, #12]
 80077a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077a4:	81a3      	strh	r3, [r4, #12]
 80077a6:	e7ad      	b.n	8007704 <__sflush_r+0x1c>
 80077a8:	690f      	ldr	r7, [r1, #16]
 80077aa:	2f00      	cmp	r7, #0
 80077ac:	d0a9      	beq.n	8007702 <__sflush_r+0x1a>
 80077ae:	0793      	lsls	r3, r2, #30
 80077b0:	680e      	ldr	r6, [r1, #0]
 80077b2:	bf08      	it	eq
 80077b4:	694b      	ldreq	r3, [r1, #20]
 80077b6:	600f      	str	r7, [r1, #0]
 80077b8:	bf18      	it	ne
 80077ba:	2300      	movne	r3, #0
 80077bc:	eba6 0807 	sub.w	r8, r6, r7
 80077c0:	608b      	str	r3, [r1, #8]
 80077c2:	f1b8 0f00 	cmp.w	r8, #0
 80077c6:	dd9c      	ble.n	8007702 <__sflush_r+0x1a>
 80077c8:	6a21      	ldr	r1, [r4, #32]
 80077ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077cc:	4643      	mov	r3, r8
 80077ce:	463a      	mov	r2, r7
 80077d0:	4628      	mov	r0, r5
 80077d2:	47b0      	blx	r6
 80077d4:	2800      	cmp	r0, #0
 80077d6:	dc06      	bgt.n	80077e6 <__sflush_r+0xfe>
 80077d8:	89a3      	ldrh	r3, [r4, #12]
 80077da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077de:	81a3      	strh	r3, [r4, #12]
 80077e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077e4:	e78e      	b.n	8007704 <__sflush_r+0x1c>
 80077e6:	4407      	add	r7, r0
 80077e8:	eba8 0800 	sub.w	r8, r8, r0
 80077ec:	e7e9      	b.n	80077c2 <__sflush_r+0xda>
 80077ee:	bf00      	nop
 80077f0:	20400001 	.word	0x20400001

080077f4 <_fflush_r>:
 80077f4:	b538      	push	{r3, r4, r5, lr}
 80077f6:	690b      	ldr	r3, [r1, #16]
 80077f8:	4605      	mov	r5, r0
 80077fa:	460c      	mov	r4, r1
 80077fc:	b913      	cbnz	r3, 8007804 <_fflush_r+0x10>
 80077fe:	2500      	movs	r5, #0
 8007800:	4628      	mov	r0, r5
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	b118      	cbz	r0, 800780e <_fflush_r+0x1a>
 8007806:	6983      	ldr	r3, [r0, #24]
 8007808:	b90b      	cbnz	r3, 800780e <_fflush_r+0x1a>
 800780a:	f000 f887 	bl	800791c <__sinit>
 800780e:	4b14      	ldr	r3, [pc, #80]	; (8007860 <_fflush_r+0x6c>)
 8007810:	429c      	cmp	r4, r3
 8007812:	d11b      	bne.n	800784c <_fflush_r+0x58>
 8007814:	686c      	ldr	r4, [r5, #4]
 8007816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d0ef      	beq.n	80077fe <_fflush_r+0xa>
 800781e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007820:	07d0      	lsls	r0, r2, #31
 8007822:	d404      	bmi.n	800782e <_fflush_r+0x3a>
 8007824:	0599      	lsls	r1, r3, #22
 8007826:	d402      	bmi.n	800782e <_fflush_r+0x3a>
 8007828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800782a:	f000 f915 	bl	8007a58 <__retarget_lock_acquire_recursive>
 800782e:	4628      	mov	r0, r5
 8007830:	4621      	mov	r1, r4
 8007832:	f7ff ff59 	bl	80076e8 <__sflush_r>
 8007836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007838:	07da      	lsls	r2, r3, #31
 800783a:	4605      	mov	r5, r0
 800783c:	d4e0      	bmi.n	8007800 <_fflush_r+0xc>
 800783e:	89a3      	ldrh	r3, [r4, #12]
 8007840:	059b      	lsls	r3, r3, #22
 8007842:	d4dd      	bmi.n	8007800 <_fflush_r+0xc>
 8007844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007846:	f000 f908 	bl	8007a5a <__retarget_lock_release_recursive>
 800784a:	e7d9      	b.n	8007800 <_fflush_r+0xc>
 800784c:	4b05      	ldr	r3, [pc, #20]	; (8007864 <_fflush_r+0x70>)
 800784e:	429c      	cmp	r4, r3
 8007850:	d101      	bne.n	8007856 <_fflush_r+0x62>
 8007852:	68ac      	ldr	r4, [r5, #8]
 8007854:	e7df      	b.n	8007816 <_fflush_r+0x22>
 8007856:	4b04      	ldr	r3, [pc, #16]	; (8007868 <_fflush_r+0x74>)
 8007858:	429c      	cmp	r4, r3
 800785a:	bf08      	it	eq
 800785c:	68ec      	ldreq	r4, [r5, #12]
 800785e:	e7da      	b.n	8007816 <_fflush_r+0x22>
 8007860:	0800811c 	.word	0x0800811c
 8007864:	0800813c 	.word	0x0800813c
 8007868:	080080fc 	.word	0x080080fc

0800786c <std>:
 800786c:	2300      	movs	r3, #0
 800786e:	b510      	push	{r4, lr}
 8007870:	4604      	mov	r4, r0
 8007872:	e9c0 3300 	strd	r3, r3, [r0]
 8007876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800787a:	6083      	str	r3, [r0, #8]
 800787c:	8181      	strh	r1, [r0, #12]
 800787e:	6643      	str	r3, [r0, #100]	; 0x64
 8007880:	81c2      	strh	r2, [r0, #14]
 8007882:	6183      	str	r3, [r0, #24]
 8007884:	4619      	mov	r1, r3
 8007886:	2208      	movs	r2, #8
 8007888:	305c      	adds	r0, #92	; 0x5c
 800788a:	f7fd fb93 	bl	8004fb4 <memset>
 800788e:	4b05      	ldr	r3, [pc, #20]	; (80078a4 <std+0x38>)
 8007890:	6263      	str	r3, [r4, #36]	; 0x24
 8007892:	4b05      	ldr	r3, [pc, #20]	; (80078a8 <std+0x3c>)
 8007894:	62a3      	str	r3, [r4, #40]	; 0x28
 8007896:	4b05      	ldr	r3, [pc, #20]	; (80078ac <std+0x40>)
 8007898:	62e3      	str	r3, [r4, #44]	; 0x2c
 800789a:	4b05      	ldr	r3, [pc, #20]	; (80078b0 <std+0x44>)
 800789c:	6224      	str	r4, [r4, #32]
 800789e:	6323      	str	r3, [r4, #48]	; 0x30
 80078a0:	bd10      	pop	{r4, pc}
 80078a2:	bf00      	nop
 80078a4:	08007bbd 	.word	0x08007bbd
 80078a8:	08007bdf 	.word	0x08007bdf
 80078ac:	08007c17 	.word	0x08007c17
 80078b0:	08007c3b 	.word	0x08007c3b

080078b4 <_cleanup_r>:
 80078b4:	4901      	ldr	r1, [pc, #4]	; (80078bc <_cleanup_r+0x8>)
 80078b6:	f000 b8af 	b.w	8007a18 <_fwalk_reent>
 80078ba:	bf00      	nop
 80078bc:	080077f5 	.word	0x080077f5

080078c0 <__sfmoreglue>:
 80078c0:	b570      	push	{r4, r5, r6, lr}
 80078c2:	1e4a      	subs	r2, r1, #1
 80078c4:	2568      	movs	r5, #104	; 0x68
 80078c6:	4355      	muls	r5, r2
 80078c8:	460e      	mov	r6, r1
 80078ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078ce:	f7ff fa87 	bl	8006de0 <_malloc_r>
 80078d2:	4604      	mov	r4, r0
 80078d4:	b140      	cbz	r0, 80078e8 <__sfmoreglue+0x28>
 80078d6:	2100      	movs	r1, #0
 80078d8:	e9c0 1600 	strd	r1, r6, [r0]
 80078dc:	300c      	adds	r0, #12
 80078de:	60a0      	str	r0, [r4, #8]
 80078e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078e4:	f7fd fb66 	bl	8004fb4 <memset>
 80078e8:	4620      	mov	r0, r4
 80078ea:	bd70      	pop	{r4, r5, r6, pc}

080078ec <__sfp_lock_acquire>:
 80078ec:	4801      	ldr	r0, [pc, #4]	; (80078f4 <__sfp_lock_acquire+0x8>)
 80078ee:	f000 b8b3 	b.w	8007a58 <__retarget_lock_acquire_recursive>
 80078f2:	bf00      	nop
 80078f4:	20000324 	.word	0x20000324

080078f8 <__sfp_lock_release>:
 80078f8:	4801      	ldr	r0, [pc, #4]	; (8007900 <__sfp_lock_release+0x8>)
 80078fa:	f000 b8ae 	b.w	8007a5a <__retarget_lock_release_recursive>
 80078fe:	bf00      	nop
 8007900:	20000324 	.word	0x20000324

08007904 <__sinit_lock_acquire>:
 8007904:	4801      	ldr	r0, [pc, #4]	; (800790c <__sinit_lock_acquire+0x8>)
 8007906:	f000 b8a7 	b.w	8007a58 <__retarget_lock_acquire_recursive>
 800790a:	bf00      	nop
 800790c:	2000031f 	.word	0x2000031f

08007910 <__sinit_lock_release>:
 8007910:	4801      	ldr	r0, [pc, #4]	; (8007918 <__sinit_lock_release+0x8>)
 8007912:	f000 b8a2 	b.w	8007a5a <__retarget_lock_release_recursive>
 8007916:	bf00      	nop
 8007918:	2000031f 	.word	0x2000031f

0800791c <__sinit>:
 800791c:	b510      	push	{r4, lr}
 800791e:	4604      	mov	r4, r0
 8007920:	f7ff fff0 	bl	8007904 <__sinit_lock_acquire>
 8007924:	69a3      	ldr	r3, [r4, #24]
 8007926:	b11b      	cbz	r3, 8007930 <__sinit+0x14>
 8007928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800792c:	f7ff bff0 	b.w	8007910 <__sinit_lock_release>
 8007930:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007934:	6523      	str	r3, [r4, #80]	; 0x50
 8007936:	4b13      	ldr	r3, [pc, #76]	; (8007984 <__sinit+0x68>)
 8007938:	4a13      	ldr	r2, [pc, #76]	; (8007988 <__sinit+0x6c>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	62a2      	str	r2, [r4, #40]	; 0x28
 800793e:	42a3      	cmp	r3, r4
 8007940:	bf04      	itt	eq
 8007942:	2301      	moveq	r3, #1
 8007944:	61a3      	streq	r3, [r4, #24]
 8007946:	4620      	mov	r0, r4
 8007948:	f000 f820 	bl	800798c <__sfp>
 800794c:	6060      	str	r0, [r4, #4]
 800794e:	4620      	mov	r0, r4
 8007950:	f000 f81c 	bl	800798c <__sfp>
 8007954:	60a0      	str	r0, [r4, #8]
 8007956:	4620      	mov	r0, r4
 8007958:	f000 f818 	bl	800798c <__sfp>
 800795c:	2200      	movs	r2, #0
 800795e:	60e0      	str	r0, [r4, #12]
 8007960:	2104      	movs	r1, #4
 8007962:	6860      	ldr	r0, [r4, #4]
 8007964:	f7ff ff82 	bl	800786c <std>
 8007968:	68a0      	ldr	r0, [r4, #8]
 800796a:	2201      	movs	r2, #1
 800796c:	2109      	movs	r1, #9
 800796e:	f7ff ff7d 	bl	800786c <std>
 8007972:	68e0      	ldr	r0, [r4, #12]
 8007974:	2202      	movs	r2, #2
 8007976:	2112      	movs	r1, #18
 8007978:	f7ff ff78 	bl	800786c <std>
 800797c:	2301      	movs	r3, #1
 800797e:	61a3      	str	r3, [r4, #24]
 8007980:	e7d2      	b.n	8007928 <__sinit+0xc>
 8007982:	bf00      	nop
 8007984:	08007d78 	.word	0x08007d78
 8007988:	080078b5 	.word	0x080078b5

0800798c <__sfp>:
 800798c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798e:	4607      	mov	r7, r0
 8007990:	f7ff ffac 	bl	80078ec <__sfp_lock_acquire>
 8007994:	4b1e      	ldr	r3, [pc, #120]	; (8007a10 <__sfp+0x84>)
 8007996:	681e      	ldr	r6, [r3, #0]
 8007998:	69b3      	ldr	r3, [r6, #24]
 800799a:	b913      	cbnz	r3, 80079a2 <__sfp+0x16>
 800799c:	4630      	mov	r0, r6
 800799e:	f7ff ffbd 	bl	800791c <__sinit>
 80079a2:	3648      	adds	r6, #72	; 0x48
 80079a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80079a8:	3b01      	subs	r3, #1
 80079aa:	d503      	bpl.n	80079b4 <__sfp+0x28>
 80079ac:	6833      	ldr	r3, [r6, #0]
 80079ae:	b30b      	cbz	r3, 80079f4 <__sfp+0x68>
 80079b0:	6836      	ldr	r6, [r6, #0]
 80079b2:	e7f7      	b.n	80079a4 <__sfp+0x18>
 80079b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80079b8:	b9d5      	cbnz	r5, 80079f0 <__sfp+0x64>
 80079ba:	4b16      	ldr	r3, [pc, #88]	; (8007a14 <__sfp+0x88>)
 80079bc:	60e3      	str	r3, [r4, #12]
 80079be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80079c2:	6665      	str	r5, [r4, #100]	; 0x64
 80079c4:	f000 f847 	bl	8007a56 <__retarget_lock_init_recursive>
 80079c8:	f7ff ff96 	bl	80078f8 <__sfp_lock_release>
 80079cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80079d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80079d4:	6025      	str	r5, [r4, #0]
 80079d6:	61a5      	str	r5, [r4, #24]
 80079d8:	2208      	movs	r2, #8
 80079da:	4629      	mov	r1, r5
 80079dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079e0:	f7fd fae8 	bl	8004fb4 <memset>
 80079e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079ec:	4620      	mov	r0, r4
 80079ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079f0:	3468      	adds	r4, #104	; 0x68
 80079f2:	e7d9      	b.n	80079a8 <__sfp+0x1c>
 80079f4:	2104      	movs	r1, #4
 80079f6:	4638      	mov	r0, r7
 80079f8:	f7ff ff62 	bl	80078c0 <__sfmoreglue>
 80079fc:	4604      	mov	r4, r0
 80079fe:	6030      	str	r0, [r6, #0]
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d1d5      	bne.n	80079b0 <__sfp+0x24>
 8007a04:	f7ff ff78 	bl	80078f8 <__sfp_lock_release>
 8007a08:	230c      	movs	r3, #12
 8007a0a:	603b      	str	r3, [r7, #0]
 8007a0c:	e7ee      	b.n	80079ec <__sfp+0x60>
 8007a0e:	bf00      	nop
 8007a10:	08007d78 	.word	0x08007d78
 8007a14:	ffff0001 	.word	0xffff0001

08007a18 <_fwalk_reent>:
 8007a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a1c:	4606      	mov	r6, r0
 8007a1e:	4688      	mov	r8, r1
 8007a20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a24:	2700      	movs	r7, #0
 8007a26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a2a:	f1b9 0901 	subs.w	r9, r9, #1
 8007a2e:	d505      	bpl.n	8007a3c <_fwalk_reent+0x24>
 8007a30:	6824      	ldr	r4, [r4, #0]
 8007a32:	2c00      	cmp	r4, #0
 8007a34:	d1f7      	bne.n	8007a26 <_fwalk_reent+0xe>
 8007a36:	4638      	mov	r0, r7
 8007a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a3c:	89ab      	ldrh	r3, [r5, #12]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d907      	bls.n	8007a52 <_fwalk_reent+0x3a>
 8007a42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a46:	3301      	adds	r3, #1
 8007a48:	d003      	beq.n	8007a52 <_fwalk_reent+0x3a>
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	47c0      	blx	r8
 8007a50:	4307      	orrs	r7, r0
 8007a52:	3568      	adds	r5, #104	; 0x68
 8007a54:	e7e9      	b.n	8007a2a <_fwalk_reent+0x12>

08007a56 <__retarget_lock_init_recursive>:
 8007a56:	4770      	bx	lr

08007a58 <__retarget_lock_acquire_recursive>:
 8007a58:	4770      	bx	lr

08007a5a <__retarget_lock_release_recursive>:
 8007a5a:	4770      	bx	lr

08007a5c <__swhatbuf_r>:
 8007a5c:	b570      	push	{r4, r5, r6, lr}
 8007a5e:	460e      	mov	r6, r1
 8007a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a64:	2900      	cmp	r1, #0
 8007a66:	b096      	sub	sp, #88	; 0x58
 8007a68:	4614      	mov	r4, r2
 8007a6a:	461d      	mov	r5, r3
 8007a6c:	da07      	bge.n	8007a7e <__swhatbuf_r+0x22>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	602b      	str	r3, [r5, #0]
 8007a72:	89b3      	ldrh	r3, [r6, #12]
 8007a74:	061a      	lsls	r2, r3, #24
 8007a76:	d410      	bmi.n	8007a9a <__swhatbuf_r+0x3e>
 8007a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a7c:	e00e      	b.n	8007a9c <__swhatbuf_r+0x40>
 8007a7e:	466a      	mov	r2, sp
 8007a80:	f000 f902 	bl	8007c88 <_fstat_r>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	dbf2      	blt.n	8007a6e <__swhatbuf_r+0x12>
 8007a88:	9a01      	ldr	r2, [sp, #4]
 8007a8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a92:	425a      	negs	r2, r3
 8007a94:	415a      	adcs	r2, r3
 8007a96:	602a      	str	r2, [r5, #0]
 8007a98:	e7ee      	b.n	8007a78 <__swhatbuf_r+0x1c>
 8007a9a:	2340      	movs	r3, #64	; 0x40
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	6023      	str	r3, [r4, #0]
 8007aa0:	b016      	add	sp, #88	; 0x58
 8007aa2:	bd70      	pop	{r4, r5, r6, pc}

08007aa4 <__smakebuf_r>:
 8007aa4:	898b      	ldrh	r3, [r1, #12]
 8007aa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007aa8:	079d      	lsls	r5, r3, #30
 8007aaa:	4606      	mov	r6, r0
 8007aac:	460c      	mov	r4, r1
 8007aae:	d507      	bpl.n	8007ac0 <__smakebuf_r+0x1c>
 8007ab0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	6123      	str	r3, [r4, #16]
 8007ab8:	2301      	movs	r3, #1
 8007aba:	6163      	str	r3, [r4, #20]
 8007abc:	b002      	add	sp, #8
 8007abe:	bd70      	pop	{r4, r5, r6, pc}
 8007ac0:	ab01      	add	r3, sp, #4
 8007ac2:	466a      	mov	r2, sp
 8007ac4:	f7ff ffca 	bl	8007a5c <__swhatbuf_r>
 8007ac8:	9900      	ldr	r1, [sp, #0]
 8007aca:	4605      	mov	r5, r0
 8007acc:	4630      	mov	r0, r6
 8007ace:	f7ff f987 	bl	8006de0 <_malloc_r>
 8007ad2:	b948      	cbnz	r0, 8007ae8 <__smakebuf_r+0x44>
 8007ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ad8:	059a      	lsls	r2, r3, #22
 8007ada:	d4ef      	bmi.n	8007abc <__smakebuf_r+0x18>
 8007adc:	f023 0303 	bic.w	r3, r3, #3
 8007ae0:	f043 0302 	orr.w	r3, r3, #2
 8007ae4:	81a3      	strh	r3, [r4, #12]
 8007ae6:	e7e3      	b.n	8007ab0 <__smakebuf_r+0xc>
 8007ae8:	4b0d      	ldr	r3, [pc, #52]	; (8007b20 <__smakebuf_r+0x7c>)
 8007aea:	62b3      	str	r3, [r6, #40]	; 0x28
 8007aec:	89a3      	ldrh	r3, [r4, #12]
 8007aee:	6020      	str	r0, [r4, #0]
 8007af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af4:	81a3      	strh	r3, [r4, #12]
 8007af6:	9b00      	ldr	r3, [sp, #0]
 8007af8:	6163      	str	r3, [r4, #20]
 8007afa:	9b01      	ldr	r3, [sp, #4]
 8007afc:	6120      	str	r0, [r4, #16]
 8007afe:	b15b      	cbz	r3, 8007b18 <__smakebuf_r+0x74>
 8007b00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b04:	4630      	mov	r0, r6
 8007b06:	f000 f8d1 	bl	8007cac <_isatty_r>
 8007b0a:	b128      	cbz	r0, 8007b18 <__smakebuf_r+0x74>
 8007b0c:	89a3      	ldrh	r3, [r4, #12]
 8007b0e:	f023 0303 	bic.w	r3, r3, #3
 8007b12:	f043 0301 	orr.w	r3, r3, #1
 8007b16:	81a3      	strh	r3, [r4, #12]
 8007b18:	89a0      	ldrh	r0, [r4, #12]
 8007b1a:	4305      	orrs	r5, r0
 8007b1c:	81a5      	strh	r5, [r4, #12]
 8007b1e:	e7cd      	b.n	8007abc <__smakebuf_r+0x18>
 8007b20:	080078b5 	.word	0x080078b5

08007b24 <_malloc_usable_size_r>:
 8007b24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b28:	1f18      	subs	r0, r3, #4
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	bfbc      	itt	lt
 8007b2e:	580b      	ldrlt	r3, [r1, r0]
 8007b30:	18c0      	addlt	r0, r0, r3
 8007b32:	4770      	bx	lr

08007b34 <_raise_r>:
 8007b34:	291f      	cmp	r1, #31
 8007b36:	b538      	push	{r3, r4, r5, lr}
 8007b38:	4604      	mov	r4, r0
 8007b3a:	460d      	mov	r5, r1
 8007b3c:	d904      	bls.n	8007b48 <_raise_r+0x14>
 8007b3e:	2316      	movs	r3, #22
 8007b40:	6003      	str	r3, [r0, #0]
 8007b42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b46:	bd38      	pop	{r3, r4, r5, pc}
 8007b48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b4a:	b112      	cbz	r2, 8007b52 <_raise_r+0x1e>
 8007b4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b50:	b94b      	cbnz	r3, 8007b66 <_raise_r+0x32>
 8007b52:	4620      	mov	r0, r4
 8007b54:	f000 f830 	bl	8007bb8 <_getpid_r>
 8007b58:	462a      	mov	r2, r5
 8007b5a:	4601      	mov	r1, r0
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b62:	f000 b817 	b.w	8007b94 <_kill_r>
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d00a      	beq.n	8007b80 <_raise_r+0x4c>
 8007b6a:	1c59      	adds	r1, r3, #1
 8007b6c:	d103      	bne.n	8007b76 <_raise_r+0x42>
 8007b6e:	2316      	movs	r3, #22
 8007b70:	6003      	str	r3, [r0, #0]
 8007b72:	2001      	movs	r0, #1
 8007b74:	e7e7      	b.n	8007b46 <_raise_r+0x12>
 8007b76:	2400      	movs	r4, #0
 8007b78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	4798      	blx	r3
 8007b80:	2000      	movs	r0, #0
 8007b82:	e7e0      	b.n	8007b46 <_raise_r+0x12>

08007b84 <raise>:
 8007b84:	4b02      	ldr	r3, [pc, #8]	; (8007b90 <raise+0xc>)
 8007b86:	4601      	mov	r1, r0
 8007b88:	6818      	ldr	r0, [r3, #0]
 8007b8a:	f7ff bfd3 	b.w	8007b34 <_raise_r>
 8007b8e:	bf00      	nop
 8007b90:	20000034 	.word	0x20000034

08007b94 <_kill_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	4d07      	ldr	r5, [pc, #28]	; (8007bb4 <_kill_r+0x20>)
 8007b98:	2300      	movs	r3, #0
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	4608      	mov	r0, r1
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	602b      	str	r3, [r5, #0]
 8007ba2:	f7fa f95d 	bl	8001e60 <_kill>
 8007ba6:	1c43      	adds	r3, r0, #1
 8007ba8:	d102      	bne.n	8007bb0 <_kill_r+0x1c>
 8007baa:	682b      	ldr	r3, [r5, #0]
 8007bac:	b103      	cbz	r3, 8007bb0 <_kill_r+0x1c>
 8007bae:	6023      	str	r3, [r4, #0]
 8007bb0:	bd38      	pop	{r3, r4, r5, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20000318 	.word	0x20000318

08007bb8 <_getpid_r>:
 8007bb8:	f7fa b94a 	b.w	8001e50 <_getpid>

08007bbc <__sread>:
 8007bbc:	b510      	push	{r4, lr}
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc4:	f000 f894 	bl	8007cf0 <_read_r>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	bfab      	itete	ge
 8007bcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007bce:	89a3      	ldrhlt	r3, [r4, #12]
 8007bd0:	181b      	addge	r3, r3, r0
 8007bd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bd6:	bfac      	ite	ge
 8007bd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bda:	81a3      	strhlt	r3, [r4, #12]
 8007bdc:	bd10      	pop	{r4, pc}

08007bde <__swrite>:
 8007bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be2:	461f      	mov	r7, r3
 8007be4:	898b      	ldrh	r3, [r1, #12]
 8007be6:	05db      	lsls	r3, r3, #23
 8007be8:	4605      	mov	r5, r0
 8007bea:	460c      	mov	r4, r1
 8007bec:	4616      	mov	r6, r2
 8007bee:	d505      	bpl.n	8007bfc <__swrite+0x1e>
 8007bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f000 f868 	bl	8007ccc <_lseek_r>
 8007bfc:	89a3      	ldrh	r3, [r4, #12]
 8007bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c06:	81a3      	strh	r3, [r4, #12]
 8007c08:	4632      	mov	r2, r6
 8007c0a:	463b      	mov	r3, r7
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c12:	f000 b817 	b.w	8007c44 <_write_r>

08007c16 <__sseek>:
 8007c16:	b510      	push	{r4, lr}
 8007c18:	460c      	mov	r4, r1
 8007c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c1e:	f000 f855 	bl	8007ccc <_lseek_r>
 8007c22:	1c43      	adds	r3, r0, #1
 8007c24:	89a3      	ldrh	r3, [r4, #12]
 8007c26:	bf15      	itete	ne
 8007c28:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c32:	81a3      	strheq	r3, [r4, #12]
 8007c34:	bf18      	it	ne
 8007c36:	81a3      	strhne	r3, [r4, #12]
 8007c38:	bd10      	pop	{r4, pc}

08007c3a <__sclose>:
 8007c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c3e:	f000 b813 	b.w	8007c68 <_close_r>
	...

08007c44 <_write_r>:
 8007c44:	b538      	push	{r3, r4, r5, lr}
 8007c46:	4d07      	ldr	r5, [pc, #28]	; (8007c64 <_write_r+0x20>)
 8007c48:	4604      	mov	r4, r0
 8007c4a:	4608      	mov	r0, r1
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	2200      	movs	r2, #0
 8007c50:	602a      	str	r2, [r5, #0]
 8007c52:	461a      	mov	r2, r3
 8007c54:	f7fa f93b 	bl	8001ece <_write>
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	d102      	bne.n	8007c62 <_write_r+0x1e>
 8007c5c:	682b      	ldr	r3, [r5, #0]
 8007c5e:	b103      	cbz	r3, 8007c62 <_write_r+0x1e>
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	bd38      	pop	{r3, r4, r5, pc}
 8007c64:	20000318 	.word	0x20000318

08007c68 <_close_r>:
 8007c68:	b538      	push	{r3, r4, r5, lr}
 8007c6a:	4d06      	ldr	r5, [pc, #24]	; (8007c84 <_close_r+0x1c>)
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	4604      	mov	r4, r0
 8007c70:	4608      	mov	r0, r1
 8007c72:	602b      	str	r3, [r5, #0]
 8007c74:	f7fa f947 	bl	8001f06 <_close>
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	d102      	bne.n	8007c82 <_close_r+0x1a>
 8007c7c:	682b      	ldr	r3, [r5, #0]
 8007c7e:	b103      	cbz	r3, 8007c82 <_close_r+0x1a>
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	bd38      	pop	{r3, r4, r5, pc}
 8007c84:	20000318 	.word	0x20000318

08007c88 <_fstat_r>:
 8007c88:	b538      	push	{r3, r4, r5, lr}
 8007c8a:	4d07      	ldr	r5, [pc, #28]	; (8007ca8 <_fstat_r+0x20>)
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	4604      	mov	r4, r0
 8007c90:	4608      	mov	r0, r1
 8007c92:	4611      	mov	r1, r2
 8007c94:	602b      	str	r3, [r5, #0]
 8007c96:	f7fa f942 	bl	8001f1e <_fstat>
 8007c9a:	1c43      	adds	r3, r0, #1
 8007c9c:	d102      	bne.n	8007ca4 <_fstat_r+0x1c>
 8007c9e:	682b      	ldr	r3, [r5, #0]
 8007ca0:	b103      	cbz	r3, 8007ca4 <_fstat_r+0x1c>
 8007ca2:	6023      	str	r3, [r4, #0]
 8007ca4:	bd38      	pop	{r3, r4, r5, pc}
 8007ca6:	bf00      	nop
 8007ca8:	20000318 	.word	0x20000318

08007cac <_isatty_r>:
 8007cac:	b538      	push	{r3, r4, r5, lr}
 8007cae:	4d06      	ldr	r5, [pc, #24]	; (8007cc8 <_isatty_r+0x1c>)
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	4608      	mov	r0, r1
 8007cb6:	602b      	str	r3, [r5, #0]
 8007cb8:	f7fa f941 	bl	8001f3e <_isatty>
 8007cbc:	1c43      	adds	r3, r0, #1
 8007cbe:	d102      	bne.n	8007cc6 <_isatty_r+0x1a>
 8007cc0:	682b      	ldr	r3, [r5, #0]
 8007cc2:	b103      	cbz	r3, 8007cc6 <_isatty_r+0x1a>
 8007cc4:	6023      	str	r3, [r4, #0]
 8007cc6:	bd38      	pop	{r3, r4, r5, pc}
 8007cc8:	20000318 	.word	0x20000318

08007ccc <_lseek_r>:
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	4d07      	ldr	r5, [pc, #28]	; (8007cec <_lseek_r+0x20>)
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	4608      	mov	r0, r1
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	602a      	str	r2, [r5, #0]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	f7fa f93a 	bl	8001f54 <_lseek>
 8007ce0:	1c43      	adds	r3, r0, #1
 8007ce2:	d102      	bne.n	8007cea <_lseek_r+0x1e>
 8007ce4:	682b      	ldr	r3, [r5, #0]
 8007ce6:	b103      	cbz	r3, 8007cea <_lseek_r+0x1e>
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	bd38      	pop	{r3, r4, r5, pc}
 8007cec:	20000318 	.word	0x20000318

08007cf0 <_read_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4d07      	ldr	r5, [pc, #28]	; (8007d10 <_read_r+0x20>)
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	4608      	mov	r0, r1
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	602a      	str	r2, [r5, #0]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	f7fa f8c8 	bl	8001e94 <_read>
 8007d04:	1c43      	adds	r3, r0, #1
 8007d06:	d102      	bne.n	8007d0e <_read_r+0x1e>
 8007d08:	682b      	ldr	r3, [r5, #0]
 8007d0a:	b103      	cbz	r3, 8007d0e <_read_r+0x1e>
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	bd38      	pop	{r3, r4, r5, pc}
 8007d10:	20000318 	.word	0x20000318

08007d14 <_init>:
 8007d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d16:	bf00      	nop
 8007d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d1a:	bc08      	pop	{r3}
 8007d1c:	469e      	mov	lr, r3
 8007d1e:	4770      	bx	lr

08007d20 <_fini>:
 8007d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d22:	bf00      	nop
 8007d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d26:	bc08      	pop	{r3}
 8007d28:	469e      	mov	lr, r3
 8007d2a:	4770      	bx	lr
